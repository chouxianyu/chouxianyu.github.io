<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>臭咸鱼的缺氧瓶</title>
  
  <subtitle>快给我氧气！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chouxianyu.github.io/"/>
  <updated>2019-10-12T13:54:27.834Z</updated>
  <id>https://chouxianyu.github.io/</id>
  
  <author>
    <name>臭咸鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库-关系代数作业</title>
    <link href="https://chouxianyu.github.io/2019/10/12/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0%E4%BD%9C%E4%B8%9A/"/>
    <id>https://chouxianyu.github.io/2019/10/12/数据库-关系代数作业/</id>
    <published>2019-10-12T13:48:22.000Z</published>
    <updated>2019-10-12T13:54:27.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><strong>现有一产品数据库，该数据库模式由四个关系组成，这四个关系的模式如下：</strong><br><br>$Product(maker,model,type)$<br><br>$PC(model,speed,ram,hd,price)$<br><br>$Laptop(model,speed,ram,id,hd,screen,price)$<br><br>$Printer(model,color,type,price)$<br><br><strong>试写出下列查询的关系代数表达式，并针对下面数据样例，给出查询的结果。</strong>（你的答案应该在任何数据上都能正确工作，而不仅限于图中的数据）<br><br>a)哪种PC模型具有最少3.00的速度？<br><br>b)哪个生产厂商的笔记本电脑（笔记本）的硬盘容量至少100GB？<br><br>c)查询厂商B生产的所有产品的型号和价格。<br><br>d)查询所有彩色激光打印机的型号。<br><br>e)查询那些只出售笔记本电脑，不出售PC的厂商。<br><br>f)查询在一种或者两种PC机中出现过的硬盘的容量。<br><br>g)查询有同样处理速度和同样内存大小的PC对。每对只被列表一次，即列表给出$(i,j)$但不给出$(j,i)$。<br><br>h)查询那些至少生产两种处理速度大于2.80的PC或者笔记本电脑的厂商。<br><br>i)查询平均处理速度（PC或者是笔记本电脑）最高的所有厂商。<br><br>j)查询至少生产三种不同处理速度电脑的厂商。<br><br>k)查询恰好出售三种型号的PC厂商。<br><br><strong>四个关系的数据样例如下图所示：</strong><br><img src="https://i.loli.net/2019/10/05/dXTYNUulj1bkO5M.jpg" alt="四个关系的数据样例"></p><h1 id="a-哪种PC模型具有最少3-00的速度？"><a href="#a-哪种PC模型具有最少3-00的速度？" class="headerlink" title="a)哪种PC模型具有最少3.00的速度？"></a>a)哪种PC模型具有最少3.00的速度？</h1><h2 id="1-要操作的表：-PC"><a href="#1-要操作的表：-PC" class="headerlink" title="1.要操作的表：$PC$"></a>1.要操作的表：$PC$</h2><h2 id="2-要进行的操作：选择、投影"><a href="#2-要进行的操作：选择、投影" class="headerlink" title="2.要进行的操作：选择、投影"></a>2.要进行的操作：选择、投影</h2><h2 id="3-各操作的对象和顺序"><a href="#3-各操作的对象和顺序" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li><strong>选择</strong>关系$PC$中$speed\ge3.0$的元组：$R_1:=\sigma_{speed\ge3.0}(PC)$</li><li>将$R_1$<strong>投影</strong>到属性$model$上：$R_2:=\pi_{model}(R_1)$</li></ol><h2 id="4-关系代数表达式"><a href="#4-关系代数表达式" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$\pi_{model}(\sigma_{speed\ge3.0}(PC))$</li></ul><h2 id="5-数据样例查询结果"><a href="#5-数据样例查询结果" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$model$</th></tr></thead><tbody><tr><td style="text-align:center">1005</td></tr><tr><td style="text-align:center">1006</td></tr><tr><td style="text-align:center">1013</td></tr></tbody></table></div><h1 id="b-哪个生产厂商的笔记本电脑（笔记本）的硬盘容量至少100GB？"><a href="#b-哪个生产厂商的笔记本电脑（笔记本）的硬盘容量至少100GB？" class="headerlink" title="b)哪个生产厂商的笔记本电脑（笔记本）的硬盘容量至少100GB？"></a>b)哪个生产厂商的笔记本电脑（笔记本）的硬盘容量至少100GB？</h1><h2 id="1-要操作的表：-Laptop-、-Product"><a href="#1-要操作的表：-Laptop-、-Product" class="headerlink" title="1.要操作的表：$Laptop$、$Product$"></a>1.要操作的表：$Laptop$、$Product$</h2><h2 id="2-要进行的操作：选择、自然连接、投影、差"><a href="#2-要进行的操作：选择、自然连接、投影、差" class="headerlink" title="2.要进行的操作：选择、自然连接、投影、差"></a>2.要进行的操作：选择、自然连接、投影、差</h2><h2 id="3-各操作的对象和顺序-1"><a href="#3-各操作的对象和顺序-1" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li><strong>选择</strong>关系$Laptop$中$hd&lt;100$的元组$R_1$：$R_1:=\sigma_{hd&lt;100}(Laptop)$</li><li>将关系$Product$和关系$R_1$<strong>自然连接</strong>：$R_2:=R_1\bowtie Product$</li><li>将$R_2$<strong>投影</strong>到属性$maker$上：$R_3:=\pi_{maker}(R_2)$</li><li>将关系$Product$和关系$Laptop$<strong>自然连接</strong>：$R_4:=Product\bowtie Laptop$</li><li>将关系$R_4$<strong>投影</strong>到属性$maker$上：$R_5:=\pi_{maker}(R_4)$</li><li>求关系$R_5$和关系$R_3$的<strong>差</strong>：$R_6:=R_5-R_3$</li></ol><h2 id="4-关系代数表达式-1"><a href="#4-关系代数表达式-1" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$Product\bowtie Laptop-\pi_{maker}(\sigma_{hd&lt;100}(Laptop)\bowtie Product)$</li></ul><h2 id="5-数据样例查询结果-1"><a href="#5-数据样例查询结果-1" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$maker$</th></tr></thead><tbody><tr><td style="text-align:center">B</td></tr><tr><td style="text-align:center">G</td></tr></tbody></table></div><h1 id="c-查询厂商B生产的所有产品的型号和价格。"><a href="#c-查询厂商B生产的所有产品的型号和价格。" class="headerlink" title="c)查询厂商B生产的所有产品的型号和价格。"></a>c)查询厂商B生产的所有产品的型号和价格。</h1><h2 id="1-要操作的表：-Product-、-PC-、-Laptop-、-Printer"><a href="#1-要操作的表：-Product-、-PC-、-Laptop-、-Printer" class="headerlink" title="1.要操作的表：$Product$、$PC$、$Laptop$、$Printer$"></a>1.要操作的表：$Product$、$PC$、$Laptop$、$Printer$</h2><h2 id="2-要进行的操作：选择、投影、自然连接、并"><a href="#2-要进行的操作：选择、投影、自然连接、并" class="headerlink" title="2.要进行的操作：选择、投影、自然连接、并"></a>2.要进行的操作：选择、投影、自然连接、并</h2><h2 id="3-各操作的对象和顺序-2"><a href="#3-各操作的对象和顺序-2" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li><strong>选择</strong>关系$Product$中$maker=’B’$的元组：$R_1:=\sigma_{maker=’B’}(Product)$</li><li>将关系$R_1$<strong>投影</strong>到属性$model$上：$R_2:=\pi_{model}(R_1)$</li><li>将关系$R_2$和关系$PC$<strong>自然连接</strong>：$R_3:=R_2\bowtie PC$</li><li>将关系$R_2$和关系$Laptop$<strong>自然连接</strong>：$R_4:=R_2\bowtie Laptop$</li><li>将关系$R_2$和关系$Printer$<strong>自然连接</strong>：$R_5:=R_2\bowtie Printer$</li><li>将关系$R_3$<strong>投影</strong>到属性组$\{ model,price \}$上：$R_6:=\pi_{model,price}(R_3)$</li><li>将关系$R_4$<strong>投影</strong>到属性组$\{ model,price \}$上：$R_7:=\pi_{model,price}(R_4)$</li><li>将关系$R_5$<strong>投影</strong>到属性组$\{ model,price \}$上：$R_8:=\pi_{model,price}(R_5)$</li><li>将关系$R_6$、$R_7$和$R_8$<strong>并</strong>起来：$R_9:=R_6\cup R_7\cup R_8$</li></ol><h2 id="4-关系代数表达式-2"><a href="#4-关系代数表达式-2" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$R_9$，该表达式展开写会太长，因此省略其展开式。</li></ul><h2 id="5-数据样例查询结果-2"><a href="#5-数据样例查询结果-2" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$model$</th><th style="text-align:center">$price$</th></tr></thead><tbody><tr><td style="text-align:center">1004</td><td style="text-align:center">649</td></tr><tr><td style="text-align:center">1005</td><td style="text-align:center">630</td></tr><tr><td style="text-align:center">1006</td><td style="text-align:center">1049</td></tr><tr><td style="text-align:center">2007</td><td style="text-align:center">1429</td></tr></tbody></table></div><h1 id="d-查询所有彩色激光打印机的型号。"><a href="#d-查询所有彩色激光打印机的型号。" class="headerlink" title="d)查询所有彩色激光打印机的型号。"></a>d)查询所有彩色激光打印机的型号。</h1><h2 id="1-要操作的表：-Printer"><a href="#1-要操作的表：-Printer" class="headerlink" title="1.要操作的表：$Printer$"></a>1.要操作的表：$Printer$</h2><h2 id="2-要进行的操作：选择、投影-1"><a href="#2-要进行的操作：选择、投影-1" class="headerlink" title="2.要进行的操作：选择、投影"></a>2.要进行的操作：选择、投影</h2><h2 id="3-各操作的对象和顺序-3"><a href="#3-各操作的对象和顺序-3" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li><strong>选择</strong>关系$Printer$中$color=true$并且$type=’laser’$的元组：$R_1:=\sigma_{color=true\wedge type=’laser’}(Printer)$</li><li>将关系$R_1$<strong>投影</strong>到属性$model$上：$R_2:=\pi_{model}(R_1)$</li></ol><h2 id="4-关系代数表达式-3"><a href="#4-关系代数表达式-3" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$\pi_{model}(\sigma_{color=true\wedge type=’laser’}(Printer))$</li></ul><h2 id="5-数据样例查询结果-3"><a href="#5-数据样例查询结果-3" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$model$</th></tr></thead><tbody><tr><td style="text-align:center">3003</td></tr><tr><td style="text-align:center">3007</td></tr></tbody></table></div><h1 id="e-查询那些只出售笔记本电脑，不出售PC的厂商。"><a href="#e-查询那些只出售笔记本电脑，不出售PC的厂商。" class="headerlink" title="e)查询那些只出售笔记本电脑，不出售PC的厂商。"></a>e)查询那些只出售笔记本电脑，不出售PC的厂商。</h1><h2 id="1-要操作的表：-Product-、-PC-、-Laptop"><a href="#1-要操作的表：-Product-、-PC-、-Laptop" class="headerlink" title="1.要操作的表：$Product$、$PC$、$Laptop$"></a>1.要操作的表：$Product$、$PC$、$Laptop$</h2><h2 id="2-要进行的操作：自然连接、投影、差"><a href="#2-要进行的操作：自然连接、投影、差" class="headerlink" title="2.要进行的操作：自然连接、投影、差"></a>2.要进行的操作：自然连接、投影、差</h2><h2 id="3-各操作的对象和顺序-4"><a href="#3-各操作的对象和顺序-4" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li>将关系$Product$与关系$Laptop$<strong>自然连接</strong>：$R_1:=Product\bowtie Laptop$</li><li>将关系$Product$与关系$PC$<strong>自然连接</strong>：$R_2:=Product\bowtie PC$</li><li>将关系$R_1$<strong>投影</strong>到属性$maker$上：$R_3:=\pi_{maker}(R_1)$</li><li>将关系$R_2$<strong>投影</strong>到属性$maker$上：$R_4:=\pi_{maker}(R_2)$</li><li>求关系$R_3$和$R_4$的<strong>差</strong>：$R_5:=R_3-R_4$</li></ol><h2 id="4-关系代数表达式-4"><a href="#4-关系代数表达式-4" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$\pi_{maker}(Product\bowtie Laptop)-\pi_{maker}(Product\bowtie PC)$</li></ul><h2 id="5-数据样例查询结果-4"><a href="#5-数据样例查询结果-4" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$model$</th></tr></thead><tbody><tr><td style="text-align:center">F</td></tr><tr><td style="text-align:center">G</td></tr></tbody></table></div><h1 id="f-查询在一种或者两种PC机中出现过的硬盘的容量。"><a href="#f-查询在一种或者两种PC机中出现过的硬盘的容量。" class="headerlink" title="f)查询在一种或者两种PC机中出现过的硬盘的容量。"></a>f)查询在一种或者两种PC机中出现过的硬盘的容量。</h1><h2 id="1-要操作的表：-PC-1"><a href="#1-要操作的表：-PC-1" class="headerlink" title="1.要操作的表：$PC$"></a>1.要操作的表：$PC$</h2><h2 id="2-要进行的操作：重命名、-theta-连接、投影、差"><a href="#2-要进行的操作：重命名、-theta-连接、投影、差" class="headerlink" title="2.要进行的操作：重命名、$\theta$连接、投影、差"></a>2.要进行的操作：重命名、$\theta$连接、投影、差</h2><h2 id="3-各操作的对象和顺序-5"><a href="#3-各操作的对象和顺序-5" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li><p>将关系$PC$通过<strong>重命名</strong>复制：$R_1:=\rho_{PC1(model_1,speed,ram,hd,price)}(PC)$</p></li><li><p>将关系$PC$通过<strong>重命名</strong>复制：$R_2:=\rho_{PC2(model_2,speed,ram,hd,price)}(PC)$</p></li><li><p>将关系$R_1$和$R_2$进行$\theta$<strong>连接</strong>：$R_3:=R_1\bowtie_{R_1.hd=R_2.hd\wedge R_1.model_1\neq R_2.model_2}R_2$</p></li><li><p>将关系$R_3$和$PC$进行$\theta$<strong>连接</strong>：$R_4:=PC\bowtie_{PC.hd=R_3.hd\wedge PC.model\neq R_3.model_1\wedge PC.model\neq R_3.model_2}R_3$，由此得到至少出现三次的$hd$值</p></li><li><p>将关系$R_4$<strong>投影</strong>到属性$hd$上：$R_5:=\pi_{hd}(R_4)$</p></li><li><p>将关系$PC$<strong>投影</strong>到属性$hd$上：$R_6:=\pi_{hd}(PC)$</p></li><li><p>求关系$R_6$和$R_5$的<strong>差</strong>：$R_7:=R_6-R_5$</p></li></ol><h2 id="4-关系代数表达式-5"><a href="#4-关系代数表达式-5" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$R_7$，该关系代数表达式展开长度太长，略</li></ul><h2 id="5-数据样例查询结果-5"><a href="#5-数据样例查询结果-5" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$hd$</th></tr></thead><tbody><tr><td style="text-align:center">80</td></tr><tr><td style="text-align:center">320</td></tr><tr><td style="text-align:center">200</td></tr><tr><td style="text-align:center">300</td></tr><tr><td style="text-align:center">160</td></tr></tbody></table></div><h1 id="g-查询有同样处理速度和同样内存大小的PC对。"><a href="#g-查询有同样处理速度和同样内存大小的PC对。" class="headerlink" title="g)查询有同样处理速度和同样内存大小的PC对。"></a>g)查询有同样处理速度和同样内存大小的PC对。</h1><h2 id="1-要操作的表：-PC-2"><a href="#1-要操作的表：-PC-2" class="headerlink" title="1.要操作的表：$PC$"></a>1.要操作的表：$PC$</h2><h2 id="2-要进行的操作：重命名、-theta-连接、投影"><a href="#2-要进行的操作：重命名、-theta-连接、投影" class="headerlink" title="2.要进行的操作：重命名、$\theta$连接、投影"></a>2.要进行的操作：重命名、$\theta$连接、投影</h2><h2 id="3-各操作的对象和顺序-6"><a href="#3-各操作的对象和顺序-6" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li>将关系$PC$通过<strong>重命名</strong>复制：$R_1:=\rho_{PC1(model_1,speed,ram,hd,price)}(PC)$</li><li>将关系$PC$通过<strong>重命名</strong>复制：$R_2:=\rho_{PC2(model_2,speed,ram,hd,price)}(PC)$</li><li>将关系$R_1$和$R_2$进行$\theta$<strong>连接</strong>：$R_3:=R_1\bowtie_{R_1.speed=R_2.speed\wedge R_1.ram=R_2.ram\wedge R_1.model_1\neq R_2.model_2}R_2$</li><li>将关系$R_3$<strong>投影</strong>到属性组$\{ model_1,model_2 \}$上：$R_4:=\pi_{model_1,model_2}(R_3)$</li></ol><h2 id="4-关系代数表达式-6"><a href="#4-关系代数表达式-6" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$R_4$，该关系代数表达式展开长度太长，略</li></ul><h2 id="5-数据样例查询结果-6"><a href="#5-数据样例查询结果-6" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$model_1$</th><th style="text-align:center">$model_2$</th></tr></thead><tbody><tr><td style="text-align:center">1004</td><td style="text-align:center">1012</td></tr></tbody></table></div><h1 id="h-查询那些至少生产两种处理速度大于2-80的PC或者笔记本电脑的厂商。"><a href="#h-查询那些至少生产两种处理速度大于2-80的PC或者笔记本电脑的厂商。" class="headerlink" title="h)查询那些至少生产两种处理速度大于2.80的PC或者笔记本电脑的厂商。"></a>h)查询那些至少生产两种处理速度大于2.80的PC或者笔记本电脑的厂商。</h1><h2 id="1-要操作的表：-PC-3"><a href="#1-要操作的表：-PC-3" class="headerlink" title="1.要操作的表：$PC$"></a>1.要操作的表：$PC$</h2><h2 id="2-要进行的操作：选择、并、投影、自然连接、重命名、-theta-连接"><a href="#2-要进行的操作：选择、并、投影、自然连接、重命名、-theta-连接" class="headerlink" title="2.要进行的操作：选择、并、投影、自然连接、重命名、$\theta$连接"></a>2.要进行的操作：选择、并、投影、自然连接、重命名、$\theta$连接</h2><h2 id="3-各操作的对象和顺序-7"><a href="#3-各操作的对象和顺序-7" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li><strong>选择</strong>关系$PC$中属性$speed&gt;2.80$的元组：$R_1:=\sigma_{speed&gt;2.80}(PC)$</li><li><strong>选择</strong>关系$Laptop$中属性$speed&gt;2.80$的元组：$R_2:=\sigma_{speed&gt;2.80}(Laptop)$</li><li>将关系$R_1$和$R_2$<strong>并</strong>起来，并求其在属性$model$上的<strong>投影</strong>：$R_3=\pi_{model}(R_1\cup R_2)$</li><li>将关系$R_3$与$Product$<strong>自然连接</strong>，并求其在属性组$\{ maker,model \}$上的<strong>投影</strong>：$R_4:=\pi_{maker,model}(R_3\bowtie Product)$</li><li>将关系$R_4$通过<strong>重命名</strong>复制：$R_5:=\rho_{R_5(maker,model_5)}(R_4)$</li><li>将关系$R_4$通过<strong>重命名</strong>复制：$R_6:=\rho_{R_6(maker,model_6)}(R_4)$</li><li>将关系$R_5$和$R_6$进行$\theta$<strong>连接</strong>：$R_7:=R_5\bowtie_{R_5.maker=R_6.maker\wedge R_5.model_5\neq R_6.model_6}R_6$</li><li>将关系$R_7$<strong>投影</strong>到属性$maker$上：$R_8:=\pi_{maker}(R_7)$</li></ol><h2 id="4-关系代数表达式-7"><a href="#4-关系代数表达式-7" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$R_8$，该关系代数表达式展开长度太长，略</li></ul><h2 id="5-数据样例查询结果-7"><a href="#5-数据样例查询结果-7" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$maker$</th></tr></thead><tbody><tr><td style="text-align:center">B</td></tr></tbody></table></div><h1 id="i-查询平均处理速度（PC或者是笔记本电脑）最高的所有厂商。"><a href="#i-查询平均处理速度（PC或者是笔记本电脑）最高的所有厂商。" class="headerlink" title="i)查询平均处理速度（PC或者是笔记本电脑）最高的所有厂商。"></a>i)查询平均处理速度（PC或者是笔记本电脑）最高的所有厂商。</h1><h2 id="1-要操作的表：-PC-、-Laptop-、-Product"><a href="#1-要操作的表：-PC-、-Laptop-、-Product" class="headerlink" title="1.要操作的表：$PC$、$Laptop$、$Product$"></a>1.要操作的表：$PC$、$Laptop$、$Product$</h2><h2 id="2-要进行的操作：投影、重命名、-theta-连接、差、自然连接"><a href="#2-要进行的操作：投影、重命名、-theta-连接、差、自然连接" class="headerlink" title="2.要进行的操作：投影、重命名、$\theta$连接、差、自然连接"></a>2.要进行的操作：投影、重命名、$\theta$连接、差、自然连接</h2><h2 id="3-各操作的对象和顺序-8"><a href="#3-各操作的对象和顺序-8" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li>将关系$PC$和$Laptop$<strong>投影</strong>到属性组$\{ model,speed \}$上并将两者<strong>并</strong>起来：$R_1:=\pi_{model,speed}(PC)\cup\pi_{model,speed}(Laptop)$</li><li>通过<strong>重命名</strong>复制关系$R_1$：$R_2:=\rho_{R_2}(R_1)$</li><li>关系$R_1$和$R_2$进行$\theta$<strong>连接</strong>：$R_3:=R_1\bowtie_{R_1.speed&lt;R_2.speed} R_2$，求出$speed$小于最大值的元组</li><li>求关系$R_1$和$R_3$的<strong>差</strong>：$R_4:=R_1-R_3$</li><li>关系$R_4$和$Product$<strong>自然连接</strong>：$R_5:=R_4\bowtie Product$</li></ol><h2 id="4-关系代数表达式-8"><a href="#4-关系代数表达式-8" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$R_5$，该关系代数表达式展开长度太长，略</li></ul><h2 id="5-数据样例查询结果-8"><a href="#5-数据样例查询结果-8" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$maker$</th></tr></thead><tbody><tr><td style="text-align:center">B</td></tr></tbody></table></div><h1 id="j-查询至少生产三种不同处理速度电脑的厂商。"><a href="#j-查询至少生产三种不同处理速度电脑的厂商。" class="headerlink" title="j)查询至少生产三种不同处理速度电脑的厂商。"></a>j)查询至少生产三种不同处理速度电脑的厂商。</h1><h2 id="1-要操作的表：-PC-、-Product"><a href="#1-要操作的表：-PC-、-Product" class="headerlink" title="1.要操作的表：$PC$、$Product$"></a>1.要操作的表：$PC$、$Product$</h2><h2 id="2-要进行的操作：自然连接、投影、重命名、-theta-连接"><a href="#2-要进行的操作：自然连接、投影、重命名、-theta-连接" class="headerlink" title="2.要进行的操作：自然连接、投影、重命名、$\theta$连接"></a>2.要进行的操作：自然连接、投影、重命名、$\theta$连接</h2><h2 id="3-各操作的对象和顺序-9"><a href="#3-各操作的对象和顺序-9" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li>关系$Product$和$PC$<strong>自然连接</strong>并<strong>投影</strong>到属性组$\{ maker,speed \}$上：$R_1:=\pi_{maker,speed}(Procuct\bowtie PC)$</li><li>复制并<strong>重命名</strong>关系$R_1$：$R_2:=\rho_{R_2(maker,speed_2)}(R_1)$</li><li>复制并<strong>重命名</strong>关系$R_1$：$R_3:=\rho_{R_3(marker,speed_3)}(R_1)$</li><li>关系$R_1$和$R_2$进行$\theta$<strong>连接</strong>：$R_4:=R_1\bowtie_{R_1.maker=R_2.maker\wedge R_1.speed\neq R_2.speed_2}R_2$</li><li>关系$R_3$和$R_4$进行$\theta$<strong>连接</strong>：$R_5:=R_3\bowtie_{R_3.maker=R_4.maker\wedge R_4.speed\neq R_3.speed_3 /wedge R_4.speed_2\neq R_3.speed_3}R_4$</li><li>将关系$R_5$<strong>投影</strong>到属性$maker$上：$R_6:=\pi_{maker}(R_5)$</li></ol><h2 id="4-关系代数表达式-9"><a href="#4-关系代数表达式-9" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$R_5$，该关系代数表达式展开长度太长，略</li></ul><h2 id="5-数据样例查询结果-9"><a href="#5-数据样例查询结果-9" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$maker$</th></tr></thead><tbody><tr><td style="text-align:center">A</td></tr><tr><td style="text-align:center">D</td></tr><tr><td style="text-align:center">E</td></tr></tbody></table></div><h1 id="k-查询恰好出售三种型号的PC厂商。"><a href="#k-查询恰好出售三种型号的PC厂商。" class="headerlink" title="k)查询恰好出售三种型号的PC厂商。"></a>k)查询恰好出售三种型号的PC厂商。</h1><h2 id="1-要操作的表：-PC-、-Product-1"><a href="#1-要操作的表：-PC-、-Product-1" class="headerlink" title="1.要操作的表：$PC$、$Product$"></a>1.要操作的表：$PC$、$Product$</h2><h2 id="2-要进行的操作：自然连接、投影、重命名、-theta-连接、差"><a href="#2-要进行的操作：自然连接、投影、重命名、-theta-连接、差" class="headerlink" title="2.要进行的操作：自然连接、投影、重命名、$\theta$连接、差"></a>2.要进行的操作：自然连接、投影、重命名、$\theta$连接、差</h2><h2 id="3-各操作的对象和顺序-10"><a href="#3-各操作的对象和顺序-10" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li>关系$Product$和$PC$<strong>自然连接</strong>并<strong>投影</strong>到属性组$\{ maker,model \}$上：$R_1:=\pi_{maker,model}(Procuct\bowtie PC)$</li><li>复制并<strong>重命名</strong>关系$R_1$：$R_2:=\rho_{R_2(maker,model_2)}(R_1)$</li><li>复制并<strong>重命名</strong>关系$R_1$：$R_3:=\rho_{R_3(marker,model_3)}(R_1)$</li><li>复制并<strong>重命名</strong>关系$R_1$：$R_4:=\rho_{R_4(marker,model_4)}(R_1)$</li><li>关系$R_1$和$R_2$进行$\theta$<strong>连接</strong>：$R_5:=R_1\bowtie_{R_1.maker=R_2.maker\wedge R_1.model\neq R_2.model_2}R_2$</li><li>关系$R_3$和$R_5$进行$\theta$<strong>连接</strong>：$R_6:=R_3\bowtie_{R_3.maker=R_5.maker\wedge R_5.model\neq R_3.model_3 /wedge R_5.model_2\neq R_3.model_3}R_5$</li><li>关系$R_4$和$R_6$进行$\theta$<strong>连接</strong>：$R_7:=R_4\bowtie_{R_4.maker=R_6.maker\wedge R_6.model\ne R_4.model_4 \wedge R_6.model_2\ne R_4.model_4 \wedge R_6.model_3\ne R_4.model_4}R_6$</li><li>求关系$R_6$和$R_7$的<strong>差</strong>：$R_8:=R_6-R_7$</li><li>将关系$R_8$<strong>投影</strong>到属性$maker$上：$R_8:=\pi_{maker}(R_8)$</li></ol><h2 id="4-关系代数表达式-10"><a href="#4-关系代数表达式-10" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$R_8$，该关系代数表达式展开长度太长，略</li></ul><h2 id="5-数据样例查询结果-10"><a href="#5-数据样例查询结果-10" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$maker$</th></tr></thead><tbody><tr><td style="text-align:center">A</td></tr><tr><td style="text-align:center">B</td></tr><tr><td style="text-align:center">D</td></tr><tr><td style="text-align:center">E</td></tr></tbody></table></div><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;现有一产品数据库，该数据库模式由四个关系组成，这四个关系的模式如下：&lt;/strong&gt;&lt;br&gt;&lt;br&gt;$Product(ma
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-线性回归与梯度下降</title>
    <link href="https://chouxianyu.github.io/2019/09/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%B8%8E%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    <id>https://chouxianyu.github.io/2019/09/23/机器学习-线性回归与梯度下降/</id>
    <published>2019-09-23T12:12:52.000Z</published>
    <updated>2019-09-23T12:15:09.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><p>linear regression</p><h2 id="符号定义"><a href="#符号定义" class="headerlink" title="符号定义"></a>符号定义</h2><p>notation，仅为本教程中的符号定义。</p><ul><li><p>$m$</p><p>  训练集中样本的数量 </p></li><li><p>$x$</p><p>  输入值，features。</p><p>  $x^{(i)}$，表示第$i$个样本的features</p></li><li><p>$y$</p><p>  输出值，target</p><p>  $y^{(i)}$，表示第$i$个样本的label</p></li><li><p>$\theta_i$</p><p>  parameters，第$i$个模型参数</p></li><li><p>$h_\theta$</p><p>  hypothesis（假设），这是一个在早期被用于机器学习的名称算法得到的函数（$x$到$y$）</p><p>  $h_\theta(x)=\theta_0+\theta_1x$</p></li></ul><p>$(x,y)$代表一个样本，$(x^{(i)},y^{(i)})$代表第$i$个样本</p><h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p>cost function，有很多种。</p><p>符号是$J(\theta_1,\theta_2)$。</p><ul><li><p>平方误差函数</p><p>  square error function，最小二乘法。</p><p>  对于大多数问题，特别是回归问题，平方误差函数都是一个合理的选择。</p></li><li></li></ul><h1 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h1><p>gradient descent，可以用梯度下降法使各种各样的代价函数$J$最小化</p><p>它不仅被用在线性回归上，实际上被广泛地应用于机器学习的众多领域。 </p><h2 id="符号定义-1"><a href="#符号定义-1" class="headerlink" title="符号定义"></a>符号定义</h2><ul><li><p>$:=$</p><p>  赋值</p></li><li><p>$=$</p><p>  相等</p></li><li><p>$\alpha$</p><p>  是个数字，叫做学习速率，它控制以多大的幅度更新参数$\theta$</p></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><p>多个$\theta$需要同时更新（如果不同时，可能也能得到答案，但就并不是人们所指的梯度下降了，而是其他性质的其它算法），所以应该先计算，最后再同时更新$\theta$</p></li><li><p>在梯度下降法中，当我们接近局部最低点时，梯度下降法会自动采取更小的幅度。</p><p>  因为当我们接近局部最低点时，导数会变得越来越小，所以梯度下降将自动采取较小的幅度。</p><p>  据上，可知实际上没有必要在接近局部最低点的时候减小$\alpha$。</p></li><li><p>梯度下降法求得的可能是局部最优解</p><p>  但线性回归的成本函数总是一个凸函数（convex function），凸函数使用梯度下降法求得最小值就是全局最小值。</p></li></ul><h2 id="“Batch”-Gradient-Descent"><a href="#“Batch”-Gradient-Descent" class="headerlink" title="“Batch” Gradient Descent"></a>“Batch” Gradient Descent</h2><p>“Batch”指的是梯度下降的每一步都使用所有的训练样本。</p><h1 id="矩阵和向量"><a href="#矩阵和向量" class="headerlink" title="矩阵和向量"></a>矩阵和向量</h1><p>向量指的是列向量，4维的向量指的就是4行1列的矩阵。</p><p>按照惯例，通常用大写字母表示矩阵，用小写字母表示数字、标量或向量。</p><h1 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h1><h2 id="符号定义-2"><a href="#符号定义-2" class="headerlink" title="符号定义"></a>符号定义</h2><ul><li><p>$n$</p><p>  特征的数量，形成一个$m$行$n$列的矩阵</p></li></ul><h2 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h2><p>features scaling</p><p>处理不同feature之间的数量级差异，使梯度下降收敛速度更快，否则可能会收敛得很慢</p><p>方法有很多种：</p><ul><li>$\frac{x}{x_{max}}$</li><li>$\frac{x-x_{mean}}{x_{max}}$</li><li>$\frac{x-x_{mean}}{标准差}$</li><li>$\frac{x-x_{mean}}{x_{max}-x_{min}}$</li></ul><h1 id="学习率"><a href="#学习率" class="headerlink" title="学习率"></a>学习率</h1><p>学习率$\alpha$的选取是十分重要的。</p><p>学习率太小，收敛会很慢；学习率太大，代价函数的值可能不会每步都在减小，或者无法收敛。</p><p>学习率一般都是试出来的。</p><p>可以用自动收敛测试来判断代价函数是否已经收敛；也可以以迭代次数为横轴，代价函数的最小值为纵轴作图，通过观察判断。</p><h2 id="自动收敛测试"><a href="#自动收敛测试" class="headerlink" title="自动收敛测试"></a>自动收敛测试</h2><p>当某步时，代价函数的减小值很小（比如小于$10^{-3}$，这个阈值也是不好确定的）时，则认为代价函数已经收敛。</p><h1 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h1><p>基于已有特征构造新的特征（乘积或次方）</p><h1 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h1><p>nomal equation</p><p>线性方程组有解的话，使用该方法即可，可以一次性求得最优解，不需使用梯度下降法之类的迭代算法，求得的是解析解。</p><p>正规方程法不需要特征缩放。</p><script type="math/tex; mode=display">\theta=(X^TX)^{-1}X^Ty</script><p>$X^TX$不可逆的情况很少出现，如果不可逆，就用它的伪逆。</p><h1 id="梯度下降与正规方程对比"><a href="#梯度下降与正规方程对比" class="headerlink" title="梯度下降与正规方程对比"></a>梯度下降与正规方程对比</h1><div class="table-container"><table><thead><tr><th style="text-align:center">梯度下降</th><th style="text-align:center">正规方程</th></tr></thead><tbody><tr><td style="text-align:center">不需要选择学习率</td><td style="text-align:center">需要选择学习率</td></tr><tr><td style="text-align:center">需要多次迭代</td><td style="text-align:center">不需要迭代</td></tr><tr><td style="text-align:center">$n$很大时效果也很好</td><td style="text-align:center">需要计算矩阵的逆，$n$很大时速度很慢</td></tr></tbody></table></div><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性回归&quot;&gt;&lt;a href=&quot;#线性回归&quot; class=&quot;headerlink&quot; title=&quot;线性回归&quot;&gt;&lt;/a&gt;线性回归&lt;/h1&gt;&lt;p&gt;linear regression&lt;/p&gt;
&lt;h2 id=&quot;符号定义&quot;&gt;&lt;a href=&quot;#符号定义&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://chouxianyu.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-绪论</title>
    <link href="https://chouxianyu.github.io/2019/09/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%BB%AA%E8%AE%BA/"/>
    <id>https://chouxianyu.github.io/2019/09/23/机器学习-绪论/</id>
    <published>2019-09-23T12:12:33.000Z</published>
    <updated>2019-09-23T12:15:57.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>机器学习是一门多领域交叉学科，涉及概率论、统计学、逼近论等多门学科。它是人工智能的核心。</p><p>机器学习暂无一个被广泛认可的定义来准确定义机器学习是什么或不是什么。</p><h1 id="机器学习算法的分类"><a href="#机器学习算法的分类" class="headerlink" title="机器学习算法的分类"></a>机器学习算法的分类</h1><p>按照学习方式来分，主要可以分为两类（这两类算法也是最常使用的）：</p><ul><li><p>监督学习（supervised learning）</p><p>  会教计算机如何去完成任务</p></li><li><p>无监督学习（unsupervised learning）</p><p>  让计算机自己学习如何完成任务</p></li></ul><p>其他学习方法还有强化学习（reinforcement learning）和推荐系统（recommender systems）等。</p><h1 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h1><p>监督学习：数据集中的每个样本的正确答案（label）是有给出的。</p><h2 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h2><p>regression problem，预测一个连续的输出值</p><h2 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h2><p>classification problem，预测一个离散的输出值</p><p>（支持向量机可以处理无限多的features）</p><h1 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h1><p>无监督学习：数据集中的每个样本是没有正确答案（label）的。</p><h2 id="聚类算法"><a href="#聚类算法" class="headerlink" title="聚类算法"></a>聚类算法</h2><p>cluster algorithm</p><p>将个例分为几类，比如新闻的专题分类、基因分类、组织计算机集群、社交网络分析、市场细分和天文数据分析等。</p><p>聚类只是无监督学习的一种。</p><h2 id="鸡尾酒会算法"><a href="#鸡尾酒会算法" class="headerlink" title="鸡尾酒会算法"></a>鸡尾酒会算法</h2><p>cocktail party problem algorithm</p><p>两个声源同时发声，两个收音器收音，用算法分离两个声源发出的声音。</p><p>利用Octave和Matlab这样的软件，一行代码就可以实现这样的算法。</p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;机器学习是一门多领域交叉学科，涉及概率论、统计学、逼近论等多门学科。它是人工智能的核心。&lt;/p&gt;
&lt;p&gt;机器学习暂无一个被广泛认可的定义来准
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://chouxianyu.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1043</title>
    <link href="https://chouxianyu.github.io/2019/08/11/PAT%E4%B9%99%E7%BA%A71043/"/>
    <id>https://chouxianyu.github.io/2019/08/11/PAT乙级1043/</id>
    <published>2019-08-11T14:15:04.000Z</published>
    <updated>2019-08-11T14:15:40.352Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805280074743808" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805280074743808</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>这次再次体会到题意理解的正确性，理解正确的话其实就是用代码实现自己的想法。</p><p>难的是，刚开始想错了，然后再去改，这样完全没有思路，很麻烦的。</p><p>这道题的意思是：按照<code>PATest</code>的顺序去字符串里找，找得到就输出，找不到就找下一个，直至字符串里找不到<code>PATest</code>中的任意一个字符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1043</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805280074743808</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 用户输入</span></span><br><span class="line">    <span class="built_in">string</span> str,PATest=<span class="string">"PATest"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> notFoundCount=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (notFoundCount &lt; <span class="number">6</span>)&#123;</span><br><span class="line">        <span class="comment">// 找到了想要的字符</span></span><br><span class="line">        <span class="keyword">if</span> (str.find_first_of(PATest[i]) != <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; PATest[i];</span><br><span class="line">            str.erase(str.begin() + str.find_first_of(PATest[i]));</span><br><span class="line">            notFoundCount = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找不到该字符</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            notFoundCount++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找下一个</span></span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1042</title>
    <link href="https://chouxianyu.github.io/2019/08/10/PAT%E4%B9%99%E7%BA%A71042/"/>
    <id>https://chouxianyu.github.io/2019/08/10/PAT乙级1042/</id>
    <published>2019-08-10T11:44:34.000Z</published>
    <updated>2019-08-10T11:46:14.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805280817135616" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805280817135616</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>用数组<code>count</code>存储字母出现次数，数组下标代表字母，数组元素是次数。遍历字符串，统计各字母出现次数，最后遍历<code>count</code>寻找出现次数最多的字母。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1042</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805280817135616</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 26个字母计数</span></span><br><span class="line">    <span class="keyword">int</span> count[<span class="number">26</span>];</span><br><span class="line">    fill(count,count+<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取字符串</span></span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    getline(<span class="built_in">cin</span>, str);  <span class="comment">// 字符串可能包含空格</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计字符出现次数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isalpha</span>(str[i]))&#123;</span><br><span class="line">            count[<span class="built_in">tolower</span>(str[i])-<span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找出现最频繁的英文字母（其实可以在统计的时候进行）</span></span><br><span class="line">    <span class="keyword">int</span> maxCount=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> maxIndex=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count[i]&gt;maxCount)&#123;  <span class="comment">// 用于实现数量并列则输出字母序最小的那个字母</span></span><br><span class="line">            maxCount = count[i];</span><br><span class="line">            maxIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(<span class="string">'a'</span> + maxIndex)&lt;&lt; <span class="string">' '</span> &lt;&lt; maxCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1041</title>
    <link href="https://chouxianyu.github.io/2019/08/10/PAT%E4%B9%99%E7%BA%A71041/"/>
    <id>https://chouxianyu.github.io/2019/08/10/PAT乙级1041/</id>
    <published>2019-08-10T11:44:27.000Z</published>
    <updated>2019-08-10T11:46:08.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805281567916032" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805281567916032</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>简单的信息录入和查询而已。</p><p>根据需求，使用试机座位号作为学生的标识进行信息录入和查询。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1041</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805281567916032</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> zhunkaozhenghao;</span><br><span class="line">    <span class="keyword">int</span> kaoshizuoweihao;</span><br><span class="line">    Student() &#123;&#125;</span><br><span class="line">    Student(<span class="built_in">string</span> zhunkaozhenghao, <span class="keyword">int</span> kaoshizuoweihao)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;zhunkaozhenghao = zhunkaozhenghao;</span><br><span class="line">        <span class="keyword">this</span>-&gt;kaoshizuoweihao = kaoshizuoweihao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; zhunkaozhenghao &lt;&lt; <span class="string">' '</span> &lt;&lt; kaoshizuoweihao &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// n个学生</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    Student stuArr[<span class="number">1001</span>];   <span class="comment">// 学生信息</span></span><br><span class="line">    <span class="built_in">string</span> zhunkaozhenghao; <span class="comment">// 准考证号</span></span><br><span class="line">    <span class="keyword">int</span> kaoshizuoweihao;    <span class="comment">// 考试座位号</span></span><br><span class="line">    <span class="keyword">int</span> shijizuoweihao;     <span class="comment">// 试机位号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 录入学生信息</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; zhunkaozhenghao &gt;&gt; shijizuoweihao &gt;&gt; kaoshizuoweihao;</span><br><span class="line">        stuArr[shijizuoweihao]=Student(zhunkaozhenghao,kaoshizuoweihao);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询m个学生的信息并输出</span></span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;shijizuoweihao;</span><br><span class="line">        stuArr[shijizuoweihao].print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1039</title>
    <link href="https://chouxianyu.github.io/2019/08/10/PAT%E4%B9%99%E7%BA%A71039/"/>
    <id>https://chouxianyu.github.io/2019/08/10/PAT乙级1039/</id>
    <published>2019-08-10T11:44:22.000Z</published>
    <updated>2019-08-10T11:46:03.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805283241443328" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805283241443328</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>用两个字符串表示两个箱子，一个装有的珠子，一个装想要的珠子。</p><p>如果发现两个箱子里都有某个珠子，则把这两个珠子都取出来，重复该操作至某个箱子中没有珠子了或者两个箱子里没有相同的珠子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1039</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805283241443328</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 有的珠子和想要的珠子</span></span><br><span class="line">    <span class="built_in">string</span> have,want;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; have &gt;&gt; want;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有想要的并且还有珠子</span></span><br><span class="line">    <span class="keyword">while</span>(have.length()&gt;<span class="number">0</span> &amp;&amp; want.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历想要的珠子在有的珠子里找</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; want.length())&#123;</span><br><span class="line">            <span class="keyword">char</span> c = want[i];</span><br><span class="line">            <span class="keyword">if</span> (have.find(c) != <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                want.erase(want.begin() +i);</span><br><span class="line">                have.erase(have.begin()+have.find(c));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有想要的任意一个珠子</span></span><br><span class="line">        <span class="keyword">if</span>(i==want.length())&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要的珠子都拿到了</span></span><br><span class="line">    <span class="keyword">if</span>(want.length()==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes "</span> &lt;&lt; have.length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 还有珠子没拿到</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No "</span> &lt;&lt; want.length();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1038</title>
    <link href="https://chouxianyu.github.io/2019/08/10/PAT%E4%B9%99%E7%BA%A71038/"/>
    <id>https://chouxianyu.github.io/2019/08/10/PAT乙级1038/</id>
    <published>2019-08-10T11:44:18.000Z</published>
    <updated>2019-08-10T11:45:56.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040</a></p><h1 id="题解一"><a href="#题解一" class="headerlink" title="题解一"></a>题解一</h1><p>这份代码最后一个点会超时</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1038</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// n个学生及其分数</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> *scores = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; scores[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// k个查询的分数</span></span><br><span class="line">    <span class="keyword">int</span> k,search;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; search;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; count(scores, scores + n, search);</span><br><span class="line">        <span class="keyword">if</span>(k)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="keyword">delete</span>[] scores;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题解二"><a href="#题解二" class="headerlink" title="题解二"></a>题解二</h1><p>这个所有点都过了。用数组存储各分数学生数量，下标是分数，数组元素值是数量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1038</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// n个学生</span></span><br><span class="line">    <span class="keyword">int</span> n,score;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 各分数人数</span></span><br><span class="line">    <span class="keyword">int</span> count[<span class="number">101</span>];</span><br><span class="line">    fill(count,count+<span class="number">101</span>,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 各分数的学生数量统计</span></span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line">        count[score]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// k个查询的分数</span></span><br><span class="line">    <span class="keyword">int</span> k,search;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; search;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; count[search];</span><br><span class="line">        <span class="keyword">if</span>(k)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1037</title>
    <link href="https://chouxianyu.github.io/2019/08/10/PAT%E4%B9%99%E7%BA%A71037/"/>
    <id>https://chouxianyu.github.io/2019/08/10/PAT乙级1037/</id>
    <published>2019-08-10T11:44:09.000Z</published>
    <updated>2019-08-10T11:45:50.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805284923359232" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805284923359232</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>还算简单，就是模拟我们在生活中的计算，但我想应该会有一个通用性较高的方法，下边的代码还是有重复程度较大的代码的。</p><p>两个需要注意的点：</p><ol><li>负数</li><li>借位</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1037</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805284923359232</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">str2num</span><span class="params">(<span class="built_in">string</span> str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span>* p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取用户输入</span></span><br><span class="line">    <span class="built_in">string</span> strP,strA;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; strP &gt;&gt; strA;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 应付</span></span><br><span class="line">    <span class="keyword">int</span> p[<span class="number">3</span>];</span><br><span class="line">    p[<span class="number">0</span>] = str2num(strP.substr(<span class="number">0</span>, strP.find_first_of(<span class="string">'.'</span>) - <span class="number">0</span>));</span><br><span class="line">    p[<span class="number">1</span>] = str2num(strP.substr(strP.find_first_of(<span class="string">'.'</span>) + <span class="number">1</span>, strP.find_last_of(<span class="string">'.'</span>) - strP.find_first_of(<span class="string">'.'</span>) - <span class="number">1</span>));</span><br><span class="line">    p[<span class="number">2</span>] = str2num(strP.substr(strP.find_last_of(<span class="string">'.'</span>) + <span class="number">1</span>, strP.length() - strP.find_last_of(<span class="string">'.'</span>) - <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 实付</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>];</span><br><span class="line">    a[<span class="number">0</span>] = str2num(strA.substr(<span class="number">0</span>, strA.find_first_of(<span class="string">'.'</span>) - <span class="number">0</span>));</span><br><span class="line">    a[<span class="number">1</span>] = str2num(strA.substr(strA.find_first_of(<span class="string">'.'</span>) + <span class="number">1</span>, strA.find_last_of(<span class="string">'.'</span>) - strA.find_first_of(<span class="string">'.'</span>) - <span class="number">1</span>));</span><br><span class="line">    a[<span class="number">2</span>] = str2num(strA.substr(strA.find_last_of(<span class="string">'.'</span>) + <span class="number">1</span>, strA.length() - strA.find_last_of(<span class="string">'.'</span>) - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断符号</span></span><br><span class="line">    <span class="keyword">int</span> flag=getSum(a)-getSum(p)&gt;=<span class="number">0</span>?<span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果少付了，就交换数组元素</span></span><br><span class="line">    <span class="keyword">if</span>(flag&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,temp;i&lt;<span class="number">3</span>;++i)&#123;</span><br><span class="line">            temp=a[i];</span><br><span class="line">            a[i]=p[i];</span><br><span class="line">            p[i]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被找钱数</span></span><br><span class="line">    <span class="keyword">int</span> result[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> diff,borrow;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第三个数</span></span><br><span class="line">    diff=a[<span class="number">2</span>]-p[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span>(diff&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        result[<span class="number">2</span>] = diff;</span><br><span class="line">        borrow=<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result[<span class="number">2</span>] = diff+<span class="number">29</span>;</span><br><span class="line">        borrow=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二个数</span></span><br><span class="line">    diff=a[<span class="number">1</span>]-p[<span class="number">1</span>]+borrow;</span><br><span class="line">    <span class="keyword">if</span>(diff&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        result[<span class="number">1</span>] = diff;</span><br><span class="line">        borrow=<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result[<span class="number">1</span>] = diff+<span class="number">17</span>;</span><br><span class="line">        borrow = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个数</span></span><br><span class="line">    result[<span class="number">0</span>]=a[<span class="number">0</span>]-p[<span class="number">0</span>]+borrow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结果</span></span><br><span class="line">    <span class="keyword">if</span>(flag&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'-'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; result[<span class="number">0</span>] &lt;&lt; <span class="string">'.'</span> &lt;&lt; result[<span class="number">1</span>] &lt;&lt; <span class="string">'.'</span> &lt;&lt; result[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 以Knut为单位计算总钱数</span></span><br><span class="line">    <span class="keyword">return</span> (p[<span class="number">0</span>] * <span class="number">17</span> + p[<span class="number">1</span>])*<span class="number">29</span>+p[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">str2num</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 不考虑负数，字符串转数字</span></span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();++i)&#123;</span><br><span class="line">        num=num*<span class="number">10</span>+(str[i]-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1036</title>
    <link href="https://chouxianyu.github.io/2019/08/10/PAT%E4%B9%99%E7%BA%A71036/"/>
    <id>https://chouxianyu.github.io/2019/08/10/PAT乙级1036/</id>
    <published>2019-08-10T11:44:00.000Z</published>
    <updated>2019-08-10T11:45:43.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805285812551680" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805285812551680</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>啊有个难题（1034）不会，自闭了，来刷个简单题。这题可简单了，注意一个四舍五入就行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1036</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805285812551680</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 边长（列数）和字符</span></span><br><span class="line">    <span class="keyword">int</span> column;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; column &gt;&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 行数</span></span><br><span class="line">    <span class="keyword">int</span> row = column * <span class="number">1.0</span> / <span class="number">2</span> + <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出第一行</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;column;++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出中间的几行</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row<span class="number">-2</span>;++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;column<span class="number">-2</span>;++j)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出最后一行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; column; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1033</title>
    <link href="https://chouxianyu.github.io/2019/08/09/PAT%E4%B9%99%E7%BA%A71033/"/>
    <id>https://chouxianyu.github.io/2019/08/09/PAT乙级1033/</id>
    <published>2019-08-08T16:20:38.000Z</published>
    <updated>2019-08-08T16:21:23.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805288530460672" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805288530460672</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>刚开始没有理解到，如果上档键坏的话，所有大写字母都不行（My bad），后来改代码思路就很乱，甚至还考虑过<code>_</code>和<code>+</code>是否输出之类的……所以理解题意很重要吧。这个题弄得我脑袋很累。</p><p>考虑到上档键坏的话，所有大写字母都不行之后，还是会有一个测试点不过。</p><p>另外有个坑是第一行可能是空行，即所有键都是可以使用的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1033</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805288530460672</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 用户输入的字符串、输出的字符串、坏掉的键（字符串形式）</span></span><br><span class="line">    <span class="built_in">string</span> strIn,wrongKeys;</span><br><span class="line">    getline(<span class="built_in">cin</span>, wrongKeys);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; strIn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上档键（大写）是否可用</span></span><br><span class="line">    <span class="keyword">bool</span> upIsWrong = (wrongKeys.find(<span class="string">'+'</span>) == <span class="built_in">string</span>::npos) ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成输出字符串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strIn.length();++i)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理坏掉的键导致对应键无法输出</span></span><br><span class="line">        <span class="keyword">if</span> (wrongKeys.find(<span class="built_in">toupper</span>(strIn[i]))!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理上档键坏掉导致大写无法输出</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isupper</span>(strIn[i]) &amp;&amp; upIsWrong)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个键没有问题</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; strIn[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1032</title>
    <link href="https://chouxianyu.github.io/2019/08/08/PAT%E4%B9%99%E7%BA%A71032/"/>
    <id>https://chouxianyu.github.io/2019/08/08/PAT乙级1032/</id>
    <published>2019-08-08T10:31:55.000Z</published>
    <updated>2019-08-08T10:33:03.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805289432236032" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805289432236032</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>用数组的下标表示学校，数组元素表示分数。统计各校分数后，遍历求最大就好了。</p><p>做这道题遇到一个<code>memset</code>初始化数组元素的问题，具体见<a href="https://www.cnblogs.com/chouxianyu/p/11322984.html" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/p/11322984.html</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1032</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805289432236032</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// n个参赛者</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最多n个学校</span></span><br><span class="line">    <span class="keyword">int</span>* scores=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 各学校（下标为0的学校是无效的学校）分数初始化为-1，因为是百分制，有可能所以参赛者都是零分且是同一个学校</span></span><br><span class="line">    <span class="built_in">memset</span>(scores, <span class="number">-1</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计n个学校分数</span></span><br><span class="line">    <span class="keyword">int</span> index,score;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; index &gt;&gt; score;</span><br><span class="line">        scores[index] += score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有效的学校最低分数是0，所以遍历后结果肯定不会是下标为0的那个学校</span></span><br><span class="line">    <span class="keyword">int</span> maxIndex=<span class="number">0</span>,maxScore=scores[maxIndex];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;++i)&#123;</span><br><span class="line">        <span class="comment">// 处理-1</span></span><br><span class="line">        scores[i]++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新最大值</span></span><br><span class="line">        <span class="keyword">if</span> (scores[i] &gt; maxScore)&#123;</span><br><span class="line">            maxScore = scores[i];</span><br><span class="line">            maxIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxIndex &lt;&lt; <span class="string">' '</span> &lt;&lt; maxScore;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="keyword">delete</span>[] scores;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>memset初始化数组的坑</title>
    <link href="https://chouxianyu.github.io/2019/08/08/memset%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E7%BB%84%E7%9A%84%E5%9D%91/"/>
    <id>https://chouxianyu.github.io/2019/08/08/memset初始化数组的坑/</id>
    <published>2019-08-08T10:27:54.000Z</published>
    <updated>2019-08-08T10:30:32.280Z</updated>
    
    <content type="html"><![CDATA[<p><code>memset</code>函数常被我们用来初始化数组，然而有个坑可能会被我们踩到。</p><h1 id="静态数组初始化"><a href="#静态数组初始化" class="headerlink" title="静态数组初始化"></a>静态数组初始化</h1><p>一般情形是这样的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 静态数组arr</span></span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将数组所有元素初始化为0</span></span><br><span class="line">    <span class="built_in">memset</span>(arr,<span class="number">0</span>,<span class="keyword">sizeof</span>(arr));</span><br><span class="line">        </span><br><span class="line">   <span class="comment">// 遍历输出数组元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做是正确的，通过输出可以看到正确结果。</p><p>注意：这份代码中<code>arr</code>是个静态数组。</p><h1 id="动态数组初始化"><a href="#动态数组初始化" class="headerlink" title="动态数组初始化"></a>动态数组初始化</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 动态数组arr</span></span><br><span class="line">    <span class="keyword">int</span>* arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将数组所有元素初始化为0</span></span><br><span class="line">    <span class="built_in">memset</span>(arr,<span class="number">0</span>,<span class="keyword">sizeof</span>(arr));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历输出数组元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这份代码运行后，我们发现<code>memset</code>并没有把数组元素全部初始化为0。</p><p>注意：<code>arr</code>是个动态数组</p><p><strong>原因如下</strong>：</p><p>我们可以在上面两份代码中输出<code>sizeof(arr)</code>，可以发现结果是不一样的。</p><p>因为在第一份代码中<code>arr</code>代表一个数组，第二份代码中<code>arr</code>代表一个指针。（关于<strong>数组名是什么</strong>这个问题可以参考我的另一篇文章：<a href="https://www.cnblogs.com/chouxianyu/p/11322951.html，其实这个问题我觉得是编译原理应该会学到的）" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/p/11322951.html，其实这个问题我觉得是编译原理应该会学到的）</a></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>初始化数组（静态动态均可）时，把代码改成<code>memset(arr,0,sizeof(int)*10);</code>，<code>int</code>是数组元素的类型，<code>10</code>是数组元素个数。</p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;memset&lt;/code&gt;函数常被我们用来初始化数组，然而有个坑可能会被我们踩到。&lt;/p&gt;
&lt;h1 id=&quot;静态数组初始化&quot;&gt;&lt;a href=&quot;#静态数组初始化&quot; class=&quot;headerlink&quot; title=&quot;静态数组初始化&quot;&gt;&lt;/a&gt;静态数组初始化&lt;/h
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://chouxianyu.github.io/tags/C-C/"/>
    
      <category term="数组" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="Bug" scheme="https://chouxianyu.github.io/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1031</title>
    <link href="https://chouxianyu.github.io/2019/08/07/PAT%E4%B9%99%E7%BA%A71031/"/>
    <id>https://chouxianyu.github.io/2019/08/07/PAT乙级1031/</id>
    <published>2019-08-07T15:43:16.000Z</published>
    <updated>2019-08-07T15:47:04.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805290334011392" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805290334011392</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>emmm。对于每个身份证号，判断前17位是否合法，并计算其与对应权重积之和，最后判断校验位是否合法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1031</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805290334011392</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 正确校验码</span></span><br><span class="line">    <span class="keyword">char</span> M[] = &#123; <span class="string">'1'</span>,<span class="string">'0'</span>,<span class="string">'X'</span>,<span class="string">'9'</span>,<span class="string">'8'</span>,<span class="string">'7'</span>,<span class="string">'6'</span>,<span class="string">'5'</span>,<span class="string">'4'</span>,<span class="string">'3'</span>,<span class="string">'2'</span>&#125;;</span><br><span class="line">    <span class="comment">// 前17位的比重</span></span><br><span class="line">    <span class="keyword">int</span> weight[] = &#123;<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="comment">// 身份证号个数</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前17位乘以权重之和</span></span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    <span class="comment">// 合法身份证号的个数</span></span><br><span class="line">    <span class="keyword">int</span> legalCount=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 当前身份证号是否合法</span></span><br><span class="line">    <span class="keyword">bool</span> isLegal;</span><br><span class="line">    <span class="comment">// 当前身份证号</span></span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取每个身份证号并判断</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">        isLegal=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算前17位乘以权重之和并判断前17位合法性</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">17</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isdigit</span>(str[i]))&#123;</span><br><span class="line">                sum += (str[i] - <span class="string">'0'</span>)*weight[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 出现非数字，非法，结束sum的计算</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                isLegal=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果前17位合法，判断校验码是否合法</span></span><br><span class="line">        <span class="keyword">if</span>(isLegal)&#123;</span><br><span class="line">            isLegal = (M[sum % <span class="number">11</span>]==str[<span class="number">17</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 身份证号非法则输出</span></span><br><span class="line">        <span class="keyword">if</span>(!isLegal)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 合法则计数</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            legalCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全部身份证号合法</span></span><br><span class="line">    <span class="keyword">if</span>(legalCount==n)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"All passed"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1030</title>
    <link href="https://chouxianyu.github.io/2019/08/07/PAT%E4%B9%99%E7%BA%A71030/"/>
    <id>https://chouxianyu.github.io/2019/08/07/PAT乙级1030/</id>
    <published>2019-08-07T14:51:30.000Z</published>
    <updated>2019-08-07T14:52:50.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805292322111488" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805292322111488</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>emm刚开始思路有点错误，我直接将从小到大排序后的数列首个元素作为数列的最小值，但其实不是，数列第一个元素的不同可能会导致更大的完美数列长度。(参考链接：<a href="https://blog.csdn.net/chenyvye/article/details/78701846" target="_blank" rel="noopener">https://blog.csdn.net/chenyvye/article/details/78701846</a>)</p><p>要注意的有三点：</p><ol><li>就是上边我错的那个</li><li>用<code>long long</code>类型保存这些整数（$10^9$）</li><li>移动序列时序列首位直接设为<code>i+maxLen</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1030</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805291311284224</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取n和p</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> p;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取数列</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> *nums = <span class="keyword">new</span> <span class="keyword">long</span> <span class="keyword">long</span>[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; nums[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line">sort(nums + <span class="number">0</span>, nums + n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找完美数列最大长度</span></span><br><span class="line"><span class="keyword">int</span> j,maxLen=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i+maxLen;j&lt;n;++j)&#123;<span class="comment">// 至少要比之前求出来的最大长度长，所以j初始化为i+maxLen</span></span><br><span class="line"><span class="keyword">if</span> (nums[j] &lt;= nums[i] * p)&#123;</span><br><span class="line"><span class="comment">// 更新最长长度</span></span><br><span class="line"><span class="keyword">if</span> (j - i + <span class="number">1</span>&gt;maxLen)&#123;</span><br><span class="line">maxLen = j - i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出现非完美数列，之后也一定都是非完美数列，所以直接跳出循环</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxLen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="keyword">delete</span>[] nums;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1029</title>
    <link href="https://chouxianyu.github.io/2019/08/07/PAT%E4%B9%99%E7%BA%A71029/"/>
    <id>https://chouxianyu.github.io/2019/08/07/PAT乙级1029/</id>
    <published>2019-08-07T14:51:21.000Z</published>
    <updated>2019-08-07T14:52:44.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805292322111488" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805292322111488</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>思路：</p><p>可以想到，没有坏键的话就是两个字符串是一样的。所以我们按下标进行比较，发现不一样的就是坏掉的，然后在错误字符串的该位置添加一个字符，以确保两字符串下标对应。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1029</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805292322111488</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 正确和错误的字符串</span></span><br><span class="line">    <span class="built_in">string</span> right,wrong;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; right &gt;&gt; wrong;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 坏掉的键</span></span><br><span class="line">    <span class="built_in">string</span> wrongKeys=<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找坏掉的键</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;right.length();++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (right[i] != wrong[i])&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在wrong里占个位子，更新下标</span></span><br><span class="line">            wrong.insert(wrong.begin() + i, <span class="string">'#'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理丢失的字符（小写转大写）</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">islower</span>(right[i]))&#123;</span><br><span class="line">                right[i]-=<span class="number">32</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录新发现的未重复的坏键</span></span><br><span class="line">            <span class="keyword">if</span>(wrongKeys.find(right[i])==wrongKeys.npos)&#123;</span><br><span class="line">                wrongKeys+=right[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; wrongKeys;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1028</title>
    <link href="https://chouxianyu.github.io/2019/08/07/PAT%E4%B9%99%E7%BA%A71028/"/>
    <id>https://chouxianyu.github.io/2019/08/07/PAT乙级1028/</id>
    <published>2019-08-07T14:51:08.000Z</published>
    <updated>2019-08-07T14:52:39.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805293282607104" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805293282607104</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>这题跟那个德才论（PAT乙级1015）什么的差不多。</p><p>因为我用了string和algorithm，所以整个代码实现比较简单。</p><p>值得注意的的是，刚开始第3个测试点没过，报错<strong>Segmentation fault</strong>。</p><p>网上查题解后，发现还是边界情况的问题（当所有输入都非法时就会数组越界，所以特殊处理一下即可，参考链接：<a href="https://blog.csdn.net/daniel960601/article/details/55261196）" target="_blank" rel="noopener">https://blog.csdn.net/daniel960601/article/details/55261196）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1028</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805293282607104</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> birthday;</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">string</span> birthday)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">personCmp</span><span class="params">(Person &amp;p1, Person &amp;p2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 人数</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最早日期和最晚日期</span></span><br><span class="line">    <span class="built_in">string</span> earliest = <span class="string">"1814/09/06"</span>;</span><br><span class="line">    <span class="built_in">string</span> latest = <span class="string">"2014/09/06"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取人的信息</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Person&gt; personVec;</span><br><span class="line">    <span class="built_in">string</span> name,birthday;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; name &gt;&gt; birthday;</span><br><span class="line">        <span class="keyword">if</span> (birthday &gt;= earliest &amp;&amp; birthday&lt;= latest)&#123;</span><br><span class="line">            personVec.push_back(Person(name,birthday));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; personVec.size();</span><br><span class="line">    <span class="keyword">if</span> (personVec.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 对所有人进行排序</span></span><br><span class="line">        sort(personVec.begin(), personVec.end(), personCmp);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; personVec.front().name &lt;&lt; <span class="string">' '</span> &lt;&lt; personVec.back().name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">personCmp</span><span class="params">(Person &amp;p1, Person &amp;p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 生日 升序（生日从小到大就是年龄从大到小）</span></span><br><span class="line">    <span class="keyword">return</span> p1.birthday &lt; p2.birthday; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1027</title>
    <link href="https://chouxianyu.github.io/2019/08/07/PAT%E4%B9%99%E7%BA%A71027/"/>
    <id>https://chouxianyu.github.io/2019/08/07/PAT乙级1027/</id>
    <published>2019-08-07T14:51:02.000Z</published>
    <updated>2019-08-07T14:52:33.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805294251491328" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805294251491328</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>主要有两个内容：</p><ol><li>获取第一行（最长行）字符的个数。这个与一般的菱形打印不同，该题的字符不一定用完。</li><li>通过循环输出空格与字符（末尾空格就不用输出了）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1027</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805294251491328</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLineMaxCount</span><span class="params">(<span class="keyword">int</span> maxNum)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 字符可用数量及字符</span></span><br><span class="line">    <span class="keyword">int</span> n;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取第一行字符的个数</span></span><br><span class="line">    <span class="keyword">int</span> maxNum = getLineMaxCount(n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已输出字符个数</span></span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前行输出字符个数</span></span><br><span class="line">    <span class="keyword">int</span> num = maxNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出上半部分</span></span><br><span class="line">    <span class="keyword">while</span>(num&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">// 输出空格</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(maxNum-num)/<span class="number">2</span>;++i)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出字符</span></span><br><span class="line">        count+=num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;++i)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 换行</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        num-=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(num&lt;=maxNum)&#123;</span><br><span class="line">        <span class="comment">// 输出空格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (maxNum - num) / <span class="number">2</span>; ++i)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出字符</span></span><br><span class="line">        count+=num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; ++i)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 换行</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        num += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出剩余字符个数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n-count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据字符可用数量获取第一行字符个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLineMaxCount</span><span class="params">(<span class="keyword">int</span> maxNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">-1</span>,count=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (sum + count * <span class="number">2</span> &lt;= maxNum)&#123;</span><br><span class="line">        sum += count * <span class="number">2</span>;</span><br><span class="line">        count += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count<span class="number">-2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1026</title>
    <link href="https://chouxianyu.github.io/2019/08/07/PAT%E4%B9%99%E7%BA%A71026/"/>
    <id>https://chouxianyu.github.io/2019/08/07/PAT乙级1026/</id>
    <published>2019-08-07T14:50:55.000Z</published>
    <updated>2019-08-07T14:52:26.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805295203598336" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805295203598336</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>就只有一个四舍五入需要注意一下，其他的没啥难度，都是简单的运算而已……</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1026</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805295203598336</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLK_TCK 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取C1和C2，并计算时间差（不足一秒进行四舍五入）</span></span><br><span class="line">    <span class="keyword">int</span> c1,c2;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; c1 &gt;&gt; c2;</span><br><span class="line">    <span class="keyword">int</span> time = (c2 - c1)*<span class="number">1.0</span>/CLK_TCK+<span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算小时、分钟、秒</span></span><br><span class="line">    <span class="keyword">int</span> hour=time/<span class="number">3600</span>;</span><br><span class="line">    time%=<span class="number">3600</span>;</span><br><span class="line">    <span class="keyword">int</span> min=time/<span class="number">60</span>;</span><br><span class="line">    <span class="keyword">int</span> sec=time%<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按格式输出结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d"</span>,hour,min,sec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1025</title>
    <link href="https://chouxianyu.github.io/2019/08/06/PAT%E4%B9%99%E7%BA%A71025/"/>
    <id>https://chouxianyu.github.io/2019/08/06/PAT乙级1025/</id>
    <published>2019-08-06T13:31:39.000Z</published>
    <updated>2019-08-06T13:32:12.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805296180871168" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805296180871168</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>第一遍没有全部AC，最后1个测试点没过，原因是题目给的结点中有可能有无效结点，所以需要重新统计节点个数。（参考链接：<a href="https://blog.csdn.net/m0_37285185/article/details/68936043" target="_blank" rel="noopener">https://blog.csdn.net/m0_37285185/article/details/68936043</a>）</p><p>修改后全部都AC了。</p><p>整体的思路是以地址为键形成一个map，根据从第一个结点开始遍历，统计出有效结点的地址顺序（存储在数组中），最后利用<code>reverse</code>函数将顺序反转，最后将反转的链表输出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1025</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805296180871168</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> address;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为使用map，所以需要提供一个无参构造</span></span><br><span class="line">    Node()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> address,<span class="keyword">int</span> data,<span class="keyword">int</span> next)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;address = address;</span><br><span class="line">        <span class="keyword">this</span>-&gt;data = data;</span><br><span class="line">        <span class="keyword">this</span>-&gt;next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%05d"</span>, address);</span><br><span class="line">        <span class="built_in">cout</span>  &lt;&lt; <span class="string">' '</span> &lt;&lt; data &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        <span class="keyword">if</span>(next==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,next);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%05d\n"</span>, next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取n、k和首结点地址</span></span><br><span class="line">    <span class="keyword">int</span> n, k, head;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; head &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 利用map模拟链表，获取用户输入的结点</span></span><br><span class="line">    <span class="keyword">int</span> address,data,next;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,Node&gt; nodes;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; address &gt;&gt; data &gt;&gt; next;</span><br><span class="line">        nodes[address]=Node(address,data,next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取结点地址的顺序并重新统计结点个数去除无效顶点</span></span><br><span class="line">    <span class="keyword">int</span> * addressArr=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    addressArr[<span class="number">0</span>] = head;</span><br><span class="line">    address = nodes[head].next;</span><br><span class="line">    <span class="keyword">int</span> nodeCount=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(address!=<span class="number">-1</span>)&#123;</span><br><span class="line">        addressArr[nodeCount]=address;</span><br><span class="line">        nodeCount++;</span><br><span class="line">        address = nodes[address].next;</span><br><span class="line">    &#125;</span><br><span class="line">    n=nodeCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将结点地址的顺序进行反转</span></span><br><span class="line">    <span class="keyword">if</span> (k &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> *p = addressArr;</span><br><span class="line">        <span class="keyword">while</span> ((addressArr + n) - p &gt;= k)</span><br><span class="line">        &#123;</span><br><span class="line">            reverse(p, p + k);</span><br><span class="line">            p += k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新各结点的next</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">        nodes[addressArr[i]].next=addressArr[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    nodes[addressArr[n - <span class="number">1</span>]].next=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出反转后的链表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        nodes[addressArr[i]].print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="keyword">delete</span>[] addressArr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
