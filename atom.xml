<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>臭咸鱼的缺氧瓶</title>
  
  <subtitle>快给我氧气！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chouxianyu.github.io/"/>
  <updated>2019-02-18T08:09:45.657Z</updated>
  <id>https://chouxianyu.github.io/</id>
  
  <author>
    <name>臭咸鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PageRank</title>
    <link href="https://chouxianyu.github.io/2019/02/18/PageRank/"/>
    <id>https://chouxianyu.github.io/2019/02/18/PageRank/</id>
    <published>2019-02-18T07:58:08.000Z</published>
    <updated>2019-02-18T08:09:45.657Z</updated>
    
    <content type="html"><![CDATA[<p>用Matlab实现一个PageRank算法。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>PageRank是一种对网页进行排名的算法，通过引用来判断网页的排名。</p><p>具体介绍自寻，可以看一下<a href="https://baike.baidu.com/item/google%20pagerank#2" target="_blank" rel="noopener">https://baike.baidu.com/item/google%20pagerank#2</a></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>图中有六个明星，他们之间的箭头表示关注，比如Kim和Ryan互相关注，图片中间的数字是最终计算出的他们的PageRank。</p><p><img src="https://i.loli.net/2019/02/18/5c6a6221c0ccf.png" alt="明星关注.png"></p><h1 id="Matlab实现"><a href="#Matlab实现" class="headerlink" title="Matlab实现"></a>Matlab实现</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Find PageRank of network by finding dominant evec</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%      _       _       _             _</span></span><br><span class="line"><span class="comment">%     | (1-d)/N |     | l11, ..., l1n |</span></span><br><span class="line"><span class="comment">% R = |   ...   | + d | ..., ..., ... | R     </span></span><br><span class="line"><span class="comment">%     |_(1-d)/N_|     |_ln1, ..., lnn_|       </span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% R = c + d * L*D * R</span></span><br><span class="line"><span class="comment">% R = (I - d * L*D )\c</span></span><br><span class="line"><span class="comment">% </span></span><br><span class="line"></span><br><span class="line">clc;    <span class="comment">%清屏</span></span><br><span class="line"></span><br><span class="line">d = <span class="number">0.85</span>;  <span class="comment">% damping factor</span></span><br><span class="line"></span><br><span class="line">name = &#123;<span class="string">'bill'</span>, <span class="string">'ellen'</span>, <span class="string">'jimmy'</span>, <span class="string">'kim'</span>, <span class="string">'paula'</span>, <span class="string">'ryan'</span>&#125;; <span class="comment">% celebrities'name</span></span><br><span class="line">[bil, ell, jim, kim, pau, rya] = deal(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);        <span class="comment">% celebrities'id，bil=1,ell=2...</span></span><br><span class="line">n = <span class="built_in">length</span>(name); <span class="comment">% number of celebrities,n=6</span></span><br><span class="line"></span><br><span class="line">L = <span class="built_in">zeros</span>(n);   <span class="comment">% 明星关注关系矩阵,一行是一个人，元素值表示他是否关注他人;一列也是一个人，元素值表示是否被他人关注</span></span><br><span class="line"><span class="comment">% if user j follows user i, then L(i,j) = 1</span></span><br><span class="line">L(bil, [rya, ell]) = <span class="number">1</span>; <span class="comment">% bil关注rya ell，下五行同理</span></span><br><span class="line">L(ell, [jim, rya]) = <span class="number">1</span>;</span><br><span class="line">L(jim, [rya, pau, ell]) = <span class="number">1</span>;</span><br><span class="line">L(kim, [jim, rya, ell]) = <span class="number">1</span>;</span><br><span class="line">L(pau, [rya, ell])=<span class="number">1</span>;</span><br><span class="line">L(rya, [bil, jim, kim, pau, ell]) = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% ot = out-degree, in = in-degree</span></span><br><span class="line">ot = sum(L,<span class="number">1</span>);  <span class="comment">% 对每1列求和，得行向量，每一列是一个人，元素值为被关注次数</span></span><br><span class="line">in = sum(L,<span class="number">2</span>);  <span class="comment">% 对每1行求和，得列向量，每一行是一个人，元素值为他关注了多少人</span></span><br><span class="line"></span><br><span class="line">k = <span class="built_in">find</span>(ot~=<span class="number">0</span>); <span class="comment">% 找到ot中不等于0的元素的下标,在此都不为0，返回行向量[1,2,3,..,6]</span></span><br><span class="line">D = full(sparse(k,k,<span class="number">1.</span>/ot(k),n,n)); <span class="comment">%对角矩阵，对角元素表示每个人对其他人的关注的分成</span></span><br><span class="line"><span class="comment">% L*D 是 6*6矩阵，一行、一列都是一个人，一行表示得到每个人的关注的分成，列表示对其他人关注的分成</span></span><br><span class="line">c = (<span class="number">1</span>-d)/n*<span class="built_in">ones</span>(n,<span class="number">1</span>);  <span class="comment">% 值为(1-d)/n 的 n行列向量</span></span><br><span class="line">I = <span class="built_in">eye</span>(n); <span class="comment">% n*n单位矩阵</span></span><br><span class="line"></span><br><span class="line">R = (I - d*L*D)\c  <span class="comment">% 注意是左除,得到6个人的PageRank</span></span><br></pre></td></tr></table></figure><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用Matlab实现一个PageRank算法。&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;PageRank是一种对网页进行排名的算法，通过引用来判断网页的排名。&lt;/p&gt;

      
    
    </summary>
    
      <category term="数学建模" scheme="https://chouxianyu.github.io/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    
      <category term="PageRank" scheme="https://chouxianyu.github.io/tags/PageRank/"/>
    
      <category term="Matlab" scheme="https://chouxianyu.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>多体问题</title>
    <link href="https://chouxianyu.github.io/2019/02/16/%E5%A4%9A%E4%BD%93%E9%97%AE%E9%A2%98/"/>
    <id>https://chouxianyu.github.io/2019/02/16/多体问题/</id>
    <published>2019-02-16T10:43:10.000Z</published>
    <updated>2019-02-16T10:53:31.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题及分析"><a href="#问题及分析" class="headerlink" title="问题及分析"></a>问题及分析</h1><p><img src="https://i.loli.net/2019/02/16/5c67de0b03aa6.png" alt="多体问题.png"></p><h1 id="Matlab代码"><a href="#Matlab代码" class="headerlink" title="Matlab代码"></a>Matlab代码</h1><p>给出了核心逻辑的注释，作图暂时还不太了解。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SunEarthMoon</span>   % <span class="title">M</span>函数文件</span></span><br><span class="line"></span><br><span class="line">load planets;   <span class="comment">% 将planets.mat中的变量mass、position、velocity加载过来</span></span><br><span class="line"></span><br><span class="line">[sun, earth, moon] = deal(<span class="number">18</span>, <span class="number">3</span>, <span class="number">25</span>);   <span class="comment">% sun、earth、moon分别是18、3、25行</span></span><br><span class="line">list = [sun, earth, moon];  <span class="comment">% 1行3列矩阵</span></span><br><span class="line">G = <span class="number">6.67e-11</span>; <span class="comment">% gravitational constant</span></span><br><span class="line"></span><br><span class="line">dt = <span class="number">24</span>*<span class="number">3600</span>;   <span class="comment">% 作图的时间间隔为一天，每天有24*3600秒</span></span><br><span class="line">N = <span class="built_in">length</span>(list);   <span class="comment">% N=3，三个天体</span></span><br><span class="line">mass = mass(list);  <span class="comment">% N行1列矩阵，N个天体的质量</span></span><br><span class="line">position = position(list,:);    <span class="comment">% N行3列矩阵，N个天体的坐标，坐标是1行3列的行向量，三个方向的分量</span></span><br><span class="line">velocity = velocity(list,:);    <span class="comment">% N行3列矩阵，N个天体的速度，速度是1行3列的行向量，三个方向的分量</span></span><br><span class="line">h = plotplanets(position);  <span class="comment">%作图函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t = <span class="number">1</span>:<span class="number">365</span>   <span class="comment">% 图中总时间为一年，一年365天</span></span><br><span class="line">    plotplanets(position,h);    <span class="comment">% </span></span><br><span class="line">    force = <span class="built_in">zeros</span>(N,<span class="number">3</span>); <span class="comment">% N行3列零矩阵，一行表示某个天体在三个方向上的受力</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : N   <span class="comment">% 遍历计算各天体间的万有引力。组合数C（3，2）</span></span><br><span class="line">        Pi = position(<span class="built_in">i</span>,:); <span class="comment">% 某天体坐标</span></span><br><span class="line">        Mi = mass(<span class="built_in">i</span>);   <span class="comment">% 某天体质量</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = (<span class="built_in">i</span>+<span class="number">1</span>):N     <span class="comment">%the i+1 is to create diagonal </span></span><br><span class="line">            Mj = mass(<span class="built_in">j</span>);   <span class="comment">% 另一天体质量</span></span><br><span class="line">            Pj = position(<span class="built_in">j</span>,:); <span class="comment">% 另一天体坐标</span></span><br><span class="line">            dr =  Pj - Pi;  <span class="comment">% 两天体的相对，1行3列矩阵</span></span><br><span class="line">            forceij = G*Mi*Mj./(norm(dr).^<span class="number">3</span>).*dr;   <span class="comment">% 两天体之间的力，1行3列的向量</span></span><br><span class="line">            force(<span class="built_in">i</span>,:) = force(<span class="built_in">i</span>,:) + forceij;  <span class="comment">% 规定正方向，将力计算进矩阵</span></span><br><span class="line">            force(<span class="built_in">j</span>,:) = force(<span class="built_in">j</span>,:) - forceij;  <span class="comment">% 反作用力与作用力方向相反，将力计算进矩阵</span></span><br><span class="line">            <span class="comment">% 上两行可替换为force([i,j],:) = force([i,j],:)+[forceij; -forceij];</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    velocity = velocity + force ./ <span class="built_in">repmat</span>(mass,<span class="number">1</span>,<span class="number">3</span>)*dt;   <span class="comment">% v=v+a*dt a=F/m</span></span><br><span class="line">    position = position + velocity*dt;  <span class="comment">% r=r+v*dt</span></span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">% -------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">h</span> = <span class="title">plotplanets</span><span class="params">(pos,h)</span> % </span></span><br><span class="line">scale = <span class="number">50</span>;</span><br><span class="line">total_planets = <span class="built_in">size</span>(pos,<span class="number">1</span>);</span><br><span class="line">[sun, earth, moon] = deal(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">radius = [<span class="number">50</span>, <span class="number">30</span>, <span class="number">20</span>];</span><br><span class="line">marker = &#123;<span class="string">'.r'</span>, <span class="string">'b.'</span>,<span class="string">'m.'</span>&#125;;</span><br><span class="line">pos(moon,:) = pos(earth,:) + scale*(pos(moon,:)-pos(earth,:));</span><br><span class="line"><span class="keyword">if</span> nargin==<span class="number">1</span></span><br><span class="line">    hold on; axis image</span><br><span class="line">    axis( [<span class="number">-2</span> <span class="number">2</span> <span class="number">-2</span> <span class="number">2</span>]*<span class="number">1e11</span> );</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:total_planets</span><br><span class="line">        <span class="keyword">if</span> any(<span class="built_in">i</span> == [sun, earth, moon])</span><br><span class="line">            h(<span class="built_in">i</span>) = plot(pos(<span class="built_in">i</span>,<span class="number">1</span>),pos(<span class="built_in">i</span>,<span class="number">2</span>),marker&#123;i&#125;,<span class="string">'markersize'</span>,radius(<span class="built_in">i</span>));</span><br><span class="line">            plot(pos(<span class="built_in">i</span>,<span class="number">1</span>), pos(<span class="built_in">i</span>,<span class="number">2</span>), marker&#123;i&#125;, <span class="string">'markersize'</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            h(<span class="built_in">i</span>) = plot(pos(<span class="built_in">i</span>,<span class="number">1</span>), pos(<span class="built_in">i</span>,<span class="number">2</span>), <span class="string">'k.'</span>, <span class="string">'markersize'</span>, <span class="number">20</span>);</span><br><span class="line">            plot(pos(<span class="built_in">i</span>,<span class="number">1</span>), pos(<span class="built_in">i</span>,<span class="number">2</span>), <span class="string">'k.'</span>, <span class="string">'markersize'</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:total_planets</span><br><span class="line">        set(h(<span class="built_in">i</span>), <span class="string">'Xdata'</span>, pos(<span class="built_in">i</span>,<span class="number">1</span>)  , <span class="string">'Ydata'</span>, pos(<span class="built_in">i</span>,<span class="number">2</span>)  )</span><br><span class="line">        <span class="keyword">if</span> any(<span class="built_in">i</span> == [sun, earth, moon])</span><br><span class="line">            plot(pos(<span class="built_in">i</span>,<span class="number">1</span>), pos(<span class="built_in">i</span>,<span class="number">2</span>), marker&#123;i&#125;, <span class="string">'markersize'</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            plot(pos(<span class="built_in">i</span>,<span class="number">1</span>), pos(<span class="built_in">i</span>,<span class="number">2</span>), <span class="string">'k.'</span>, <span class="string">'markersize'</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    drawnow</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://i.loli.net/2019/02/16/5c67de063bde3.png" alt="多体运动轨迹.png"></p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题及分析&quot;&gt;&lt;a href=&quot;#问题及分析&quot; class=&quot;headerlink&quot; title=&quot;问题及分析&quot;&gt;&lt;/a&gt;问题及分析&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/02/16/5c67de0b03aa6.png&quot;
      
    
    </summary>
    
      <category term="数学建模" scheme="https://chouxianyu.github.io/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    
      <category term="Matlab" scheme="https://chouxianyu.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>椅子能在不平的地面上放稳吗</title>
    <link href="https://chouxianyu.github.io/2019/02/16/%E6%A4%85%E5%AD%90%E8%83%BD%E5%9C%A8%E4%B8%8D%E5%B9%B3%E7%9A%84%E5%9C%B0%E9%9D%A2%E4%B8%8A%E6%94%BE%E7%A8%B3%E5%90%97/"/>
    <id>https://chouxianyu.github.io/2019/02/16/椅子能在不平的地面上放稳吗/</id>
    <published>2019-02-16T10:42:29.000Z</published>
    <updated>2019-02-16T11:17:19.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>把椅子放在不平的地面上，通常只有三只脚着地，放不稳，然而只需稍挪动几次，就可以使四只脚同时着地而放稳。这个看来似乎与数学无关的现象能用数学语言表述，并用数学工具来证实吗？让我们来试试看！</p><h1 id="再次读题"><a href="#再次读题" class="headerlink" title="再次读题"></a>再次读题</h1><p>把<strong>椅子</strong> <strong>放在</strong> <strong>不平的地面</strong>上，<strong>通常只有三只脚着地，放不稳</strong>，然而只需稍<strong>挪动</strong>几次，就可以使<strong>四只脚同时着地而放稳</strong>。这个看来似乎与数学无关的现象能<strong>用数学语言表述</strong>，并用数学工具来<strong>证实</strong>吗？让我们来试试看！</p><h1 id="对象分析"><a href="#对象分析" class="headerlink" title="对象分析"></a>对象分析</h1><ul><li>椅子     =》四个椅脚  =》与地面有四个接触点  =》正方形（本质应该是长方形）</li><li>不平的地面  =》光滑曲面（光滑是根据讨论范围确定的，不连续的很陡的地面不在讨论范围之内）</li></ul><h1 id="条件分析"><a href="#条件分析" class="headerlink" title="条件分析"></a>条件分析</h1><ul><li>通常只有三只脚着地，放不稳  =》假设至少三只脚着地 =》F($\theta$)*G($\theta$)=0</li><li>稍挪动几次  =》位置的变化  =》角度$\theta$的变化</li></ul><h1 id="结论分析"><a href="#结论分析" class="headerlink" title="结论分析"></a>结论分析</h1><ul><li>能不能  =》存在问题</li><li>放稳  =》四个脚到地面距离都为0  =》两对 对角椅脚 离地面的高度之和F($\theta$)、G($\theta$)值同时为0</li></ul><h1 id="数学模型"><a href="#数学模型" class="headerlink" title="数学模型"></a>数学模型</h1><p>已知F($\theta$)、G($\theta$)是$\theta$的连续函数，对任意$\theta，$F($\theta$)*G($\theta$)=0，且G(0)=F($\pi$/2)=0，F(0)=G($\pi$/2)&gt;0，证明存在$\theta_0$，使F($\theta_0$)=G($\theta_0$)=0。</p><h1 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h1><p>好好读题，根据题中所给信息，找到<strong>研究对象</strong>、<strong>条件</strong>、<strong>结论</strong>等现实元素转化为一个个数学元素。</p><h1 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h1><p>关于旋转的变量除了$\theta$，转轴也可以算一个，另外还可以把正方形改为长方形进行讨论。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎交流讨论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;把椅子放在不平的地面上，通常只有三只脚着地，放不稳，然而只需稍挪动几次，就可以使四只脚同时着地而放稳。这个看来似乎与数学无关的现象能用数学语
      
    
    </summary>
    
      <category term="数学建模" scheme="https://chouxianyu.github.io/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>React学习（十一）之兄弟组件间传值</title>
    <link href="https://chouxianyu.github.io/2019/01/22/React%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%B9%8B%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E5%80%BC/"/>
    <id>https://chouxianyu.github.io/2019/01/22/React学习（十一）之兄弟组件间传值/</id>
    <published>2019-01-22T06:45:43.000Z</published>
    <updated>2019-02-08T04:46:44.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>React传递数据是单向数据流，两个组件必须有关系才可以传值。</p><p>而兄弟组件间并无直接关系，所以需要借助父组件。</p><p><strong>兄弟组件传值原理</strong>：</p><p>简单的逻辑是这样：子组件1传值给父组件，父组件再传给子组件2。</p><ol><li>子组件1通过函数参数传值给父组件。</li><li>父组件利用子组件1传来的值<strong>改变自身state中的某个值。</strong></li><li>由于父组件<strong>将自身state的那个值传给</strong>子组件2，而现在<code>state</code>发生改变 ，子组件2会重新渲染，实现子组件1传值到</li></ol><p>这里用到了<code>state</code>和<code>更新dom</code>的知识，不知道的可以看看。前边的文章或百度。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>现有三个组件，父组件<code>App</code>,子组件1<code>Header</code>，子组件2<code>Home</code>，<code>Home</code>比<code>Header</code>小2岁。</p><p>实现功能：改变<code>Header</code>的年龄，且同步更新<code>Home</code>的年龄。</p><h2 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./components/Header'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state=&#123;</span><br><span class="line">      homeAge:<span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onGreet(headerAge)&#123;  <span class="comment">//父组件定义回调函数</span></span><br><span class="line">    alert(<span class="string">"App:Header is"</span>+headerAge+<span class="string">"years old!"</span>);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      homeAge: headerAge<span class="number">-2</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> user=&#123;  <span class="comment">//定义一个对象，传给子组件Header</span></span><br><span class="line">      name: <span class="string">"Anna"</span>,</span><br><span class="line">      hobbies: [<span class="string">"Sports"</span>, <span class="string">"Reading"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Header greet=&#123;<span class="keyword">this</span>.onGreet.bind(<span class="keyword">this</span>)&#125; name=&#123;<span class="string">"Max"</span>&#125; age=&#123;<span class="number">12</span>&#125; user=&#123;user&#125;&gt;</span><br><span class="line">            &lt;p&gt;I am Header<span class="string">'s children&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;/Header&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h1&gt;I am App&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;Home homeAge=&#123;this.state.homeAge&#125;/&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default App;</span></span><br></pre></td></tr></table></figure><h2 id="Header-js"><a href="#Header-js" class="headerlink" title="Header.js"></a>Header.js</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);  <span class="comment">//执行父类构造方法</span></span><br><span class="line">    <span class="keyword">this</span>.state=&#123;</span><br><span class="line">      age:props.age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//this.age=this.props.age;  </span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onMakeOrder()&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      age:<span class="keyword">this</span>.state.age+<span class="number">3</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//this.age+=3;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">//显示当前Header类的对象</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleGreet()&#123;</span><br><span class="line">    <span class="keyword">this</span>.props.greet(<span class="keyword">this</span>.state.age);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">//console.log(this.props);  //显示父组件传来的参数</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;I am Header&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          props'name is &#123;this.props.name&#125;,my age is &#123;this.state.age&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">        &#123;<span class="comment">/*&lt;button onClick=&#123;() =&gt; this.onMakeOrder()&#125; className="btn btn-primary"&gt;make me older&lt;/button&gt;*/</span>&#125;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.onMakeOrder.bind(<span class="keyword">this</span>)&#125; className=<span class="string">"btn btn-primary"</span>&gt;</span><br><span class="line">          make me older  </span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;br /</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleGreet.bind(<span class="keyword">this</span>)&#125; className=<span class="string">"btn btn-primary"</span>&gt;</span><br><span class="line">          告诉App我几岁</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;h4&gt;props'hobbies如下：&lt;/</span>h4&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &#123;<span class="keyword">this</span>.props.user.hobbies.map(<span class="function">(<span class="params">hobby,i</span>) =&gt;</span> &lt;li key=&#123;i&#125;&gt;&#123;hobby&#125;&lt;<span class="regexp">/li&gt;)&#125;</span></span><br><span class="line"><span class="regexp">          &lt;/u</span>l&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;div&gt;props's children如下：&#123;this.props.children&#125;&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Header.propTypes=&#123;</span></span><br><span class="line"><span class="regexp">  name: PropTypes.string,</span></span><br><span class="line"><span class="regexp">  age: PropTypes.number,</span></span><br><span class="line"><span class="regexp">  user: PropTypes.object,</span></span><br><span class="line"><span class="regexp">  greet: PropTypes.function,</span></span><br><span class="line"><span class="regexp">  children: PropTypes.element.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Header;</span></span><br></pre></td></tr></table></figure><h2 id="Home-js"><a href="#Home-js" class="headerlink" title="Home.js"></a>Home.js</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> content=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">let</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">      content=<span class="string">"cbh"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      content=<span class="string">"cxy"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;I am Home&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        动态数据：&#123;content&#125;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;I am &#123;this.props.homeAge&#125; year's old&lt;/</span>h1&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Home;</span></span><br></pre></td></tr></table></figure><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>两个子组件本来就是12岁和10岁，无法查看传值效果。</p><p>所以先点击<code>makeolder</code>按钮，可以看到<code>Header</code>年龄变为15。</p><p>再点击<code>告诉App我几岁</code>按钮。</p><p>子组件1<code>Header</code>通过一个回调函数将自己的年龄传给父组件<code>App</code>，父组件再用<code>Header</code>传来的年龄更新自己的state；</p><p>由于父组件<code>App</code>给子组件2<code>Home</code>传的参数是<code>state</code>中的一个值，所以子组件2变化的部分会重新渲染，实现子组件1传值给子组件2。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎转发和评论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;p&gt;React传递数据是单向数据流，两个组件必须有关系才可以传值。&lt;/p&gt;
&lt;p&gt;而兄弟组件间并无直接关系，所以需要借助父组件。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://chouxianyu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://chouxianyu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>阮一峰React入门教程学习笔记</title>
    <link href="https://chouxianyu.github.io/2019/01/22/%E9%98%AE%E4%B8%80%E5%B3%B0React%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://chouxianyu.github.io/2019/01/22/阮一峰React入门教程学习笔记/</id>
    <published>2019-01-22T06:40:55.000Z</published>
    <updated>2019-02-08T04:46:53.456Z</updated>
    
    <content type="html"><![CDATA[<p>虽然已经看视频学了一些React基础，看完阮一峰的教程还是对React有了更多的理解。</p><p>他的教程感觉还是很简洁明了的，误区、重点都有讲到。</p><p>以下为<a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">阮一峰React入门教程</a>学习笔记，记录了一些新的、重要的知识点。</p><p>本文标题为教程中对应章节的标题。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>React 可以在浏览器运行，也可以在服务器运行。</p><h1 id="HTML模板"><a href="#HTML模板" class="headerlink" title="HTML模板"></a>HTML模板</h1><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;script src=<span class="string">"../build/react.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="comment">//react核心库</span></span><br><span class="line">    &lt;script src=<span class="string">"../build/react-dom.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="comment">//提供dom相关功能</span></span><br><span class="line">    &lt;script src=<span class="string">"../build/browser.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="comment">//将JSX转为JS，很耗时间，应用上线时应将这一步放在服务器完成</span></span><br><span class="line">  &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">  &lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="example"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">      <span class="comment">// ** Our code goes here! **</span></span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>JSX</strong>语法为<strong>React独有</strong>，与JS并不兼容，因此使用JSX语法的时候要加上<code>type=&quot;text/babel&quot;</code>。</p><h1 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render()"></a>ReactDOM.render()</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">  <span class="comment">//h1可看作一个组件，插入id为example的DOM结点。</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>ReactDOM.render</code> 是 React 的最基本方法，<strong>用于将模板转为 HTML 语言，并插入指定的 DOM 节点</strong>，即<strong>挂载组件</strong>。</p><h1 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>可以看<a href="https://reactjs.org/docs/introducing-jsx.html" target="_blank" rel="noopener">React官网</a>。</p><p>JSX是JS的语法扩展，它为React提供了<strong>元素</strong>。</p><h2 id="为何使用JSX"><a href="#为何使用JSX" class="headerlink" title="为何使用JSX"></a>为何使用JSX</h2><p>React认为页面的渲染逻辑和UI设计的逻辑是耦合的：事件如何处理，状态如何随时间变化，以及数据如何准备显示。</p><p>React通过包含标记和逻辑的<strong>组件</strong>实现 separation of concerns。</p><p>React不是必须使用JSX，但JSX使包含UI的JS代码更加容易处理，同时也可以暴露出更多有用的报错和警告信息。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>遇到 HTML 标签（以 <code>&lt;</code> 开头），就用 HTML 规则解析；遇到代码块（以 <code>{</code> 开头），就用 JavaScript 规则解析。</p><p>它允许HTML和JavaScript的混写。</p><p>JSX 允许直接在模板插入 JavaScript 变量，JSX中的大括号内可以放置任何有效的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions" target="_blank" rel="noopener">JavaScript表达式</a>。</p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><p>所有组件类都必须有自己的 <code>render</code> 方法，用于输出组件。</p><h2 id="组件名"><a href="#组件名" class="headerlink" title="组件名"></a>组件名</h2><p>组件类的第一个字母必须大写，否则会报错。</p><h2 id="一个顶层标签"><a href="#一个顶层标签" class="headerlink" title="一个顶层标签"></a>一个顶层标签</h2><p>组件类只能包含一个顶层标签，否则也会报错。</p><h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><p>组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 <code>&lt;HelloMessage name=&quot;John&quot;&gt;</code> ，就是 <code>HelloMessage</code> 组件加入一个 <code>name</code> 属性，值为 <code>John</code>。组件的属性可以在组件类的 <code>this.props</code> 对象上获取，比如 <code>name</code> 属性就可以通过 <code>this.props.name</code> 读取。</p><h2 id="保留字问题"><a href="#保留字问题" class="headerlink" title="保留字问题"></a>保留字问题</h2><p>添加组件属性，有一个地方需要注意，就是 <code>class</code> 属性需要写成 <code>className</code> ，<code>for</code> 属性需要写成 <code>htmlFor</code> ，这是因为 <code>class</code> 和 <code>for</code> 是 JavaScript 的保留字。</p><h1 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h1><p><code>this.props</code> 对象的属性与组件的属性一一对应，但是有一个例外，就是 <code>this.props.children</code> 属性。它表示组件的所有子节点。</p><h1 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h1><p>组件类的<code>PropTypes</code>属性，用来验证组件实例的属性是否符合要求。</p><p><code>getDefaultProps</code> 方法可以用来设置组件属性的默认值。</p><h1 id="获取真实DOM结点"><a href="#获取真实DOM结点" class="headerlink" title="获取真实DOM结点"></a>获取真实DOM结点</h1><p>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。</p><p>有时需要从组件获取真实 DOM 的节点，这时就要用到 <code>ref</code> 属性。</p><p><code>this.refs.[refName]</code> 属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。</p><h1 id="this-state"><a href="#this-state" class="headerlink" title="this.state"></a>this.state</h1><p>React 的一大创新，就是将组件看成是一个状态机。</p><p>每次修改<code>this.setState</code>以后，<strong>自动调用 <code>this.render</code> 方法</strong>，再次渲染组件。</p><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p>要获取用户输入，需要定义一个 <code>onChange</code> 事件的回调函数，通过 <code>event.target.value</code> 读取用户输入的值。</p><h1 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h1><h2 id="组件的三种状态"><a href="#组件的三种状态" class="headerlink" title="组件的三种状态"></a>组件的三种状态</h2><p>组件的<a href="https://facebook.github.io/react/docs/working-with-the-browser.html#component-lifecycle" target="_blank" rel="noopener">生命周期</a>分成三个状态：</p><blockquote><ul><li>Mounting：已插入真实 DOM</li><li>Updating：正在被重新渲染</li><li>Unmounting：已移出真实 DOM</li></ul></blockquote><h2 id="状态的处理函数"><a href="#状态的处理函数" class="headerlink" title="状态的处理函数"></a>状态的处理函数</h2><p><code>will</code> 函数在进入状态之前调用，<code>did</code>函数在进入状态之后调用，三种状态共计五种处理函数。</p><blockquote><ul><li>componentWillMount()</li><li>componentDidMount()</li><li>componentWillUpdate(object nextProps, object nextState)</li><li>componentDidUpdate(object prevProps, object prevState)</li><li>componentWillUnmount()</li></ul></blockquote><h2 id="特殊状态的处理函数"><a href="#特殊状态的处理函数" class="headerlink" title="特殊状态的处理函数"></a>特殊状态的处理函数</h2><ul><li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li><li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li></ul><p><a href="https://facebook.github.io/react/tips/inline-styles.html" target="_blank" rel="noopener">React 组件样式</a>是一个对象。</p><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>==还没学==</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎转发和评论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然已经看视频学了一些React基础，看完阮一峰的教程还是对React有了更多的理解。&lt;/p&gt;
&lt;p&gt;他的教程感觉还是很简洁明了的，误区、重点都有讲到。&lt;/p&gt;
&lt;p&gt;以下为&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/03/re
      
    
    </summary>
    
      <category term="前端" scheme="https://chouxianyu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://chouxianyu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React学习（十）之子组件向父组件传值</title>
    <link href="https://chouxianyu.github.io/2019/01/20/React%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8B%E5%AD%90%E7%BB%84%E4%BB%B6%E5%90%91%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
    <id>https://chouxianyu.github.io/2019/01/20/React学习（十）之子组件向父组件传值/</id>
    <published>2019-01-20T13:18:17.000Z</published>
    <updated>2019-02-08T04:46:41.184Z</updated>
    
    <content type="html"><![CDATA[<p>子组件向父组件传值，一般要通过回调函数的参数。这也是</p><p>父组件定义一个回调函数，并<strong>将其传递给子组件</strong>，然后子组件调用该函数，并<strong>将值通过回调函数的参数传给父组件</strong>。</p><p>这说明了React数据传递的单向性，虽然实现了子组件传值给父组件，但本质还是父组件传给了子组件一个函数。</p><h1 id="父组件定义回调函数"><a href="#父组件定义回调函数" class="headerlink" title="父组件定义回调函数"></a>父组件定义回调函数</h1><p><code>App.js</code>中定义回调函数：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onGreet(age)&#123;  <span class="comment">//父组件定义回调函数</span></span><br><span class="line">    alert(<span class="string">"Son is"</span>+age+<span class="string">"years old!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="父组件传回调函数给子组件"><a href="#父组件传回调函数给子组件" class="headerlink" title="父组件传回调函数给子组件"></a>父组件传回调函数给子组件</h1><p><code>App.js</code>中将定义的回调函数传给子组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Header greet=&#123;<span class="keyword">this</span>.onGreet&#125; name=&#123;<span class="string">"Max"</span>&#125; age=&#123;<span class="number">12</span>&#125; user=&#123;user&#125;&gt;</span><br><span class="line">&lt;p&gt;I am header<span class="string">'s children&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;I am header'</span>s children&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Header&gt;</span><br></pre></td></tr></table></figure><h1 id="子组件调用回调函数"><a href="#子组件调用回调函数" class="headerlink" title="子组件调用回调函数"></a>子组件调用回调函数</h1><h2 id="子组件定义处理回函的函数"><a href="#子组件定义处理回函的函数" class="headerlink" title="子组件定义处理回函的函数"></a>子组件定义处理回函的函数</h2><p><code>Header.js</code>中定义：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleGreet()&#123;</span><br><span class="line">    <span class="keyword">this</span>.props.greet(<span class="keyword">this</span>.state.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子组件调用处理回函的函数"><a href="#子组件调用处理回函的函数" class="headerlink" title="子组件调用处理回函的函数"></a>子组件调用处理回函的函数</h2><p><code>Header.js</code>中定义：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="keyword">this</span>.handleGreet.bind(<span class="keyword">this</span>)&#125; className=<span class="string">"btn btn-primary"</span>&gt;</span><br><span class="line"> Greet</span><br><span class="line">&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><ul><li>点击<code>Greet</code>按钮</li></ul><p><a href="https://i.loli.net/2019/01/20/5c4473d94a6f4.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/01/20/5c4473d94a6f4.png" alt="第一次Greet.png"></a></p><ul><li>点击<code>Older</code>按钮</li></ul><p><a href="https://i.loli.net/2019/01/20/5c4473d945184.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/01/20/5c4473d945184.png" alt="点击Older按钮.png"></a></p><ul><li>点击<code>Greet</code>按钮</li></ul><p><a href="https://i.loli.net/2019/01/20/5c4473d9676e2.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/01/20/5c4473d9676e2.png" alt="第二次Greet.png"></a></p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎转发和评论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;子组件向父组件传值，一般要通过回调函数的参数。这也是&lt;/p&gt;
&lt;p&gt;父组件定义一个回调函数，并&lt;strong&gt;将其传递给子组件&lt;/strong&gt;，然后子组件调用该函数，并&lt;strong&gt;将值通过回调函数的参数传给父组件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这说明了React数
      
    
    </summary>
    
      <category term="前端" scheme="https://chouxianyu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://chouxianyu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React学习（九）之React如何更新DOM</title>
    <link href="https://chouxianyu.github.io/2019/01/19/React%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BReact%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0DOM/"/>
    <id>https://chouxianyu.github.io/2019/01/19/React学习（九）之React如何更新DOM/</id>
    <published>2019-01-19T06:41:46.000Z</published>
    <updated>2019-02-08T04:46:21.333Z</updated>
    
    <content type="html"><![CDATA[<p><strong>React只重新渲染HTML页面中改变的部分</strong>。</p><h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>React有一个概念：虚拟DOM。</p><p>每次操作都会生成一个虚拟DOM，然后通过<code>diff</code>算法和上一次的虚拟DOM进行比较，通过比较可以找到需要重新渲染的组件，然后只重新渲染这些组件，其他不变。</p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>使用chrome浏览器，检查元素，按下图操作</p><p><a href="https://i.loli.net/2019/01/19/5c42c5eb46daf.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/01/19/5c42c5eb46daf.png" alt="rendering.png"></a></p><p>然后页面渲染的地方会被高亮（我这里是绿色）。</p><p>每次点击按钮，会发现<code>your name is Max,your age is XX</code>被高亮，而其他不变。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎转发和评论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;React只重新渲染HTML页面中改变的部分&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h1&gt;&lt;p&gt;React有一个概念：虚拟D
      
    
    </summary>
    
      <category term="前端" scheme="https://chouxianyu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://chouxianyu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React学习（八）之组件的state属性</title>
    <link href="https://chouxianyu.github.io/2019/01/19/React%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%9A%84state%E5%B1%9E%E6%80%A7/"/>
    <id>https://chouxianyu.github.io/2019/01/19/React学习（八）之组件的state属性/</id>
    <published>2019-01-19T06:11:58.000Z</published>
    <updated>2019-02-08T04:46:32.535Z</updated>
    
    <content type="html"><![CDATA[<p>上次讲到state更新，DOM树才会更新，原理是React会监听组件的state。</p><p>现在来试一下。</p><h1 id="Header代码变动"><a href="#Header代码变动" class="headerlink" title="Header代码变动"></a>Header代码变动</h1><p>修改<code>Header.js</code>,有如下三处变动,其中注释掉的代码是上一节的代码。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);  <span class="comment">//执行父类构造方法</span></span><br><span class="line">    <span class="keyword">this</span>.state=&#123;</span><br><span class="line">      age:props.age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//this.age=this.props.age;  </span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onMakeOrder()&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      age:<span class="keyword">this</span>.state.age+<span class="number">3</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//this.age+=3;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">//显示当前Header类的对象</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;your name is &#123;<span class="keyword">this</span>.props.name&#125;,your age is &#123;<span class="keyword">this</span>.state.age&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/表达式中上次是this.props.age</span></span><br></pre></td></tr></table></figure><h1 id="Header-js"><a href="#Header-js" class="headerlink" title="Header.js"></a>Header.js</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);  <span class="comment">//执行父类构造方法</span></span><br><span class="line">    <span class="keyword">this</span>.state=&#123;</span><br><span class="line">      age:props.age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//this.age=this.props.age;  </span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onMakeOrder()&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      age:<span class="keyword">this</span>.state.age+<span class="number">3</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//this.age+=3;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">//显示当前Header类的对象</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">//console.log(this.props);  //显示父组件传来的参数</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Header&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;your name is &#123;this.props.name&#125;,your age is &#123;this.state.age&#125;&lt;/</span>div&gt;</span><br><span class="line">        &#123;<span class="comment">/*&lt;button onClick=&#123;() =&gt; this.onMakeOrder()&#125; className="btn btn-primary"&gt;make me older&lt;/button&gt;*/</span>&#125;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.onMakeOrder.bind(<span class="keyword">this</span>)&#125; className=<span class="string">"btn btn-primary"</span>&gt;make me older  &lt;<span class="regexp">/button&gt; </span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;h4&gt;hobbies&lt;/</span>h4&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.props.user.hobbies.map(<span class="function">(<span class="params">hobby,i</span>) =&gt;</span> &lt;li key=&#123;i&#125;&gt;&#123;hobby&#125;&lt;<span class="regexp">/li&gt;)&#125;</span></span><br><span class="line"><span class="regexp">          &lt;/u</span>l&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;&#123;this.props.children&#125;&lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Header.propTypes=&#123;</span></span><br><span class="line"><span class="regexp">  name: PropTypes.string,</span></span><br><span class="line"><span class="regexp">  age: PropTypes.number,</span></span><br><span class="line"><span class="regexp">  user: PropTypes.object,</span></span><br><span class="line"><span class="regexp">  children: PropTypes.element.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Header;</span></span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>页面中的age会更改哟。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎转发和评论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上次讲到state更新，DOM树才会更新，原理是React会监听组件的state。&lt;/p&gt;
&lt;p&gt;现在来试一下。&lt;/p&gt;
&lt;h1 id=&quot;Header代码变动&quot;&gt;&lt;a href=&quot;#Header代码变动&quot; class=&quot;headerlink&quot; title=&quot;Header代码
      
    
    </summary>
    
      <category term="前端" scheme="https://chouxianyu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://chouxianyu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React学习（七）之事件</title>
    <link href="https://chouxianyu.github.io/2019/01/19/React%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E4%BA%8B%E4%BB%B6/"/>
    <id>https://chouxianyu.github.io/2019/01/19/React学习（七）之事件/</id>
    <published>2019-01-19T06:11:38.000Z</published>
    <updated>2019-02-08T04:46:12.075Z</updated>
    
    <content type="html"><![CDATA[<p>之前组件的功能都是显示字样，现在来加个按钮试试处理<strong>事件</strong>。</p><p>这里用bootstrap写一个好看点的按钮，修改html文件是为了使用bootstrap，如果不使用则不需要修改<code>index.html</code>。</p><h1 id="修改html文件"><a href="#修改html文件" class="headerlink" title="修改html文件"></a>修改html文件</h1><p>百度找到<code>bootstrap</code>的<code>cdn</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将其加入<code>index.html</code>的<code>&lt;head&gt;&lt;/head&gt;</code>里边。</p><h1 id="处理事件"><a href="#处理事件" class="headerlink" title="处理事件"></a>处理事件</h1><h2 id="添加按钮及其响应函数"><a href="#添加按钮及其响应函数" class="headerlink" title="添加按钮及其响应函数"></a>添加按钮及其响应函数</h2><p>在组件<code>Header</code>中添加按钮，向<code>Header.js</code>中加入以下代码，二选一即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onMakeOrder.bind(this)&#125;</span> <span class="attr">className</span>=<span class="string">"btn btn-primary"</span>&gt;</span>make me older<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;() =&gt; <span class="keyword">this</span>.onMakeOrder()&#125; className=<span class="string">"btn btn-primary"</span>&gt;make me older&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><p><code>Header.js</code>代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);  <span class="comment">//执行父类构造方法</span></span><br><span class="line">    <span class="keyword">this</span>.age=<span class="keyword">this</span>.props.age;  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onMakeOrder()&#123;</span><br><span class="line">    <span class="keyword">this</span>.age+=<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//显示当前Header类的对象</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">//console.log(this.props);//显示父组件传来的参数</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Header&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;your name is &#123;this.props.name&#125;,your age is &#123;this.props.age&#125;&lt;/</span>div&gt;</span><br><span class="line">        &#123;<span class="comment">/*</span></span><br><span class="line"><span class="comment">        &lt;button onClick=&#123;() =&gt; this.onMakeOrder()&#125; className="btn btn-  primary"&gt;    </span></span><br><span class="line"><span class="comment">        make me older</span></span><br><span class="line"><span class="comment">        &lt;/button&gt;</span></span><br><span class="line"><span class="comment">        */</span>&#125;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.onMakeOrder.bind(<span class="keyword">this</span>)&#125; className=<span class="string">"btn btn-primary"</span>&gt;</span><br><span class="line">        make me older  </span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">              </span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;h4&gt;hobbies&lt;/</span>h4&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.props.user.hobbies.map(<span class="function">(<span class="params">hobby,i</span>) =&gt;</span> &lt;li key=&#123;i&#125;&gt;&#123;hobby&#125;&lt;<span class="regexp">/li&gt;)&#125;</span></span><br><span class="line"><span class="regexp">          &lt;/u</span>l&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;&#123;this.props.children&#125;&lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Header.propTypes=&#123;</span></span><br><span class="line"><span class="regexp">  name: PropTypes.string,</span></span><br><span class="line"><span class="regexp">  age: PropTypes.number,</span></span><br><span class="line"><span class="regexp">  user: PropTypes.object,</span></span><br><span class="line"><span class="regexp">  children: PropTypes.element.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Header;</span></span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://i.loli.net/2019/01/19/5c42b4e8df6bc.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/01/19/5c42b4e8df6bc.png" alt="点击older按钮效果.png"></a></p><p>从图中可以看到age在不断变大，但网页上的age没有更新，这涉及到react的一个机制。</p><p>react并不是对象的属性改变的时候，DOM会改变。<strong>而是对象的state变化的时候，DOM树才会更新。</strong></p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎转发和评论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前组件的功能都是显示字样，现在来加个按钮试试处理&lt;strong&gt;事件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这里用bootstrap写一个好看点的按钮，修改html文件是为了使用bootstrap，如果不使用则不需要修改&lt;code&gt;index.html&lt;/code&gt;。&lt;/p&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://chouxianyu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://chouxianyu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React学习（六）之父组件向子组件传值</title>
    <link href="https://chouxianyu.github.io/2019/01/19/React%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E7%88%B6%E7%BB%84%E4%BB%B6%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
    <id>https://chouxianyu.github.io/2019/01/19/React学习（六）之父组件向子组件传值/</id>
    <published>2019-01-19T06:10:57.000Z</published>
    <updated>2019-02-08T04:46:36.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件间的关系"><a href="#组件间的关系" class="headerlink" title="组件间的关系"></a>组件间的关系</h1><p>继续参考之前的代码<code>App.js</code>。</p><h2 id="父子关系"><a href="#父子关系" class="headerlink" title="父子关系"></a>父子关系</h2><p><code>App</code>是父，<code>Header</code>和<code>Home</code>相对于<code>App</code>是子。</p><h2 id="兄弟关系"><a href="#兄弟关系" class="headerlink" title="兄弟关系"></a>兄弟关系</h2><p><code>Header</code>和<code>Home</code>是兄弟关系。</p><h1 id="父向子传值"><a href="#父向子传值" class="headerlink" title="父向子传值"></a>父向子传值</h1><h2 id="父传值"><a href="#父传值" class="headerlink" title="父传值"></a>父传值</h2><p><strong>父组件向子组件传值是父组件在调用子组件时</strong>，进行传值，以下两种方法都可以，<code>App</code>向<code>Header</code>传值，下边的代码是写在<code>App.js</code>里的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Header</span> <span class="attr">name</span>=<span class="string">&#123;</span>"<span class="attr">Max</span>"&#125; <span class="attr">age</span>=<span class="string">&#123;</span>"<span class="attr">12</span>"&#125; <span class="attr">user</span>=<span class="string">&#123;user&#125;/</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Header name=&#123;<span class="string">"Max"</span>&#125; age=&#123;<span class="number">12</span>&#125; user=&#123;user&#125;&gt;</span><br><span class="line">  &lt;p&gt;I am child&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Header&gt;</span><br></pre></td></tr></table></figure><p>这里使用第二种方法。</p><h2 id="子使用值"><a href="#子使用值" class="headerlink" title="子使用值"></a>子使用值</h2><p><strong>子组件使用父组件传过来的值通过<code>props</code>使用</strong>，例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;your name is &#123;<span class="keyword">this</span>.props.name&#125;,your age is &#123;<span class="keyword">this</span>.props.age&#125;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p><code>App.js</code>代码：注意第7行和16行</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./components/Header'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  render() &#123;</span><br><span class="line">      <span class="comment">//注意这里</span></span><br><span class="line">    <span class="keyword">const</span> user=&#123;</span><br><span class="line">      name: <span class="string">"Anna"</span>,</span><br><span class="line">      hobbies: [<span class="string">"Sports"</span>, <span class="string">"Reading"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Header name=&#123;<span class="string">"Max"</span>&#125; age=&#123;<span class="string">"12"</span>&#125; user=&#123;user&#125;/&gt;<span class="comment">//传值 age=&#123;12&#125;也可以</span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;h1&gt;I am App&lt;/</span>h1&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Home /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><code>Header.js</code>代码：注意第6行和<code>return</code>的内容</p><p><strong><code>this.props</code>就是父组件传过来的值</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Header&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;your name is &#123;this.props.name&#125;,your age is &#123;this.props.age&#125;&lt;/</span>div&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h4&gt;hobbies&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">          &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.props.user.hobbies.map((hobby,i) =&gt; &lt;li key=&#123;i&#125;&gt;&#123;hobby&#125;&lt;/</span>li&gt;)&#125;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Header;</span></span><br></pre></td></tr></table></figure><h1 id="参数类型检查"><a href="#参数类型检查" class="headerlink" title="参数类型检查"></a>参数类型检查</h1><p>JS是动态语言。</p><p>在这里我们对<code>App</code>传过来的值进行检查，理所当然要在<code>Header</code>中检查。</p><p>在<code>Header.js</code>中引入静态检查：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br></pre></td></tr></table></figure><p>现在开始检查，设置<code>Header</code>接收到的参数的类型：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Header.propTypes=&#123;</span><br><span class="line">  name: PropTypes.string,</span><br><span class="line">  age: PropTypes.number,</span><br><span class="line">  user: PropTypes.object,</span><br><span class="line">  children: PropTypes.element.isRequired</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>其中<code>children</code>是给<code>Header</code>传参时<code>Header</code>闭合标签里的东西。</strong></p><p>最终<code>Header.js</code>代码是这样：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Header&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;your name is &#123;this.props.name&#125;,your age is &#123;this.props.age&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h4&gt;hobbies&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">          &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.props.user.hobbies.map((hobby,i) =&gt; &lt;li key=&#123;i&#125;&gt;&#123;hobby&#125;&lt;/</span>li&gt;)&#125;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Header.propTypes=&#123;/</span><span class="regexp">/注意p是小写</span></span><br><span class="line"><span class="regexp">  name: PropTypes.string,</span></span><br><span class="line"><span class="regexp">  age: PropTypes.number,</span></span><br><span class="line"><span class="regexp">  user: PropTypes.object,</span></span><br><span class="line"><span class="regexp">  children: PropTypes.element.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Header;</span></span><br></pre></td></tr></table></figure><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎转发和评论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件间的关系&quot;&gt;&lt;a href=&quot;#组件间的关系&quot; class=&quot;headerlink&quot; title=&quot;组件间的关系&quot;&gt;&lt;/a&gt;组件间的关系&lt;/h1&gt;&lt;p&gt;继续参考之前的代码&lt;code&gt;App.js&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;父子关系&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="前端" scheme="https://chouxianyu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://chouxianyu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React学习（五）之输出动态数据</title>
    <link href="https://chouxianyu.github.io/2019/01/18/React%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%E8%BE%93%E5%87%BA%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE/"/>
    <id>https://chouxianyu.github.io/2019/01/18/React学习（五）之输出动态数据/</id>
    <published>2019-01-18T14:02:43.000Z</published>
    <updated>2019-02-08T04:46:28.845Z</updated>
    
    <content type="html"><![CDATA[<p>输出动态数据就是输出表达式。</p><p>表达式就是2+2，变量等等。</p><p>现在在<code>Home.js</code>中输出动态数据。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>注意代码中的第19行</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> content=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">let</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">      content=<span class="string">"cbh"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      content=<span class="string">"cxy"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Home&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &#123;content&#125;</span></span><br><span class="line"><span class="regexp">            </span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home;</span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><a href="https://i.loli.net/2019/01/18/5c41dc5411332.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/01/18/5c41dc5411332.png" alt="输出动态数据效果展示.png"></a></p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎转发和评论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;输出动态数据就是输出表达式。&lt;/p&gt;
&lt;p&gt;表达式就是2+2，变量等等。&lt;/p&gt;
&lt;p&gt;现在在&lt;code&gt;Home.js&lt;/code&gt;中输出动态数据。&lt;/p&gt;
&lt;h1 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="前端" scheme="https://chouxianyu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://chouxianyu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React学习（四）之多个组件</title>
    <link href="https://chouxianyu.github.io/2019/01/18/React%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E5%A4%9A%E4%B8%AA%E7%BB%84%E4%BB%B6/"/>
    <id>https://chouxianyu.github.io/2019/01/18/React学习（四）之多个组件/</id>
    <published>2019-01-18T13:14:32.000Z</published>
    <updated>2019-02-08T04:46:48.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新建组件"><a href="#新建组件" class="headerlink" title="新建组件"></a>新建组件</h1><p>在<code>src</code>目录下新建文件夹<code>components</code>，用来存放定义组件的JS代码。</p><p>在<code>components</code>文件夹中定义两个组件：<code>Home.js</code>和<code>Header.js</code>，代码几乎和<code>App.js</code>一样，只改变了类名和<code>return</code>的内容。</p><p><strong>提示：由于某些原因，之后的代码中可能会有标签匹配出错的问题…..</strong></p><h2 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h2><p>注意<code>Header.js</code>、<code>Home.js</code>和<code>App.js</code>在目录中的位置。</p><p><img src="https://i.loli.net/2019/01/18/5c41cd2d17a60.png" alt="新组件文件目录结构.png"></p><h2 id="Home-js"><a href="#Home-js" class="headerlink" title="Home.js"></a>Home.js</h2><p>显示Home字样。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Home&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home;</span><br></pre></td></tr></table></figure><h2 id="Header-js"><a href="#Header-js" class="headerlink" title="Header.js"></a>Header.js</h2><p>显示Header字样。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Header&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure><h1 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h1><p>在<code>App</code>中使用定义的两个组件，先使用<code>Header</code>，接着显示<code>I am App</code>，接着再使用<code>Home</code>。</p><p><code>App.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./components/Header'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Header /&gt;<span class="comment">//注意这里！</span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;h1&gt;I am App&lt;/</span>h1&gt;<span class="comment">//注意这里！</span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Home /</span>&gt;<span class="comment">//注意这里！</span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="https://i.loli.net/2019/01/18/5c41cd2d5425e.png" alt="多个组件效果展示.png"></p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎转发和评论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;新建组件&quot;&gt;&lt;a href=&quot;#新建组件&quot; class=&quot;headerlink&quot; title=&quot;新建组件&quot;&gt;&lt;/a&gt;新建组件&lt;/h1&gt;&lt;p&gt;在&lt;code&gt;src&lt;/code&gt;目录下新建文件夹&lt;code&gt;components&lt;/code&gt;，用来存放定义组件的JS代码
      
    
    </summary>
    
      <category term="前端" scheme="https://chouxianyu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://chouxianyu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React学习（三）之第一个组件</title>
    <link href="https://chouxianyu.github.io/2019/01/18/React%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6/"/>
    <id>https://chouxianyu.github.io/2019/01/18/React学习（三）之第一个组件/</id>
    <published>2019-01-18T13:13:36.000Z</published>
    <updated>2019-02-08T04:46:16.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p>之前通过<code>create-react-app</code>创建了一个<code>hello-react</code>项目，不知道的可以看博客里之前的的<code>React</code>文章。</p><p>暂时只关注三个文件：<code>src\index.js</code>、<code>src\App.js</code>和<code>public\index.html</code>。</p><h1 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h1><h2 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p><code>App.js</code>定义页面中的一个组件，也就是定义页面中要放的一个零件。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>定义了一个显示React的logo的组件。</p><p>注意下我加的代码注释</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;  <span class="comment">//图片</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>; <span class="comment">//css</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;header className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">          &lt;img src=&#123;logo&#125; className=<span class="string">"App-logo"</span> alt=<span class="string">"logo"</span> /&gt;</span><br><span class="line">          &lt;p&gt;</span><br><span class="line">            Edit &lt;code&gt;src/App.js&lt;<span class="regexp">/code&gt; and save to reload.</span></span><br><span class="line"><span class="regexp">          &lt;/</span>p&gt;</span><br><span class="line">          &lt;a</span><br><span class="line">            className=<span class="string">"App-link"</span></span><br><span class="line">            href=<span class="string">"https://reactjs.org"</span></span><br><span class="line">            target=<span class="string">"_blank"</span></span><br><span class="line">            rel=<span class="string">"noopener noreferrer"</span></span><br><span class="line">          &gt;</span><br><span class="line">            Learn React</span><br><span class="line">          &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>header&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p><code>index.html</code>进行页面内容的布局，也就是哪里放什么标签。</p><p><code>index.html</code>是显示的页面，用户通过检查元素是可以看到html代码的，所以放在<code>public</code>文件夹下吧。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>主要看<code>body</code>部分，只放了一个<code>div</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"%PUBLIC_URL%/favicon.ico"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"theme-color"</span> <span class="attr">content</span>=<span class="string">"#000000"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      manifest.json provides metadata used when your web app is added to the</span></span><br><span class="line"><span class="comment">      homescreen on Android. See https://developers.google.com/web/fundamentals/web-app-manifest/</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"%PUBLIC_URL%/manifest.json"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      Notice the use of %PUBLIC_URL% in the tags above.</span></span><br><span class="line"><span class="comment">      It will be replaced with the URL of the `public` folder during the build.</span></span><br><span class="line"><span class="comment">      Only files inside the `public` folder can be referenced from the HTML.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will</span></span><br><span class="line"><span class="comment">      work correctly both with client-side routing and a non-root public URL.</span></span><br><span class="line"><span class="comment">      Learn how to configure a non-root public URL by running `npm run build`.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>You need to enable JavaScript to run this app.<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      This HTML file is a template.</span></span><br><span class="line"><span class="comment">      If you open it directly in the browser, you will see an empty page.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      You can add webfonts, meta tags, or analytics to this file.</span></span><br><span class="line"><span class="comment">      The build step will place the bundled scripts into the &lt;body&gt; tag.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      To begin the development, run `npm start` or `yarn start`.</span></span><br><span class="line"><span class="comment">      To create a production bundle, use `npm run build` or `yarn build`.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><p><code>index.js</code>连接<code>App.js</code>和<code>index.html</code>，通过将组件放入各个标签中，起到连接上边两个文件的作用。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p>主要内容是第11行那里。</p><p>注意下我加的代码注释。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入react</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="comment">//导入css，.代表当前目录，..代表上一级目录</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"><span class="comment">//导入组件，变成App，其实下一行的'./App'省略了.js后缀，本来应该是'./App.js'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> serviceWorker <span class="keyword">from</span> <span class="string">'./serviceWorker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置挂载点，把组件App挂到root上</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById('root'));</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// If you want your app to work offline and load faster, you can change</span></span><br><span class="line"><span class="xml">// unregister() to register() below. Note this comes with some pitfalls.</span></span><br><span class="line"><span class="xml">// Learn more about service workers: http://bit.ly/CRA-PWA</span></span><br><span class="line"><span class="xml">serviceWorker.unregister();</span></span><br></pre></td></tr></table></figure><h1 id="自己的第一个组件"><a href="#自己的第一个组件" class="headerlink" title="自己的第一个组件"></a>自己的第一个组件</h1><p>也就是自己写一个组件嘛，组件是在<code>App.js</code>中定义的，所以修改<code>App.js</code>。</p><h2 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h2><p>在这里将组件的默认内容删除，也就是<code>render</code>函数中<code>return</code>的东西，然后自己写。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;  <span class="comment">//图片</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>; <span class="comment">//css</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;hello world&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>代码里<code>div</code>中用的是<code>className</code>是因为<code>class</code>是JS的保留字，所以要用<code>className</code>。</p><p>代码修改之后效果在此就不展示了，显示了一个hello world。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎转发和评论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h1&gt;&lt;p&gt;之前通过&lt;code&gt;create-react-app&lt;/code&gt;创建了一个&lt;code&gt;hello-react&lt;/code&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://chouxianyu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://chouxianyu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React学习（二）之create-react-app</title>
    <link href="https://chouxianyu.github.io/2019/01/18/React%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8Bcreate-react-app/"/>
    <id>https://chouxianyu.github.io/2019/01/18/React学习（二）之create-react-app/</id>
    <published>2019-01-18T02:37:52.000Z</published>
    <updated>2019-02-08T04:46:25.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装create-react-app"><a href="#安装create-react-app" class="headerlink" title="安装create-react-app"></a>安装create-react-app</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>首先要确保你的电脑上有<code>Nodejs</code>和<code>npm</code> 。</p><p>检查方法：打开<code>cmd</code>(也就是命令行、终端)，输入<code>node -v</code>和<code>npm -v</code>。</p><p>可分别查看<code>Nodejs</code>和<code>npm</code>的版本，有版本环境肯定就配好啦。似乎现在的<code>Nodejs</code>会带着<code>npm</code>。</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>打开<code>cmd</code>，输入<code>npm install -g create-react-app</code></p><p><code>-g</code>表示全局，我们可以在任意地方使用<code>npm</code>。</p><h1 id="创建react项目"><a href="#创建react项目" class="headerlink" title="创建react项目"></a>创建react项目</h1><p><strong>我们可以通过<code>create-react-app</code>指令创建一个<code>react</code>项目</strong>。</p><h2 id="终端中进入项目创建位置"><a href="#终端中进入项目创建位置" class="headerlink" title="终端中进入项目创建位置"></a>终端中进入项目创建位置</h2><p>创建的项目的位置取决于在<code>cmd</code>中操作的位置。</p><p>最近在用<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a>，在VSCode中可以直接右击<code>工作空间</code>的<code>文件夹</code>，再点击<code>在终端中打开</code>，即可在终端中操作该文件夹。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><a href="https://i.loli.net/2019/01/18/5c413baba8af1.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/01/18/5c413baba8af1.png" alt="创建react项目.png"></a></p><h1 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h1><p>接着上一步</p><p><a href="https://i.loli.net/2019/01/18/5c413bab9d390.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/01/18/5c413bab9d390.png" alt="启动react项目.png"></a></p><h1 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h1><p><a href="https://i.loli.net/2019/01/18/5c413baba7225.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/01/18/5c413baba7225.png" alt="react项目运行效果.png"></a></p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎转发和评论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装create-react-app&quot;&gt;&lt;a href=&quot;#安装create-react-app&quot; class=&quot;headerlink&quot; title=&quot;安装create-react-app&quot;&gt;&lt;/a&gt;安装create-react-app&lt;/h1&gt;&lt;h2 id=&quot;环
      
    
    </summary>
    
      <category term="前端" scheme="https://chouxianyu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://chouxianyu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>hexo不蒜子网站访问量统计失效</title>
    <link href="https://chouxianyu.github.io/2019/01/17/hexo%E4%B8%8D%E8%92%9C%E5%AD%90%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%A4%B1%E6%95%88/"/>
    <id>https://chouxianyu.github.io/2019/01/17/hexo不蒜子网站访问量统计失效/</id>
    <published>2019-01-17T15:34:23.000Z</published>
    <updated>2019-01-22T07:30:12.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>hexo博客的<a href="http://ibruce.info/" target="_blank" rel="noopener">不蒜子</a>网站访问量统计最近失效了。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>不蒜子域名更改了，所以需要修改博客的配置文件。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>进入<strong>博客目录</strong>下<code>\themes\next\layout\_third-party\analytics</code>，（我用的是next主题，如果用的是别的主题，就进入对应主题文件夹。）</p><p>打开文件<code>busuanzi-counter.swig</code></p><p>将<code>&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code></p><p>修改为<code>&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code></p><p>不知道为什么空格显示的比较宽，但经验证，复制下来是一个正常的空格，可以复制下来使用。</p><p>其他不变。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;hexo博客的&lt;a href=&quot;http://ibruce.info/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;不蒜
      
    
    </summary>
    
      <category term="hexo" scheme="https://chouxianyu.github.io/categories/hexo/"/>
    
    
      <category term="Bug" scheme="https://chouxianyu.github.io/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>bash: hexo: command not found</title>
    <link href="https://chouxianyu.github.io/2019/01/17/bash-hexo-command-not-found/"/>
    <id>https://chouxianyu.github.io/2019/01/17/bash-hexo-command-not-found/</id>
    <published>2019-01-17T15:05:33.000Z</published>
    <updated>2019-01-20T14:02:22.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>很久没写博客了，今天用<code>hexo</code>新建文章时<code>git</code>报错：</p><p><code>bash: hexo: command not found</code></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>百度之后，将<code>D:\WorkingSoftware\GithubBlog\node_modules\.bin</code>添加进PATH，问题解决。</p><p>加的时候发现path里确实没有这个路径……..不知道为什么会没有</p><p>路径中的<code>GithubBlog</code>是我的博客文件夹，你用的时候改成你的路径，即<code>XXX你的Blog目录XXX\node_modules\.bin</code></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>可能是因为我今天更新<code>npm</code>了？</p><p>或者是因为我这两天改了计算机用户名(用户名在其他地方用到了，中文是宽字符，会出错)，造成了很多麻烦，差点edge都坏了。</p><p><strong>所以告诫大家用户名尽量一开始就用英文，不要用中文</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;很久没写博客了，今天用&lt;code&gt;hexo&lt;/code&gt;新建文章时&lt;code&gt;git&lt;/code&gt;报错：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
      
    
    </summary>
    
      <category term="hexo" scheme="https://chouxianyu.github.io/categories/hexo/"/>
    
    
      <category term="Bug" scheme="https://chouxianyu.github.io/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>React学习（一）之Hello React</title>
    <link href="https://chouxianyu.github.io/2019/01/17/React%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BHello-React/"/>
    <id>https://chouxianyu.github.io/2019/01/17/React学习（一）之Hello-React/</id>
    <published>2019-01-17T15:03:29.000Z</published>
    <updated>2019-02-08T04:46:03.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>以下是html代码，复制代码到html文件，可直接运行。</p><p>(请关注<code>&lt;body&gt;&lt;/body&gt;</code>里的JS代码和注释)：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;helloReact&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line">        ReactDOM.render(        </span><br><span class="line">            <span class="comment">//代码块①开始</span></span><br><span class="line">        &lt;h1&gt;hello world!&lt;/h1&gt;,      </span><br><span class="line">            <span class="comment">//代码块①结束，注意结束有个逗号</span></span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>)<span class="comment">//设置挂载点</span></span><br><span class="line"><span class="comment">//上一行代码(结尾没有分号)将代码块①放入上边的 &lt;div id="app"&gt;&lt;/div&gt;，F12检查元素可以看到效果。</span></span><br><span class="line">        )</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/两个和react相关的脚本文件</span></span><br><span class="line"><span class="regexp">    &lt;script src="https:/</span><span class="regexp">/cdn.bootcss.com/</span>react/<span class="number">16.7</span><span class="number">.0</span>/umd/react.development.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>https:<span class="comment">//cdn.bootcss.com/react-dom/16.7.0/umd/react-dom.development.js"&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//babel文件，作用是解码，详情请参考ES6</span></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/babel-standalone/7.0.0-beta.3/babel.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h1 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h1><p><img src="https://i.loli.net/2019/01/17/5c40945603277.png" alt="效果.png"></p><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><h2 id="F12检查元素"><a href="#F12检查元素" class="headerlink" title="F12检查元素"></a>F12检查元素</h2><p>可以看到<code>代码块①</code>被添加进<code>id</code>为<code>app</code>的<code>&lt;div&gt;</code></p><p><img src="https://i.loli.net/2019/01/17/5c40921611250.png" alt="代码块①被添加进id为app的div"></p><h2 id="转码效果"><a href="#转码效果" class="headerlink" title="转码效果"></a>转码效果</h2><p><a href="https://babeljs.io/" target="_blank" rel="noopener">babel官网</a>转码（进入官网后点击Try it out）。关于什么是babel，参看ES6（我还不会hh）。</p><p>左边是JSX语法，方便我们写代码。</p><p><img src="https://i.loli.net/2019/01/17/5c409321e7087.png" alt="通过babel转码"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;p&gt;以下是html代码，复制代码到html文件，可直接运行。&lt;/p&gt;
&lt;p&gt;(请关注&lt;code&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt
      
    
    </summary>
    
      <category term="前端" scheme="https://chouxianyu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://chouxianyu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>java.util.NoSuchElementException</title>
    <link href="https://chouxianyu.github.io/2018/11/03/java.util.NoSuchElementException/"/>
    <id>https://chouxianyu.github.io/2018/11/03/java.util.NoSuchElementException/</id>
    <published>2018-11-03T02:23:02.000Z</published>
    <updated>2019-01-20T13:59:47.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h1><p>Java商店作业不同函数里需要获取用户输入，用<code>Scanner</code>的时候,出现了异常<code>java.util.NoSuchElementException</code></p><p>作业中代码模式如下，<code>func1</code>和<code>func2</code>中都使用<code>Scanner</code>并关闭它。然后在main中依次调用<code>func1</code>和<code>func2</code>，<code>func2</code>产生异常。说<code>func1</code>和<code>func2</code>其实不合适，应该加个括号……..懒得加了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Demo.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出用户输入，替代作业里的使用Scanner</span></span><br><span class="line">System.out.print(<span class="string">"Func1请输入内容："</span>);</span><br><span class="line">System.out.println(<span class="string">"Func1输出"</span>+sc.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭Scanner</span></span><br><span class="line">sc.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出用户输入，替代作业里的使用Scanner</span></span><br><span class="line">System.out.print(<span class="string">"Func2请输入内容："</span>);</span><br><span class="line">System.out.println(<span class="string">"Func2输出"</span>+sc.nextInt());</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭Scanner</span></span><br><span class="line">sc.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Test t=<span class="keyword">new</span> Test();</span><br><span class="line">t.func1();</span><br><span class="line">t.func2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Console输出如下：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Func1请输入内容：小姐，请问你喜欢吃青椒吗？</span></span><br><span class="line"><span class="comment">Func1输出：小姐，请问你喜欢吃青椒吗？</span></span><br><span class="line"><span class="comment">Func2请输入内容：Exception in thread "main" java.util.NoSuchElementException</span></span><br><span class="line"><span class="comment">at java.base/java.util.Scanner.throwFor(Unknown Source)</span></span><br><span class="line"><span class="comment">at java.base/java.util.Scanner.next(Unknown Source)</span></span><br><span class="line"><span class="comment">at java.base/java.util.Scanner.nextInt(Unknown Source)</span></span><br><span class="line"><span class="comment">at java.base/java.util.Scanner.nextInt(Unknown Source)</span></span><br><span class="line"><span class="comment">at Test.func2(Demo.java:21)</span></span><br><span class="line"><span class="comment">at Demo.main(Demo.java:31)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="异常产生原因"><a href="#异常产生原因" class="headerlink" title="异常产生原因"></a>异常产生原因</h1><p><code>func1</code>中<code>sc.close();</code>语句关闭了<code>Scanner</code>，<code>func2</code>中使用<code>Scanner</code>产生异常</p><p>因为<code>System.in</code>是<code>System</code>类的静态成员，所以不同<code>Scanner</code>对象内的in<code>是同一个</code>in`</p><p><code>func1</code>和<code>func2</code>中都用<code>System.in</code>创建了<code>Scanner</code></p><p><strong><code>func1</code>打开<code>Scanner</code>后将其关闭，这里间接地将<code>System.in</code>也关闭了</strong></p><p><code>func1</code>结束后运行<code>func2</code>，这时再调用<code>nextInt</code>，在<code>System.in</code>已经关闭了的情况下，不能读取到任何数据，就会产生 <code>java.util.NoSuchElementException</code></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>系统资源一旦释放就不能再开启了，所以只有确定不在使用系统的时候，才能将流关闭</p><p>所以应该在整个程序结束时释放<code>Scanner</code>等资源，而不是某个函数中每次使用<code>Scanner</code>等资源后都释放一次</p><p>问题引入中的代码只是个模式，上边的两句话用在作业实际代码里就好了</p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner()"></a><code>Scanner()</code></h2><p>创建<code>Scanner</code>对象代码为<code>Scanner sc=new Scanner(System.in);</code>构造函数源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Scanner</span><span class="params">(InputStream source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> InputStreamReader(source), WHITESPACE_PATTERN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可看出是调用了另外一个构造函数，继续查看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Scanner</span><span class="params">(Readable source, Pattern pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> source != <span class="keyword">null</span> : <span class="string">"source should not be null"</span>;</span><br><span class="line">        <span class="keyword">assert</span> pattern != <span class="keyword">null</span> : <span class="string">"pattern should not be null"</span>;</span><br><span class="line">        <span class="keyword">this</span>.source = source;<span class="comment">//看这句</span></span><br><span class="line">        delimPattern = pattern;</span><br><span class="line">        buf = CharBuffer.allocate(BUFFER_SIZE);</span><br><span class="line">        buf.limit(<span class="number">0</span>);</span><br><span class="line">        matcher = delimPattern.matcher(buf);</span><br><span class="line">        matcher.useTransparentBounds(<span class="keyword">true</span>);</span><br><span class="line">        matcher.useAnchoringBounds(<span class="keyword">false</span>);</span><br><span class="line">        useLocale(Locale.getDefault(Locale.Category.FORMAT));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>至少知道了<code>Scanner</code>内部还是用到了流，算是对流进行了封装吧，使用起来更方便一些</p><h2 id="close"><a href="#close" class="headerlink" title="close()"></a><code>close()</code></h2><p>调用语句为<code>sc.close();</code>，查看<code>close()</code>源码，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (closed)                             <span class="comment">//1.通过closed标志校验Scanner是否已关闭；</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (source <span class="keyword">instanceof</span> Closeable) &#123;      <span class="comment">//2.执行source的close()方法，</span></span><br><span class="line">            <span class="keyword">try</span> &#123;                               <span class="comment">//将source关闭（这里为System.in）；</span></span><br><span class="line">                ((Closeable)source).close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                lastException = ioe;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sourceClosed = <span class="keyword">true</span>;    <span class="comment">//3.将sourceClosed标志设置为true，表示source已关闭；</span></span><br><span class="line">        source = <span class="keyword">null</span>;          <span class="comment">//4.将source置为null，不再引用，处于可回收状态；</span></span><br><span class="line">        closed = <span class="keyword">true</span>;          <span class="comment">//5.将closed标志设置为true，表示Scanner已关闭；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以知道关闭<code>Scanner</code>的时候，<code>((Closeable)source).close();</code>把<code>System.in</code>关闭了</p><p>关闭后下次想再使用就当然有错了~（除非构造函数里还再把<code>in</code>给打开，但这样也不太合理）</p><p>其实如果还可以再仔细看看<code>Scanner</code>的构造方法，和<code>Scanner</code>的<code>next()</code>，能力有限，点到为止</p><p>作者：<a href="https://chouxianyu.github.io/">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io/2018/11/03/java.util.NoSuchElementException/#more">https://chouxianyu.github.io/2018/11/03/java.util.NoSuchElementException/#more</a></p><p>欢迎转发和评论</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题引入&quot;&gt;&lt;a href=&quot;#问题引入&quot; class=&quot;headerlink&quot; title=&quot;问题引入&quot;&gt;&lt;/a&gt;问题引入&lt;/h1&gt;&lt;p&gt;Java商店作业不同函数里需要获取用户输入，用&lt;code&gt;Scanner&lt;/code&gt;的时候,出现了异常&lt;code&gt;java
      
    
    </summary>
    
      <category term="Java" scheme="https://chouxianyu.github.io/categories/Java/"/>
    
    
      <category term="Bug" scheme="https://chouxianyu.github.io/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>Java字节流read函数</title>
    <link href="https://chouxianyu.github.io/2018/09/22/Java%E5%AD%97%E8%8A%82%E6%B5%81read%E5%87%BD%E6%95%B0/"/>
    <id>https://chouxianyu.github.io/2018/09/22/Java字节流read函数/</id>
    <published>2018-09-22T14:50:12.000Z</published>
    <updated>2019-01-20T13:59:31.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h1><p>做Java作业从标准输入流获取用户输入，用到了<code>System.in.read()</code>,然后出现了bug。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//随机生成一个小写字母，用户猜5次，读取用户输入，并判断是否猜对</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LetterGuessing</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch,answer;</span><br><span class="line"><span class="comment">//随机生成字母</span></span><br><span class="line">answer=(<span class="keyword">char</span>)(Math.random()*<span class="number">26</span>+<span class="string">'a'</span>);</span><br><span class="line">System.out.print(<span class="string">"请输入一个小写字母："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++) &#123;</span><br><span class="line"><span class="comment">//获取用户输入，可能抛出异常</span></span><br><span class="line">ch=(<span class="keyword">char</span>)System.in.read();</span><br><span class="line"><span class="comment">//比较大小</span></span><br><span class="line"><span class="keyword">if</span>(ch == answer)&#123;</span><br><span class="line">System.out.println(<span class="string">"恭喜，正确！用了"</span>+i+<span class="string">"次猜对"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch &gt; answer)</span><br><span class="line">System.out.println(<span class="string">"您猜大了，还有"</span>+ (<span class="number">5</span>-i) +<span class="string">"次机会"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">"您猜小了，还有"</span>+ (<span class="number">5</span>-i) +<span class="string">"次机会"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入字符<code>&#39;a&#39;</code>，按下Enter,却没有等我下次输入，循环就运行了三次。</p><h1 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h1><p><code>System.in.read()</code>按字节读，一次读入一个字节。后边有详细讲解。</p><p>经调试，可知三次循环中<code>ch</code>分别为<code>a</code>,<code>\r</code>,<code>\n</code>。</p><p><strong>为什么a+Enter,会变成a\r\n呢</strong></p><p><strong>Windows下存在两种文件读写方式，一个是二进制方式，另一种是文本方式</strong>。</p><p><strong>文本方式</strong>中写时”换行”会变成”回车-换行”，即\r\n；读时”回车-换行”会变成”换行”。</p><p><strong>二进制方式</strong>中读写是严格按照一个字节一个字节的方式进行的。</p><p><strong>在这里虽然没有用到文件，但道理应该是一样的</strong></p><p>用<code>read()</code>函数是按照一个字节一个字节读取的，即二进制方式。</p><p>可能可以推导出，我们向输入流中输入数据默认是按照文本方式。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>在代码第10行后，加两行<code>System.in.read()</code>;</p><p>目的是读取掉输入流中的/r和/n。</p><p>这种方法的局限性就是输入字母前后不能加空格，因为它不会使空格从输入流中删除。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>不用<code>read()</code>读取，用以下代码代替</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">ch=input.next().charAt(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这种方法就比较好，读取字符串（忽略空格和换行，空格和换行不会留在输入流里），然后取字符串的第一个字符。</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="System-in"><a href="#System-in" class="headerlink" title="System.in"></a><code>System.in</code></h2><p>官方文档：<a href="https://docs.oracle.com/javase/10/docs/api/java/lang/System.html#in" target="_blank" rel="noopener">https://docs.oracle.com/javase/10/docs/api/java/lang/System.html#in</a></p><p><code>System</code>是个类，in是<code>System</code>的一个成员，官方介绍如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> InputStream in</span><br></pre></td></tr></table></figure><p>The “standard” input stream. This stream is already  open and ready to supply input data. Typically this stream  corresponds to keyboard input or another input source specified by  the host environment or user.</p><p><code>in</code>是一个<code>InputStream</code>类型的对象,所以只需要了解<code>InputStream</code>即可。</p><h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a><code>InputStream</code></h2><p>官方文档： <a href="https://docs.oracle.com/javase/10/docs/api/java/io/InputStream.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/10/docs/api/java/io/InputStream.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream</span>//抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span>//继承<span class="title">Object</span>类</span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Closeable</span>//实现<span class="title">Closeable</span>接口</span></span><br></pre></td></tr></table></figure><p>官方介绍如下：</p><p>This abstract class is the superclass of all classes representing  an input stream of bytes.</p><p>翻译为：这个抽象类是所有字节流类的父类。</p><p>字节流的含义：<strong>读取方式为一个字节一个字节地读取</strong>,而字符流是二个字节二个字节的读。</p><p>Applications that need to define a subclass of <code>InputStream</code>  must always provide a method that returns the next byte of input.</p><p>翻译为：需要定义一个<code>InputStream</code>子类的应用必须提供一个返回输入下一字节的方法（函数）。</p><h2 id="read"><a href="#read" class="headerlink" title="read()"></a><code>read()</code></h2><p>官方文档：<a href="https://docs.oracle.com/javase/10/docs/api/java/io/InputStream.html#read(" target="_blank" rel="noopener">https://docs.oracle.com/javase/10/docs/api/java/io/InputStream.html#read(</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure><p>Reads the next byte of data from the input stream. The value byte is returned as an <code>int</code> in the range <code>0</code> to<code>255</code>.</p><p>这个是重点，它<strong>返回下一字节的ASCII码</strong></p><p>If no byte is available because the end of the stream has been reached, the value <code>-1</code> is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.</p><p>A subclass must provide an implementation of this method.</p><p><strong>Returns:</strong></p><p>the next byte of data, or <code>-1</code> if the end of the stream is reached.</p><p><strong>Throws:</strong></p><p><code>IOException</code> - if an I/O error occurs.</p><p>作者：<a href="https://chouxianyu.github.io/">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io/2018/09/22/Java字节流read函数/#more">https://chouxianyu.github.io/2018/09/22/Java字节流read函数/#more</a></p><p>欢迎转发和评论</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题引入&quot;&gt;&lt;a href=&quot;#问题引入&quot; class=&quot;headerlink&quot; title=&quot;问题引入&quot;&gt;&lt;/a&gt;问题引入&lt;/h1&gt;&lt;p&gt;做Java作业从标准输入流获取用户输入，用到了&lt;code&gt;System.in.read()&lt;/code&gt;,然后出现了bug。
      
    
    </summary>
    
      <category term="Java" scheme="https://chouxianyu.github.io/categories/Java/"/>
    
    
      <category term="Bug" scheme="https://chouxianyu.github.io/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>C++获取文件夹下所有文件的路径</title>
    <link href="https://chouxianyu.github.io/2018/09/09/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <id>https://chouxianyu.github.io/2018/09/09/如何获取文件夹下所有文件的路径/</id>
    <published>2018-09-09T09:46:38.000Z</published>
    <updated>2019-01-20T13:24:13.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><code>getFiles()</code>函数的作用：</p><p>path是一个文件夹路径，函数在<code>path</code>文件夹下寻找所有文件（包括子文件夹下的文件），然后将所有文件的路径存入<code>files</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;io.h&gt;//实现功能需要包含头文件io.h</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getFiles</span><span class="params">(<span class="built_in">string</span> path, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; files)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">intptr_t</span>   hFile = <span class="number">0</span>;<span class="comment">//文件句柄，过会儿用来查找</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">finddata_t</span> <span class="title">fileinfo</span>;</span><span class="comment">//文件信息</span></span><br><span class="line"><span class="built_in">string</span> p;</span><br><span class="line"><span class="keyword">if</span> ((hFile = _findfirst(p.assign(path).append(<span class="string">"\\*"</span>).c_str(), &amp;fileinfo)) != <span class="number">-1</span>)</span><br><span class="line">     <span class="comment">//如果查找到第一个文件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((fileinfo.attrib &amp;  _A_SUBDIR))<span class="comment">//如果是文件夹</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(fileinfo.name, <span class="string">"."</span>) != <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(fileinfo.name, <span class="string">".."</span>) != <span class="number">0</span>)</span><br><span class="line">getFiles(p.assign(path).append(<span class="string">"\\"</span>).append(fileinfo.name), files);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//如果是文件</span></span><br><span class="line">&#123;</span><br><span class="line">files.push_back(p.assign(path).append(<span class="string">"\\"</span>).append(fileinfo.name));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (_findnext(hFile, &amp;fileinfo) == <span class="number">0</span>);<span class="comment">//能寻找到其他文件</span></span><br><span class="line"></span><br><span class="line">_findclose(hFile);<span class="comment">//结束查找，关闭句柄</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a>代码解读</h1><h2 id="finddata-t"><a href="#finddata-t" class="headerlink" title="_finddata_t"></a><code>_finddata_t</code></h2><p>它是存储一个文件相关信息的结构体,查看其定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _USE_32BIT_TIME_T</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _finddata_t     _finddata32_t</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _finddatai64_t  _finddata32i64_t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _finddata_t     _finddata64i32_t</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _finddatai64_t  __finddata64_t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>我这里是<code>_finddata64i32_t</code>，查看其定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">finddata64i32_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span>    attrib;</span><br><span class="line">    <span class="keyword">__time64_t</span>  time_create;    <span class="comment">// -1 for FAT file systems</span></span><br><span class="line">    <span class="keyword">__time64_t</span>  time_access;    <span class="comment">// -1 for FAT file systems</span></span><br><span class="line">    <span class="keyword">__time64_t</span>  time_write;</span><br><span class="line">    <span class="keyword">_fsize_t</span>    size;</span><br><span class="line">    <span class="keyword">char</span>        name[<span class="number">260</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>attrib</code>是该结构体的一个成员，是attribute（属性）的缩写。</p><p>它代表文件的属性，下边是相应的宏</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _A_NORMAL 0x00 <span class="comment">// Normal file - No read/write restrictions</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _A_RDONLY 0x01 <span class="comment">// Read only file</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _A_HIDDEN 0x02 <span class="comment">// Hidden file</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _A_SYSTEM 0x04 <span class="comment">// System file</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _A_SUBDIR 0x10 <span class="comment">// Subdirectory</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _A_ARCH   0x20 <span class="comment">// Archive file</span></span></span><br></pre></td></tr></table></figure><p>成员<code>name</code>就是文件名字嘛…</p><h2 id="findfirst"><a href="#findfirst" class="headerlink" title="_findfirst"></a><code>_findfirst</code></h2><p>第一个参数是标明文件的字符串，可支持通配符：<code>*.c</code>代表后缀为.c的文件，<code>*</code>就代表所有文件</p><p>第二个参数是<code>_finddata_t</code>类型变量的地址。该变量用来保存文件信息。</p><p><strong>这有坑</strong></p><p>我跟网上有点不同的是，网上我看到的例子定义的<code>hFile</code>都是<code>long</code>型，我用<code>long</code>型打开文件就出问题了。</p><p>其实VS已经警告了<code>warning C4244: “=”: 从“intptr_t”转换到“long”，可能丢失数据</code>。</p><p>我没在意它，后来改掉了类型就成功了。（就冲这一点，VS天下第一！）</p><p>查看<code>_findfirst</code>定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _USE_32BIT_TIME_T</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findfirst      _findfirst32</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findnext       _findnext32</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findfirsti64   _findfirst32i64</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findnexti64     _findnext32i64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findfirst      _findfirst64i32</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findnext       _findnext64i32</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findfirsti64   _findfirst64</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findnexti64    _findnext64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>我这里用的是<code>_findfirst64i32</code>，查看其定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_ACRTIMP <span class="keyword">intptr_t</span> __cdecl _findfirst64i32(</span><br><span class="line">        _In_z_ <span class="keyword">char</span> <span class="keyword">const</span>*              _FileName,</span><br><span class="line">        _Out_  struct <span class="keyword">_finddata64i32_t</span>* _FindData</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p>说明函数返回<code>intptr_t</code></p><p>继续查看<code>intptr_t</code>定义，得到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN64</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">unsigned</span> __int64 <span class="keyword">size_t</span>;</span><br><span class="line">    <span class="keyword">typedef</span> __int64          <span class="keyword">ptrdiff_t</span>;</span><br><span class="line">    <span class="keyword">typedef</span> __int64          <span class="keyword">intptr_t</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>     <span class="keyword">size_t</span>;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">int</span>              <span class="keyword">ptrdiff_t</span>;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">int</span>              <span class="keyword">intptr_t</span>;</span><br></pre></td></tr></table></figure><p>所以<code>intptr_t</code>在我电脑上实际是<code>__int64</code>，转换成long可能会丢失数据。</p><h2 id="findnext"><a href="#findnext" class="headerlink" title="_findnext"></a><code>_findnext</code></h2><p>查看其定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _USE_32BIT_TIME_T</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findfirst      _findfirst32</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findnext       _findnext32</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findfirsti64   _findfirst32i64</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findnexti64     _findnext32i64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findfirst      _findfirst64i32</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findnext       _findnext64i32</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findfirsti64   _findfirst64</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> _findnexti64    _findnext64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p> 我这里是<code>_findnext64i32</code>，查看其定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_ACRTIMP <span class="keyword">int</span> __cdecl _findnext64i32(</span><br><span class="line">     _In_  <span class="keyword">intptr_t</span>                 _FindHandle,</span><br><span class="line">     _Out_ struct <span class="keyword">_finddata64i32_t</span>* _FindData</span><br><span class="line">     );</span><br></pre></td></tr></table></figure><p>没啥讲的，好好看看<code>_findfirst</code>部分就懂这个了。</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p><code>fileinfo.attrib &amp;  _A_SUBDIR</code>，代码中用到了按位与&amp;。在此表示是文件夹（subdirectory）。位运算经常用在表示属性。具体的这次先不讲。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎转发和评论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;p&gt;&lt;code&gt;getFiles()&lt;/code&gt;函数的作用：&lt;/p&gt;
&lt;p&gt;path是一个文件夹路径，函数在&lt;code&gt;path&lt;/code&gt;
      
    
    </summary>
    
      <category term="C/C++" scheme="https://chouxianyu.github.io/categories/C-C/"/>
    
    
      <category term="文件" scheme="https://chouxianyu.github.io/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
</feed>
