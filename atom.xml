<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>臭咸鱼的缺氧瓶</title>
  
  <subtitle>快给我氧气！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chouxianyu.github.io/"/>
  <updated>2020-09-18T01:54:53.022Z</updated>
  <id>https://chouxianyu.github.io/</id>
  
  <author>
    <name>臭咸鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PAT甲级1003Emergency</title>
    <link href="https://chouxianyu.github.io/2020/09/17/PAT%E7%94%B2%E7%BA%A71003Emergency/"/>
    <id>https://chouxianyu.github.io/2020/09/17/PAT甲级1003Emergency/</id>
    <published>2020-09-17T09:36:18.000Z</published>
    <updated>2020-09-18T01:54:53.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805523835109376" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805523835109376</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><ul><li><p>有几个城市，每个城市中有多个救援队，城市间由公路相连，公路的长度不一</p></li><li><p>输入</p><ul><li><p>N：正整数，不超过500，城市的数量，城市索引为[0,N-1]</p></li><li><p>M：公路的数量</p></li><li><p>c1：你现在所在的城市</p></li><li><p>c2：你需要去的城市</p></li><li><p>各城市中救援队数量：N个整数</p></li><li><p>各条公路连接的两个城市其该公路的长度：M行</p><p>  保证c1到c2至少有一条路径</p></li></ul></li><li><p>输出</p><ul><li>c1到c2的最短路径的数量</li><li>在保证路径最短的前提下，最多可以聚集多少只救援队</li></ul></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li><p>dijkstra算法</p><ul><li><p>特点</p><ul><li>适用于边权为正的情况</li><li>单源最短路（Single-Source Shortest Paths，SSSP），求单个源点到所有结点的最短路</li><li>同时适用于有向图和无向图</li></ul></li><li><p>伪代码</p><p>  n个结点</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> visited[n];  <span class="comment">// 标记：是否找到源点s到某点的最短路径</span></span><br><span class="line"><span class="keyword">int</span> shortestPathDis[n]; <span class="comment">// 记录源点s到某点的最短路径的长度</span></span><br><span class="line"><span class="keyword">int</span> w[n][n]; <span class="comment">// 结点间的距离</span></span><br><span class="line"></span><br><span class="line">visited数组置<span class="literal">false</span>;</span><br><span class="line">dis数组置无穷大，dis[s]置<span class="number">0</span>;</span><br><span class="line">循环n次&#123;</span><br><span class="line">    寻找未被标记的、距离结点s最近的结点u;</span><br><span class="line">    如果找到u则将其标记(visited[u] = <span class="literal">true</span>),否则结束循环;</span><br><span class="line">    如果存在边&lt;u,v&gt;,则更新dis[v] = min(dis[v], dis[u] + w[u][v]); <span class="comment">// 贪心</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>其它</p><ul><li><p>c1到c2的最短路径的数量<code>pathNum</code></p><ul><li><p>如果<code>dis[v] &lt; dis[u] + w[u][v]</code>，则<code>pathNum[v] = path[u]</code></p><p>  u到v只有一条边，所以源点到u和v的路径的数量相等</p></li><li><p>如果<code>dis[v] == dis[u] + w[u][v]</code>，则<code>pathNum[v] = path[u] + path[v]</code></p><p>  在距离相等的情况下，除了经过u，还可以从其他结点到达v</p></li></ul></li><li><p>在保证路径最短的前提下，<strong>最多</strong>可以聚集多少只救援队</p><ul><li><p>如果<code>dis[v] &lt; dis[u] + w[u][v]</code>，则<code>teamGatherNum[v] = teamGatherNum[u] + teamNum[v]</code></p></li><li><p>如果<code>dis[v] == dis[u] + w[u][v]</code>，则<code>teamGatherNum[v] = min(teamGatherNum[v], teamGatherNum[u] + teamNum[v])</code></p><p>  此时最短路径不止一条，所以要判断哪条路径聚集的救援队更多</p></li></ul></li></ul></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1003</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/994805523835109376</span></span><br><span class="line"><span class="comment">// Tags: 最短路 djikstra DFS 单源最短路 贪心</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN =  <span class="number">500</span>; <span class="comment">// 最多500个城市</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = INT_MAX; <span class="comment">// 最大距离</span></span><br><span class="line"><span class="keyword">int</span> cityDis[MAXN][MAXN]; <span class="comment">// 城市间的距离</span></span><br><span class="line"><span class="keyword">int</span> teamNum[MAXN]; <span class="comment">// 每个城市中有多少个救援队</span></span><br><span class="line"><span class="keyword">int</span> shortestPathDis[MAXN]; <span class="comment">// 起点城市c1到各个城市最短路径的距离</span></span><br><span class="line"><span class="keyword">int</span> shortestPathNum[MAXN]; <span class="comment">// 起点城市c1到各个城市最短路径的数量</span></span><br><span class="line"><span class="keyword">int</span> teamGatherNum[MAXN]; <span class="comment">// 从起点城市c1到各个城市的最短路径上，最多能聚集到多少个救援队</span></span><br><span class="line"><span class="keyword">bool</span> visited[MAXN];  <span class="comment">// 标记：是否已求出起点城市c1到某城市的最短路径</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化变量</span></span><br><span class="line">    fill(cityDis[<span class="number">0</span>], cityDis[<span class="number">0</span>] + MAXN * MAXN, INF);</span><br><span class="line">    fill(shortestPathDis, shortestPathDis + MAXN, INF);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取输入</span></span><br><span class="line">    <span class="keyword">int</span> n, m, c1, c2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;n, &amp;m, &amp;c1, &amp;c2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;teamNum[i]);</span><br><span class="line">    <span class="keyword">int</span> a, b, d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;d);</span><br><span class="line">        cityDis[a][b] = cityDis[b][a] = d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化起点城市c1</span></span><br><span class="line">    shortestPathDis[c1] = <span class="number">0</span>;</span><br><span class="line">    teamGatherNum[c1] = teamNum[c1];</span><br><span class="line">    shortestPathNum[c1] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代直至求出起点城市c1到所有城市的最短距离</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="comment">// 寻找未被标记的、距离起点城市c1最近的城市u（贪心）</span></span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>, minDis = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[j] &amp;&amp; shortestPathDis[j] &lt; minDis)&#123;</span><br><span class="line">                u = j;</span><br><span class="line">                minDis = shortestPathDis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 各城市都已被标记，则已求出结果，退出循环即可；否则根据贪心策略，现在已求出起点城市c1到城市u的最短距离</span></span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        visited[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 如果有边&lt;u,v&gt;，则更新城市v的相关变量（最简洁的dijkstra算法只更新shortestPathDis[v]即可）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[v] &amp;&amp; cityDis[u][v] != INF)&#123;</span><br><span class="line">                <span class="keyword">if</span> (shortestPathDis[v] &gt; shortestPathDis[u] + cityDis[u][v])&#123;</span><br><span class="line">                    shortestPathDis[v] = shortestPathDis[u] + cityDis[u][v];</span><br><span class="line">                    shortestPathNum[v] = shortestPathNum[u];</span><br><span class="line">                    teamGatherNum[v] = teamGatherNum[u] + teamNum[v];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (shortestPathDis[v] == shortestPathDis[u] + cityDis[u][v])&#123;</span><br><span class="line">                    shortestPathNum[v] = shortestPathNum[u] + shortestPathNum[v];</span><br><span class="line">                    <span class="keyword">if</span> (teamGatherNum[v] &lt; teamGatherNum[u] + teamNum[v])</span><br><span class="line">                        teamGatherNum[v] = teamGatherNum[u] + teamNum[v];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, shortestPathNum[c2], teamGatherNum[c2]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/liuchuo/article/details/52300668" target="_blank" rel="noopener">https://blog.csdn.net/liuchuo/article/details/52300668</a></p><p><a href="https://blog.csdn.net/qq_35644234/article/details/60870719" target="_blank" rel="noopener">https://blog.csdn.net/qq_35644234/article/details/60870719</a></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BFS" scheme="https://chouxianyu.github.io/tags/BFS/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="贪心" scheme="https://chouxianyu.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="图" scheme="https://chouxianyu.github.io/tags/%E5%9B%BE/"/>
    
      <category term="最短路" scheme="https://chouxianyu.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="单源最短路" scheme="https://chouxianyu.github.io/tags/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="dijkstra" scheme="https://chouxianyu.github.io/tags/dijkstra/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1146Topological Order</title>
    <link href="https://chouxianyu.github.io/2020/09/15/PAT%E7%94%B2%E7%BA%A71146Topological-Order/"/>
    <id>https://chouxianyu.github.io/2020/09/15/PAT甲级1146Topological-Order/</id>
    <published>2020-09-15T15:41:24.000Z</published>
    <updated>2020-09-15T15:44:37.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805343043829760" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805343043829760</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>给定一个有向图，请判断一个序列是否是该有向图的拓扑序列。</p><ul><li><p>输入</p><ul><li>N：正整数，不超过1000，图中顶点的数量，顶点索引为[1,N]</li><li>M：正整数，不超过10000，有向边的数量</li><li>M条有向边：开始顶点索引、结束顶点索引</li><li>K：不超过100，待检验的序列的个数</li><li>K个序列：索引为[0,K]</li></ul></li><li><p>输出</p><p>  对于每个排列，如果不是拓扑排序则输出其索引</p></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>保存每个结点的前驱结点</li><li>使用一维数组保存每个结点是否已访问</li><li>遍历序列判断每个结点的前驱结点是否已访问，如果未访问，则该序列不是拓扑序列</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1146</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/994805343043829760</span></span><br><span class="line"><span class="comment">// Tags: 拓扑序列 图</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; before;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    before.resize(n+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v1, v2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;v1, &amp;v2);</span><br><span class="line">        before[v2].push_back(v1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123; <span class="comment">// 判断k个序列</span></span><br><span class="line">        <span class="comment">// 保存一个序列</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sequence(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sequence[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断该序列是否是拓扑序列</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visited(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">bool</span> isTopological = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            v2 = sequence[j];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> iter = before[v2].begin(); iter != before[v2].end(); iter++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (!visited[*iter])&#123;</span><br><span class="line">                    isTopological = <span class="literal">false</span>;</span><br><span class="line">                    result.push_back(i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isTopological)</span><br><span class="line">                visited[v2] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">auto</span> iter = result.begin();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, *iter);</span><br><span class="line">    iter++;</span><br><span class="line">    <span class="keyword">while</span> (iter != result.end())&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d"</span>, *iter);</span><br><span class="line">        iter++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="图" scheme="https://chouxianyu.github.io/tags/%E5%9B%BE/"/>
    
      <category term="拓扑序列" scheme="https://chouxianyu.github.io/tags/%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1135Is It A Red-Black Tree</title>
    <link href="https://chouxianyu.github.io/2020/09/15/PAT%E7%94%B2%E7%BA%A71135Is-It-A-Red-Black-Tree/"/>
    <id>https://chouxianyu.github.io/2020/09/15/PAT甲级1135Is-It-A-Red-Black-Tree/</id>
    <published>2020-09-15T09:09:22.000Z</published>
    <updated>2020-09-15T09:10:37.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805346063728640" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805346063728640</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><ul><li><p>红黑树</p><p>  在二叉搜索树的基础上，红黑树还具有以下特征</p><ol><li><p>每个结点是红色或者黑色</p></li><li><p>根结点是黑色的</p></li><li><p>叶子结点（NULL）都是黑色</p></li><li><p>每个红色结点的两个子结点都是黑色</p><p> 从每个叶子到根的所有路径上不能有两个连续的红色结点</p></li><li><p>每个结点到其每个叶子结点的所有路径都包含相同数目的黑色节点。</p></li></ol></li></ul><p>给定一颗二叉搜索树，请判断它是否是一个合法的红黑树。</p><ul><li><p>输入</p><ul><li>K：正整数，不超过30，测试用例的数量</li><li>N：正整数，不超过30，二叉树中结点的数量</li><li>二叉树的先序遍历结果：结点的值都是正整数，用负数代表红色结点</li></ul></li><li><p>输出</p><p>  判断每颗二叉搜索树是否是红黑树，是则输出<code>Yes</code>，否则输出<code>No</code>。</p></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>根据先序遍历结果和二叉搜索树的性质（左子树小于根结点小于右子树），递归构建二叉树</li><li>判断性质3：根结点是否是黑色</li><li>判断性质4，见代码中的函数judge1</li><li>判断性质5，见代码中的函数judge2</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1135</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/994805346063728640</span></span><br><span class="line"><span class="comment">// Tags: Tree BST RBTree</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    Node* left = <span class="literal">nullptr</span>;</span><br><span class="line">    Node* right = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">build</span><span class="params">(Node* root, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        root = <span class="keyword">new</span> Node();</span><br><span class="line">        root-&gt;val = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(v) &lt;= <span class="built_in">abs</span>(root-&gt;val))</span><br><span class="line">        root-&gt;left = build(root-&gt;left, v);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        root-&gt;right = build(root-&gt;right, v);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge1</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;val &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left != <span class="literal">nullptr</span> &amp;&amp; root-&gt;left-&gt;val &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right != <span class="literal">nullptr</span> &amp;&amp; root-&gt;right-&gt;val &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> judge1(root-&gt;left) &amp;&amp; judge1(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = max(getDepth(root-&gt;left), getDepth(root-&gt;right));</span><br><span class="line">    <span class="keyword">return</span> root-&gt;val &gt; <span class="number">0</span> ? ret + <span class="number">1</span> : ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge2</span><span class="params">(Node *root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (getDepth(root-&gt;left) != getDepth(root-&gt;right))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> judge2(root-&gt;left) &amp;&amp; judge2(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, n, val;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">    <span class="keyword">while</span> (k--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        Node* root = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val);</span><br><span class="line">            root = build(root, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val &lt; <span class="number">0</span> || !judge1(root) || !judge2(root))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/liuchuo/article/details/78037334" target="_blank" rel="noopener">https://blog.csdn.net/liuchuo/article/details/78037334</a></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="https://chouxianyu.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="https://chouxianyu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="DFS" scheme="https://chouxianyu.github.io/tags/DFS/"/>
    
      <category term="BST" scheme="https://chouxianyu.github.io/tags/BST/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="红黑树" scheme="https://chouxianyu.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1138Postorder Traversal</title>
    <link href="https://chouxianyu.github.io/2020/09/08/PAT%E7%94%B2%E7%BA%A71138Postorder-Traversal/"/>
    <id>https://chouxianyu.github.io/2020/09/08/PAT甲级1138Postorder-Traversal/</id>
    <published>2020-09-08T11:12:13.000Z</published>
    <updated>2020-09-08T11:13:50.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805345078067200" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805345078067200</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>假设二叉树中所有结点的值都是互异的正整数，给定二叉树的先序和后序遍历，请输出该树后序遍历的第一个数字。</p><ul><li>输入<ul><li>N：正整数，不超过50000，二叉树中结点的数量</li><li>先序遍历结果</li><li>中序遍历结果</li></ul></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li><p>根据先序遍历和中序遍历结果可以确定一颗树，这道题的关键就是如何确定出这颗树并遍历它。</p><p>  可以参考<a href="https://www.cnblogs.com/chouxianyu/p/13627616.html" target="_blank" rel="noopener">PAT甲级1151LCA in a Binary Tree</a>，这道题里也是根据先序遍历和中序遍历结果确定出了一棵树。</p></li><li><p>设置全局flag判断是否是该树后序遍历的第一个数字，如果是则输出，不是则不输出</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1138</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/994805345078067200</span></span><br><span class="line"><span class="comment">// Tags: Tree DFS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preOrder; <span class="comment">// 先序遍历结果</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inOrder; <span class="comment">// 中序遍历结果</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; inPos; <span class="comment">// 结点到中序遍历结果inOrder索引的映射</span></span><br><span class="line"><span class="keyword">bool</span> firstIsPrinted = <span class="literal">false</span>; <span class="comment">// 为true代表后序遍历时的第一个结点已经输出</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrderTraverse</span><span class="params">(<span class="keyword">int</span> inLeft, <span class="keyword">int</span> inRight, <span class="keyword">int</span> preRoot)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (firstIsPrinted) <span class="comment">// 只输出后序遍历的第一个结点即可</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (inRight &lt; inLeft) <span class="comment">// 该树不存在</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> inRoot = inPos[preOrder[preRoot]]; <span class="comment">// 当前树的根结点在中序遍历结果inOrder中的索引</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">    postOrderTraverse(inLeft, inRoot - <span class="number">1</span>, preRoot + <span class="number">1</span>);        <span class="comment">// 遍历左子树并判断左子树是否存在</span></span><br><span class="line">    postOrderTraverse(inRoot + <span class="number">1</span>, inRight, preRoot + <span class="number">1</span> + (inRoot - inLeft)); <span class="comment">// 遍历右子树并判断右子树是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!firstIsPrinted)&#123; <span class="comment">// 只输出后序遍历的第一个结点即可</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, inOrder[inRoot]);</span><br><span class="line">        firstIsPrinted = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    preOrder.resize(n + <span class="number">1</span>);</span><br><span class="line">    inOrder.resize(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">// 读取先序遍历结果</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;preOrder[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;  <span class="comment">// 读取中序遍历结果</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;inOrder[i]);</span><br><span class="line">        inPos[inOrder[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    postOrderTraverse(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="https://chouxianyu.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="https://chouxianyu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="DFS" scheme="https://chouxianyu.github.io/tags/DFS/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="map" scheme="https://chouxianyu.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1143Lowest Common Ancestor</title>
    <link href="https://chouxianyu.github.io/2020/09/07/PAT%E7%94%B2%E7%BA%A71143Lowest-Common-Ancestor/"/>
    <id>https://chouxianyu.github.io/2020/09/07/PAT甲级1143Lowest-Common-Ancestor/</id>
    <published>2020-09-07T13:47:30.000Z</published>
    <updated>2020-09-07T13:49:27.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805343727501312" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805343727501312</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><ul><li><p>最近公共祖先（LCA，The lowest common ancestor）</p><p>  在一颗树中，结点U和V的LCA是U和V为其后代的深度最大的结点。</p></li><li><p>二叉搜索树（BST，binary search tree）</p><ul><li>树中的每个结点的值都大于其左子树中结点的值</li><li>树中的每个结点的值都不超过其右子树中结点的值</li><li>每个结点的左子树和右子树都是二叉搜索树</li></ul></li></ul><p>给定一个二叉搜索树中的任意两个结点，请找到他们的LCA。</p><ul><li><p>输入</p><ul><li>M：正整数，不超过1000，需要测试的结点对的数量</li><li>N：正整数，不超过10000，二叉搜索树中结点的数量</li><li>N个结点（互异）：按照先序遍历的顺序给出，值都在int范围内</li><li>M个结点对</li></ul></li><li><p>输出</p><p>  对于每个结点对，判断结点对中每个结点是否存在，如果都存在则找到他们的LCA。</p></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>不需建树</p><ul><li><p>判断结点是否在树中</p><p>  读取树的先序遍历时使用map记录一个结点是否在树中</p></li><li><p>寻找LCA</p><p>  根据BST的性质，如果一个结点的值处于u和v的值之间，那这个结点就是u和v的LCA。</p></li></ul><p>这道题涉及LCA，也可以看看另外一道题：<a href="https://www.cnblogs.com/chouxianyu/p/13627616.html" target="_blank" rel="noopener">PAT甲级1151 LCA in a Binary Tree</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1143</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/994805343727501312</span></span><br><span class="line"><span class="comment">// Tags: Tree BST LCA map</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n, u, v, a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preOrder(n);</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; exists;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123; <span class="comment">// 读取先序遍历结果并记录结点是否出现过</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;preOrder[i]);</span><br><span class="line">        exists[preOrder[i]] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123; <span class="comment">// m个结点对</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123; <span class="comment">// 寻找LCA</span></span><br><span class="line">            a = preOrder[i];</span><br><span class="line">            <span class="keyword">if</span> (u &lt; a &amp;&amp; v &gt; a || v &lt; a &amp;&amp; u &gt; a || (a == u) || (a == v) )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (exists[u] == <span class="literal">false</span> &amp;&amp; exists[v] == <span class="literal">false</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"ERROR: %d and %d are not found.\n"</span>, u, v);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (exists[u] == <span class="literal">false</span> || exists[v] == <span class="literal">false</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"ERROR: %d is not found.\n"</span>, exists[u]==<span class="literal">false</span> ? u : v);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == u || a == v)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d is an ancestor of %d.\n"</span>, a, a == u ?  v : u);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"LCA of %d and %d is %d.\n"</span>, u, v, a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="https://chouxianyu.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="BST" scheme="https://chouxianyu.github.io/tags/BST/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="map" scheme="https://chouxianyu.github.io/tags/map/"/>
    
      <category term="LCA" scheme="https://chouxianyu.github.io/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1151LCA in a Binary Tree</title>
    <link href="https://chouxianyu.github.io/2020/09/07/PAT%E7%94%B2%E7%BA%A71151LCA-in-a-Binary-Tree/"/>
    <id>https://chouxianyu.github.io/2020/09/07/PAT甲级1151LCA-in-a-Binary-Tree/</id>
    <published>2020-09-07T08:26:28.000Z</published>
    <updated>2020-09-08T11:16:47.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1038430130011897856" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/1038430130011897856</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><ul><li><p>最近公共祖先（LCA，The lowest common ancestor）</p><p>  在一颗树中，结点U和V的LCA是U和V为其后代的深度最大的结点。</p></li></ul><p>给定一颗二叉树中的任意两个结点，请找到它们的LCA。</p><ul><li><p>输入</p><ul><li>M：正整数，不超过1000，需要测试的结点对的数量</li><li>N：正整数，不超过10000，二叉树中结点的数量，结点值都在int范围内</li><li>二叉树中序遍历结果：N个数字</li><li>二叉树先序遍历结果：N个数字</li><li>M个结点对：</li></ul></li><li><p>输出</p><p>  对于每个结点对，判断结点对中每个结点是否存在，如果都存在则找到他们的LCA。</p></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="根据先序遍历结果和中序遍历结果可以确定一颗树"><a href="#根据先序遍历结果和中序遍历结果可以确定一颗树" class="headerlink" title="根据先序遍历结果和中序遍历结果可以确定一颗树"></a>根据先序遍历结果和中序遍历结果可以确定一颗树</h3><p>中序遍历结果加先序遍历结果可以唯一确定一棵树，在不构建树的情况下，在每一层的递归中，可以得到树的根结点。</p><ol><li><p>使用两个数组分别保存树的先序遍历结果和后序遍历结果</p></li><li><p>根据先序遍历结果可以确定根节点</p><p> 比如刚开始的第一个结点就是整棵树的根结点</p></li><li><p>根据中序遍历结果和整棵树的根结点可以确定整棵树的左右子树</p><p> 中序遍历结果中，根结点左侧就是整棵树的左子树的中序遍历结果，根结点右侧就是整棵树的右子树的中序遍历结果</p></li><li><p>递归确定左右子树的结构</p><p> 某颗树的结构可根据2个变量确定：其根结点在整颗树先序遍历结果中的索引、其中序遍历结果序列（可通过起始索引和结束索引2个变量确定）</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> leftPosBoundOfInOrder, <span class="keyword">int</span> rightPosBoundOfInOrder, <span class="keyword">int</span> rootPosOfPreOrder)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    当前这颗树在整棵树中序遍历结果inOrder的范围索引为[leftPosBoundOfInOrder,rightPosBoundOfInOrder]</span></span><br><span class="line"><span class="comment">    rootPosOfPreOrder指当前这颗树根结点在整棵树先序遍历结果preOrder中的索引</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (leftPosBoundOfInOrder &gt; rightPosBoundOfInOrder) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 左子树</span></span><br><span class="line">    lca(leftPosBoundOfInOrder, rootPosOfInOrder - <span class="number">1</span>, rootPosOfPreOrder + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 右子树</span></span><br><span class="line">    lca(rootPosOfInOrder + <span class="number">1</span>, rightPosBoundOfInOrder, rootPosOfPreOrder + (rootPosOfInOrder - leftPosBoundOfInOrder) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">func(<span class="number">1</span>, n, <span class="number">1</span>); <span class="comment">// 调用（假设整颗树有n个结点，在数组中的索引为[1,n]）</span></span><br></pre></td></tr></table></figure></li></ol><p><a href="https://www.cnblogs.com/chouxianyu/p/13634613.html" target="_blank" rel="noopener">PAT甲级1138Postorder Traversal</a>这道题也涉及如何根据先序遍历结果和中序遍历结果确定一棵树并遍历它，可以看一看。</p><h3 id="最近公共祖先LCA"><a href="#最近公共祖先LCA" class="headerlink" title="最近公共祖先LCA"></a>最近公共祖先LCA</h3><p>已知某颗树的根结点，</p><ol><li>若u和u在根结点的左边，则u和v的最近公共祖先在当前子树根结点的左子树寻找；</li><li>如果u和v在当前子树根结点的右边，则u和v的最近公共祖先就在当前子树的右子树寻找；</li><li>如果u和v在当前子树根结点的两边，在当前子树的根结点就是u和v的最近公共祖先；</li><li>如果u或v就是根结点，那其就是这两个结点的最近公共祖先。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1151</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/1038430130011897856</span></span><br><span class="line"><span class="comment">// Tags: Tree LCA Map</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pos;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inOrder, preOrder;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> leftPosBoundOfInOrder, <span class="keyword">int</span> rightPosBoundOfInOrder, <span class="keyword">int</span> rootPosOfPreOrder)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    当前这颗树在整棵树中序遍历结果inOrder的范围索引为[leftPosBoundOfInOrder,rightPosBoundOfInOrder]</span></span><br><span class="line"><span class="comment">    rootPosOfPreOrder指当前这颗树根结点在整棵树先序遍历结果preOrder中的索引</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (leftPosBoundOfInOrder &gt; rightPosBoundOfInOrder) <span class="keyword">return</span>; <span class="comment">// 越界判断</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rootPosOfInOrder = pos[preOrder[rootPosOfPreOrder]]; <span class="comment">// 根结点在中序遍历结果中的索引</span></span><br><span class="line">    <span class="keyword">int</span> uPosOfInorder = pos[u]; <span class="comment">// 结点u在中序遍历结果中的索引</span></span><br><span class="line">    <span class="keyword">int</span> vPosOfInorder = pos[v]; <span class="comment">// 结点v在中序遍历结果中的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// u和v都在左子树就去左子树找</span></span><br><span class="line">    <span class="keyword">if</span> (uPosOfInorder &lt; rootPosOfInOrder &amp;&amp; vPosOfInorder &lt; rootPosOfInOrder)</span><br><span class="line">        lca(leftPosBoundOfInOrder, rootPosOfInOrder - <span class="number">1</span>, rootPosOfPreOrder + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// u和v都在右子树就去右子树找</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (uPosOfInorder &gt; rootPosOfInOrder &amp;&amp; vPosOfInorder &gt; rootPosOfInOrder)</span><br><span class="line">        lca(rootPosOfInOrder + <span class="number">1</span>, rightPosBoundOfInOrder, rootPosOfPreOrder + (rootPosOfInOrder - leftPosBoundOfInOrder) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// u和v在分别在左右子树，则当前树的根节点就是LCA</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((uPosOfInorder &lt; rootPosOfInOrder &amp;&amp; vPosOfInorder &gt; rootPosOfInOrder) || (uPosOfInorder &gt; rootPosOfInOrder &amp;&amp; vPosOfInorder &lt; rootPosOfInOrder))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"LCA of %d and %d is %d.\n"</span>, u, v, preOrder[rootPosOfPreOrder]);</span><br><span class="line">    <span class="comment">// 结点u就是根结点</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (uPosOfInorder == rootPosOfInOrder)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d is an ancestor of %d.\n"</span>, u, v);</span><br><span class="line">    <span class="comment">// 结点v就是根结点</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (vPosOfInorder == rootPosOfInOrder)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d is an ancestor of %d.\n"</span>, v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n; <span class="comment">// 结点对个数，结点个数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n);</span><br><span class="line">    inOrder.resize(n + <span class="number">1</span>), preOrder.resize(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123; <span class="comment">// 记录中序遍历结果，并记录各结点的索引</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;inOrder[i]);</span><br><span class="line">        pos[inOrder[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123; <span class="comment">// 记录先序遍历结果</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;preOrder[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (pos[u] == <span class="number">0</span> &amp;&amp; pos[v] == <span class="number">0</span>) <span class="comment">// 判断元素是否存在</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"ERROR: %d and %d are not found.\n"</span>, u, v);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pos[u] == <span class="number">0</span> || pos[v] == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"ERROR: %d is not found.\n"</span>, pos[u] == <span class="number">0</span> ? u : v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lca(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/zhuiqiuzhuoyue583/article/details/80452127" target="_blank" rel="noopener">https://blog.csdn.net/zhuiqiuzhuoyue583/article/details/80452127</a></p><p><a href="https://blog.csdn.net/liuchuo/article/details/82560863" target="_blank" rel="noopener">https://blog.csdn.net/liuchuo/article/details/82560863</a></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="https://chouxianyu.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="https://chouxianyu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="map" scheme="https://chouxianyu.github.io/tags/map/"/>
    
      <category term="LCA" scheme="https://chouxianyu.github.io/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1142Maximal Clique</title>
    <link href="https://chouxianyu.github.io/2020/09/06/PAT%E7%94%B2%E7%BA%A71142Maximal-Clique/"/>
    <id>https://chouxianyu.github.io/2020/09/06/PAT甲级1142Maximal-Clique/</id>
    <published>2020-09-06T10:55:23.000Z</published>
    <updated>2020-09-06T11:21:04.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805343979159552" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805343979159552</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><ul><li>团：某无向图的一个顶点子集，其中任意两个不同的顶点相邻，则这个顶点子集是这个图的一个团。</li><li>极大团：如果一个团在加入任何一个顶点后都不再是一个团，则这个团是一个极大团。</li></ul><p>现在给你一个图，请你判断一些点集是否是团或极大团。</p><ul><li><p>输入</p><ul><li>Nv：正整数，不超过200，图中顶点的数量</li><li>Ne：正整数，图中边的数量</li><li>Ne条边：顶点索引为[1,Nv]</li><li>M：正整数，不超过100，需要判断的顶点子集的个数</li><li>M个顶点子集：第一个数字k是顶点个数（不超过Nv），剩下的数字是顶点索引</li></ul></li><li><p>输出</p><p>  对于每个顶点子集，请判断它是最大团还是最大团以外的团或者不是团</p></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>使用邻接矩阵保存边，用二维数组表示</p></li><li><p>使用vector保存顶点子集，并使用set保存顶点子集以外的顶点</p></li><li><p>根据定义判断顶点子集中的顶点是否两两相邻，如果是则为团，不是则不是团</p></li><li><p>如果是团，根据最大团的定义，遍历顶点子集以外的顶点，判断是否可以再添加一个顶点且该顶点与顶点子集中每个顶点都相邻</p><p> 如果可以则说明不是极大团，不可以则不是极大团</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1142</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/994805343979159552</span></span><br><span class="line"><span class="comment">// Tags: Graph Clique Maximal Clique</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> edge[<span class="number">201</span>][<span class="number">201</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ne, nv, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;nv, &amp;ne);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v1, v2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ne; i++)&#123; <span class="comment">// 记录边</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;v1, &amp;v2);</span><br><span class="line">        edge[v1][v2] = edge[v2][v1] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--)&#123; <span class="comment">// 判断m个顶点子集</span></span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; leftV; <span class="comment">// 该顶点子集以外的结点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nv; i++)&#123;</span><br><span class="line">            leftV.insert(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123; <span class="comment">// 记录顶点子集</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v[i]);</span><br><span class="line">            leftV.erase(v[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> isClique = <span class="literal">true</span>; <span class="comment">// 先判断是否是团</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; k; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (edge[v[i]][v[j]] == <span class="literal">false</span>)&#123;</span><br><span class="line">                    isClique = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isClique == <span class="literal">false</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isClique == <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Not a Clique\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> isMaximalClique = <span class="literal">true</span>; <span class="comment">// 如果是团，再判断是不是极大团（按照定义判断）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = leftV.begin(); it != leftV.end(); it++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (edge[*it][v[i]] == <span class="literal">true</span>)</span><br><span class="line">                    cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt == k)&#123;</span><br><span class="line">                isMaximalClique = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isMaximalClique) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Not Maximal\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="图" scheme="https://chouxianyu.github.io/tags/%E5%9B%BE/"/>
    
      <category term="set" scheme="https://chouxianyu.github.io/tags/set/"/>
    
      <category term="团" scheme="https://chouxianyu.github.io/tags/%E5%9B%A2/"/>
    
      <category term="极大团" scheme="https://chouxianyu.github.io/tags/%E6%9E%81%E5%A4%A7%E5%9B%A2/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1155Heap Paths</title>
    <link href="https://chouxianyu.github.io/2020/09/06/PAT%E7%94%B2%E7%BA%A71155Heap-Paths/"/>
    <id>https://chouxianyu.github.io/2020/09/06/PAT甲级1155Heap-Paths/</id>
    <published>2020-09-06T06:13:32.000Z</published>
    <updated>2020-09-07T02:56:41.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1071785408849047552" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/1071785408849047552</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>堆（大顶堆或小顶堆）中，任意一条从根结点到叶子结点的路径上的值一定是非递增序列或者非递减序列。</p><p>现在给定一个完全二叉树，请检查它的每一条路径，判断这棵树是不是堆。</p><ul><li><p>输入</p><ul><li>N：正整数，大于1，不超过1000，树中结点的数量</li><li>N个结点的值（互异）：都是int范围内，按照层次遍历的顺序给出</li></ul></li><li><p>输出</p><p>  对于每棵树</p><ol><li><p>先输出所有从根结点到叶子结点的路径，每条路径占一行，数字间用一个空格间隔，首尾不能有多余空格</p><p> 输出顺序：对于每个结点，其右子树的所有路径要先于其左子树的所有路径输出</p></li><li><p>输出这颗树是大顶堆还是小顶堆，或者它不是堆</p></li></ol></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>利用完全二叉树的性质，将结点记录到一维数组中</li><li>使用DFS，使用vecotr记录当前遍历到的所有结点（即路径），如果当前结点是叶子结点则输出这条路径，否则先遍历右子树再遍历左子树</li><li>在DFS过程中判断是否违背大小顶堆性质</li><li>最后输出该树是否是大小顶堆</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1155</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/1071785408849047552</span></span><br><span class="line"><span class="comment">// Tags: Tree DFS Heap</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> isMaxHeap = <span class="literal">true</span>, isMinHeap = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> nodes[<span class="number">2010</span>]; <span class="comment">// 索引为[1,n]的元素有效</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path; <span class="comment">// 目前遍历到的所有结点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; n) <span class="keyword">return</span>; <span class="comment">// 越界则无操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">1</span>)&#123; <span class="comment">// 检查是否是大小顶堆</span></span><br><span class="line">        <span class="keyword">if</span> (nodes[i] &gt; nodes[i / <span class="number">2</span>]) isMaxHeap = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nodes[i] &lt; nodes[i / <span class="number">2</span>]) isMinHeap = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    path.push_back(nodes[i]); <span class="comment">// 遍历当前结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> * i &gt; n &amp;&amp; <span class="number">2</span> * i + <span class="number">1</span> &gt; n)&#123; <span class="comment">// 是叶子结点则输出当前遍历到的所有结点</span></span><br><span class="line">        <span class="keyword">auto</span> it = path.begin();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, *it);</span><br><span class="line">        it++;</span><br><span class="line">        <span class="keyword">while</span> (it != path.end())&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>, *it);</span><br><span class="line">            it++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">// 不是叶子结点</span></span><br><span class="line">        dfs(<span class="number">2</span> * i + <span class="number">1</span>); <span class="comment">// 遍历右子树</span></span><br><span class="line">        dfs(<span class="number">2</span> * i); <span class="comment">// 遍历左子树</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    path.pop_back(); <span class="comment">// 回溯</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;  <span class="comment">// 记录结点</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, nodes+i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">1</span>); <span class="comment">// 深度优先遍历树并在过程中判断是否为大顶堆或小顶堆</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isMaxHeap) <span class="built_in">printf</span>(<span class="string">"Max Heap"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isMinHeap) <span class="built_in">printf</span>(<span class="string">"Min Heap"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Not Heap"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="https://chouxianyu.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="https://chouxianyu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="DFS" scheme="https://chouxianyu.github.io/tags/DFS/"/>
    
      <category term="回溯" scheme="https://chouxianyu.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="堆" scheme="https://chouxianyu.github.io/tags/%E5%A0%86/"/>
    
      <category term="完全二叉树" scheme="https://chouxianyu.github.io/tags/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1147Heaps</title>
    <link href="https://chouxianyu.github.io/2020/09/05/PAT%E7%94%B2%E7%BA%A71147Heaps/"/>
    <id>https://chouxianyu.github.io/2020/09/05/PAT甲级1147Heaps/</id>
    <published>2020-09-05T07:08:26.000Z</published>
    <updated>2020-09-06T08:33:34.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805342821531648" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805342821531648</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>给定一个完全二叉树，请判断它是不是堆（大顶堆指父结点的值大于等于子结点的值，小顶堆指父结点的值小于等于子结点的值）</p><ul><li>输入<ul><li>M：需要测试的树的数量，不超过100</li><li>N：每颗树中值的数量，大于1，不超过1000</li><li>M颗树：每颗树包含N个互异的值（int范围内），按照层次遍历的顺序给出</li></ul></li><li>输出<ul><li>对于每颗树，输出它是最大堆还是最小堆，或者它不是个堆，然后后序遍历输出这个树，值之间用空格间隔</li></ul></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>完全二叉树性质<ul><li>如果某结点的序号为<code>i</code>，如果它的左右子结点存在，那左子结点序号为<code>2i</code>，右子结点序号为<code>2i+1</code>。</li><li>相应地，如果某子结点的序号为<code>i</code>，那其父结点的序号为<code>i/2</code>，其中<code>i</code>为int类型、只取<code>i/2</code>所得结果的整数部分。</li></ul></li></ul><ol><li>因为是完全二叉树，所以不用建树，将所有结点按层次遍历的顺序存入数组即可</li><li>遍历除了根结点以外的结点，判断是否违反大顶堆或小顶堆的特点，然后输出是否是堆</li><li>递归实现后序遍历</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1147</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/994805342821531648</span></span><br><span class="line"><span class="comment">// Tags: Tree DFS Heap</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nodes[<span class="number">1005</span>]; <span class="comment">// 存储n个结点</span></span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrderTrace</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; n) <span class="keyword">return</span> ; <span class="comment">// 避免越界</span></span><br><span class="line">    postOrderTrace(<span class="number">2</span> * i);</span><br><span class="line">    postOrderTrace(<span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, nodes[i]);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d "</span>, nodes[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">// 读取树</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, nodes+i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> isMaxHeap = <span class="literal">true</span>, isMinHeap = <span class="literal">true</span>; <span class="comment">// 遍历判断是否是大小顶堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span> (nodes[i] &gt; nodes[i/<span class="number">2</span>]) isMaxHeap = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nodes[i] &lt; nodes[i/<span class="number">2</span>]) isMinHeap = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (isMaxHeap) <span class="built_in">printf</span>(<span class="string">"Max Heap\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(isMinHeap) <span class="built_in">printf</span>(<span class="string">"Min Heap\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Not Heap\n"</span>);</span><br><span class="line"></span><br><span class="line">        postOrderTrace(<span class="number">1</span>); <span class="comment">// 后序遍历完全二叉树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/chouxianyu/p/13293152.html" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/p/13293152.html</a></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="https://chouxianyu.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="DFS" scheme="https://chouxianyu.github.io/tags/DFS/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="堆" scheme="https://chouxianyu.github.io/tags/%E5%A0%86/"/>
    
      <category term="完全二叉树" scheme="https://chouxianyu.github.io/tags/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1150Travelling Salesman Problem</title>
    <link href="https://chouxianyu.github.io/2020/09/05/PAT%E7%94%B2%E7%BA%A71150Travelling-Salesman-Problem/"/>
    <id>https://chouxianyu.github.io/2020/09/05/PAT甲级1150Travelling-Salesman-Problem/</id>
    <published>2020-09-05T05:03:36.000Z</published>
    <updated>2020-09-05T05:04:26.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1038430013544464384" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/1038430013544464384</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><ul><li>现在给你一些环，请你找到其中与旅行商问题答案最接近的那个环（旅行商问题的定义在此不再说明）</li><li>输入<ul><li>N：大于2，不超过200，城市的数量</li><li>M：无向图中边的数量，</li><li>M条边：每条边表示为<code>City1 City2 Dist</code>，其中城市索引为[1,N]，城市间距离为不超过100的正数</li><li>K：正整数，path的数量</li><li>K条path：每条path的格式为：<code>n c1 c2 c3 … cn</code>，其中n是path中城市的数量，ci是城市索引</li></ul></li><li>输出<ul><li>对于每条path，输出<code>Path X: TotalDist (Description)</code>，其中X是[1,K]，TotalDist是总距离（不存在则输出NA），Description是<ul><li>经过每个城市的简单环：<code>TS simple cycle</code></li><li>经过每个城市的环，但不是简单环：<code>TS cycle</code></li><li>不是经过每个城市的环：<code>Not a TS cycle</code></li></ul></li><li>最终输出<code>Shortest Dist(X) = TotalDist</code>，其中X是和旅行商问题解最接近的那个环的索引，TotalDist是其距离总和。（已确保只有一个解）</li></ul></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li><p>距离用二维数组表示，默认值为0，为0则说明两个城市间不存在边</p></li><li><p>读取每条path时，用一维数组存储某个节点被访问的次数（注意城市索引是1到N）</p><p>  在路径合法的前提下</p><ul><li>TS cycle：即经过每个城市并且是一个环，即每个城市被访问的次数都大于0且首尾城市相同</li><li>TS simple cycle：在TS cycle的基础上，要求没有子环，只有起点城市被访问过2次，其它城市都只被访问过一次</li></ul></li><li><p>将k个path的结果存放在一维数组中</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1150</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/1038430013544464384</span></span><br><span class="line"><span class="comment">// Tags: Graph TSP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> distances[<span class="number">205</span>][<span class="number">205</span>]; <span class="comment">// 各个城市之间的距离。如果为0，则说明两个城市间无边、不可直达</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c1, c2, dist;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123; <span class="comment">// 存储各个城市之间的距离</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;c1, &amp;c2, &amp;dist);</span><br><span class="line">        distances[c1][c2] = distances[c2][c1] = dist;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> bestX, bestDist = INT_MAX;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= k; x++)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; visited(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> numOfCities, firstCity, pathTotalDist = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> pathIslegal = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;numOfCities, &amp;firstCity);</span><br><span class="line">        visited[firstCity] += <span class="number">1</span>; <span class="comment">// 访问第一个城市</span></span><br><span class="line">        c1 = firstCity; <span class="comment">// 更新上一个城市</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; numOfCities - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c2); <span class="comment">// 读取当前城市</span></span><br><span class="line">            <span class="keyword">if</span> (distances[c1][c2] != <span class="number">0</span>)&#123;</span><br><span class="line">                visited[c2] += <span class="number">1</span>;</span><br><span class="line">                pathTotalDist += distances[c1][c2]; <span class="comment">// 计算该路径的总距离</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123; <span class="comment">// path中两个城市不存在边</span></span><br><span class="line">                pathIslegal = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            c1 = c2; <span class="comment">// 更新上一个城市</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!pathIslegal)&#123; <span class="comment">// 路径非法</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Path %d: NA (Not a TS cycle)\n"</span>, x);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (firstCity != c2)&#123; <span class="comment">// 在路径合法的前提下，第一个城市和最后一个城市不同，则该路径不是环</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Path %d: %d (Not a TS cycle)\n"</span>, x, pathTotalDist);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> isTS = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i] &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                isTS = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isTS)&#123; <span class="comment">// 该路径没有经过所有城市</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Path %d: %d (Not a TS cycle)\n"</span>, x, pathTotalDist);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> isSimple = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123; <span class="comment">// 已确保是环且经过所有城市，判断是否是简单环，并更新最短TS环路</span></span><br><span class="line">            <span class="keyword">if</span> (pathTotalDist &lt; bestDist)&#123;</span><br><span class="line">                bestX = x;</span><br><span class="line">                bestDist = pathTotalDist;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i != firstCity &amp;&amp; visited[i] &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                isSimple = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isSimple)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Path %d: %d (TS simple cycle)\n"</span>, x, pathTotalDist);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Path %d: %d (TS cycle)\n"</span>, x, pathTotalDist);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Shortest Dist(%d) = %d\n"</span>, bestX, bestDist);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="图" scheme="https://chouxianyu.github.io/tags/%E5%9B%BE/"/>
    
      <category term="TSP" scheme="https://chouxianyu.github.io/tags/TSP/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1149Dangerous Goods Packaging</title>
    <link href="https://chouxianyu.github.io/2020/09/02/PAT%E7%94%B2%E7%BA%A71149Dangerous-Goods-Packaging/"/>
    <id>https://chouxianyu.github.io/2020/09/02/PAT甲级1149Dangerous-Goods-Packaging/</id>
    <published>2020-09-02T08:09:05.000Z</published>
    <updated>2020-09-02T08:10:47.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1038429908921778176" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/1038429908921778176</a></p><h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>当用容器运输货物时，一些货物是不能装在一起的。现在告诉你哪些货物能装在一起，给你一些货物，请判断这些货物是否可以被装在一起</p><ul><li><p>输入</p><ul><li><p>N：不能装在一起的货物对的数量，不超过10000</p></li><li><p>M：要运输的货物的组数，不超过100</p></li><li><p>N组不能装在一起的货物：每组包括两个货物索引</p></li><li><p>M组货物</p><p>  第一个数字K（不超过1000）是货物的数量，然后剩下的是货物索引（5位数字）</p></li></ul></li><li><p>输出</p><p>  对于M组货物中的每组，如果其中没有不可以装在一起的货物则输出Yes，否则输出No</p></li></ul><h1 id="题解一"><a href="#题解一" class="headerlink" title="题解一"></a>题解一</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>这个思路会超时</strong></p><ol><li>通过map和hash记录两个货物是否可以被装在一起，相当于一个邻接矩阵<ul><li>为什么不定义矩阵？如果要用矩阵，在这里就需要定义一个100000×100000的bool矩阵，大概会占用10GB，而内存限制是64MB。</li></ul></li><li>对于每组货物，两两判断是否不相容，是一个两层循环，时间复杂度是$K^2$，再算上M组查询，时间复杂度就是$MK^2$，最大值为100×1000×1000=1e8，大概会耗时1秒，肯定会超过400ms的时间限制。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1149</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/1038429908921778176</span></span><br><span class="line"><span class="comment">// Tags: Graph Map Hash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> good1, good2;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; incompatible; <span class="comment">// 通过map和hash记录两个货物是否可以被装在一起</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (n--)&#123; <span class="comment">// 通过map和hash记录两个货物是否可以被装在一起</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;good1, &amp;good2);</span><br><span class="line">        incompatible[good1 * <span class="number">100000</span> + good2] = <span class="literal">true</span>;</span><br><span class="line">        incompatible[good2 * <span class="number">100000</span> + good1] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)&#123; <span class="comment">//判断m组货物</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; goods(k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) <span class="comment">// 记录k个货物</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;goods[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> isYes = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)&#123; <span class="comment">//判断k个货物是否可以放在一起</span></span><br><span class="line">            good1 = goods[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; k; j++)&#123;</span><br><span class="line">                good2 = goods[j];</span><br><span class="line">                <span class="keyword">if</span> (incompatible[good1 * <span class="number">100000</span> + good2] || incompatible[good2 * <span class="number">100000</span> + good1])&#123;</span><br><span class="line">                    isYes = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        <span class="keyword">if</span> (isYes)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题解二"><a href="#题解二" class="headerlink" title="题解二"></a>题解二</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><ol><li><p>使用邻接表保存每个货物的不能装在一起的货物</p></li><li><p>对于每组货物，使用一维数组保存每个货物是否在这组货物中</p></li><li><p>查询邻接表，并通过一维数组判断每个货物的不相容货物是否出现在这组货物中</p><p> 这里也是用了两层循环，但这两层循环的时间复杂度是$N$，再算上M组查询，时间复杂度就是$MN$，最大值为100×10000=1e6。</p></li></ol><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1149</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/1038429908921778176</span></span><br><span class="line"><span class="comment">// Tags: Graph Map Hash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; incompatible[<span class="number">100000</span>]; <span class="comment">// 邻接表，货物与哪些货物不能装在一起</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k, good1, good2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (n--)&#123;  <span class="comment">// 建立邻接表</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;good1, &amp;good2);</span><br><span class="line">        incompatible[good1].push_back(good2);</span><br><span class="line">        incompatible[good2].push_back(good1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)&#123; <span class="comment">// m组货物</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; goods(k); <span class="comment">// 该组货物</span></span><br><span class="line">        <span class="keyword">bool</span> contained[<span class="number">100000</span>]=&#123;<span class="literal">false</span>&#125;; <span class="comment">// 该组货物中有哪些货物</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123; <span class="comment">// 记录该组货物</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;goods[i]);</span><br><span class="line">            contained[goods[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> isYes = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123; <span class="comment">// 查询邻接表，并通过一维数组判断每个货物的不相容货物是否出现在这组货物中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; incompatible[goods[i]].size(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (contained[incompatible[goods[i]][j]])&#123;</span><br><span class="line">                    isYes = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        <span class="keyword">if</span> (isYes)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/liuchuo/article/details/82560836" target="_blank" rel="noopener">https://blog.csdn.net/liuchuo/article/details/82560836</a></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="图" scheme="https://chouxianyu.github.io/tags/%E5%9B%BE/"/>
    
      <category term="哈希" scheme="https://chouxianyu.github.io/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1134Vertex Cover</title>
    <link href="https://chouxianyu.github.io/2020/09/01/PAT%E7%94%B2%E7%BA%A71134Vertex-Cover/"/>
    <id>https://chouxianyu.github.io/2020/09/01/PAT甲级1134Vertex-Cover/</id>
    <published>2020-09-01T14:18:12.000Z</published>
    <updated>2020-09-06T08:32:36.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805346428633088" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805346428633088</a></p><h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><ul><li><p>vertex cover</p><p>  vertex cover指图中的每条边都和这组顶点中至少一个顶点相关，先给定一个图和几组顶点，请判断这几组顶点是否为vertex cover</p></li><li><p>输入</p><ul><li><p>N：顶点数量，不超过10000</p></li><li><p>M：边的数量，不超过10000</p></li><li><p>M条边：顶点通过[0,N-1]表示/索引</p></li><li><p>K：有几组顶点，不超过100</p></li><li><p>K组顶点</p><p>  一组顶点的第一个数字是顶点数量，剩下的是顶点索引</p></li></ul></li><li><p>输出</p><ul><li>是vertex则输出Yes，不是则输出No</li></ul></li></ul><h1 id="题解一"><a href="#题解一" class="headerlink" title="题解一"></a>题解一</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li><p>定义Edge结构体，包括两个端点</p></li><li><p>把M条边存入vector</p></li><li><p>将顶点组存入set（vector也可以）</p></li><li><p>遍历每条边判断其两个端点是否在set中</p><p>  只要有一条边的两个端点都不在set中，则不是vertex cover</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1134</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/994805346428633088</span></span><br><span class="line"><span class="comment">// Tags: Graph Hash Set</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v1, v2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt; edges(m); <span class="comment">// 存储边</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;edges[i].v1, &amp;edges[i].v2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">    <span class="keyword">while</span> (k--)&#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; vertices;</span><br><span class="line">        <span class="keyword">int</span> vertexNum, vertex;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;vertexNum);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++)&#123; <span class="comment">// 将一组顶点存入set</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;vertex);</span><br><span class="line">            vertices.insert(vertex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> isVertexCover = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = edges.begin(); it != edges.end(); it++)&#123;</span><br><span class="line">            <span class="comment">// 只要有一条边的两个端点都不在set中，则不是vertex cover</span></span><br><span class="line">            <span class="keyword">if</span> (vertices.find(it-&gt;v1) == vertices.end() &amp;&amp; vertices.find(it-&gt;v2) == vertices.end())&#123;</span><br><span class="line">                isVertexCover = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isVertexCover)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题解二"><a href="#题解二" class="headerlink" title="题解二"></a>题解二</h1><p>比上一个方法快</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><ul><li>给M条边编号为[0,M-1]</li><li>读取每条边时，保存每个顶点与哪条边相关，将这个信息存入vector</li><li>定义vector表示各条边是否被覆盖，遍历上一步得到的vector标记各条边是否被覆盖，最后遍历这一步定义的vector判断是否符合vertex cover的条件</li></ul><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>一个顶点可以和多条边相关</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1134</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/994805346428633088</span></span><br><span class="line"><span class="comment">// Tags: Graph Hash Set</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cover[n]; <span class="comment">// cover[2].push_back(3) 代表顶点2覆盖了边3</span></span><br><span class="line">    <span class="keyword">int</span> v1, v2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;v1, &amp;v2);</span><br><span class="line">        cover[v1].push_back(i);</span><br><span class="line">        cover[v2].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">    <span class="keyword">while</span> (k--)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; isCovered(m, <span class="literal">false</span>); <span class="comment">// m条边是否被覆盖</span></span><br><span class="line">        <span class="keyword">int</span> vertexNum, vertex;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;vertexNum);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++)&#123; <span class="comment">// 遍历顶点，将其覆盖的边标记</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;vertex);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cover[vertex].size(); j++)</span><br><span class="line">                isCovered[cover[vertex][j]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> isVertexCover = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (isCovered[i] == <span class="literal">false</span>)&#123;</span><br><span class="line">                isVertexCover = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;       </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isVertexCover)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/liuchuo/article/details/78037329" target="_blank" rel="noopener">https://blog.csdn.net/liuchuo/article/details/78037329</a></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="图" scheme="https://chouxianyu.github.io/tags/%E5%9B%BE/"/>
    
      <category term="set" scheme="https://chouxianyu.github.io/tags/set/"/>
    
      <category term="点覆盖" scheme="https://chouxianyu.github.io/tags/%E7%82%B9%E8%A6%86%E7%9B%96/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1139First Contact</title>
    <link href="https://chouxianyu.github.io/2020/09/01/PAT%E7%94%B2%E7%BA%A71139First-Contact/"/>
    <id>https://chouxianyu.github.io/2020/09/01/PAT甲级1139First-Contact/</id>
    <published>2020-09-01T09:16:39.000Z</published>
    <updated>2020-09-01T09:18:59.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805344776077312" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805344776077312</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><ul><li><p>背景</p><p>  男生A喜欢女孩B，A找男生C让女孩D跟B说，其中C是A的朋友，D是B和C的朋友。女生也是这样联系男生</p></li><li><p>输入</p><ul><li>N：人的数量，1到300</li><li>M：朋友关系的数量</li><li>M个朋友关系：用4位数字表示一个人，其中负数代表性别是女生</li><li>K：查询数量，不超过100</li><li>K次查询：每次查询是A和B的ID，假设A喜欢B</li></ul></li><li><p>输出</p><ul><li><p>输出有几对C和D可以帮助A联系B</p></li><li><p>输出这几对C和D</p><ul><li><p>如果A和B是异性，则A和C应该是同性，B和D同性；如果A和B是同性，则这4人性别应该相同</p><p>  即A和C同性，B和D同性</p></li><li><p>先按C的ID非降序输出，再按D的ID增序输出</p></li></ul></li></ul></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>使用邻接矩阵表示两个人是否是朋友，用邻接表存储一个人的同性朋友</li><li>给定A和B以后，枚举A的朋友C，枚举B的朋友D，如果C和D是朋友则保存C和D</li></ol><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>输出时要以4位数字输出，用<code>printf(&quot;%04d&quot;)</code>，第二和第三个测试点都测试了这个</li><li>如果用int接收一对朋友，-0000和0000对于int来说都是0，将无法得知这个人的性别<ul><li>在这里我对他们的id进行了处理：把女生映射到[0,9999]，男生映射到[10000,19999]</li><li>也可以使用其他的哈希方法</li></ul></li><li>正常回路为A-C-D-B，不可以形成A-B-D-B或A-C-A-B的回路，即AD不相等、BC不相等</li><li><strong>写循环代码时注意一些变量是否会随着循环运行而改变，比如数组大小、外层循环变量是否被内层循环改变</strong></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1139</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/994805344776077312</span></span><br><span class="line"><span class="comment">// Tags: Graph Hash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isFriend[<span class="number">20000</span>][<span class="number">20000</span>]; <span class="comment">// 邻接矩阵</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; friends[<span class="number">20000</span>]; <span class="comment">// 邻接表，同性朋友</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Helper</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> c, d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">transform</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 将负数映射到[0,9999]，将正数映射到[10000,19999]</span></span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'-'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(stoi(s));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">10000</span> + stoi(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">restore</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 将transform得到的[0,19999]的数字映射到[0,9999]，即原来的[-9999,9999]取绝对值得到[0,9999]，以进行输出</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">9999</span>)</span><br><span class="line">        <span class="keyword">return</span> num - <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">helperCmp</span><span class="params">(Helper&amp; h1, Helper&amp; h2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h1.c == h2.c ? h1.d &lt; h2.d : h1.c &lt; h2.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k, a, b, c ,d;</span><br><span class="line">    <span class="built_in">string</span> s, t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123; <span class="comment">// 将图存入邻接矩阵和邻接表</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        a = transform(s);</span><br><span class="line">        b = transform(t);</span><br><span class="line">        isFriend[a][b] = isFriend[b][a] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (a&lt;<span class="number">10000</span> &amp;&amp; b&lt;<span class="number">10000</span>) || (a&gt;<span class="number">9999</span> &amp;&amp; b&gt;<span class="number">9999</span>) )&#123; <span class="comment">// 同性则存储到邻接表</span></span><br><span class="line">            friends[a].push_back(b);</span><br><span class="line">            friends[b].push_back(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">    <span class="keyword">while</span> (k--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        a = transform(s);</span><br><span class="line">        b = transform(t);</span><br><span class="line">        <span class="built_in">vector</span>&lt;Helper&gt; helpers;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it1 = friends[a].begin(); it1 != friends[a].end(); it1++)&#123;</span><br><span class="line">            c = *it1;</span><br><span class="line">            <span class="keyword">if</span> (c == b) <span class="comment">// C和B不能是一个人</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it2 = friends[b].begin(); it2 != friends[b].end(); it2++)&#123;</span><br><span class="line">                d = *it2;</span><br><span class="line">                <span class="keyword">if</span> (d == a) <span class="comment">// D和A不能是一个人</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (isFriend[c][d])</span><br><span class="line">                    helpers.push_back(&#123;restore(c), restore(d)&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(helpers.begin(), helpers.end(), helperCmp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, helpers.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = helpers.begin(); it != helpers.end(); it++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%04d %04d\n"</span>, it-&gt;c, it-&gt;d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一份超时的代码"><a href="#一份超时的代码" class="headerlink" title="一份超时的代码"></a>一份超时的代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1139</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/994805344776077312</span></span><br><span class="line"><span class="comment">// Tags: Graph Hash Map</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Helper</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> c, d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">helperCmp</span><span class="params">(Helper&amp; h1, Helper&amp; h2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(stoi(h1.c)) == <span class="built_in">abs</span>(stoi(h2.c)) ? <span class="built_in">abs</span>(stoi(h1.d)) &lt; <span class="built_in">abs</span>(stoi(h2.d)) : <span class="built_in">abs</span>(stoi(h1.c)) &lt; <span class="built_in">abs</span>(stoi(h2.c));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">string</span> a, b, c, d;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; friends; <span class="comment">// 会很耗时</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123; <span class="comment">// 存储朋友关系</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] != <span class="string">'-'</span>)</span><br><span class="line">            a = <span class="string">'+'</span> + a;</span><br><span class="line">        <span class="keyword">if</span> (b[<span class="number">0</span>] != <span class="string">'-'</span>)</span><br><span class="line">            b = <span class="string">'+'</span> + b;</span><br><span class="line">        friends[a].push_back(b);</span><br><span class="line">        friends[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">    <span class="keyword">while</span> (k--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b; <span class="comment">// a喜欢b</span></span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] != <span class="string">'-'</span>)</span><br><span class="line">            a = <span class="string">'+'</span> + a;</span><br><span class="line">        <span class="keyword">if</span> (b[<span class="number">0</span>] != <span class="string">'-'</span>)</span><br><span class="line">            b = <span class="string">'+'</span> + b;</span><br><span class="line">        <span class="built_in">vector</span>&lt;Helper&gt; helpers;</span><br><span class="line">        <span class="comment">// 下边这个大的for循环也很耗时间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it1 = friends[a].begin(); it1 != friends[a].end(); it1++)&#123;</span><br><span class="line">            c = *it1; <span class="comment">// a的朋友c</span></span><br><span class="line">            <span class="keyword">if</span> (b == c || a[<span class="number">0</span>] != c[<span class="number">0</span>]) <span class="comment">// a和c不可以是同一个人，且应该是同性</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it2 = friends[c].begin(); it2 != friends[c].end(); it2++)&#123;</span><br><span class="line">                d = *it2; <span class="comment">// c的朋友d</span></span><br><span class="line">                <span class="keyword">if</span> (a == d || b[<span class="number">0</span>] != d[<span class="number">0</span>]) <span class="comment">// a和d不可以是同一个人，且应该是同性</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (find(friends[d].begin(), friends[d].end(), b) != friends[d].end())&#123;</span><br><span class="line">                    helpers.push_back(&#123;c, d&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(helpers.begin(), helpers.end(), helperCmp); <span class="comment">// 按id升序存储，达到题目输出要求</span></span><br><span class="line">        <span class="keyword">int</span> num = helpers.size();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%04d %04d\n"</span>, <span class="built_in">abs</span>(stoi(helpers[i].c)), <span class="built_in">abs</span>(stoi(helpers[i].d)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/liuchuo/article/details/79065004" target="_blank" rel="noopener">https://blog.csdn.net/liuchuo/article/details/79065004</a></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="图" scheme="https://chouxianyu.github.io/tags/%E5%9B%BE/"/>
    
      <category term="map" scheme="https://chouxianyu.github.io/tags/map/"/>
    
      <category term="哈希" scheme="https://chouxianyu.github.io/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1154Vertex Coloring</title>
    <link href="https://chouxianyu.github.io/2020/08/30/PAT%E7%94%B2%E7%BA%A71154Vertex-Coloring/"/>
    <id>https://chouxianyu.github.io/2020/08/30/PAT甲级1154Vertex-Coloring/</id>
    <published>2020-08-30T09:49:06.000Z</published>
    <updated>2020-09-06T08:31:26.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1071785301894295552" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/1071785301894295552</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul><li>k着色：相邻（有共享边）点的颜色不同</li><li>输入<ul><li>N：点的数量，点的编号为[0,N-1]，不超过10000</li><li>M：边的数量，不超过10000</li><li>M条边</li><li>K：着色方案的数量，不超过100</li><li>K个着色方案：每行有N个数字，第i个数字就是第i个点的颜色，相同数字代表同色</li></ul></li><li>输出<ul><li>对于每个着色方案，如果它是某个k着色，则输出<code>k-coloring</code>，否则输出<code>No</code></li></ul></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>把所有边存起来</li><li>把所有点的颜色存起来，并把颜色放入set中统计颜色个数</li><li>检查每条边两个点的颜色是否相同</li></ol><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>cin、cout是会比scanf、printf慢的，如果用cin、cout，第三个测试点可能会超时</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1154</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/1071785301894295552</span></span><br><span class="line"><span class="comment">// Tags: Graph Map Set</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span><span class="keyword">int</span> v1, v2;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">vector</span>&lt;Node&gt; edges(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="comment">// 获取边</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;edges[i].v1, &amp;edges[i].v2);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">    <span class="keyword">while</span> (k--) &#123; <span class="comment">// k个着色方案</span></span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; vColors;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; colors;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)&#123; <span class="comment">// 获取着色方案</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;vColors[i]);</span><br><span class="line">            colors.insert(vColors[i]); <span class="comment">// 存储颜色</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> isYes = <span class="literal">true</span>;  <span class="comment">// 判断着色方案是否符合k着色标准</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">if</span> (vColors[edges[i].v1] == vColors[edges[i].v2])&#123;</span><br><span class="line">                isYes = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (isYes)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d-coloring\n"</span>, colors.size());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="图" scheme="https://chouxianyu.github.io/tags/%E5%9B%BE/"/>
    
      <category term="set" scheme="https://chouxianyu.github.io/tags/set/"/>
    
      <category term="map" scheme="https://chouxianyu.github.io/tags/map/"/>
    
      <category term="点着色" scheme="https://chouxianyu.github.io/tags/%E7%82%B9%E7%9D%80%E8%89%B2/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1137Final Grading</title>
    <link href="https://chouxianyu.github.io/2020/08/28/PAT%E7%94%B2%E7%BA%A71137Final-Grading/"/>
    <id>https://chouxianyu.github.io/2020/08/28/PAT甲级1137Final-Grading/</id>
    <published>2020-08-28T15:16:44.000Z</published>
    <updated>2020-08-28T15:17:37.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805345401028608" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805345401028608</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><ul><li><p>要获得证书，一个学生的在线编程作业至少要拿到200分，最后评分G至少要拿到60分。</p><p>  如果期中分数大于期末分数，则G等于期中成绩乘以40%+期末成绩乘以60%，否则G等于期末成绩</p></li><li><p>输入</p><ul><li><p>第一行</p><p>  三个数字，都不超过10000</p><ul><li>P：完成网上在线作业的学生的数量</li><li>M：参加期中考试的学生的数量</li><li>N：参加期末考试的学生的数量</li></ul></li><li><p>P个学生网上在线作业的成绩</p></li><li><p>M个学生期中考试的成绩</p></li><li><p>N个学生期末考试的成绩</p></li></ul></li><li><p>输出</p><p>  输出获得证书的学生的ID及其3个成绩，按G(四舍五入到整数)降序输出，如果G相等，则按ID升序输出。如果某学生某些成绩不存在，则输出-1</p></li></ul><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><ul><li><p>assignment</p><p>  工作、任务</p><p>  分配、指派</p></li><li><p>certificate</p><p>  证明</p></li><li><p>round</p><p>  四舍五入</p></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>先读取在线编程作业分数，如果小于200，就不记录该学生的信息</li><li>在第一步记录的学生范围内，记录其期中分数</li><li>在第一步记录的学生范围内，记录其期末分数，同时计算其最后分数G，如果G大于60，则存入vector</li><li>将vector排序</li><li>输出</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1137</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/994805345401028608</span></span><br><span class="line"><span class="comment">// Tags: unordered_map vector sort</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> id;</span><br><span class="line">    <span class="keyword">int</span> gp=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> gm=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> gf=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> g=<span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">studentCmp</span><span class="params">(Student&amp; s1, Student&amp; s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.g == s2.g ? s1.id &lt; s2.id : s1.g &gt; s2.g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p, m, n;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, Student&gt; students_map;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str &gt;&gt; score;</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">200</span>)&#123;  <span class="comment">// 在线编程分数大于200才行（不允许该分数不存在）</span></span><br><span class="line">            students_map[str].id = str;</span><br><span class="line">            students_map[str].gp = score;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str &gt;&gt; score;</span><br><span class="line">        <span class="keyword">if</span> (students_map.find(str) != students_map.end()) <span class="comment">// 避免创建新的学生</span></span><br><span class="line">            students_map[str].gm = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Student&gt; students_vec;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str &gt;&gt; score;</span><br><span class="line">        <span class="keyword">if</span> (students_map.find(str) != students_map.end())&#123; <span class="comment">// 避免创建新的学生</span></span><br><span class="line">            students_map[str].gf = score;</span><br><span class="line">            <span class="keyword">if</span> (students_map[str].gm &gt; students_map[str].gf)</span><br><span class="line">                students_map[str].g = round(students_map[str].gm * <span class="number">0.4</span> + students_map[str].gf * <span class="number">0.6</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                students_map[str].g = students_map[str].gf;</span><br><span class="line">            <span class="keyword">if</span> (students_map[str].g &gt;= <span class="number">60</span>)</span><br><span class="line">                students_vec.push_back(students_map[str]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(students_vec.begin(), students_vec.end(), studentCmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = students_vec.begin(); it != students_vec.end(); it++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s %d %d %d %d\n"</span>, it-&gt;id.c_str(), it-&gt;gp, it-&gt;gm, it-&gt;gf, it-&gt;g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/weixin_44385565/article/details/88669948" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44385565/article/details/88669948</a></p><p><a href="https://blog.csdn.net/liuchuo/article/details/79064895" target="_blank" rel="noopener">https://blog.csdn.net/liuchuo/article/details/79064895</a></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="map" scheme="https://chouxianyu.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1141PAT Ranking of Institutions</title>
    <link href="https://chouxianyu.github.io/2020/08/11/PAT%E7%94%B2%E7%BA%A71141PAT-Ranking-of-Institutions/"/>
    <id>https://chouxianyu.github.io/2020/08/11/PAT甲级1141PAT-Ranking-of-Institutions/</id>
    <published>2020-08-11T06:14:01.000Z</published>
    <updated>2020-08-11T06:17:01.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805344222429184" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805344222429184</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>n个考生，每个考生信息为：</p><ul><li><p>ID</p><p>  6个字符的字符串，第一位是考试等级（B、A、T）</p></li><li><p>score</p><p>  分数，[0,100]的整数</p></li><li><p>school</p><p>  不超6位的学校码，由英文字母组成，不区分大小写，但输入中有大小写</p></li></ul><p>请输出：</p><ul><li><p>第一行输出学校的数量</p></li><li><p>然后按rank的非降序输出Rank School TWS Ns</p><ul><li><p>rank是排名，从1开始，根据TWS非升序排序。</p><p>  如果TWS相等，则两校的rank也相等，且应按NS增序输出；如果Ns也相等，则按学校码的字母表顺序输出</p></li><li><p>school是学校码，用小写输出</p></li><li><p>TWS是加权分，等于该校B级考生总分/1.5+该校A级考生总分+该校T级考生总分*1.5，只取计算结果的整数部分</p></li><li><p>Ns是该校的考生数</p></li></ul></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li><p>注意将学校码转换为小写</p></li><li><p>输出顺序有两方面：</p><ul><li>如果TWS相等，则两校的rank也相等，这一点要在最后控制</li><li>其它输出顺序通过sort函数使用的cmp函数控制</li></ul></li><li><p>我这里是使用了一个map，最后存入vector排序；也可以使用两个map（键都为学校码），一个存每个TWS，一个存Ns，最后都存入vector</p><p>  我计算TWS的方法比较麻烦，因为刚开始理解错了TWS的公式</p></li><li><p>用map而不是unorder_map的话，最后一个测试点会超时</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1141</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/994805344222429184</span></span><br><span class="line"><span class="comment">// Tags: map unordered_map sort</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">School</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> code;  <span class="comment">// 小写的学校码</span></span><br><span class="line">    <span class="keyword">double</span> testeeScoreSums[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> TWS;</span><br><span class="line">    <span class="keyword">int</span> Ns = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calcTWS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;TWS = testeeScoreSums[<span class="number">0</span>] / <span class="number">1.5</span> + testeeScoreSums[<span class="number">1</span>] + testeeScoreSums[<span class="number">2</span>] * <span class="number">1.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照要求比较两个学校</span></span><br><span class="line"><span class="comment">// 根据TWS非升序排序。如果TWS相等，则按Ns增序输出；如果Ns也相等，则按学校码的字母表顺序输出</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">schoolCmp</span><span class="params">(School &amp;s1, School &amp;s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.TWS == s2.TWS)</span><br><span class="line">        <span class="keyword">if</span> (s1.Ns == s2.Ns)</span><br><span class="line">            <span class="keyword">return</span> s1.code &lt; s2.code;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> s1.Ns &lt; s2.Ns;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> s1.TWS &gt; s2.TWS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, score; <span class="comment">// the number of testees, the score of a testee</span></span><br><span class="line">    <span class="built_in">string</span> id, schoolCode, testLevels=<span class="string">"BAT"</span>; <span class="comment">// the id of a testee, the school of a testee, three test levels</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, School&gt; schoolsMap;  <span class="comment">// 键为学校码，值为学校</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取输入</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; id &gt;&gt; score &gt;&gt; schoolCode;</span><br><span class="line">        transform(schoolCode.begin(), schoolCode.end(), schoolCode.begin(), ::<span class="built_in">tolower</span>);  <span class="comment">// 将学校码转为小写</span></span><br><span class="line">        schoolsMap[schoolCode].code = schoolCode;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            <span class="keyword">if</span>(id[<span class="number">0</span>] == testLevels[j])&#123;</span><br><span class="line">                schoolsMap[schoolCode].testeeScoreSums[j] += score; <span class="comment">// 分别统计该校三个等级考生的总分</span></span><br><span class="line">                schoolsMap[schoolCode].Ns += <span class="number">1</span>;  <span class="comment">// 统计该校考生数</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将学校存入vector并排序</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;School&gt; schools;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, School&gt;::iterator it = schoolsMap.begin(); it != schoolsMap.end(); it++)&#123;</span><br><span class="line">        it-&gt;second.calcTWS();</span><br><span class="line">        schools.push_back(it-&gt;second);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(schools.begin(), schools.end(), schoolCmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果，如果TWS相等，则两校的rank也相等，其它输出顺序要求已通过schoolCmp控制</span></span><br><span class="line">    <span class="keyword">int</span> schoolNum = schools.size(), rank = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n%d %s %d %d\n"</span>, schoolNum, rank, schools[<span class="number">0</span>].code.c_str(), schools[<span class="number">0</span>].TWS, schools[<span class="number">0</span>].Ns);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; schoolNum; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(schools[i].TWS &lt; schools[i<span class="number">-1</span>].TWS)</span><br><span class="line">            rank = i+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %s %d %d\n"</span>, rank, schools[i].code.c_str(), schools[i].TWS, schools[i].Ns);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="map" scheme="https://chouxianyu.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1153Decode Registration Card of PAT</title>
    <link href="https://chouxianyu.github.io/2020/08/10/PAT%E7%94%B2%E7%BA%A71153Decode-Registration-Card-of-PAT/"/>
    <id>https://chouxianyu.github.io/2020/08/10/PAT甲级1153Decode-Registration-Card-of-PAT/</id>
    <published>2020-08-10T14:11:51.000Z</published>
    <updated>2020-08-10T14:13:42.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/1071785190929788928" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/1071785190929788928</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="题目要求和思路"><a href="#题目要求和思路" class="headerlink" title="题目要求和思路"></a>题目要求和思路</h2><p>PAT注册号分4个部分：</p><ul><li>第1位字母代表考试等级</li><li>第2到4位数字是考试地点，大小从101到999</li><li>第5到10位数字为考试日期</li><li>第11到13位数字是考生号，大小从000到999</li></ul><ul><li><p>1：给定考试等级，要求输出该考试等级所有考生的注册号和分数（注册号升序，分数非升序）</p><p>  遍历找出指定考试等级的考生，然后排序输出</p></li><li><p>2：给定考试地点，要求输出该考试地点中考生数和考生分数之和</p><p>  遍历找出指定考试地点的考生，然后统计数据</p></li><li><p>3：给定考试时间，要求输出每个考试地点的考生数（考试地点升序，考生数非升序）</p><p>  遍历考生， 统计每个考试地点的考生数到unordered_map里（统计到map里会超时），键是考试地点，值是考生数，然后输出（我这里是先存入vector再输出）</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1153</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/1071785190929788928</span></span><br><span class="line"><span class="comment">// Tags: map unordered_map sort</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存参试者的信息和最终要输出的结果</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">nodeCmp</span><span class="params">(Node&amp; t1, Node&amp; t2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t1.val == t2.val ? t1.str &lt; t2.str : t1.val &gt; t2.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取考生信息</span></span><br><span class="line">    <span class="keyword">int</span> n, m;  <span class="comment">// 输入和查询的数量</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Node&gt; testees(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; testees[i].str &gt;&gt; testees[i].val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取要求并求解</span></span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="built_in">string</span> term;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> caseIndex = <span class="number">1</span>; caseIndex &lt;= m; caseIndex++)&#123;</span><br><span class="line">        <span class="comment">// 获取要求</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; type &gt;&gt; term;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d %s\n"</span>, caseIndex, type, term.c_str());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// type为1和3时的结果</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;Node&gt; results;</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> : &#123;</span><br><span class="line">                <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                    <span class="keyword">if</span> (testees[i].str[<span class="number">0</span>] == term[<span class="number">0</span>])</span><br><span class="line">                        results.push_back(testees[i]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> : &#123;</span><br><span class="line">                <span class="keyword">int</span> testeeNum = <span class="number">0</span>, testeeScoreSum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                    <span class="keyword">if</span> (testees[i].str.substr(<span class="number">1</span>, <span class="number">3</span>) == term)&#123;</span><br><span class="line">                        testeeNum += <span class="number">1</span>;</span><br><span class="line">                        testeeScoreSum += testees[i].val;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">if</span> (testeeNum == <span class="number">0</span> &amp;&amp; testeeScoreSum == <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"NA\n"</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, testeeNum, testeeScoreSum);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span> : &#123;</span><br><span class="line">                <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; statistics;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                    <span class="keyword">if</span> (testees[i].str.substr(<span class="number">4</span>, <span class="number">6</span>) == term)</span><br><span class="line">                        statistics[testees[i].str.substr(<span class="number">1</span>, <span class="number">3</span>)] += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> it : statistics)</span><br><span class="line">                    results.push_back(&#123;it.first, it.second&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span> || type == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (results.empty())</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"NA\n"</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sort(results.begin(), results.end(), nodeCmp);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; results.size(); i++)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>, results[i].str.c_str(), results[i].val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="map" scheme="https://chouxianyu.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>使用Python语言通过PyQt5和socket实现UDP服务器</title>
    <link href="https://chouxianyu.github.io/2020/08/10/%E4%BD%BF%E7%94%A8Python%E8%AF%AD%E8%A8%80%E9%80%9A%E8%BF%87PyQt5%E5%92%8Csocket%E5%AE%9E%E7%8E%B0UDP%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://chouxianyu.github.io/2020/08/10/使用Python语言通过PyQt5和socket实现UDP服务器/</id>
    <published>2020-08-10T07:07:03.000Z</published>
    <updated>2020-08-10T07:12:19.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近做了一个小软件，记录一下相关内容。</p><h2 id="已有条件"><a href="#已有条件" class="headerlink" title="已有条件"></a>已有条件</h2><p>现在已有一个硬件设备作为客户端（暂称其为“电路”）。</p><p>基于SIM卡，电路可以通过UDP协议传输数据（程序已经内置在电路中），只需要修改配置文件（位于SD卡中，主要修改服务器端的IP和端口）即可。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>我面向的需求是这样的：我需要开发一个服务器端的程序，接收多个客户端发来的数据并开发可视化界面。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从开发角度和技术角度来看，软件的基础和核心技术是使用<strong>UDP协议</strong>进行数据传输，并使用PyQt5和pyqtgraph做可视化界面（还用到了QThread和自定义的下拉复选框），开发过程中还涉及到了内网穿透和NATAPP。</p><h1 id="理论基础：运输层"><a href="#理论基础：运输层" class="headerlink" title="理论基础：运输层"></a>理论基础：运输层</h1><p>为使用UDP协议进行数据传输，我大致复习了一下计算机网络中的运输层。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>运输层实现两台主机中<strong>进程</strong>之间的通信，一个主机中的多个进程可以和另一台主机中的多个进程通信。</p><p>运输层实现上述功能的方案是端口（port）</p><h2 id="两个主要协议"><a href="#两个主要协议" class="headerlink" title="两个主要协议"></a>两个主要协议</h2><p>运输层有两个主要协议：</p><ul><li>传输控制协议TCP（Transmission Control Protocol）</li><li>用户数据报协议UDP（User Datagram Protocol）</li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><ul><li>TCP是<strong>面向连接</strong>的<ul><li>应用进程在传输数据前必须先建立连接，数据传送结束后要释放连接</li></ul></li><li>TCP连接是<strong>点对点</strong>的<ul><li>每一条TCP连接只能有两个端点</li><li>TCP不提供广播或多播服务</li></ul></li><li>TCP提供<strong>可靠交付</strong>的服务<ul><li>通过TCP连接传送的数据，无差错、不丢失、不重复，并且按序到达</li></ul></li><li>TCP<strong>面向字节流</strong><ul><li>虽然应用程序和TCP的交互是一次一个数据块（大小不等），但TCP把应用程序交下来的数据仅仅看成一连串的无结构的字节流。</li><li>TCP不保证接收方应用程序所收到的数据块和发送方应用程序所发出的数据块具有对应大小</li><li>TCP保证接收方应用程序收到的字节流必须和发送方应用程序发出的字节流完全一样，同时接收方应用程序必须有能力识别收到的字节流，把它还原成有意义的应用层数据</li></ul></li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><ul><li>UDP是<strong>无连接</strong>的<ul><li>在传输数据前不需要先建立连接，主机在收到UDP报文后不需要给出任何确认</li></ul></li><li>UDP是<strong>面向报文</strong>的<ul><li>发送方：UDP对应用层交下来的报文，不合并也不拆分，添加首部后就交付给IP层</li><li>接收方：UDP对IP层交上来的UDP用户数据包，在去除首部后就直接交付给应用层的进程</li></ul></li><li>UDP<strong>尽最大努力交付</strong><ul><li>不保证可靠交付</li></ul></li><li>UDP<strong>支持一对一、一对多、多对一和多对多</strong>的交互通信</li></ul><h1 id="Python中的UDP编程"><a href="#Python中的UDP编程" class="headerlink" title="Python中的UDP编程"></a>Python中的UDP编程</h1><p>Python中的UDP编程可以通过<code>socket</code>来实现，下面是一个简单样例</p><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server_ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">server_port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立套接字</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  <span class="comment"># socket.SOCK_DGRAM代表是UDP通信</span></span><br><span class="line"><span class="comment"># 绑定IP和端口</span></span><br><span class="line">s.bind((server_ip, server_port))</span><br><span class="line">print(<span class="string">'Bind UDP Server on %s:%s'</span> % (server_ip, server_port))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="comment"># 接收数据</span></span><br><span class="line">    data, addr = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(addr, <span class="string">"\t"</span>, data)</span><br><span class="line">    <span class="comment"># 发送数据</span></span><br><span class="line">    s.sendto(<span class="string">b'Received:%s'</span>%data, addr)</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server_ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">server_port = <span class="number">59955</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  <span class="comment"># socket.SOCK_DGRAM代表是UDP通信</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> [<span class="string">b'Michael'</span>, <span class="string">b'Tracy'</span>, <span class="string">b'Sarah'</span>]:</span><br><span class="line">    <span class="comment"># 发送数据</span></span><br><span class="line">    s.sendto(data, (server_ip, server_port))</span><br><span class="line">    <span class="comment"># 接收数据</span></span><br><span class="line">    <span class="comment"># print(s.recv(1024).decode('utf-8'))</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h2 id="值得注意的问题：缓冲区机制"><a href="#值得注意的问题：缓冲区机制" class="headerlink" title="值得注意的问题：缓冲区机制"></a>值得注意的问题：缓冲区机制</h2><p>UDP通信时，两个主机都要建立一个socket。</p><p>我这里的情况是客户端会一直给服务器端发数据。</p><p>在服务器端我发现socket一旦建立（准确来讲是创建socket对象并绑定至本地端口），就会一直接收数据，而不是调用recvfrom等函数（这类函数用来接收数据）时才会接收。</p><p>估计这是缓冲区机制，UDP应该就是这么设计的。大概就是socket对象创建后，收到的内容就会放入缓冲区，如果调用了recvfrom等数据接收函数就从缓冲区中取出数据。</p><h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><h2 id="为什么要用内网穿透"><a href="#为什么要用内网穿透" class="headerlink" title="为什么要用内网穿透"></a>为什么要用内网穿透</h2><p>先不讲内网穿透是什么，有兴趣的可以自己去查查，下面我大概讲讲我浅显的理解。</p><p>在开发服务器端程序的过程中，我用的是自己的电脑，连接的网络是手机热点（因为在宿舍），因此我的电脑是没有公网IP的。</p><p>客户端程序用的是SIM卡，用的是公网（外网）IP，我开发的服务器端程序用的是私网（内网）IP。</p><p>公网IP是无法访问私网IP的（因为NAT），所以<strong>我需要让我的服务器端程序能够被外网访问</strong>。</p><p>问了一下<a href="https://www.cnblogs.com/roadwide/" target="_blank" rel="noopener">@roadwide</a>，他说要用内网穿透，并推荐了<strong>NATAPP</strong>等软件。</p><h2 id="NATAPP的使用"><a href="#NATAPP的使用" class="headerlink" title="NATAPP的使用"></a>NATAPP的使用</h2><p>怎么用呢？看看官方教程就知道了，链接放在文章末尾了。</p><p>讲一个比较关键的点，以理解下NATAPP是干嘛的</p><p><img src="https://cdn.natapp.cn/uploads/ueditor/php/upload/image/20170118/1484723077222282.png" alt="NATAPP截图"></p><p>NATAPP运行起来后，就会将上图红框里的URL映射到本机（127.0.0.1）的80端口。</p><p>NATAPP会给我一个URL（作为我的外网IP），这样客户端程序通过访问NATAPP给我的URL就可以间接访问我在本机运行的服务器端程序。</p><h1 id="PyQt5"><a href="#PyQt5" class="headerlink" title="PyQt5"></a>PyQt5</h1><h2 id="QThread"><a href="#QThread" class="headerlink" title="QThread"></a>QThread</h2><p>服务器端程序的界面上有两个作用分别是开始接收数据和停止接收数据的按钮。</p><p>接收数据是通过一个while循环（循环体中接收一个数据）实现的，如果点击开始接收数据的按钮，那就运行while循环直到停止接收数据的按钮被点击。</p><p>刚开始实现数据接收功能时发现程序界面会崩溃、点击不动，因为直接把while循环写在<strong>软件主界面</strong>的代码中。</p><p>后来使用了PyQt5中的QThread（也有人说QThread并不是一个线程），在一个线程中实现while循环，然后就成功了。</p><p>在实现时我参考了其他网友的代码，参考链接放在文章末尾，注意一点是实现方式不止一种，比如说有些网友说用threading也可以，而且我也发现我的思路和参考的那份代码稍有不一样（我们实现的功能是相似的，但我只用了一个pyqtSignal，而那位网友用了两个）。</p><h2 id="下拉复选框"><a href="#下拉复选框" class="headerlink" title="下拉复选框"></a>下拉复选框</h2><p>这个软件需要有一个下拉复选框，而PyQt5中并没有这个东西，因此需要手动实现，这里我参考了其他网友的实现方式，参考链接见文章末尾。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><h2 id="Python中的UDP编程-1"><a href="#Python中的UDP编程-1" class="headerlink" title="Python中的UDP编程"></a>Python中的UDP编程</h2><p><a href="https://blog.csdn.net/vict_wang/article/details/81587093" target="_blank" rel="noopener">https://blog.csdn.net/vict_wang/article/details/81587093</a></p><p><a href="https://www.jb51.net/article/165933.htm" target="_blank" rel="noopener">https://www.jb51.net/article/165933.htm</a></p><h2 id="理解NAT和内网穿透"><a href="#理解NAT和内网穿透" class="headerlink" title="理解NAT和内网穿透"></a>理解NAT和内网穿透</h2><p><a href="https://baike.baidu.com/item/nat/320024" target="_blank" rel="noopener">https://baike.baidu.com/item/nat/320024</a></p><p><a href="https://baike.baidu.com/item/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F</a></p><h2 id="NATAPP"><a href="#NATAPP" class="headerlink" title="NATAPP"></a>NATAPP</h2><p><a href="https://natapp.cn/#" target="_blank" rel="noopener">https://natapp.cn/#</a></p><p><a href="https://natapp.cn/article/natapp_newbie" target="_blank" rel="noopener">https://natapp.cn/article/natapp_newbie</a></p><h2 id="PyQt5-1"><a href="#PyQt5-1" class="headerlink" title="PyQt5"></a>PyQt5</h2><ul><li><p>PyQt5下拉式复选框QComboCheckBox</p><p>  <a href="https://blog.csdn.net/LJX4ever/article/details/78039318" target="_blank" rel="noopener">https://blog.csdn.net/LJX4ever/article/details/78039318</a></p></li><li><p>QThread实现循环</p><p>  <a href="https://segmentfault.com/a/1190000020746912?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000020746912?utm_source=tag-newest</a></p></li><li><p>AttributeError: ‘PyQt5.QtCore.pyqtSignal’ object has no attribute ‘connect’</p></li></ul><h2 id="pyqtgraph"><a href="#pyqtgraph" class="headerlink" title="pyqtgraph"></a>pyqtgraph</h2><ul><li><p>pyqtgraph中绘制多个线条（我实现这个功能时也看了pyqtgraph的example）</p><p>  <a href="https://zmister.com/archives/219.html#plot-2" target="_blank" rel="noopener">https://zmister.com/archives/219.html#plot-2</a></p></li><li><p>pyqtgraph中添加图例（legend）</p><p>  <a href="https://zmister.com/archives/220.html?replytocom=558" target="_blank" rel="noopener">https://zmister.com/archives/220.html?replytocom=558</a></p></li></ul><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近做了一个小软件，记录一下相关内容。&lt;/p&gt;
&lt;h2 id=&quot;已有条件&quot;&gt;&lt;a href=&quot;#已有条件&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="python" scheme="https://chouxianyu.github.io/tags/python/"/>
    
      <category term="计算机网络" scheme="https://chouxianyu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="UDP" scheme="https://chouxianyu.github.io/tags/UDP/"/>
    
      <category term="PyQt5" scheme="https://chouxianyu.github.io/tags/PyQt5/"/>
    
      <category term="socket" scheme="https://chouxianyu.github.io/tags/socket/"/>
    
      <category term="pyqtgraph" scheme="https://chouxianyu.github.io/tags/pyqtgraph/"/>
    
      <category term="QThread" scheme="https://chouxianyu.github.io/tags/QThread/"/>
    
      <category term="内网穿透" scheme="https://chouxianyu.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
      <category term="NATAPP" scheme="https://chouxianyu.github.io/tags/NATAPP/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级1145Hashing - Average Search Time</title>
    <link href="https://chouxianyu.github.io/2020/08/07/PAT%E7%94%B2%E7%BA%A71145Hashing-Average-Search-Time/"/>
    <id>https://chouxianyu.github.io/2020/08/07/PAT甲级1145Hashing-Average-Search-Time/</id>
    <published>2020-08-07T15:23:04.000Z</published>
    <updated>2020-08-07T15:23:51.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805343236767744" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805342720868352/problems/994805343236767744</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="基础知识：哈希"><a href="#基础知识：哈希" class="headerlink" title="基础知识：哈希"></a>基础知识：哈希</h2><p>为做这道题，我简单复习了一下<a href="https://www.cnblogs.com/chouxianyu/p/13455884.html" target="_blank" rel="noopener">哈希（点击查看）</a>。</p><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>往一个哈希表里插入n个正整数，然后从哈希表里查找m个正整数，请输出平均查找次数（即比较次数）</p><p>哈希函数定义为$H(key)= key \% TSize$，其中$TSize$是哈希表的最大容量，它最好是素数，如果输入的不是素数就必须找到大于输入的最小素数。</p><p>用二次探测（仅具有正增量）解决冲突。</p><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><ul><li><p>distinct</p><p>  截然不同的, 完全分开的</p></li><li><p>sequence</p><p>  有关联的一组事物, 一连串</p></li><li><p>quadratic</p><p>  二次的，二次方程式</p></li><li><p>probe</p><p>  n. 探针；调查<br>  vi. 调查；探测<br>  vt. 探查；用探针探测</p></li><li><p>collision</p><p>  碰撞, 冲突, 抵触</p></li><li><p>Quadratic probing (with positive increments only) is used to solve the collisions.</p><p>  二次探测（仅具有正增量）用于解决冲突。</p></li><li><p>synonym</p><p>  同义词</p></li><li><p>accurate up to 1 decimal place</p><p>  精确到小数点后1位</p></li></ul><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>待查找的元素可能不存在</li><li>题目说了输入的关键字都是<strong>正</strong>整数，所以可以把0作为表中某个位置没有元素的标志</li><li>注意这里的二次探测再散列只有正增量</li><li>查找时间指查找时进行比较的次数，如果没有再探测（即一次就找到了），那比较次数就是1</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: PAT Advanced 1145</span></span><br><span class="line"><span class="comment">// URL: https://pintia.cn/problem-sets/994805342720868352/problems/994805343236767744</span></span><br><span class="line"><span class="comment">// Tags: Hash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= num; i++)</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取输入的第一行</span></span><br><span class="line">    <span class="keyword">int</span> mSize, n, m; <span class="comment">// 哈希表最大容量、输入的整数的数量、待查找的整数的数量，都不超过1e4</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; mSize &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立哈希表</span></span><br><span class="line">    <span class="keyword">while</span> (!isPrime(mSize)) mSize++;  <span class="comment">// 使哈希表表长为大于等于输入的最小素数</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; hashTable(mSize); <span class="comment">// 哈希表</span></span><br><span class="line">    <span class="keyword">int</span> key, pos; <span class="comment">// 关键字、哈希地址</span></span><br><span class="line">    <span class="keyword">bool</span> posFound; <span class="comment">// 某个key的位置是否找到了</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; key; <span class="comment">// 获取关键字</span></span><br><span class="line">        posFound = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mSize; j++)&#123; <span class="comment">// 二次探测再散列（只有正增量）</span></span><br><span class="line">            pos = (key + j * j) % mSize;</span><br><span class="line">            <span class="keyword">if</span> (hashTable[pos] == <span class="number">0</span>)&#123;  <span class="comment">// 这要求key不为0</span></span><br><span class="line">                hashTable[pos] = key;</span><br><span class="line">                posFound = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!posFound) <span class="built_in">printf</span>(<span class="string">"%d cannot be inserted.\n"</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找元素并统计平均查找次数</span></span><br><span class="line">    <span class="keyword">double</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; key;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= mSize; j++)&#123; <span class="comment">// 题目似乎有问题，应该是j&lt;mSize的，而不是&lt;=</span></span><br><span class="line">            pos = (key + j * j) % mSize;</span><br><span class="line">            count += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (hashTable[pos] == key || hashTable[pos] == <span class="number">0</span>)  <span class="comment">// 注意待查找的元素可能不存在</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.1f"</span>, count / m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/pro
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="哈希" scheme="https://chouxianyu.github.io/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-哈希</title>
    <link href="https://chouxianyu.github.io/2020/08/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%93%88%E5%B8%8C/"/>
    <id>https://chouxianyu.github.io/2020/08/07/数据结构-哈希/</id>
    <published>2020-08-07T15:22:37.000Z</published>
    <updated>2020-08-07T15:25:05.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈希函数、哈希表、哈希地址"><a href="#哈希函数、哈希表、哈希地址" class="headerlink" title="哈希函数、哈希表、哈希地址"></a>哈希函数、哈希表、哈希地址</h1><p>根据设定的<strong>哈希函数</strong>$H(key)$和处理冲突的方法将一组关键字映像到一个有限的连续的地址集（区间）上，并以关键字在地址集上的“像”作为记录在表中的存储位置，这种表便称为<strong>哈希表</strong>，这一映像过程称为哈希造表或散列，所得存储位置成<strong>哈希地址</strong>或散列地址。</p><h1 id="冲突、同义词"><a href="#冲突、同义词" class="headerlink" title="冲突、同义词"></a>冲突、同义词</h1><p>不同的关键字经哈希函数映像后求得到的哈希地址可能相同，即$key1\neq key2\ and \ H(key1)=H(key2)$，这就是<strong>冲突（collision）</strong>；具有相同哈希地址的关键字对该哈希函数来说就是<strong>同义词（synonym）</strong>。</p><p>哈希函数选得合适可以减少冲突现象。</p><p>一般情况下，哈希函数是一个压缩映像（关键字集合到地址集合的映像，而关键字集合的大小远大于地址集合），因此冲突只能尽可能地少而不能完全避免。</p><h1 id="哈希函数的构造方法"><a href="#哈希函数的构造方法" class="headerlink" title="哈希函数的构造方法"></a>哈希函数的构造方法</h1><p>常用的构造哈希函数的方法有：</p><ol><li>直接定址法</li><li>数字分析法</li><li>平方取中法</li><li>折叠法</li><li>除留余数法</li><li>随机数法</li></ol><h1 id="处理冲突的方法"><a href="#处理冲突的方法" class="headerlink" title="处理冲突的方法"></a>处理冲突的方法</h1><p>处理冲突过程中会有一个地址序列$H_i,i=1,2,\dots,k$，即如果发生冲突，就去找下一个地址。</p><p>通常用的处理冲突的方法有下列几种：</p><ol><li>开放定址法</li><li>再哈希法</li><li>链地址法</li><li>建立一个公共溢出区</li></ol><h3 id="开放定址法"><a href="#开放定址法" class="headerlink" title="开放定址法"></a>开放定址法</h3><script type="math/tex; mode=display">H_i=(H(key)+d_i)\ MOD\ m \ ，\ i=1,2,\dots, k(k\leq m-1)</script><p>其中$H(key)$为哈希函数；$m$是哈希表表长；$d_i$为增量序列，可以有下面3种取法：</p><ol><li>$d_i=1,2,3\dots,m-1$，称为线性探测再散列</li><li>$d_i=1^2,-1^2,2^2,-2^2,3^2,\dots,\pm k^2,(k\leq m/2)$，称为二次探测再散列</li><li>$d_i=伪随机数序列$，称为伪随机探测再散列</li></ol><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;哈希函数、哈希表、哈希地址&quot;&gt;&lt;a href=&quot;#哈希函数、哈希表、哈希地址&quot; class=&quot;headerlink&quot; title=&quot;哈希函数、哈希表、哈希地址&quot;&gt;&lt;/a&gt;哈希函数、哈希表、哈希地址&lt;/h1&gt;&lt;p&gt;根据设定的&lt;strong&gt;哈希函数&lt;/strong&gt;
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="哈希" scheme="https://chouxianyu.github.io/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
</feed>
