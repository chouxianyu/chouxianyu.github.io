<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>臭咸鱼的缺氧瓶</title>
  
  <subtitle>快给我氧气！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chouxianyu.github.io/"/>
  <updated>2019-04-10T12:35:59.118Z</updated>
  <id>https://chouxianyu.github.io/</id>
  
  <author>
    <name>臭咸鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络-实验（二）常用网络指令</title>
    <link href="https://chouxianyu.github.io/2019/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8C%87%E4%BB%A4/"/>
    <id>https://chouxianyu.github.io/2019/04/10/计算机网络-实验（二）常用网络指令/</id>
    <published>2019-04-10T12:34:44.000Z</published>
    <updated>2019-04-10T12:35:59.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="arp"><a href="#arp" class="headerlink" title="arp"></a>arp</h2><p><strong>知识点扫盲</strong>：地址解析协议，即<em>ARP</em>（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。</p><p><strong>功能</strong>：显示和修改IP地址与物理地址之间的转换表</p><h3 id="a"><a href="#a" class="headerlink" title="-a"></a>-a</h3><p><strong>功能</strong>：（Windows下）显示当前的ARP信息，可以指定网络地址。</p><p>Linux系统中，使用<code>-g</code>。</p><p>代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -a<span class="comment"># 显示当前所有的ARP信息</span></span><br></pre></td></tr></table></figure><p>结果：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Internet Address</th><th style="text-align:center">Physical Address</th><th style="text-align:center">Type</th></tr></thead><tbody><tr><td style="text-align:center">192.168.1.178</td><td style="text-align:center">00-16-ec-a0-42-fa</td><td style="text-align:center">dynamic</td></tr><tr><td style="text-align:center">..…</td><td style="text-align:center">..…</td><td style="text-align:center">..…</td></tr></tbody></table></div><p>代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -a 192.168.1.178# 显示指定IP(即192.168.1.178)的ARP信息</span><br></pre></td></tr></table></figure><p>结果：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Internet Address</th><th style="text-align:center">Physical Address</th><th style="text-align:center">Type</th></tr></thead><tbody><tr><td style="text-align:center">192.168.1.178</td><td style="text-align:center">00-16-ec-a0-42-fa</td><td style="text-align:center">dynamic</td></tr></tbody></table></div><h3 id="s"><a href="#s" class="headerlink" title="-s"></a>-s</h3><p><strong>功能</strong>：添加主机，并将网络地址跟物理地址相对应，这一项是永久生效的。</p><p>代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arp -s 157.55.85.212 00-aa-00-62-c6-09 # 在IP和物理地址转换表中添加一项</span><br><span class="line">arp -a 157.55.85.212# 显示指定IP(即157.55.85.212)的ARP信息</span><br></pre></td></tr></table></figure><p>结果：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Internet Address</th><th style="text-align:center">Physical Address</th><th style="text-align:center">Type</th></tr></thead><tbody><tr><td style="text-align:center">157.55.85.212</td><td style="text-align:center">00-aa-00-62-c6-09</td><td style="text-align:center"><strong>static</strong></td></tr></tbody></table></div><p><strong>注意</strong>：这里添加的一个<code>Type</code>为<code>static</code>的。</p><h3 id="d"><a href="#d" class="headerlink" title="-d"></a>-d</h3><p><strong>功能</strong>：删除指定的主机，可以使用* 来删除所有主机。</p><p>代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arp -d 157.55.85.212# 删除指定IP(即157.55.85.212)</span><br><span class="line">arp -a 157.55.85.212# 显示指定IP(即157.55.85.212)的ARP信息</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NO ARP Entries Found</span><br></pre></td></tr></table></figure><h2 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h2><p><strong>知识点扫盲</strong>：文件传输协议，即FTP(File Transfer Protocol)。是用于在网络上进行文件传输的一套标准协议，使用客户/服务器模式。它属于网络传输协议。</p><p>ftp也是一种服务。一旦启动，将创建在其中可以使用ftp命令的子环境，通过键入 <code>quit</code>子命令可以从子环境返回到Windows命令提示符。当 ftp 子环境运行时，它由ftp命令提示符代表。</p><p>下边的指令除了ftp是在Windows命令提示符，其他都是在ftp的子环境里。</p><p><strong>功能</strong>：控制文件的双向传输（老师说的..…）。</p><h3 id="ftp-1"><a href="#ftp-1" class="headerlink" title="ftp"></a>ftp</h3><p><strong>功能</strong>：启动ftp服务。</p><p>在命令提示符下，直接输入<code>ftp</code>即可。</p><h3 id="open"><a href="#open" class="headerlink" title="open"></a>open</h3><p>代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open 192.168.1.171# 连接指定的ftp服务器（这里是老师的电脑）</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Connected to 192.168.1.171.</span><br><span class="line">220-Microsoft FTP Service</span><br><span class="line">220 张芳之家</span><br><span class="line">User (192.168.1.171:(none)): zf</span><br><span class="line">331 Password required for zf.</span><br><span class="line">Password:</span><br><span class="line">230-欢迎进入“张芳之家”</span><br><span class="line">230 User zf logged in.</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：上边的第6行需要输入<strong>密码</strong>。我们输的时候，屏幕上并不会显示出来。</p><h3 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h3><p><strong>功能</strong>：查看本目录下的内容，目录可以理解成文件夹的意思。</p><p>代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir# 查看当前目录内容</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">200 PORT command successful.# 请求成功</span><br><span class="line">150 Opening ASCII mode data connection for /bin/ls.# ASCII传输方式连接/bin/ls</span><br><span class="line">04-26-1308:22AM&lt;DIR&gt;654# 有个文件夹，名字是654</span><br><span class="line">226 Transfer complete.</span><br><span class="line">ftp: 收到 44 字节，用时 0.00 Seconds 44000.00Kbyte/sec.</span><br></pre></td></tr></table></figure><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p><strong>功能</strong>：更换<strong>远程</strong>目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 654# 进入文件夹654</span><br><span class="line">dir# 查看当前目录内容</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">200 PORT command successful.# 请求成功</span><br><span class="line">150 Opening ASCII mode data connection for /bin/ls.# ASCII传输方式连接/bin/ls</span><br><span class="line">04-26-1308:22AM70qqq.txt# 有个文件，名字是qqq.txt</span><br><span class="line">226 Transfer complete.</span><br><span class="line">ftp: 收到 48 字节，用时 0.00 Seconds 44000.00Kbyte/sec.</span><br></pre></td></tr></table></figure><h3 id="lcd"><a href="#lcd" class="headerlink" title="lcd"></a>lcd</h3><p><strong>功能</strong>：更换<strong>本地</strong>目录，若无参数，将显示当前目录。</p><p>代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcd e:\</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Local directory now E:\.</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p><strong>功能</strong>：将远程文件复制到本地计算机。</p><p>代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get qqq.txt</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">200 PORT command successful.# 请求成功</span><br><span class="line">150 Opening ASCII mode data connection for qqq.txt(70 bytes)# ASCII传输方式连接/bin/ls</span><br><span class="line">226 Transfer complete.</span><br><span class="line">ftp: 收到 70 字节，用时 0.00 Seconds 70000.00Kbyte/sec.</span><br></pre></td></tr></table></figure><h3 id="quit"><a href="#quit" class="headerlink" title="quit"></a>quit</h3><p><strong>功能</strong>：退出ftp服务。ftp子环境下输入<code>quit</code>即可。</p><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">221 再见！欢迎下次“张芳之家”</span><br></pre></td></tr></table></figure><h2 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h2><p><strong>功能</strong>：显示当前的TCP/IP配置的设置值。</p><p>代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Windows IP Configuration</span><br><span class="line"></span><br><span class="line">Ethernet adapter 本地连接:</span><br><span class="line">        Connection-specific DNS Suffix  . :</span><br><span class="line">        IP Address. . . . . . . . . . . . : 192.168.1.95# IP地址</span><br><span class="line">        Subnet Mask . . . . . . . . . . . : 255.255.255.0# 子网掩码</span><br><span class="line">        Default Gateway . . . . . . . . . : 192.168.1.3# 缺省网关</span><br></pre></td></tr></table></figure><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><p><strong>知识点扫盲</strong>：Telnet协议是TCP/IP协议族中的一员，是Internet远程登录服务的标准协议和主要方式。</p><p><strong>功能</strong>：远程连接另一台计算机</p><h3 id="telnet-1"><a href="#telnet-1" class="headerlink" title="telnet"></a>telnet</h3><p><strong>功能</strong>：启动telnet。</p><p>在命令提示符下，直接输入<code>telnet</code>即可。</p><h3 id="open-1"><a href="#open-1" class="headerlink" title="open"></a>open</h3><p><strong>功能</strong>：连接指定计算机。</p><p>代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open 192.168.1.94# 连接我同桌..</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">正在连接到192.168.1.94... </span><br><span class="line">您将要发送密码信息到 Internet 区域中的远程计算机。这可能不安全。是否还要发送(y/n</span><br><span class="line">): n</span><br><span class="line">login:ligong</span><br><span class="line">password:</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：第四行和第五行输入账号和密码，密码并不会显示出来。</p><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p><strong>功能</strong>：复制文件到自己电脑上</p><p>代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy qqq.txt c:\# 复制其e盘qqq.txt到其c盘，前提是此时已在E盘，使用cd e:\实现</span><br></pre></td></tr></table></figure><h3 id="quit-1"><a href="#quit-1" class="headerlink" title="quit"></a>quit</h3><p>退出，直接输入<code>quit</code>即可。</p><h2 id="net"><a href="#net" class="headerlink" title="net"></a>net</h2><p><strong>知识点扫盲</strong>：它包含了管理网络环境、服务、用户、登陆等Windows 98/NT/2000 中大部分重要的管理功能。</p><h3 id="send"><a href="#send" class="headerlink" title="send"></a>send</h3><p><strong>功能</strong>：将消息发送到网络上的其他用户、计算机或消息名。必须运行信使服务以接收邮件。</p><p>代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net send * 123# 给所有人发123</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">消息已经送到域 2HJF</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net send s14 hello# 给s14机器发hello</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">消息已经送到 S14</span><br></pre></td></tr></table></figure><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h1&gt;&lt;h2 id=&quot;arp&quot;&gt;&lt;a href=&quot;#arp&quot; class=&quot;headerlink&quot; title=&quot;arp&quot;&gt;&lt;/a&gt;ar
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://chouxianyu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言-实验（一）</title>
    <link href="https://chouxianyu.github.io/2019/04/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://chouxianyu.github.io/2019/04/08/汇编语言-实验（一）/</id>
    <published>2019-04-08T03:18:40.000Z</published>
    <updated>2019-04-08T04:44:10.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在数据段DATA中有两个字数据X和Y, 假设X=1122H, Y=3344H, 编程求两个字的和,结果存放到Z单元中。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">;*********************************************************************</span><br><span class="line">data segment; 定义数据段</span><br><span class="line">x dw <span class="number">1122</span>h; 字 X</span><br><span class="line">y dw <span class="number">3344</span>h; 字 Y</span><br><span class="line">z dw ?; 字 Z</span><br><span class="line">data ends</span><br><span class="line">;*********************************************************************</span><br><span class="line">code segment; 定义代码段</span><br><span class="line">assume cs:code,ds:data</span><br><span class="line">;---------------------------------------------------------------------</span><br><span class="line">main proc far; 程序的主部分</span><br><span class="line">start:</span><br><span class="line">; 为返回DOS做准备</span><br><span class="line">push ds; ds压栈</span><br><span class="line">xor ax,ax; (ax) &lt;- data</span><br><span class="line">push ax; ax压栈</span><br><span class="line"></span><br><span class="line">; ds设为data</span><br><span class="line">mov ax,data; (ax) &lt;- data</span><br><span class="line">mov ds,ax; (ds) &lt;- (ax)</span><br><span class="line"></span><br><span class="line">; z=x+y</span><br><span class="line">mov ax,x; (al) &lt;- x</span><br><span class="line">add ax,y; (al) &lt;- (al)+y</span><br><span class="line">mov z,ax; (z) &lt;- (al)</span><br><span class="line"></span><br><span class="line">; 返回DOS环境</span><br><span class="line">ret; 返回DOS环境</span><br><span class="line">main  endp</span><br><span class="line">;---------------------------------------------------------------------</span><br><span class="line">code  ends</span><br><span class="line">;*********************************************************************</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h1 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h1><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><p>从SOURCE_BUFFER单元开始存放了20个字母A, 编程将这20个字母A的字符串传送到DEST_BUFFER开始的单元中。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">;*********************************************************************</span><br><span class="line">data segment; 定义数据段</span><br><span class="line">source_buffer db <span class="number">20</span> dup(<span class="string">'A'</span>); 串source_buffer，占<span class="number">20</span>个字节，内容是<span class="number">20</span>个字母A</span><br><span class="line">data ends</span><br><span class="line">;*********************************************************************</span><br><span class="line">extra segment; 定义附加段</span><br><span class="line">dest_buffer db <span class="number">20</span> dup(?); 串dest_buffer，占<span class="number">20</span>个字节，内容未确定</span><br><span class="line">extra ends</span><br><span class="line">;*********************************************************************</span><br><span class="line">code segment; 定义代码段</span><br><span class="line">assume cs:code,ds:data,es:extra</span><br><span class="line">;---------------------------------------------------------------------</span><br><span class="line">main proc far; 程序的主部分</span><br><span class="line">start: </span><br><span class="line">; 为返回DOS做准备</span><br><span class="line">push ds; ds压栈</span><br><span class="line">xor ax,ax; (ax) &lt;- data</span><br><span class="line">push ax; ax压栈</span><br><span class="line"></span><br><span class="line">; ds设为data</span><br><span class="line">mov ax,data; (ax) &lt;- data</span><br><span class="line">mov ds,ax; (ds) &lt;- (ax)</span><br><span class="line"></span><br><span class="line">; es设为extra</span><br><span class="line">mov ax,extra; (ax) &lt;- extra</span><br><span class="line">mov es,ax; (es) &lt;- (ax)</span><br><span class="line"></span><br><span class="line">; 准备工作</span><br><span class="line">lea si,source_buffer; 存储源串首地址</span><br><span class="line">lea di,dest_buffer; 存储目的串首地址</span><br><span class="line">cld; 建立方向标志</span><br><span class="line">mov cx,<span class="number">20</span>; <span class="number">20</span>个字符</span><br><span class="line">; 移动串</span><br><span class="line">rep movsb; 移动串至CX为<span class="number">0</span>，即移动整个串</span><br><span class="line"></span><br><span class="line">; 返回DOS环境</span><br><span class="line">ret; 返回DOS环境</span><br><span class="line">main  endp</span><br><span class="line">;---------------------------------------------------------------------</span><br><span class="line">code  ends</span><br><span class="line">;*********************************************************************</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h1 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h1><h2 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h2><p>从SOURCE_BUFFER单元开始存放了20个字母A, 编程将这20个字母A的字符串向下移10个单元。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">;*********************************************************************</span><br><span class="line">extra segment; 定义附加段</span><br><span class="line">source_buffer db <span class="number">20</span> dup(<span class="string">'A'</span>); 串source_buffer，占<span class="number">20</span>个字节，内容是<span class="number">20</span>个字母A</span><br><span class="line">dest_buffer=source_buffer+<span class="number">10</span>; 串dest_buffer，结果串的首地址</span><br><span class="line">extra ends</span><br><span class="line">;*********************************************************************</span><br><span class="line">code segment; 定义代码段</span><br><span class="line">assume cs:code,es:extra</span><br><span class="line">;---------------------------------------------------------------------</span><br><span class="line">main proc far; 程序的主部分</span><br><span class="line">start: </span><br><span class="line">; 为返回DOS做准备</span><br><span class="line">push ds; ds压栈</span><br><span class="line">xor ax,ax; (ax) &lt;- <span class="number">0</span></span><br><span class="line">push ax; ax压栈</span><br><span class="line"></span><br><span class="line">; es设为extra</span><br><span class="line">mov ax,extra; (ax) &lt;- extra</span><br><span class="line">mov es,ax; (es) &lt;- (ax)</span><br><span class="line"></span><br><span class="line">; 准备工作</span><br><span class="line">lea si,source_buffer+<span class="number">19</span>; 存储源串末地址</span><br><span class="line">lea di,dest_buffer+<span class="number">19</span>; 存储目的串末地址</span><br><span class="line"><span class="built_in">std</span>; 建立方向标志</span><br><span class="line">mov cx,<span class="number">20</span>; <span class="number">20</span>个字符</span><br><span class="line">; 移动串</span><br><span class="line">rep movs es:byte ptr[di],es:[di]; 移动串至CX为<span class="number">0</span>，即移动整个串</span><br><span class="line"></span><br><span class="line">; 返回DOS环境</span><br><span class="line">ret; 返回DOS环境</span><br><span class="line">main  endp</span><br><span class="line">;---------------------------------------------------------------------</span><br><span class="line">code  ends</span><br><span class="line">;*********************************************************************</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h2 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h2><p>不小心，上边代码写错了,<code>rep movs ds:byte ptr[di],ds:[di]</code>，源地址和目标地址不小心都用了di。</p><p>按说这样不能进行后移，但却得到了正确的结果。</p><p>经过调试，发现可能是编译环境自行将我的错误代码改成了正确代码，进行了优化。</p><p>同时也发现：<code>rep movs ds:byte ptr[si],ds:[di]</code>，这个代码也是错的，但也得到了正确的结果。</p><p>正确的代码应该是这样：<code>rep movs ds:byte ptr[di],ds:[si]</code>。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目一&quot;&gt;&lt;a href=&quot;#题目一&quot; class=&quot;headerlink&quot; title=&quot;题目一&quot;&gt;&lt;/a&gt;题目一&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
      <category term="Bug" scheme="https://chouxianyu.github.io/tags/Bug/"/>
    
      <category term="汇编" scheme="https://chouxianyu.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>C/C++小课之指针悬挂</title>
    <link href="https://chouxianyu.github.io/2019/03/28/C-C-%E5%B0%8F%E8%AF%BE%E4%B9%8B%E6%8C%87%E9%92%88%E6%82%AC%E6%8C%82/"/>
    <id>https://chouxianyu.github.io/2019/03/28/C-C-小课之指针悬挂/</id>
    <published>2019-03-28T15:44:06.000Z</published>
    <updated>2019-03-28T15:58:33.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是指针悬挂"><a href="#什么是指针悬挂" class="headerlink" title="什么是指针悬挂"></a>什么是指针悬挂</h1><p><strong>指向非法内存的指针，也叫野指针。</strong></p><p>非法内存即不能使用的内存。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = (<span class="keyword">int</span>*)<span class="number">12345</span>;</span><br><span class="line"><span class="comment">//int* p;//p未初始化，p的值随机，一般都会指向非法内存</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p;<span class="comment">//运行这行代码会出错</span></span><br></pre></td></tr></table></figure><p>随便让p指向一块内存（一般指向非法内存）。</p><p><strong>运行时使用非法内存，会报错。</strong></p><h1 id="一些指针悬挂的情况"><a href="#一些指针悬挂的情况" class="headerlink" title="一些指针悬挂的情况"></a>一些指针悬挂的情况</h1><p>课本中有两处提到指针悬挂，分别是：<strong>合成拷贝构造函数</strong>和<strong>合成赋值运算符函数</strong>。</p><p>如果类中有指针，这两个函数<strong>可能</strong>造成指针悬挂。（看完之后想想为什么只是可能？）</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>下面给出这两种函数造成指针悬挂的代码及注释：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> * p;</span><br><span class="line"></span><br><span class="line">MyClass()&#123;p = <span class="keyword">new</span> <span class="keyword">int</span>;&#125;</span><br><span class="line">~MyClass()&#123;<span class="keyword">delete</span> p;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyClass a;</span><br><span class="line"><span class="function">MyClass <span class="title">b</span><span class="params">(a)</span></span>;<span class="comment">//调用合成拷贝函数</span></span><br><span class="line"><span class="comment">//MyClass b = a;//调用合成赋值运算符</span></span><br><span class="line">a.print();</span><br><span class="line">b.print();<span class="comment">//据两行输出可知，两个指针指向同一块内存</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后，B会先析构，然后A析构。</span></span><br><span class="line"><span class="comment">//B析构会释放p指向的内存，同时这块内存变为非法内存，</span></span><br><span class="line"><span class="comment">//此时A的指针p指向非法内存，造成指针悬挂。</span></span><br><span class="line"><span class="comment">//A析构时delete p,使用了非法内存，这时出错</span></span><br></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>如果这两个函数造成指针悬挂，应显式提供这两个函数，并将这两个合成函数的<strong>浅拷贝改为深拷贝</strong>。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是指针悬挂&quot;&gt;&lt;a href=&quot;#什么是指针悬挂&quot; class=&quot;headerlink&quot; title=&quot;什么是指针悬挂&quot;&gt;&lt;/a&gt;什么是指针悬挂&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;指向非法内存的指针，也叫野指针。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非法内存即不能使用
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://chouxianyu.github.io/tags/C-C/"/>
    
      <category term="指针" scheme="https://chouxianyu.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>插值和线性回归</title>
    <link href="https://chouxianyu.github.io/2019/03/28/%E6%8F%92%E5%80%BC%E5%92%8C%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>https://chouxianyu.github.io/2019/03/28/插值和线性回归/</id>
    <published>2019-03-28T11:26:40.000Z</published>
    <updated>2019-03-28T11:29:20.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h1><p>根据现有数据，插的值一定在曲线上。</p><p><code>interpl</code>，一维插值函数。</p><h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><p><code>regress</code></p><p>$Y=b_0+b_1x_1+b_2x_2+\cdots+b_kx_k$</p><p>拟合$x_1\ x_2\ \cdots\ x_k$与$Y$的关系</p><p><code>[B, Bint, R, Rint, Status]=regress(Y, X)</code></p><p><code>B</code>：回归得到的自变量系数</p><p><code>Bint</code>：B的95%的置信区间矩阵</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;插值&quot;&gt;&lt;a href=&quot;#插值&quot; class=&quot;headerlink&quot; title=&quot;插值&quot;&gt;&lt;/a&gt;插值&lt;/h1&gt;&lt;p&gt;根据现有数据，插的值一定在曲线上。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;interpl&lt;/code&gt;，一维插值函数。&lt;/p&gt;
&lt;h1 id=&quot;线性回归
      
    
    </summary>
    
    
      <category term="Matlab" scheme="https://chouxianyu.github.io/tags/Matlab/"/>
    
      <category term="数学建模" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="插值" scheme="https://chouxianyu.github.io/tags/%E6%8F%92%E5%80%BC/"/>
    
      <category term="线性回归" scheme="https://chouxianyu.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>传染病模型</title>
    <link href="https://chouxianyu.github.io/2019/03/28/%E4%BC%A0%E6%9F%93%E7%97%85%E6%A8%A1%E5%9E%8B/"/>
    <id>https://chouxianyu.github.io/2019/03/28/传染病模型/</id>
    <published>2019-03-28T11:26:20.000Z</published>
    <updated>2019-03-28T11:28:31.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>该模型在数学建模中可以解决很多问题。</p><p>该模型由三个微分方程构成。</p><h1 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h1><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>假设系统中有三种人：</p><ul><li><p>易感染的人</p><p>  数量用$S$表示，刚开始所有人都是易感染的人</p></li><li><p>感染的人</p><p>  数量用$I$表示</p></li><li><p>康复的人</p><p>  数量用$R$表示（假设该传染病不致命）</p></li></ul><h2 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h2><p>$\begin{equation}<br>    \left\{<br>          \begin{array}{r1}<br>              \frac{dS}{dt}=-\beta SI\\<br>              \frac{dI}{dt}=\beta SI-\gamma I\\<br>              \frac{dR}{dt}=\gamma I\\<br>          \end{array}<br>    \right.<br>\end{equation}$</p><p>其中$\beta$是接触率，$\gamma$是康复率。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="函数odesir"><a href="#函数odesir" class="headerlink" title="函数odesir"></a>函数odesir</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dy</span> = <span class="title">odesir</span><span class="params">(t, y, beta, gamma)</span></span></span><br><span class="line"><span class="comment">% 根据传染病模型者中的y和t求出dy/dt</span></span><br><span class="line"><span class="comment">% y=[S; I; R]</span></span><br><span class="line">dy =</span><br><span class="line">[</span><br><span class="line">-beta*y(<span class="number">1</span>)*y(<span class="number">2</span>); % dS/dt</span><br><span class="line">beta*y(<span class="number">1</span>)*y(<span class="number">2</span>) - gamma*y(<span class="number">2</span>); % dS/dt</span><br><span class="line">gamma*y(<span class="number">2</span>); % dR/dt</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">beta</span> = <span class="number">0.01</span>;</span><br><span class="line"><span class="built_in">gamma</span> = <span class="number">0.1</span>;</span><br><span class="line">tspan = [<span class="number">0</span>,<span class="number">50</span>];</span><br><span class="line">y0 = [<span class="number">99</span>,<span class="number">1</span>,<span class="number">0</span>];</span><br><span class="line">[t y] = ode45(@odesir, tspan, y0, [], bata, <span class="built_in">gamma</span>);</span><br><span class="line">plot(t,y);</span><br><span class="line">xlabel(<span class="string">'time'</span>);</span><br><span class="line">ylabel(<span class="string">'population'</span>);</span><br><span class="line">legend(<span class="string">'S'</span>, <span class="string">'I'</span>, <span class="string">'R'</span>);</span><br></pre></td></tr></table></figure><p><code>ode23</code>和<code>ode45</code>的区别：精度不一样，<code>ode45</code>精度高。</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><a href="https://i.loli.net/2019/03/28/5c9cae1f0f6be.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/28/5c9cae1f0f6be.png" alt="传染病.png"></a></p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;该模型在数学建模中可以解决很多问题。&lt;/p&gt;
&lt;p&gt;该模型由三个微分方程构成。&lt;/p&gt;
&lt;h1 id=&quot;建立模型&quot;&gt;&lt;a href=&quot;#建立
      
    
    </summary>
    
    
      <category term="Matlab" scheme="https://chouxianyu.github.io/tags/Matlab/"/>
    
      <category term="数学建模" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="微分方程" scheme="https://chouxianyu.github.io/tags/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Runge-Kutta法解微分方程</title>
    <link href="https://chouxianyu.github.io/2019/03/28/Runge-Kutta%E6%B3%95%E8%A7%A3%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/"/>
    <id>https://chouxianyu.github.io/2019/03/28/Runge-Kutta法解微分方程/</id>
    <published>2019-03-28T11:25:59.000Z</published>
    <updated>2019-03-28T11:27:48.381Z</updated>
    
    <content type="html"><![CDATA[<p>连续问题，微分方程或偏微分方程一定能表示。比如疾病传染、新闻传播等。</p><p>离散问题，可以用差分方程或者类似于差分的算法。</p><h1 id="一阶微分方程求解"><a href="#一阶微分方程求解" class="headerlink" title="一阶微分方程求解"></a>一阶微分方程求解</h1><h2 id="方程"><a href="#方程" class="headerlink" title="方程"></a>方程</h2><p>$y’=cos\ t$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">clear,clc;</span><br><span class="line"></span><br><span class="line">f = @(t,y) <span class="built_in">cos</span>(t);<span class="comment">% 定义函数 f(t,y) = cos(t) 表示的就是dy/dt=cos(t)</span></span><br><span class="line">tspan = [<span class="number">0</span>,<span class="number">2</span>*pi];<span class="comment">% 时间t范围</span></span><br><span class="line">y0 = <span class="number">2</span>;   <span class="comment">% y的初值，用来处理积分得到的C</span></span><br><span class="line">[t,y] = ode23(f,tspan,y0); <span class="comment">% 注意调用格式</span></span><br><span class="line">plot(t,y);</span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'y'</span>);</span><br></pre></td></tr></table></figure><p><code>@</code>表示句柄，当把一个函数作为参数传给另外一个函数，这时候必须要用句柄。这里是把函数<code>f</code>传给函数<code>ode23</code>。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><a href="https://i.loli.net/2019/03/28/5c9c9a965cc43.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/28/5c9c9a965cc43.png" alt="一阶微分方程.png"></a></p><h1 id="高阶微分方程求解"><a href="#高阶微分方程求解" class="headerlink" title="高阶微分方程求解"></a>高阶微分方程求解</h1><h2 id="方程-1"><a href="#方程-1" class="headerlink" title="方程"></a>方程</h2><p>$\begin{equation}<br>    \left\{<br>          \begin{array}{r1}<br>              y’’=-sin\ y+sin\ 5t\\<br>              y(0)=1\\<br>              y’(0)=0\\<br>          \end{array}<br>    \right.<br>\end{equation}$</p><p>可以将该高阶微分方程转化为两个一阶的微分方程：$\begin{equation}<br>    \left\{<br>          \begin{array}{r1}<br>              y_1=y\\<br>              y_2=y’\\<br>              y’_1=y_2\\<br>              y’_2=-sin\ y_1+sin\ 5t\\<br>              y_1(0)=1\\<br>              y_2(0)=0\\<br>          \end{array}<br>    \right.<br>\end{equation}$</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">clear,clc;</span><br><span class="line"></span><br><span class="line">f = @(t, y) [ y(<span class="number">2</span>); -sin( y(<span class="number">1</span>) ) + sin( <span class="number">5</span>*t ) ]; <span class="comment">% 两个参数分别是y1和y2的导数</span></span><br><span class="line">tspan = [ <span class="number">0</span>, <span class="number">20</span> ]; <span class="comment">% 时间t范围</span></span><br><span class="line">y0 = [ <span class="number">1</span>; <span class="number">0</span> ]; <span class="comment">% 初值，分别对应y1，y2的初值</span></span><br><span class="line">[t, y] = ode23(f, tspan, y0); <span class="comment">% 注意调用格式</span></span><br><span class="line">plot(t,y);</span><br><span class="line">xlabel(<span class="string">'t'</span>);</span><br><span class="line">ylabel(<span class="string">'y'</span>);</span><br><span class="line">legend(<span class="string">'y1'</span>,<span class="string">'y2'</span>);</span><br></pre></td></tr></table></figure><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><p><a href="https://i.loli.net/2019/03/28/5c9c9a9662d63.png" target="_blank" rel="noopener">​<img src="https://i.loli.net/2019/03/28/5c9c9a9662d63.png" alt="高阶微分方程.png"></a></p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;连续问题，微分方程或偏微分方程一定能表示。比如疾病传染、新闻传播等。&lt;/p&gt;
&lt;p&gt;离散问题，可以用差分方程或者类似于差分的算法。&lt;/p&gt;
&lt;h1 id=&quot;一阶微分方程求解&quot;&gt;&lt;a href=&quot;#一阶微分方程求解&quot; class=&quot;headerlink&quot; title=&quot;一阶微
      
    
    </summary>
    
    
      <category term="Matlab" scheme="https://chouxianyu.github.io/tags/Matlab/"/>
    
      <category term="数学建模" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="微分方程" scheme="https://chouxianyu.github.io/tags/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C/C++小课之类和对象</title>
    <link href="https://chouxianyu.github.io/2019/03/27/C-C-%E5%B0%8F%E8%AF%BE%E4%B9%8B%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    <id>https://chouxianyu.github.io/2019/03/27/C-C-小课之类和对象/</id>
    <published>2019-03-27T08:38:04.000Z</published>
    <updated>2019-03-27T08:41:43.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>如何理解类和对象？</p><p>类是一种自定义数据类型，用<strong>类</strong>定义出来的变量就是<strong>对象</strong>。</p><p>格式：</p><ul><li><code>数据类型 数据;</code></li><li><code>int a;</code></li><li><code>A a();</code></li></ul><p>这一章的主要问题就是如何<strong>设计</strong>、<strong>实现</strong>和<strong>使用</strong>类。</p><p>设计和实现分别对应类的抽象和封装；使用即最后一步，用类实现功能。</p><p><strong>简单地说</strong>：面向对象就是将事物定义（包括抽象和封装）成类并使用。</p><h1 id="类的抽象和封装"><a href="#类的抽象和封装" class="headerlink" title="类的抽象和封装"></a>类的抽象和封装</h1><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>计算机软件开发采用的抽象方法主要有两种：</p><ul><li><p>过程抽象</p><p>  结果给出了函数的名称、接收的参数和能够提供的功能。</p></li><li><p><strong>数据抽象</strong></p><p>  数据抽象是面向对象程序设计方法，<strong>以数据为中心</strong>。</p><p>  结果形成某事物的类，其中包括<strong>成员变量</strong>和<strong>成员函数</strong>。</p></li></ul><p>简单来说，就是找出一个类有哪些<strong>变量</strong>和<strong>功能</strong>，但不用<strong>封装</strong>。</p><p>比如这是一个点餐系统。</p><p><a href="https://i.loli.net/2019/03/27/5c9b35ca001e9.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/27/5c9b35ca001e9.png" alt="点餐系统类图.png"></a></p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>分为两部分：</p><ul><li><p>接口</p><p>  使用者看到的东西</p></li><li><p>实现</p><p>  实现抽象出的类，写<code>.cpp</code>代码</p></li></ul><p>简单地说，就是写代码。</p><p>比如：对老师来说，课代表就是接口，课代表怎么收作业就是实现。</p><h1 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cxy</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">double</span> height;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">growTaller</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"drinkMilk"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        height+=<span class="number">2</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Cxy cbh;</span><br><span class="line">    cbh.growtaller();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请找出代码里的类、对象、抽象、封装。</p><h1 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h1><h2 id="常量成员函数"><a href="#常量成员函数" class="headerlink" title="常量成员函数"></a>常量成员函数</h2><p>C++中，为了禁止成员函数修改数据成员的值，可以使用常量成员函数。</p><p>语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>&#123;</span></span><br><span class="line">    <span class="function">T <span class="title">f</span><span class="params">(T1, T1, ...)</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>只有类的成员函数才能定义为常量函数，普通函数不能。</li><li>常量成员函数与const参数没有关系</li></ul><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ul><li>每个对象的数据成员都有自己独立的存储空间。就像int变量一样。</li><li><strong>注意</strong>：一个类的成员函数只有一份，所有对象共用。</li><li><strong>注意</strong>：类的static成员只有一份，它并不算对象的数据成员。</li></ul><h1 id="构造函数设计"><a href="#构造函数设计" class="headerlink" title="构造函数设计"></a>构造函数设计</h1><h2 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>书上P97下边给的定义是最准确的。</p><p>想想之前讲的默认的含义。</p><p>简单来说：如果用类定义对象时，我们没有给参数的话，调用的就是默认构造函数。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>默认构造函数有两种：</p><ul><li><p>不带参数的构造函数</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A();</span><br></pre></td></tr></table></figure><p>  可以是我们自己定义的，也可以是编译器合成的。</p></li><li><p>所有形参都提供了默认值的构造函数</p><p>  这个当然是我们自己定义的。</p></li></ul><h2 id="构造函数与初始化列表"><a href="#构造函数与初始化列表" class="headerlink" title="构造函数与初始化列表"></a>构造函数与初始化列表</h2><h3 id="初始化列表次序"><a href="#初始化列表次序" class="headerlink" title="初始化列表次序"></a>初始化列表次序</h3><p>初始化列表中的成员初始化次序与他们在类中的声明次序相同，与初始化列表中的次序无关。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    A(<span class="keyword">int</span> aa,<span class="keyword">int</span> bb,<span class="keyword">int</span> cc):b(aa),a(bb),c(cc)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am a handsome constructor yo"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提问：初始化次序是什么？</p><h3 id="初始化列表执行时间"><a href="#初始化列表执行时间" class="headerlink" title="初始化列表执行时间"></a>初始化列表执行时间</h3><p>类内初始值$\rightarrow$构造函数初始化列表$\rightarrow$构造函数体</p><h2 id="what必须采用初始化列表？"><a href="#what必须采用初始化列表？" class="headerlink" title="what必须采用初始化列表？"></a>what必须采用初始化列表？</h2><h3 id="C-11之前"><a href="#C-11之前" class="headerlink" title="C++11之前"></a>C++11之前</h3><p>一个类的</p><ul><li>常量成员</li><li>引用成员</li><li>类对象成员</li><li>子类构造函数对基类构造函数的调用</li><li>等等</li></ul><p>必须通过初始化列表进行初始化。</p><h3 id="C-11之后"><a href="#C-11之后" class="headerlink" title="C++11之后"></a>C++11之后</h3><p>除了初始化列表，可以用类内初始值yo。</p><h1 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h1><p>若有几个对象同时结束生存期，析构函数调用顺序与构造函数顺序相反。</p><h1 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h1><p>关键字：<code>static</code>。</p><p>静态成员可以是变量，也可以是函数。</p><p><strong>注意</strong>：静态成员函数不可以访问非静态成员。think why？</p><h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>表示这个成员是属于整个类的。</p><h2 id="声明和定义"><a href="#声明和定义" class="headerlink" title="声明和定义"></a>声明和定义</h2><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> boyNum;<span class="comment">//男孩的数量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> Boy::boyNum；<span class="comment">//未初始化</span></span><br><span class="line"><span class="comment">//static int Boy::boyNum = 0；//初始化</span></span><br></pre></td></tr></table></figure><p>在类内<code>static int number；</code>，仅仅是<strong>声明</strong>，</p><p>原则上，<strong>定义</strong>必须写在类外：<code>static int Boy::boyNum;</code>，值默认为0，也可以进行初始化。</p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>两种方式：</p><ul><li><p>通过类名访问（<strong>非静态成员不能以这种这样访问</strong>）</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; Boy::boyNum &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>通过对象访问</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Boy <span class="title">cbh</span><span class="params">()</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cbhboyNum &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li></ul><p>看看下边的this？</p><h1 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h1><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>this用来标识一个对象，是该对象的地址，类型是<code>Boy* const</code>，隐含在非静态成员函数的参数里。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>静态成员函数没有this指针，所以不可以访问非静态成员。</p><p>常量成员函数的this，类型是<code>const Boy *</code>。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;如何理解类和对象？&lt;/p&gt;
&lt;p&gt;类是一种自定义数据类型，用&lt;strong&gt;类&lt;/strong&gt;定义出来的变量就是&lt;strong&gt;对象&lt;/s
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://chouxianyu.github.io/tags/C-C/"/>
    
      <category term="面向对象" scheme="https://chouxianyu.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>美国人口指数增长模型拟合</title>
    <link href="https://chouxianyu.github.io/2019/03/27/%E7%BE%8E%E5%9B%BD%E4%BA%BA%E5%8F%A3%E6%8C%87%E6%95%B0%E5%A2%9E%E9%95%BF%E6%A8%A1%E5%9E%8B%E6%8B%9F%E5%90%88/"/>
    <id>https://chouxianyu.github.io/2019/03/27/美国人口指数增长模型拟合/</id>
    <published>2019-03-27T00:50:23.000Z</published>
    <updated>2019-03-27T06:11:25.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h1><p>美国人口数满足指数增长模型$x(t)=x_0e^{rt}$，其中$x(t)$表示第$t$年的人口数，$x_0$表示第0年的人口数，即人口数初值。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>$ x(t) = x_0e^{rt} \ \Rightarrow \ ln \,x(t)=rt+ln\,x_0 \,\Rightarrow Y=ln \,x(t)a_1t+a_2$ ，</p><p>其中$Y=ln\,x(t)$，$a_1=r$，$a_2=ln\,x_0$。</p><p>如上，将指数函数转化为线性函数，利用线性函数进行拟合，再将线性函数转化为指数函数。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">t  = <span class="number">1790</span> : <span class="number">10</span> : <span class="number">1900</span>; <span class="comment">% 时间</span></span><br><span class="line">p = [<span class="number">3.9</span>   <span class="number">5.3</span>    <span class="number">7.2</span>    <span class="number">9.6</span> ...</span><br><span class="line">      <span class="number">12.9</span> <span class="number">17.1</span>  <span class="number">23.2</span>  <span class="number">31.4</span> ...</span><br><span class="line">      <span class="number">38.6</span>  <span class="number">50.2</span> <span class="number">62.9</span>  <span class="number">76.0</span>];  <span class="comment">% 人口数</span></span><br><span class="line"></span><br><span class="line">  Y = <span class="built_in">log</span>(p); <span class="comment">% 转换为线性</span></span><br><span class="line">  X = t; <span class="comment">% 不用X直接用t也可以</span></span><br><span class="line">  a = polyfit(X, Y, <span class="number">1</span>); <span class="comment">% X,Y线性拟合</span></span><br><span class="line">  x0 = <span class="built_in">exp</span>(a(<span class="number">2</span>)); <span class="comment">%</span></span><br><span class="line">  r = a(<span class="number">1</span>);</span><br><span class="line">  ti = <span class="number">1790</span>:<span class="number">1900</span>; <span class="comment">% 曲线的横坐标</span></span><br><span class="line">  pti = x0*<span class="built_in">exp</span>(r*ti); <span class="comment">% 曲线纵坐标，即拟合结果</span></span><br><span class="line">  plot(t, p, <span class="string">'o'</span>, ti, pti, <span class="string">'m'</span>); <span class="comment">% 原数据与拟合结果对比</span></span><br><span class="line">  xlabel(<span class="string">'Year'</span>);</span><br><span class="line">  ylabel(<span class="string">'Population'</span>);</span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><a href="https://i.loli.net/2019/03/27/5c9ac6c55118e.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/27/5c9ac6c55118e.png" alt="美国人口指数增长模型拟合.png"></a></p><p>可以看到，前期拟合结果较好，但是1890年到1900年曲线与原数据相比偏高。</p><p>原因是人口数并不完全符合指数增长模型，人口并不能完全地按照“J”型曲线增长，而应该是“S”型曲线。物种竞争嘛，所以刚开始的假设是不合理的，可以再进行优化。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;假设&quot;&gt;&lt;a href=&quot;#假设&quot; class=&quot;headerlink&quot; title=&quot;假设&quot;&gt;&lt;/a&gt;假设&lt;/h1&gt;&lt;p&gt;美国人口数满足指数增长模型$x(t)=x_0e^{rt}$，其中$x(t)$表示第$t$年的人口数，$x_0$表示第0年的人口数，即人口数初
      
    
    </summary>
    
    
      <category term="Matlab" scheme="https://chouxianyu.github.io/tags/Matlab/"/>
    
      <category term="数学建模" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="拟合" scheme="https://chouxianyu.github.io/tags/%E6%8B%9F%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>线性方程组求解</title>
    <link href="https://chouxianyu.github.io/2019/03/26/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E6%B1%82%E8%A7%A3/"/>
    <id>https://chouxianyu.github.io/2019/03/26/线性方程组求解/</id>
    <published>2019-03-26T01:03:41.000Z</published>
    <updated>2019-03-27T05:59:24.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定解方程组"><a href="#定解方程组" class="headerlink" title="定解方程组"></a>定解方程组</h1><p>有一组解。</p><p>$\begin{equation}<br>    \left\{<br>          \begin{array}{r1}<br>              2x+3y+1z = 4\\<br>              4x+2y+3z=17\\<br>              7x+1y-1z=1\\<br>          \end{array}<br>    \right.<br>\end{equation}$</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% A*X=B</span></span><br><span class="line">A = [<span class="number">2</span> <span class="number">3</span> <span class="number">1</span>; <span class="number">4</span> <span class="number">2</span> <span class="number">3</span>; <span class="number">7</span> <span class="number">1</span> <span class="number">-1</span>];</span><br><span class="line">B = [<span class="number">4</span> <span class="number">17</span> <span class="number">1</span>]';</span><br><span class="line">X= A\B <span class="comment">% 求得X</span></span><br></pre></td></tr></table></figure><h1 id="不定方程组"><a href="#不定方程组" class="headerlink" title="不定方程组"></a>不定方程组</h1><p>有无数组解。</p><p>$\begin{equation}<br>    \left\{<br>          \begin{array}{r1}<br>              4x+5y+1z=3\\<br>              1x+2y+4z=15\\<br>          \end{array}<br>    \right.<br>\end{equation}$</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% A*X=B</span></span><br><span class="line">A = [<span class="number">4</span> <span class="number">5</span> <span class="number">1</span>; <span class="number">1</span> <span class="number">2</span> <span class="number">4</span>];</span><br><span class="line">B = [<span class="number">3</span> <span class="number">15</span>]';</span><br><span class="line">X= A\B <span class="comment">% 得无数解中的一种</span></span><br></pre></td></tr></table></figure><h1 id="超定方程组"><a href="#超定方程组" class="headerlink" title="超定方程组"></a>超定方程组</h1><p>无解。</p><p>$\begin{equation}<br>    \left\{<br>          \begin{array}{r1}<br>              4x+5y = 3\\<br>              1x+2y = 15\\<br>              3x+1y = 12\\<br>          \end{array}<br>    \right.<br>\end{equation}$</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% A*X=B</span></span><br><span class="line">A = [<span class="number">4</span> <span class="number">5</span>; <span class="number">1</span> <span class="number">2</span>; <span class="number">3</span> <span class="number">1</span>];</span><br><span class="line">B = [<span class="number">3</span> <span class="number">15</span> <span class="number">12</span>]';</span><br><span class="line">X= A\B <span class="comment">% 本来是无解的，按最小二乘法得到最接近的解</span></span><br></pre></td></tr></table></figure><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定解方程组&quot;&gt;&lt;a href=&quot;#定解方程组&quot; class=&quot;headerlink&quot; title=&quot;定解方程组&quot;&gt;&lt;/a&gt;定解方程组&lt;/h1&gt;&lt;p&gt;有一组解。&lt;/p&gt;
&lt;p&gt;$\begin{equation}&lt;br&gt;    \left\{&lt;br&gt;         
      
    
    </summary>
    
    
      <category term="Matlab" scheme="https://chouxianyu.github.io/tags/Matlab/"/>
    
      <category term="数学建模" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="线性方程组求解" scheme="https://chouxianyu.github.io/tags/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E6%B1%82%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>线性和非线性拟合</title>
    <link href="https://chouxianyu.github.io/2019/03/25/%E7%BA%BF%E6%80%A7%E5%92%8C%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%8B%9F%E5%90%88/"/>
    <id>https://chouxianyu.github.io/2019/03/25/线性和非线性拟合/</id>
    <published>2019-03-25T14:50:59.000Z</published>
    <updated>2019-03-27T05:59:28.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性拟合"><a href="#线性拟合" class="headerlink" title="线性拟合"></a>线性拟合</h1><p>一阶拟合：$y=a_1x+a_2$，这就是线性拟合了。</p><p>二阶拟合：$y=a_1x^2+a_2x+a_3​$，这就不是线性拟合了。</p><h2 id="polyfit"><a href="#polyfit" class="headerlink" title="polyfit"></a>polyfit</h2><p><code>a=polyfit(x,y,n)</code></p><ul><li>最小二乘法计算拟合多项式系数</li><li>x,y为拟合数据向量</li><li>n为拟合多项式次数</li><li>通过a保存多项式系数，从最高次向最低次排列</li></ul><h2 id="polyval"><a href="#polyval" class="headerlink" title="polyval"></a>polyval</h2><p><code>y=polyval(a,x)</code></p><ul><li>计算多项式的函数值</li><li>返回在x处多项式的值</li><li>a为多项式系数，元素按多项式降幂排序</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 求拟合多项式系数，即a</span></span><br><span class="line">x = [<span class="number">1.0</span> <span class="number">1.5</span> <span class="number">2.0</span> <span class="number">2.5</span> <span class="number">3.0</span>]';</span><br><span class="line">y = [<span class="number">0.9</span> <span class="number">1.7</span> <span class="number">2.2</span> <span class="number">2.6</span> <span class="number">3.0</span>]';</span><br><span class="line">a = polyfit(x,y,<span class="number">1</span>) <span class="comment">% 1指一阶拟合，也就是指多项式次数</span></span><br><span class="line"><span class="comment">% 求拟合结果</span></span><br><span class="line">xi = <span class="number">1</span> : <span class="number">0.1</span> : <span class="number">3</span>;</span><br><span class="line">yi = polyval(a, xi); <span class="comment">% 求多项式的函数值</span></span><br><span class="line">plot(x,y,<span class="string">'o'</span>,xi,yi); <span class="comment">% 作图对比原数据和拟合结果</span></span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><a href="https://i.loli.net/2019/03/25/5c98ea25b3240.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/25/5c98ea25b3240.png" alt="线性拟合.png"></a></p><p>图中点是原始数据，线是拟合结果，线有点点弯。</p><h1 id="指定形式拟合"><a href="#指定形式拟合" class="headerlink" title="指定形式拟合"></a>指定形式拟合</h1><h2 id="fittype"><a href="#fittype" class="headerlink" title="fittype"></a>fittype</h2><p>定义拟合形式</p><h2 id="fit"><a href="#fit" class="headerlink" title="fit"></a>fit</h2><p>根据数据向量，按照某种拟合形式拟合。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1.0</span> <span class="number">1.5</span> <span class="number">2.0</span> <span class="number">2.5</span> <span class="number">3.0</span>]';</span><br><span class="line">y = [<span class="number">0.9</span> <span class="number">1.7</span> <span class="number">2.2</span> <span class="number">2.6</span> <span class="number">3.0</span>]';</span><br><span class="line">p = fittype(<span class="string">'a*x+b*sin(x)+c'</span>); <span class="comment">% 定义拟合形式</span></span><br><span class="line">f = fit(x,y,p) <span class="comment">% 向量x,y按照p的形式拟合</span></span><br><span class="line">plot(f,x,y); <span class="comment">% 作图对比拟合结果</span></span><br></pre></td></tr></table></figure><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><p><a href="https://i.loli.net/2019/03/25/5c98ea2708385.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/25/5c98ea2708385.png" alt="指定形式拟合.png"></a></p><p>图中代码没有定义<code>x</code>,<code>y</code>也可以运行，是因为工作区中已经有这两个变量了。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性拟合&quot;&gt;&lt;a href=&quot;#线性拟合&quot; class=&quot;headerlink&quot; title=&quot;线性拟合&quot;&gt;&lt;/a&gt;线性拟合&lt;/h1&gt;&lt;p&gt;一阶拟合：$y=a_1x+a_2$，这就是线性拟合了。&lt;/p&gt;
&lt;p&gt;二阶拟合：$y=a_1x^2+a_2x+a_3​$，这
      
    
    </summary>
    
    
      <category term="Matlab" scheme="https://chouxianyu.github.io/tags/Matlab/"/>
    
      <category term="数学建模" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="拟合" scheme="https://chouxianyu.github.io/tags/%E6%8B%9F%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Matlab作图</title>
    <link href="https://chouxianyu.github.io/2019/03/24/Matlab%E4%BD%9C%E5%9B%BE/"/>
    <id>https://chouxianyu.github.io/2019/03/24/Matlab作图/</id>
    <published>2019-03-24T14:45:05.000Z</published>
    <updated>2019-03-27T06:00:05.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二维作图"><a href="#二维作图" class="headerlink" title="二维作图"></a>二维作图</h1><h2 id="plot"><a href="#plot" class="headerlink" title="plot"></a>plot</h2><p><a href="https://i.loli.net/2019/03/24/5c97966b8cef3.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/24/5c97966b8cef3.png" alt="plot.png"></a></p><h2 id="简单控制语句"><a href="#简单控制语句" class="headerlink" title="简单控制语句"></a>简单控制语句</h2><p><a href="https://i.loli.net/2019/03/24/5c97966b6d271.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/24/5c97966b6d271.png" alt="简单控制语句.png"></a></p><h2 id="sin-x-amp-cos-x"><a href="#sin-x-amp-cos-x" class="headerlink" title="sin(x) &amp; cos(x)"></a>sin(x) &amp; cos(x)</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">-2</span> * <span class="built_in">pi</span> : <span class="number">0.1</span> : <span class="number">2</span>*<span class="built_in">pi</span>; <span class="comment">% 切片</span></span><br><span class="line">y1 = <span class="built_in">sin</span>(x);</span><br><span class="line">y2 = <span class="built_in">cos</span>(x);</span><br><span class="line">plot(x, y1,<span class="string">'-b'</span>); <span class="comment">% - 实线 b 蓝色</span></span><br><span class="line">hold on <span class="comment">% 保持当前画的图形不被覆盖掉</span></span><br><span class="line">plot(x, y2, <span class="string">'-r'</span>); <span class="comment">% - 实线 r 红色</span></span><br><span class="line">xlabel(<span class="string">'x'</span>); <span class="comment">%  x轴上加标签</span></span><br><span class="line">ylabel(<span class="string">'y'</span>); <span class="comment">%  y轴上加标签</span></span><br><span class="line">text(<span class="number">0</span>, <span class="number">0</span>, <span class="string">'(0,0)'</span>); <span class="comment">% 在(0,0)加文本</span></span><br><span class="line">legend(<span class="string">'sin x'</span>, <span class="string">'cos x'</span>); <span class="comment">% 图例</span></span><br></pre></td></tr></table></figure><p><a href="https://i.loli.net/2019/03/24/5c97966acaa8f.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/24/5c97966acaa8f.png" alt="sinx&amp;cosx.png"></a></p><h2 id="two-hearts"><a href="#two-hearts" class="headerlink" title="two hearts"></a>two hearts</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="number">0</span> : <span class="built_in">pi</span>/<span class="number">180</span> : <span class="number">4</span>*<span class="built_in">pi</span>; <span class="comment">%  切片</span></span><br><span class="line">x = <span class="number">16</span>*<span class="built_in">sin</span>(t).^<span class="number">3</span>; <span class="comment">% x,y用参数为t的方程表示</span></span><br><span class="line">y = <span class="number">13</span>*<span class="built_in">cos</span>(t) - <span class="number">5</span>*<span class="built_in">cos</span>(<span class="number">2</span>*t)... <span class="comment">% 本行未结束</span></span><br><span class="line"><span class="number">-2</span>*<span class="built_in">cos</span>(<span class="number">3</span>*t) - <span class="built_in">cos</span>(<span class="number">4</span>*t);</span><br><span class="line">plot(x<span class="number">-3</span>, y, <span class="string">'-r'</span>, x+<span class="number">3</span>, y, <span class="string">'-b'</span>);</span><br><span class="line">xlabel(<span class="string">'x'</span>); <span class="comment">%  x轴上加标签</span></span><br><span class="line">ylabel(<span class="string">'y'</span>); <span class="comment">%  y轴上加标签</span></span><br><span class="line">axis([<span class="number">-20</span>, <span class="number">20</span>, <span class="number">-20</span>, <span class="number">15</span>]); <span class="comment">% 坐标范围：x [-20,20] y [-20,15]</span></span><br><span class="line">title(<span class="string">'Two Hearts'</span>); <span class="comment">% 标题</span></span><br><span class="line">legend(<span class="string">'U'</span>, <span class="string">'I'</span>); <span class="comment">% 图例</span></span><br></pre></td></tr></table></figure><p><a href="https://i.loli.net/2019/03/24/5c97966ac39fd.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/24/5c97966ac39fd.png" alt="twoHearts.png"></a></p><h2 id="对数坐标"><a href="#对数坐标" class="headerlink" title="对数坐标"></a>对数坐标</h2><p><code>loglog</code>，双对数坐标。</p><p><code>semilogx</code>，只有x是对数。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span>*<span class="number">2.</span>^[<span class="number">0</span>:<span class="number">6</span>];</span><br><span class="line">y = [<span class="number">100</span> <span class="number">150</span> <span class="number">225</span> <span class="number">340</span> ...</span><br><span class="line"> <span class="number">510</span> <span class="number">765</span> <span class="number">1150</span>];</span><br><span class="line">loglog(x, y, <span class="string">'.-r'</span>); <span class="comment">% 点实线 红色</span></span><br><span class="line">xlim([<span class="number">0.5e1</span>, <span class="number">0.8e3</span>]); <span class="comment">% x坐标范围</span></span><br><span class="line">ylim([<span class="number">0.8e2</span>, <span class="number">1.4e3</span>]); <span class="comment">% y坐标范围</span></span><br><span class="line">xlabel(<span class="string">'x'</span>);</span><br><span class="line">ylabel(<span class="string">'y'</span>);</span><br></pre></td></tr></table></figure><p><a href="https://i.loli.net/2019/03/24/5c97966ad56f0.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/24/5c97966ad56f0.png" alt="对数坐标.png"></a></p><h2 id="极坐标"><a href="#极坐标" class="headerlink" title="极坐标"></a>极坐标</h2><p><code>polar</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">theta = <span class="number">0</span> : <span class="built_in">pi</span>/<span class="number">180</span> : <span class="number">4</span>*<span class="built_in">pi</span>; <span class="comment">% 角度</span></span><br><span class="line">r = <span class="number">1</span>- <span class="built_in">sin</span>(theta); <span class="comment">% 长度</span></span><br><span class="line">polar(theta, r, <span class="string">'-r'</span>); <span class="comment">% 实线 红色</span></span><br></pre></td></tr></table></figure><p><a href="https://i.loli.net/2019/03/24/5c97966b0e806.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/24/5c97966b0e806.png" alt="极坐标.png"></a></p><h1 id="三维作图"><a href="#三维作图" class="headerlink" title="三维作图"></a>三维作图</h1><h2 id="plot3"><a href="#plot3" class="headerlink" title="plot3"></a>plot3</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="number">0</span> : <span class="built_in">pi</span>/<span class="number">50</span> : <span class="number">10</span>*<span class="built_in">pi</span>; <span class="comment">% 2pi是一圈 10pi转5圈 </span></span><br><span class="line">x = <span class="built_in">sin</span>(t);</span><br><span class="line">y = <span class="built_in">cos</span>(t);</span><br><span class="line">z = t;</span><br><span class="line">plot3(x, y, z); <span class="comment">% 3维</span></span><br><span class="line">title(<span class="string">'Helix'</span>);</span><br><span class="line">xlabel(<span class="string">'sin t'</span>);</span><br><span class="line">ylabel(<span class="string">'cos t'</span>);</span><br><span class="line">zlabel(<span class="string">'t'</span>);</span><br><span class="line">grid on <span class="comment">% 打开网格</span></span><br></pre></td></tr></table></figure><p><a href="https://i.loli.net/2019/03/24/5c97966ad4b4b.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/24/5c97966ad4b4b.png" alt="Helix.png"></a></p><h2 id="三维曲面"><a href="#三维曲面" class="headerlink" title="三维曲面"></a>三维曲面</h2><p><code>meshgrid</code>，生成绘制3D图形所需的网格数据。</p><p><code>[x, y]=meshgrid(1:3, 1:3)</code></p><p><code>mesh</code>，<code>surf</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[x, y] = <span class="built_in">meshgrid</span>(-<span class="built_in">pi</span>:<span class="number">0.1</span>:<span class="built_in">pi</span>); <span class="comment">% 生成数据</span></span><br><span class="line">z = <span class="built_in">sin</span>(x) .* <span class="built_in">cos</span>(y);</span><br><span class="line">mesh(x, y, z); <span class="comment">% 作图</span></span><br><span class="line">surf(x, y, z); <span class="comment">% 使有颜色</span></span><br><span class="line">xlabel(<span class="string">'x'</span>); </span><br><span class="line">ylabel(<span class="string">'y'</span>);</span><br><span class="line">zlabel(<span class="string">'z'</span>);</span><br><span class="line">title(<span class="string">'sin x sin y'</span>);</span><br></pre></td></tr></table></figure><p><a href="https://i.loli.net/2019/03/24/5c97966b6e115.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/03/24/5c97966b6e115.png" alt="三维曲面.png"></a></p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二维作图&quot;&gt;&lt;a href=&quot;#二维作图&quot; class=&quot;headerlink&quot; title=&quot;二维作图&quot;&gt;&lt;/a&gt;二维作图&lt;/h1&gt;&lt;h2 id=&quot;plot&quot;&gt;&lt;a href=&quot;#plot&quot; class=&quot;headerlink&quot; title=&quot;plot&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Matlab" scheme="https://chouxianyu.github.io/tags/Matlab/"/>
    
      <category term="可视化" scheme="https://chouxianyu.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="数学建模" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>Matlab基础</title>
    <link href="https://chouxianyu.github.io/2019/03/24/Matlab%E5%9F%BA%E7%A1%80/"/>
    <id>https://chouxianyu.github.io/2019/03/24/Matlab基础/</id>
    <published>2019-03-24T14:44:52.000Z</published>
    <updated>2019-03-25T14:13:38.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本命令和语句"><a href="#基本命令和语句" class="headerlink" title="基本命令和语句"></a>基本命令和语句</h1><h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h2><ul><li><p><code>clear y</code></p><p>  删除y变量</p></li><li><p><code>clear</code></p><p>  删除所有变量</p></li></ul><h2 id="clc"><a href="#clc" class="headerlink" title="clc"></a>clc</h2><p>清空屏幕输出</p><h2 id="文件命名规则"><a href="#文件命名规则" class="headerlink" title="文件命名规则"></a>文件命名规则</h2><p>matlab文件命名规则和C语言变量命名规则类似。</p><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p>帮助文档，<code>help functionname</code>。</p><h2 id="lookfor"><a href="#lookfor" class="headerlink" title="lookfor"></a>lookfor</h2><p>寻找含关键字的函数，<code>lookfor keyword</code>。</p><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>一行中的元素可以用逗号或者空格隔开。</p><p>分号表示一行向量的结束。</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>起点：步长：终点，步长可以省略，默认为1</p><h2 id="转置"><a href="#转置" class="headerlink" title="转置"></a>转置</h2><p><code>A&#39;</code> </p><h2 id="linespace"><a href="#linespace" class="headerlink" title="linespace"></a>linespace</h2><p>类似切片，均匀生成几个数字，得到行向量。</p><h1 id="常用矩阵"><a href="#常用矩阵" class="headerlink" title="常用矩阵"></a>常用矩阵</h1><h2 id="zeros"><a href="#zeros" class="headerlink" title="zeros"></a>zeros</h2><p>零矩阵，参数是行数和列数或者方阵行数。</p><h2 id="ones"><a href="#ones" class="headerlink" title="ones"></a>ones</h2><p>1矩阵，参数同zeros。</p><h2 id="eye"><a href="#eye" class="headerlink" title="eye"></a>eye</h2><p>单位矩阵</p><h2 id="固定变量"><a href="#固定变量" class="headerlink" title="固定变量"></a>固定变量</h2><h3 id="pi"><a href="#pi" class="headerlink" title="pi"></a>pi</h3><p>π</p><h3 id="i"><a href="#i" class="headerlink" title="i"></a>i</h3><p>虚数，$\sqrt{-1}​$。</p><h3 id="Inf"><a href="#Inf" class="headerlink" title="Inf"></a>Inf</h3><p>无穷大</p><h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><p>不是一个数字，not a number。</p><h1 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h1><p>矩阵指2维向量，向量指1维向量。</p><h2 id="矩阵加法"><a href="#矩阵加法" class="headerlink" title="矩阵加法"></a>矩阵加法</h2><p>同型矩阵同位置元素相加。</p><p>若矩阵+向量，每行/列都会加该向量。</p><h2 id="矩阵减法"><a href="#矩阵减法" class="headerlink" title="矩阵减法"></a>矩阵减法</h2><p>类似于矩阵加法。</p><h2 id="矩阵乘法-除法"><a href="#矩阵乘法-除法" class="headerlink" title="矩阵乘法/除法"></a>矩阵乘法/除法</h2><h3 id="点乘点除"><a href="#点乘点除" class="headerlink" title="点乘点除"></a>点乘点除</h3><p><code>A.*B</code>，对应位相乘。</p><h3 id="次方"><a href="#次方" class="headerlink" title="次方"></a>次方</h3><p><code>A^2</code></p><h3 id="点次方"><a href="#点次方" class="headerlink" title="点次方"></a>点次方</h3><p><code>A.^2</code>，每一位都次方。</p><h1 id="矩阵取值"><a href="#矩阵取值" class="headerlink" title="矩阵取值"></a>矩阵取值</h1><h2 id="双索引"><a href="#双索引" class="headerlink" title="双索引"></a>双索引</h2><p>A(1,3)`，第一行第三列元素。 </p><h2 id="单索引"><a href="#单索引" class="headerlink" title="单索引"></a>单索引</h2><p>matlab是竖着数的。</p><p>若A是三行三列的矩阵，则<code>A(1,2)==A(4)</code>。</p><h2 id="取行-列向量"><a href="#取行-列向量" class="headerlink" title="取行/列向量"></a>取行/列向量</h2><p><code>A(2,:)</code>，取A的第二行所有列，即第二行。</p><h1 id="比较和逻辑运算"><a href="#比较和逻辑运算" class="headerlink" title="比较和逻辑运算"></a>比较和逻辑运算</h1><p>同位置元素进行比较，<code>&gt;</code>、<code>&lt;</code>、<code>&amp;</code>、<code>|</code>、<code>==</code>、异或<code>xor(x&gt;5,y&lt;7)</code>。比如<code>A==B</code>。</p><p><code>x(x&lt;0)=0</code>，将x中小于0的赋值为0</p><p><code>y(y(:,1)&lt;0,:)=0</code>，如果某行第一列小于0，整行赋值为0</p><h1 id="矩阵操作函数"><a href="#矩阵操作函数" class="headerlink" title="矩阵操作函数"></a>矩阵操作函数</h1><p>设A是矩阵，B是行向量，C是列向量。</p><h2 id="flipud"><a href="#flipud" class="headerlink" title="flipud"></a>flipud</h2><p>上下旋转</p><h2 id="fliplr"><a href="#fliplr" class="headerlink" title="fliplr"></a>fliplr</h2><p>左右旋转</p><h2 id="rot90"><a href="#rot90" class="headerlink" title="rot90"></a>rot90</h2><p>沿副对角线旋转，与转置不同。</p><h2 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h2><p>求和。</p><ul><li><p>sum(B)</p><p>  求该行的和</p></li><li><p>sum(A)</p><p>  每列求和，得到一个行向量</p></li><li><p>sum(A，1)</p><p>  等价于sum(A)，1代表维度，列是第一个维度。</p></li><li><p>sum(A，2)</p><p>  每行求和，得到一个列向量。</p></li><li><p>sum(A(:))</p><p>  整个矩阵求和。<code>A(:)</code>将矩阵<code>A</code>拉成一个列向量。</p></li></ul><h2 id="max"><a href="#max" class="headerlink" title="max"></a>max</h2><ul><li><p>max(B)</p><p>  求一行的最大值。</p></li><li><p>max(B,2)</p><p>  每个元素与2比较，得最大值；若小于2，则结果为2；若大于2，则结果为该元素。</p></li><li><p>max(A)</p><p>  与<code>sum</code>类似，每列求最大值，等价于<code>max(A,[],1)</code>。</p></li><li><p><code>max(A,[],2)</code></p><p>  每行求最大值。</p></li></ul><h1 id="常用数学函数"><a href="#常用数学函数" class="headerlink" title="常用数学函数"></a>常用数学函数</h1><h2 id="ceil"><a href="#ceil" class="headerlink" title="ceil"></a>ceil</h2><p>向上取整</p><h2 id="fix"><a href="#fix" class="headerlink" title="fix"></a>fix</h2><p>靠近0取整</p><h2 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h2><p>向下取整</p><h2 id="round"><a href="#round" class="headerlink" title="round"></a>round</h2><p>四舍五入取整</p><h2 id="mod"><a href="#mod" class="headerlink" title="mod"></a>mod</h2><p><code>mod(i,2)</code>，取i/2的余数。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本命令和语句&quot;&gt;&lt;a href=&quot;#基本命令和语句&quot; class=&quot;headerlink&quot; title=&quot;基本命令和语句&quot;&gt;&lt;/a&gt;基本命令和语句&lt;/h1&gt;&lt;h2 id=&quot;clear&quot;&gt;&lt;a href=&quot;#clear&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="Matlab" scheme="https://chouxianyu.github.io/tags/Matlab/"/>
    
      <category term="数学建模" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>C/C++小课之引用</title>
    <link href="https://chouxianyu.github.io/2019/03/24/C-C-%E5%B0%8F%E8%AF%BE%E4%B9%8B%E5%BC%95%E7%94%A8/"/>
    <id>https://chouxianyu.github.io/2019/03/24/C-C-小课之引用/</id>
    <published>2019-03-24T08:07:48.000Z</published>
    <updated>2019-03-24T08:08:52.302Z</updated>
    
    <content type="html"><![CDATA[<p>关于引用，讲一个同学问的题目。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">//域限定符</span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;<span class="comment">//域限定符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp;<span class="title">f</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span> b = <span class="number">20</span>)</span></span></span><br><span class="line"><span class="function"><span class="comment">//定义函数，为了规范，应该在main前边写函数声明，main后定义函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//a是main函数中j的引用</span></span><br><span class="line">a = a * b;<span class="comment">//j = j * b</span></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;m = f(j);<span class="comment">//函数f返回引用a，即j的引用，所以m是j的引用</span></span><br><span class="line"><span class="keyword">int</span> *p = &amp;m;<span class="comment">//p指向j</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//200</span></span><br><span class="line">m = <span class="number">20</span>;<span class="comment">//m是j的引用，j = 20</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//20</span></span><br><span class="line">f(j, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//100</span></span><br><span class="line">*p = <span class="number">300</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//300</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用分为左值引用和右值引用。</p><p>左值引用是某个变量的别名，作用类似于指针，提高效率。</p><p>右值引用是绑定到右值上的引用，只能绑定到即将销毁的对象上。</p><h2 id="域限定符"><a href="#域限定符" class="headerlink" title="域限定符"></a>域限定符</h2><p>命名空间是为了解决全局命名空间污染问题。</p><p>通过限定符可以使用对应命名空间内的对象（变量、函数、类型、类等）。</p><h2 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h2><p>默认参数又叫做缺省参数。如何理解？</p><ul><li><p>默认</p><p>  小明：小红，你在干嘛?</p><p>  小明：小红，你刚才在干嘛？</p></li><li><p>缺省</p><p>  可以缺少、省略。</p></li></ul><p>所有默认参数都必须出现在无默认参数的最右边。</p><p>也就是说实参从左向右给形参赋值，默认参数从右向左给形参赋值。</p><h2 id="函数位置"><a href="#函数位置" class="headerlink" title="函数位置"></a>函数位置</h2><p>函数应该写在代码的哪里？</p><p>如果使用C语言，比较好的方式是将函数声明和函数定义分开放，即在main函数前声明函数，在main函数后定义函数。</p><p>如果使用C++，最好面向对象，使用头文件和源文件。</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h3><p>谈到这个，相关的名词有两个：</p><ul><li><p>堆</p><p>  <code>new</code>出来的内存就在堆里</p></li><li><p>（堆）栈</p><p>  如果在main函数中定义一个<code>int</code>，它就存储在栈里。</p></li></ul><p>在学数据结构时，会学到栈和堆，它们是两种数据结构。</p><h3 id="栈和函数"><a href="#栈和函数" class="headerlink" title="栈和函数"></a>栈和函数</h3><p>栈有一个应用就是处理函数的<strong>嵌套</strong>，比较典型的就是递归。</p><p>比如上边代码中的main运行到f函数时，先要保存现在main函数的状态（变量、代码执行到的位置等），将其压栈（PUSH）；然后再进入f函数，栈顶即为f函数的内容，f函数执行完后，出栈（POP）；然后继续执行main函数。</p><p>在调试时就可以看到函数调用栈。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于引用，讲一个同学问的题目。&lt;/p&gt;
&lt;h1 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://chouxianyu.github.io/tags/C-C/"/>
    
      <category term="引用" scheme="https://chouxianyu.github.io/tags/%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>C/C++小课之课程介绍</title>
    <link href="https://chouxianyu.github.io/2019/03/24/C-C-%E5%B0%8F%E8%AF%BE%E4%B9%8B%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D/"/>
    <id>https://chouxianyu.github.io/2019/03/24/C-C-小课之课程介绍/</id>
    <published>2019-03-24T07:59:55.000Z</published>
    <updated>2019-03-24T14:55:05.764Z</updated>
    
    <content type="html"><![CDATA[<p>应要求，周六晚上开了一个课，教C/C++，把课件放在这里。</p><h1 id="课程简介"><a href="#课程简介" class="headerlink" title="课程简介"></a>课程简介</h1><ul><li><p>关于我</p><p>  班级，性别，年龄。</p><p>  第一次教课，希望大家及时对课堂给予一定建议与<strong>反馈</strong>。</p></li><li><p>上课时间</p><p>  周六晚上六点半，时长根据上课内容的多少和难度确定。</p></li><li><p>需求</p><p>  大家的需求是什么？C/C++?（<strong>我需要讲得广一点吗</strong>？）</p><p>  具体希望了解哪个方面呢？</p><p>  这可能跟你的年级、所上课程有关，也有可能你们也不知道。</p></li><li><p><strong>课程定位</strong></p><ul><li><p>该课程主要起<strong>辅助</strong>作用</p><p>  学习的主要战场应在个人课下的学习和学院老师的课堂上，这个课并不是冲刺课。</p><p>  由于能力和精力有限，我不能保证谁上了这个课就一定可以考高分或者不挂科。</p><p>  如果合作愉快，大家一定会有收获。</p></li><li><p>我的作用是帮助大家</p><p>  毕竟大二了，与大部分大一的同学相比，写代码的经验和知识面会足一些，我会尽可能把我的知识、思路和方法讲给大家。</p></li></ul></li></ul><h1 id="课程要求"><a href="#课程要求" class="headerlink" title="课程要求"></a>课程要求</h1><ul><li><p>课堂纪律</p><p>  合乎公共礼仪即可，好好听课，该请假的要跟我请假。每次课要点名的。</p><p>  希望大家能做到不懂就问。</p></li><li><p><strong>每周作业：每人提一个问题给我</strong></p><p>  这个是为了更好地了解大家的学习上遇到的困难，大家给出问题后，我可以在课堂上有针对性地进行讲解。大家的问题可能会是课堂的主要内容。</p></li></ul><h1 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h1><ul><li><p>大家解决编程中遇到的问题的能力有一定提升，能够多思考为什么</p></li><li><p>更了解C/C++，扩展知识面</p></li><li><p>课堂之外给大家帮助</p><p>  课余也可以</p></li></ul><h1 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h1><ul><li><p>C/C++课程重难点</p><p>  面向正在上C++、C语言课程的同学，讲解一些重点。</p></li><li><p><strong>大家的作业：提出的问题</strong></p><p>  可以是找到的题，可以是写作业遇到的问题，都可以。</p><p>  这是使这门课最大程度地为大家服务的一个方式，可以提高这门课的效用。</p></li><li><p>我遇到的有意思的问题</p><p>  大概想想有数组名，指针（包括指针赋值），面向对象，抽象，C++类的互相引用等等吧。</p></li></ul><p>大家有什么问题吗？</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;应要求，周六晚上开了一个课，教C/C++，把课件放在这里。&lt;/p&gt;
&lt;h1 id=&quot;课程简介&quot;&gt;&lt;a href=&quot;#课程简介&quot; class=&quot;headerlink&quot; title=&quot;课程简介&quot;&gt;&lt;/a&gt;课程简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;关于我&lt;/p&gt;
&lt;p&gt;  班级，
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://chouxianyu.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++小课之数组名</title>
    <link href="https://chouxianyu.github.io/2019/03/24/C-C-%E5%B0%8F%E8%AF%BE%E4%B9%8B%E6%95%B0%E7%BB%84%E5%90%8D/"/>
    <id>https://chouxianyu.github.io/2019/03/24/C-C-小课之数组名/</id>
    <published>2019-03-24T07:59:18.000Z</published>
    <updated>2019-03-24T08:10:05.435Z</updated>
    
    <content type="html"><![CDATA[<p>我们今天讨论数组名是什么东西，理解它有助于我们进一步理解和使用指针。</p><p>因为它涉及到了内存地址。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>数组名是什么？含义是什么？</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>一个值+1之后的变化可以反映出它的意义/含义。</p><h2 id="前提的证明"><a href="#前提的证明" class="headerlink" title="前提的证明"></a>前提的证明</h2><p>其实不证自明，计算机中就是这样的。</p><ul><li><p>生活中</p><p>  一个苹果+1，结果是两个，增加了一个苹果。</p><p>  一箱苹果+1，结果是两箱，个数是2*每箱苹果数，增加了一箱苹果。</p></li><li><p>计算机中</p><p>  int型变量的地址+1，增加了一个int的大小。</p><p>  double型变量的地址+1，增加了一个double的大小。</p></li></ul><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>根据前提，通过将数组名或数组名相关的值+1来判断它的含义。</p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>编程中要了解一个东西，大多时候我们可以通过输出它来了解它。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//注释指出array代表什么</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"    &amp;array[0] =  %p\n"</span>, &amp;<span class="built_in">array</span>[<span class="number">0</span>]);<span class="comment">//首元素</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"        array =  %p\n"</span>, <span class="built_in">array</span>);<span class="comment">//数组</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"      array+1 =  %p\n"</span>, <span class="built_in">array</span> + <span class="number">1</span>);<span class="comment">//数组</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  &amp;array[0]+1 =  %p\n"</span>, &amp;<span class="built_in">array</span>[<span class="number">0</span>] + <span class="number">1</span>);<span class="comment">//首元素</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"       &amp;array =  %p\n"</span>, &amp;<span class="built_in">array</span>);    <span class="comment">//数组</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"     &amp;array+1 =  %p\n"</span>, &amp;<span class="built_in">array</span> + <span class="number">1</span>);<span class="comment">//数组</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"sizeof(array) =  %zd\n"</span>, <span class="keyword">sizeof</span>(<span class="built_in">array</span>));<span class="comment">//数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么用printf不是cout？用cout其实也行，printf更方便。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    &amp;<span class="built_in">array</span>[<span class="number">0</span>] =  <span class="number">0000002</span>A433FF628</span><br><span class="line">        <span class="built_in">array</span> =  <span class="number">0000002</span>A433FF628</span><br><span class="line">      <span class="built_in">array</span>+<span class="number">1</span> =  <span class="number">0000002</span>A433FF62C</span><br><span class="line">  &amp;<span class="built_in">array</span>[<span class="number">0</span>]+<span class="number">1</span> =  <span class="number">0000002</span>A433FF62C</span><br><span class="line">       &amp;<span class="built_in">array</span> =  <span class="number">0000002</span>A433FF628</span><br><span class="line">     &amp;<span class="built_in">array</span>+<span class="number">1</span> =  <span class="number">0000002</span>A433FF63C</span><br><span class="line"><span class="keyword">sizeof</span>(<span class="built_in">array</span>) =  <span class="number">20</span></span><br></pre></td></tr></table></figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><h2 id="数组名是什么，有什么含义"><a href="#数组名是什么，有什么含义" class="headerlink" title="数组名是什么，有什么含义"></a>数组名是什么，有什么含义</h2><p><del>数组名是一个常量（所以不能被赋值），是一个地址。</del>（<code>&amp;array</code>中array并不是地址，因为地址是一个值，我们并不能取一个值的地址吧）</p><p>在不同情况下，有着不同的含义。</p><ul><li><p>代表整个数组</p><p>  碰到<code>&amp;</code>、<code>sizeof</code>时，数组名代表整个数组，作用像是一个变量。</p></li><li><p>代表数组首元素</p><p>  数组名单独出现或碰到<code>[]</code>、<code>*</code>时，数组名代表数组第一个元素，是一个地址。（这个下次会讲）</p></li></ul><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="IDE、编译器、编辑器"><a href="#IDE、编译器、编辑器" class="headerlink" title="IDE、编译器、编辑器"></a>IDE、编译器、编辑器</h2><ul><li><p>编辑器</p><p>  文本编辑器，比如notepad++，sublime。</p></li><li><p>编译器</p><p>  处理我们写的代码。</p><p>  C/C++的比如有：gcc，mingw。</p><p>  计算机语言可以分为两种：编译语言和解释语言。</p></li><li><p>IDE</p><p>  Integrated Development Environment，集成开发环境。</p><p>  集合了编辑器和编译器的功能，还有一些辅助开发的功能。</p></li></ul><h2 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a>Visual Studio</h2><ul><li><p>解决方案</p></li><li><p>项目</p></li><li><p>调试</p></li><li><p>查看源码</p><p>  比如看<code>sizeof</code>、<code>iostream</code>，<code>Ctrl+左键</code></p></li><li><p>查看类图</p><p>  右击(项目)-查看-查看类图</p></li></ul><h2 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h2><p><a href="https://tool.lu/hexconvert/" target="_blank" rel="noopener">https://tool.lu/hexconvert/</a></p><h2 id="地址-1"><a href="#地址-1" class="headerlink" title="地址+1"></a>地址+1</h2><p>核心在于单位。==见下篇==</p><h2 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h2><p>占用的字节数。基本数据类型、结构体（会字节对齐）。</p><ul><li><p>不同环境下（32位、64位等）某种类型的变量占用字节数可能是不同的</p><p>  比如指针，32位下是4个字节，64位下是8个字节，</p><p>  正好是对应计算机的字长。（后边有讲计算机字长是什么）</p></li><li><p><code>%zd</code>、<code>size_t</code></p></li></ul><p>==后边还有一篇==</p><h2 id="p-x"><a href="#p-x" class="headerlink" title="%p %x"></a>%p %x</h2><p>两者有细微差别。</p><h2 id="重视warning"><a href="#重视warning" class="headerlink" title="重视warning"></a>重视warning</h2><p>VS的warning还是比较全的，其他IDE的waring不一定全。</p><p>如果写代码出了问题却找不到原因，有可能是warning给出的潜在问题没有处理。</p><p>写代码时遇到waring一定要处理，不然很容易出问题。</p><h2 id="混合编程"><a href="#混合编程" class="headerlink" title="混合编程"></a>混合编程</h2><p>C和C++还是不一样的。特别是函数的使用，如果要动态申请一个类对象的内存，可别用malloc，它和new还是不一样的。</p><h2 id="一些重要名词"><a href="#一些重要名词" class="headerlink" title="一些重要名词"></a>一些重要名词</h2><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>生活、编程中出现的数字、字符串、字符等等，都是值。</p><p>比如1,2,3，我爱你等等。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量算是对值的一个<strong>替代</strong>（或者说抽象）吧，提高复用性。</p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p>地址是个值。</p><p>计算机有存储空间。我们将其一个个地编号，也就是给了它一个地址。</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针是个变量。</p><p>跟普通变量其实没什么本质区别，只不过它<strong>被用来存储地址</strong>而已。</p><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p><code>*</code> <code>[]</code> <code>&amp;</code>的优先级？</p><h2 id="计算机字长"><a href="#计算机字长" class="headerlink" title="计算机字长"></a>计算机字长</h2><p>字长：字的长度（位数）。</p><p>计算机中有字节这个单位。1个字节等于8位。</p><p>多个<strong>字节</strong>组成<strong>字</strong>。</p><p>我们平常说的电脑32位，64位指的就是字长。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们今天讨论数组名是什么东西，理解它有助于我们进一步理解和使用指针。&lt;/p&gt;
&lt;p&gt;因为它涉及到了内存地址。&lt;/p&gt;
&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;数组名是什么？含
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://chouxianyu.github.io/tags/C-C/"/>
    
      <category term="数组" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>python批量下载邮件附件</title>
    <link href="https://chouxianyu.github.io/2019/03/23/python%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E9%82%AE%E4%BB%B6%E9%99%84%E4%BB%B6/"/>
    <id>https://chouxianyu.github.io/2019/03/23/python批量下载邮件附件/</id>
    <published>2019-03-22T17:27:03.000Z</published>
    <updated>2019-03-24T14:54:32.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于同学每周要通过邮箱收数学建模作业，100多人给她发附件，她要一个个地点着下载。</p><p>太麻烦了，所以想用程序实现下载附件的功能。</p><p>在网上查资料后，最终实现了稍为简单的下载附件功能，代码有些细节还不是很了解。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> poplib</span><br><span class="line"><span class="keyword">import</span> email</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> email.parser <span class="keyword">import</span> Parser</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> decode_header</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_str</span><span class="params">(s)</span>:</span><span class="comment">#字符编码转换</span></span><br><span class="line">    value, charset = decode_header(s)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> charset:</span><br><span class="line">        value = value.decode(charset)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_att</span><span class="params">(msg)</span>:</span></span><br><span class="line">    attachment_files = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> part <span class="keyword">in</span> msg.walk():</span><br><span class="line">        file_name = part.get_filename()  <span class="comment"># 获取附件名称类型</span></span><br><span class="line">        contType = part.get_content_type()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> file_name:</span><br><span class="line">            h = email.header.Header(file_name)</span><br><span class="line">            dh = email.header.decode_header(h)  <span class="comment"># 对附件名称进行解码</span></span><br><span class="line">            filename = dh[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> dh[<span class="number">0</span>][<span class="number">1</span>]:</span><br><span class="line">                filename = decode_str(str(filename, dh[<span class="number">0</span>][<span class="number">1</span>]))  <span class="comment"># 将附件名称可读化</span></span><br><span class="line">                print(filename)</span><br><span class="line">                <span class="comment"># filename = filename.encode("utf-8")</span></span><br><span class="line">            data = part.get_payload(decode=<span class="keyword">True</span>)  <span class="comment"># 下载附件</span></span><br><span class="line">            att_file = open(<span class="string">'D:\\数模作业\\'</span> + filename, <span class="string">'wb'</span>)  <span class="comment"># 在指定目录下创建文件，注意二进制文件需要用wb模式打开</span></span><br><span class="line">            attachment_files.append(filename)</span><br><span class="line">            att_file.write(data)  <span class="comment"># 保存附件</span></span><br><span class="line">            att_file.close()</span><br><span class="line">    <span class="keyword">return</span> attachment_files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'D:\\config.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    config = f1.readlines()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(config)):</span><br><span class="line">    config[i] = config[i].rstrip(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(config)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># POP3服务器、用户名、密码</span></span><br><span class="line">host = config[<span class="number">0</span>]  <span class="comment"># pop.163.com</span></span><br><span class="line">username = config[<span class="number">1</span>]  <span class="comment"># 用户名 </span></span><br><span class="line">password = config[<span class="number">2</span>]  <span class="comment"># 密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到POP3服务器</span></span><br><span class="line">server = poplib.POP3(host)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 身份验证</span></span><br><span class="line">server.user(username)</span><br><span class="line">server.pass_(password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># stat()返回邮件数量和占用空间:</span></span><br><span class="line"><span class="comment"># print('Messages: %s. Size: %s' % server.stat())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以查看返回的列表类似[b'1 82923', b'2 2184', ...]</span></span><br><span class="line">resp, mails, octets = server.list()</span><br><span class="line"><span class="comment"># print(mails)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒序遍历邮件</span></span><br><span class="line">index = len(mails)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(index, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">    <span class="comment"># lines存储了邮件的原始文本的每一行</span></span><br><span class="line">    resp, lines, octets = server.retr(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 邮件的原始文本:</span></span><br><span class="line">    msg_content = <span class="string">b'\r\n'</span>.join(lines).decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析邮件:</span></span><br><span class="line">    msg = Parser().parsestr(msg_content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取附件</span></span><br><span class="line">    f_list = get_att(msg)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"文件已下载完成，10秒后关闭程序！"</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><p>使用<code>pyinstaller</code>，将该<code>.py</code>文件打包成<code>.exe</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F xuer.py</span><br></pre></td></tr></table></figure><p>这样她就不需要安装python，方便她使用。</p><p>为了保护她的密码隐私，程序通过她自己的文件获得她的用户名和密码，之后文件会自动下载到D盘中数学建模文件夹下。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;由于同学每周要通过邮箱收数学建模作业，100多人给她发附件，她要一个个地点着下载。&lt;/p&gt;
&lt;p&gt;太麻烦了，所以想用程序实现下载附件的功能。
      
    
    </summary>
    
    
      <category term="python" scheme="https://chouxianyu.github.io/tags/python/"/>
    
      <category term="下载邮件附件" scheme="https://chouxianyu.github.io/tags/%E4%B8%8B%E8%BD%BD%E9%82%AE%E4%BB%B6%E9%99%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>PageRank</title>
    <link href="https://chouxianyu.github.io/2019/02/18/PageRank/"/>
    <id>https://chouxianyu.github.io/2019/02/18/PageRank/</id>
    <published>2019-02-18T07:58:08.000Z</published>
    <updated>2019-03-27T05:59:48.199Z</updated>
    
    <content type="html"><![CDATA[<p>用Matlab实现一个PageRank算法。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>PageRank是一种对网页进行排名的算法，通过引用来判断网页的排名。</p><p>具体介绍自寻，可以看一下<a href="https://baike.baidu.com/item/google%20pagerank#2" target="_blank" rel="noopener">https://baike.baidu.com/item/google%20pagerank#2</a></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>图中有六个明星，他们之间的箭头表示关注，比如Kim和Ryan互相关注，图片中间的数字是最终计算出的他们的PageRank。</p><p><img src="https://i.loli.net/2019/02/18/5c6a6221c0ccf.png" alt="明星关注.png"></p><h1 id="Matlab实现"><a href="#Matlab实现" class="headerlink" title="Matlab实现"></a>Matlab实现</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Find PageRank of network by finding dominant evec</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%      _       _       _             _</span></span><br><span class="line"><span class="comment">%     | (1-d)/N |     | l11, ..., l1n |</span></span><br><span class="line"><span class="comment">% R = |   ...   | + d | ..., ..., ... | R     </span></span><br><span class="line"><span class="comment">%     |_(1-d)/N_|     |_ln1, ..., lnn_|       </span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% R = c + d * L*D * R</span></span><br><span class="line"><span class="comment">% R = (I - d * L*D )\c</span></span><br><span class="line"><span class="comment">% </span></span><br><span class="line"></span><br><span class="line">clc;    <span class="comment">%清屏</span></span><br><span class="line"></span><br><span class="line">d = <span class="number">0.85</span>;  <span class="comment">% damping factor</span></span><br><span class="line"></span><br><span class="line">name = &#123;<span class="string">'bill'</span>, <span class="string">'ellen'</span>, <span class="string">'jimmy'</span>, <span class="string">'kim'</span>, <span class="string">'paula'</span>, <span class="string">'ryan'</span>&#125;; <span class="comment">% celebrities'name</span></span><br><span class="line">[bil, ell, jim, kim, pau, rya] = deal(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);        <span class="comment">% celebrities'id，bil=1,ell=2...</span></span><br><span class="line">n = <span class="built_in">length</span>(name); <span class="comment">% number of celebrities,n=6</span></span><br><span class="line"></span><br><span class="line">L = <span class="built_in">zeros</span>(n);   <span class="comment">% 明星关注关系矩阵,一行是一个人，元素值表示他是否关注他人;一列也是一个人，元素值表示是否被他人关注</span></span><br><span class="line"><span class="comment">% if user j follows user i, then L(i,j) = 1</span></span><br><span class="line">L(bil, [rya, ell]) = <span class="number">1</span>; <span class="comment">% bil关注rya ell，下五行同理</span></span><br><span class="line">L(ell, [jim, rya]) = <span class="number">1</span>;</span><br><span class="line">L(jim, [rya, pau, ell]) = <span class="number">1</span>;</span><br><span class="line">L(kim, [jim, rya, ell]) = <span class="number">1</span>;</span><br><span class="line">L(pau, [rya, ell])=<span class="number">1</span>;</span><br><span class="line">L(rya, [bil, jim, kim, pau, ell]) = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% ot = out-degree, in = in-degree</span></span><br><span class="line">ot = sum(L,<span class="number">1</span>);  <span class="comment">% 对每1列求和，得行向量，每一列是一个人，元素值为被关注次数</span></span><br><span class="line">in = sum(L,<span class="number">2</span>);  <span class="comment">% 对每1行求和，得列向量，每一行是一个人，元素值为他关注了多少人</span></span><br><span class="line"></span><br><span class="line">k = <span class="built_in">find</span>(ot~=<span class="number">0</span>); <span class="comment">% 找到ot中不等于0的元素的下标,在此都不为0，返回行向量[1,2,3,..,6]</span></span><br><span class="line">D = full(sparse(k,k,<span class="number">1.</span>/ot(k),n,n)); <span class="comment">%对角矩阵，对角元素表示每个人对其他人的关注的分成</span></span><br><span class="line"><span class="comment">% L*D 是 6*6矩阵，一行、一列都是一个人，一行表示得到每个人的关注的分成，列表示对其他人关注的分成</span></span><br><span class="line">c = (<span class="number">1</span>-d)/n*<span class="built_in">ones</span>(n,<span class="number">1</span>);  <span class="comment">% 值为(1-d)/n 的 n行列向量</span></span><br><span class="line">I = <span class="built_in">eye</span>(n); <span class="comment">% n*n单位矩阵</span></span><br><span class="line"></span><br><span class="line">R = (I - d*L*D)\c  <span class="comment">% 注意是左除,得到6个人的PageRank</span></span><br></pre></td></tr></table></figure><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论和交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用Matlab实现一个PageRank算法。&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;PageRank是一种对网页进行排名的算法，通过引用来判断网页的排名。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Matlab" scheme="https://chouxianyu.github.io/tags/Matlab/"/>
    
      <category term="数学建模" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="PageRank" scheme="https://chouxianyu.github.io/tags/PageRank/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="线性方程组求解" scheme="https://chouxianyu.github.io/tags/%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E6%B1%82%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>多体问题</title>
    <link href="https://chouxianyu.github.io/2019/02/16/%E5%A4%9A%E4%BD%93%E9%97%AE%E9%A2%98/"/>
    <id>https://chouxianyu.github.io/2019/02/16/多体问题/</id>
    <published>2019-02-16T10:43:10.000Z</published>
    <updated>2019-03-27T05:59:42.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题及分析"><a href="#问题及分析" class="headerlink" title="问题及分析"></a>问题及分析</h1><p><img src="https://i.loli.net/2019/02/16/5c67de0b03aa6.png" alt="多体问题.png"></p><h1 id="Matlab代码"><a href="#Matlab代码" class="headerlink" title="Matlab代码"></a>Matlab代码</h1><p>给出了核心逻辑的注释，作图暂时还不太了解。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SunEarthMoon</span>   % <span class="title">M</span>函数文件</span></span><br><span class="line"></span><br><span class="line">load planets;   <span class="comment">% 将planets.mat中的变量mass、position、velocity加载过来</span></span><br><span class="line"></span><br><span class="line">[sun, earth, moon] = deal(<span class="number">18</span>, <span class="number">3</span>, <span class="number">25</span>);   <span class="comment">% sun、earth、moon分别是18、3、25行</span></span><br><span class="line">list = [sun, earth, moon];  <span class="comment">% 1行3列矩阵</span></span><br><span class="line">G = <span class="number">6.67e-11</span>; <span class="comment">% gravitational constant</span></span><br><span class="line"></span><br><span class="line">dt = <span class="number">24</span>*<span class="number">3600</span>;   <span class="comment">% 作图的时间间隔为一天，每天有24*3600秒</span></span><br><span class="line">N = <span class="built_in">length</span>(list);   <span class="comment">% N=3，三个天体</span></span><br><span class="line">mass = mass(list);  <span class="comment">% N行1列矩阵，N个天体的质量</span></span><br><span class="line">position = position(list,:);    <span class="comment">% N行3列矩阵，N个天体的坐标，坐标是1行3列的行向量，三个方向的分量</span></span><br><span class="line">velocity = velocity(list,:);    <span class="comment">% N行3列矩阵，N个天体的速度，速度是1行3列的行向量，三个方向的分量</span></span><br><span class="line">h = plotplanets(position);  <span class="comment">%作图函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t = <span class="number">1</span>:<span class="number">365</span>   <span class="comment">% 图中总时间为一年，一年365天</span></span><br><span class="line">    plotplanets(position,h);    <span class="comment">% </span></span><br><span class="line">    force = <span class="built_in">zeros</span>(N,<span class="number">3</span>); <span class="comment">% N行3列零矩阵，一行表示某个天体在三个方向上的受力</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : N   <span class="comment">% 遍历计算各天体间的万有引力。组合数C（3，2）</span></span><br><span class="line">        Pi = position(<span class="built_in">i</span>,:); <span class="comment">% 某天体坐标</span></span><br><span class="line">        Mi = mass(<span class="built_in">i</span>);   <span class="comment">% 某天体质量</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = (<span class="built_in">i</span>+<span class="number">1</span>):N     <span class="comment">%the i+1 is to create diagonal </span></span><br><span class="line">            Mj = mass(<span class="built_in">j</span>);   <span class="comment">% 另一天体质量</span></span><br><span class="line">            Pj = position(<span class="built_in">j</span>,:); <span class="comment">% 另一天体坐标</span></span><br><span class="line">            dr =  Pj - Pi;  <span class="comment">% 两天体的相对，1行3列矩阵</span></span><br><span class="line">            forceij = G*Mi*Mj./(norm(dr).^<span class="number">3</span>).*dr;   <span class="comment">% 两天体之间的力，1行3列的向量</span></span><br><span class="line">            force(<span class="built_in">i</span>,:) = force(<span class="built_in">i</span>,:) + forceij;  <span class="comment">% 规定正方向，将力计算进矩阵</span></span><br><span class="line">            force(<span class="built_in">j</span>,:) = force(<span class="built_in">j</span>,:) - forceij;  <span class="comment">% 反作用力与作用力方向相反，将力计算进矩阵</span></span><br><span class="line">            <span class="comment">% 上两行可替换为force([i,j],:) = force([i,j],:)+[forceij; -forceij];</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    velocity = velocity + force ./ <span class="built_in">repmat</span>(mass,<span class="number">1</span>,<span class="number">3</span>)*dt;   <span class="comment">% v=v+a*dt a=F/m</span></span><br><span class="line">    position = position + velocity*dt;  <span class="comment">% r=r+v*dt</span></span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">% -------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">h</span> = <span class="title">plotplanets</span><span class="params">(pos,h)</span> % </span></span><br><span class="line">scale = <span class="number">50</span>;</span><br><span class="line">total_planets = <span class="built_in">size</span>(pos,<span class="number">1</span>);</span><br><span class="line">[sun, earth, moon] = deal(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">radius = [<span class="number">50</span>, <span class="number">30</span>, <span class="number">20</span>];</span><br><span class="line">marker = &#123;<span class="string">'.r'</span>, <span class="string">'b.'</span>,<span class="string">'m.'</span>&#125;;</span><br><span class="line">pos(moon,:) = pos(earth,:) + scale*(pos(moon,:)-pos(earth,:));</span><br><span class="line"><span class="keyword">if</span> nargin==<span class="number">1</span></span><br><span class="line">    hold on; axis image</span><br><span class="line">    axis( [<span class="number">-2</span> <span class="number">2</span> <span class="number">-2</span> <span class="number">2</span>]*<span class="number">1e11</span> );</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:total_planets</span><br><span class="line">        <span class="keyword">if</span> any(<span class="built_in">i</span> == [sun, earth, moon])</span><br><span class="line">            h(<span class="built_in">i</span>) = plot(pos(<span class="built_in">i</span>,<span class="number">1</span>),pos(<span class="built_in">i</span>,<span class="number">2</span>),marker&#123;i&#125;,<span class="string">'markersize'</span>,radius(<span class="built_in">i</span>));</span><br><span class="line">            plot(pos(<span class="built_in">i</span>,<span class="number">1</span>), pos(<span class="built_in">i</span>,<span class="number">2</span>), marker&#123;i&#125;, <span class="string">'markersize'</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            h(<span class="built_in">i</span>) = plot(pos(<span class="built_in">i</span>,<span class="number">1</span>), pos(<span class="built_in">i</span>,<span class="number">2</span>), <span class="string">'k.'</span>, <span class="string">'markersize'</span>, <span class="number">20</span>);</span><br><span class="line">            plot(pos(<span class="built_in">i</span>,<span class="number">1</span>), pos(<span class="built_in">i</span>,<span class="number">2</span>), <span class="string">'k.'</span>, <span class="string">'markersize'</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:total_planets</span><br><span class="line">        set(h(<span class="built_in">i</span>), <span class="string">'Xdata'</span>, pos(<span class="built_in">i</span>,<span class="number">1</span>)  , <span class="string">'Ydata'</span>, pos(<span class="built_in">i</span>,<span class="number">2</span>)  )</span><br><span class="line">        <span class="keyword">if</span> any(<span class="built_in">i</span> == [sun, earth, moon])</span><br><span class="line">            plot(pos(<span class="built_in">i</span>,<span class="number">1</span>), pos(<span class="built_in">i</span>,<span class="number">2</span>), marker&#123;i&#125;, <span class="string">'markersize'</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            plot(pos(<span class="built_in">i</span>,<span class="number">1</span>), pos(<span class="built_in">i</span>,<span class="number">2</span>), <span class="string">'k.'</span>, <span class="string">'markersize'</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    drawnow</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://i.loli.net/2019/02/16/5c67de063bde3.png" alt="多体运动轨迹.png"></p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎讨论交流!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题及分析&quot;&gt;&lt;a href=&quot;#问题及分析&quot; class=&quot;headerlink&quot; title=&quot;问题及分析&quot;&gt;&lt;/a&gt;问题及分析&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/02/16/5c67de0b03aa6.png&quot;
      
    
    </summary>
    
    
      <category term="Matlab" scheme="https://chouxianyu.github.io/tags/Matlab/"/>
    
      <category term="数学建模" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>椅子能在不平的地面上放稳吗</title>
    <link href="https://chouxianyu.github.io/2019/02/16/%E6%A4%85%E5%AD%90%E8%83%BD%E5%9C%A8%E4%B8%8D%E5%B9%B3%E7%9A%84%E5%9C%B0%E9%9D%A2%E4%B8%8A%E6%94%BE%E7%A8%B3%E5%90%97/"/>
    <id>https://chouxianyu.github.io/2019/02/16/椅子能在不平的地面上放稳吗/</id>
    <published>2019-02-16T10:42:29.000Z</published>
    <updated>2019-03-27T05:59:31.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>把椅子放在不平的地面上，通常只有三只脚着地，放不稳，然而只需稍挪动几次，就可以使四只脚同时着地而放稳。这个看来似乎与数学无关的现象能用数学语言表述，并用数学工具来证实吗？让我们来试试看！</p><h1 id="再次读题"><a href="#再次读题" class="headerlink" title="再次读题"></a>再次读题</h1><p>把<strong>椅子</strong> <strong>放在</strong> <strong>不平的地面</strong>上，<strong>通常只有三只脚着地，放不稳</strong>，然而只需稍<strong>挪动</strong>几次，就可以使<strong>四只脚同时着地而放稳</strong>。这个看来似乎与数学无关的现象能<strong>用数学语言表述</strong>，并用数学工具来<strong>证实</strong>吗？让我们来试试看！</p><h1 id="对象分析"><a href="#对象分析" class="headerlink" title="对象分析"></a>对象分析</h1><ul><li>椅子$\Longrightarrow$四个椅脚$\Longrightarrow$与地面有四个接触点$\Longrightarrow​$正方形（本质应该是长方形）</li><li>不平的地面$\Longrightarrow​$光滑曲面（光滑是根据讨论范围确定的，不连续的很陡的地面不在讨论范围之内）</li></ul><h1 id="条件分析"><a href="#条件分析" class="headerlink" title="条件分析"></a>条件分析</h1><ul><li>通常只有三只脚着地，放不稳$\Longrightarrow$假设至少三只脚着地$\Longrightarrow$$F(\theta)*G(\theta)=0$</li><li>稍挪动几次$\Longrightarrow$位置的变化$\Longrightarrow$角度$\theta$的变化</li></ul><h1 id="结论分析"><a href="#结论分析" class="headerlink" title="结论分析"></a>结论分析</h1><ul><li>能不能$\Longrightarrow​$存在问题，0和1</li><li>放稳$\Longrightarrow$四个脚到地面距离都为0$\Longrightarrow$两对 对角椅脚 离地面的高度之和$F(\theta)=G(\theta)=0$</li></ul><p>2019.3.27补充：</p><p>昨天上课学得，在某些问题中，结果为离散的0或1的问题可以转化为结果为连续值的问题。</p><p>比如目标是得到最大产值，问题是A、B、C哪里需要建厂，这涉及到原料的生产、加工、运输，成品的销售等等。</p><p>如果直接根据问题进行离散的计算，会有$2^3=8\,$种情况。</p><p>如果进行连续的计算，将某地是否建厂转化为某地的原料产量。如果产量是0，则表示该地不建厂；如果产量大于0，则表示该地建厂。</p><h1 id="数学模型"><a href="#数学模型" class="headerlink" title="数学模型"></a>数学模型</h1><p>已知F($\theta​$)、G($\theta​$)是$\theta​$的连续函数，对任意$\theta​$，$F(\theta){\times}G(\theta)=0​$，且$G(0)=F(\frac{\pi}{2})=0​$，$F(0)=G(\frac{\pi}{2})&gt;0​$，证明存在$\theta_0​$，使$F(\theta_0)=G(\theta_0)=0​$。</p><h1 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h1><p>好好读题，根据题中所给信息，找到<strong>研究对象</strong>、<strong>条件</strong>、<strong>结论</strong>等现实元素转化为一个个数学元素。</p><h1 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h1><p>关于旋转的变量除了$\theta$，转轴也可以算一个，另外还可以把正方形改为长方形进行讨论。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎交流讨论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;把椅子放在不平的地面上，通常只有三只脚着地，放不稳，然而只需稍挪动几次，就可以使四只脚同时着地而放稳。这个看来似乎与数学无关的现象能用数学语
      
    
    </summary>
    
    
      <category term="数学建模" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>React学习（十一）之兄弟组件间传值</title>
    <link href="https://chouxianyu.github.io/2019/01/22/React%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%B9%8B%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E5%80%BC/"/>
    <id>https://chouxianyu.github.io/2019/01/22/React学习（十一）之兄弟组件间传值/</id>
    <published>2019-01-22T06:45:43.000Z</published>
    <updated>2019-03-22T17:31:51.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>React传递数据是单向数据流，两个组件必须有关系才可以传值。</p><p>而兄弟组件间并无直接关系，所以需要借助父组件。</p><p><strong>兄弟组件传值原理</strong>：</p><p>简单的逻辑是这样：子组件1传值给父组件，父组件再传给子组件2。</p><ol><li>子组件1通过函数参数传值给父组件。</li><li>父组件利用子组件1传来的值<strong>改变自身state中的某个值。</strong></li><li>由于父组件<strong>将自身state的那个值传给</strong>子组件2，而现在<code>state</code>发生改变 ，子组件2会重新渲染，实现子组件1传值到</li></ol><p>这里用到了<code>state</code>和<code>更新dom</code>的知识，不知道的可以看看。前边的文章或百度。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>现有三个组件，父组件<code>App</code>,子组件1<code>Header</code>，子组件2<code>Home</code>，<code>Home</code>比<code>Header</code>小2岁。</p><p>实现功能：改变<code>Header</code>的年龄，且同步更新<code>Home</code>的年龄。</p><h2 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./components/Header'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state=&#123;</span><br><span class="line">      homeAge:<span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onGreet(headerAge)&#123;  <span class="comment">//父组件定义回调函数</span></span><br><span class="line">    alert(<span class="string">"App:Header is"</span>+headerAge+<span class="string">"years old!"</span>);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      homeAge: headerAge<span class="number">-2</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> user=&#123;  <span class="comment">//定义一个对象，传给子组件Header</span></span><br><span class="line">      name: <span class="string">"Anna"</span>,</span><br><span class="line">      hobbies: [<span class="string">"Sports"</span>, <span class="string">"Reading"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Header greet=&#123;<span class="keyword">this</span>.onGreet.bind(<span class="keyword">this</span>)&#125; name=&#123;<span class="string">"Max"</span>&#125; age=&#123;<span class="number">12</span>&#125; user=&#123;user&#125;&gt;</span><br><span class="line">            &lt;p&gt;I am Header<span class="string">'s children&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;/Header&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h1&gt;I am App&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;Home homeAge=&#123;this.state.homeAge&#125;/&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default App;</span></span><br></pre></td></tr></table></figure><h2 id="Header-js"><a href="#Header-js" class="headerlink" title="Header.js"></a>Header.js</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);  <span class="comment">//执行父类构造方法</span></span><br><span class="line">    <span class="keyword">this</span>.state=&#123;</span><br><span class="line">      age:props.age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//this.age=this.props.age;  </span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onMakeOrder()&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      age:<span class="keyword">this</span>.state.age+<span class="number">3</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//this.age+=3;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">//显示当前Header类的对象</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleGreet()&#123;</span><br><span class="line">    <span class="keyword">this</span>.props.greet(<span class="keyword">this</span>.state.age);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">//console.log(this.props);  //显示父组件传来的参数</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;I am Header&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          props'name is &#123;this.props.name&#125;,my age is &#123;this.state.age&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">        &#123;<span class="comment">/*&lt;button onClick=&#123;() =&gt; this.onMakeOrder()&#125; className="btn btn-primary"&gt;make me older&lt;/button&gt;*/</span>&#125;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.onMakeOrder.bind(<span class="keyword">this</span>)&#125; className=<span class="string">"btn btn-primary"</span>&gt;</span><br><span class="line">          make me older  </span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;br /</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleGreet.bind(<span class="keyword">this</span>)&#125; className=<span class="string">"btn btn-primary"</span>&gt;</span><br><span class="line">          告诉App我几岁</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;h4&gt;props'hobbies如下：&lt;/</span>h4&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &#123;<span class="keyword">this</span>.props.user.hobbies.map(<span class="function">(<span class="params">hobby,i</span>) =&gt;</span> &lt;li key=&#123;i&#125;&gt;&#123;hobby&#125;&lt;<span class="regexp">/li&gt;)&#125;</span></span><br><span class="line"><span class="regexp">          &lt;/u</span>l&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;div&gt;props's children如下：&#123;this.props.children&#125;&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Header.propTypes=&#123;</span></span><br><span class="line"><span class="regexp">  name: PropTypes.string,</span></span><br><span class="line"><span class="regexp">  age: PropTypes.number,</span></span><br><span class="line"><span class="regexp">  user: PropTypes.object,</span></span><br><span class="line"><span class="regexp">  greet: PropTypes.function,</span></span><br><span class="line"><span class="regexp">  children: PropTypes.element.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Header;</span></span><br></pre></td></tr></table></figure><h2 id="Home-js"><a href="#Home-js" class="headerlink" title="Home.js"></a>Home.js</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; <span class="comment">//固定写法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; <span class="comment">//ES6写法</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> content=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">let</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">      content=<span class="string">"cbh"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      content=<span class="string">"cxy"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;I am Home&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        动态数据：&#123;content&#125;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;I am &#123;this.props.homeAge&#125; year's old&lt;/</span>h1&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Home;</span></span><br></pre></td></tr></table></figure><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>两个子组件本来就是12岁和10岁，无法查看传值效果。</p><p>所以先点击<code>makeolder</code>按钮，可以看到<code>Header</code>年龄变为15。</p><p>再点击<code>告诉App我几岁</code>按钮。</p><p>子组件1<code>Header</code>通过一个回调函数将自己的年龄传给父组件<code>App</code>，父组件再用<code>Header</code>传来的年龄更新自己的state；</p><p>由于父组件<code>App</code>给子组件2<code>Home</code>传的参数是<code>state</code>中的一个值，所以子组件2变化的部分会重新渲染，实现子组件1传值给子组件2。</p><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>本文为作者原创，转载请注明出处：<a href="https://chouxianyu.github.io">https://chouxianyu.github.io</a></p><p>欢迎转发和评论!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;p&gt;React传递数据是单向数据流，两个组件必须有关系才可以传值。&lt;/p&gt;
&lt;p&gt;而兄弟组件间并无直接关系，所以需要借助父组件。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="React" scheme="https://chouxianyu.github.io/tags/React/"/>
    
  </entry>
  
</feed>
