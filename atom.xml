<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>臭咸鱼的缺氧瓶</title>
  
  <subtitle>快给我氧气！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chouxianyu.github.io/"/>
  <updated>2020-07-24T14:41:06.955Z</updated>
  <id>https://chouxianyu.github.io/</id>
  
  <author>
    <name>臭咸鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode102二叉树层次遍历</title>
    <link href="https://chouxianyu.github.io/2020/07/24/LeetCode102%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/"/>
    <id>https://chouxianyu.github.io/2020/07/24/LeetCode102二叉树层次遍历/</id>
    <published>2020-07-24T14:39:14.000Z</published>
    <updated>2020-07-24T14:41:06.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-level-order-traversal/</a></p><h1 id="题解一：非递归BFS"><a href="#题解一：非递归BFS" class="headerlink" title="题解一：非递归BFS"></a>题解一：非递归BFS</h1><ul><li>用队列存储每层的节点</li><li>获取到一层节点后，则可以获得该层所有节点的val和下一层的所有节点</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 102</span></span><br><span class="line"><span class="comment">// URL: https://leetcode-cn.com/problems/binary-tree-level-order-traversal/</span></span><br><span class="line"><span class="comment">// Tags: Tree BFS DFS Recursion Queue</span></span><br><span class="line"><span class="comment">// Difficulty: Medium</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x): val(x), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;  <span class="comment">// 最终结果</span></span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; parentNodes;  <span class="comment">// 父层节点</span></span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)</span><br><span class="line">            parentNodes.push(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!parentNodes.empty())&#123;</span><br><span class="line">            <span class="comment">// 找子层节点</span></span><br><span class="line">            <span class="built_in">queue</span>&lt;TreeNode*&gt; childNodes; <span class="comment">// 子层节点</span></span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; parentVals;  <span class="comment">// 父层节点元素</span></span><br><span class="line">            <span class="keyword">while</span> (!parentNodes.empty())&#123;</span><br><span class="line">                root = parentNodes.front();</span><br><span class="line">                parentNodes.pop();</span><br><span class="line">                parentVals.push_back(root-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> (root-&gt;left != <span class="literal">nullptr</span>)</span><br><span class="line">                    childNodes.push(root-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (root-&gt;right != <span class="literal">nullptr</span>)</span><br><span class="line">                    childNodes.push(root-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            parentNodes = childNodes;</span><br><span class="line">            result.push_back(parentVals);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"helloworld"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题解二：DFS递归"><a href="#题解二：DFS递归" class="headerlink" title="题解二：DFS递归"></a>题解二：DFS递归</h1><ul><li>用变量level记录当前处于哪一层</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 102</span></span><br><span class="line"><span class="comment">// URL: https://leetcode-cn.com/problems/binary-tree-level-order-traversal/</span></span><br><span class="line"><span class="comment">// Tags: Tree BFS DFS Recursion Queue</span></span><br><span class="line"><span class="comment">// Difficulty: Medium</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x): val(x), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result; <span class="comment">// 最终结果</span></span><br><span class="line">        dfs(result, root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; result, TreeNode* root, <span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 空指针，无动作</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">nullptr</span>==root)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果该层第一次被遍历到，则为该层创建空数组</span></span><br><span class="line">        <span class="keyword">if</span>(result.size()&lt;=level)&#123;</span><br><span class="line">            result.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历该结点</span></span><br><span class="line">        result[level].push_back(root-&gt;val);</span><br><span class="line">        <span class="comment">// 遍历左子树</span></span><br><span class="line">        dfs(result, root-&gt;left, level + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 遍历右子树</span></span><br><span class="line">        dfs(result, root-&gt;right, level + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"helloworld"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-tree-level-or
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://chouxianyu.github.io/tags/LeetCode/"/>
    
      <category term="递归" scheme="https://chouxianyu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="二叉树" scheme="https://chouxianyu.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="队列" scheme="https://chouxianyu.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="DFS" scheme="https://chouxianyu.github.io/tags/DFS/"/>
    
      <category term="BFS" scheme="https://chouxianyu.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>二叉树前序、中序、后序遍历（非递归统一解法）</title>
    <link href="https://chouxianyu.github.io/2020/07/13/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%E3%80%81%E4%B8%AD%E5%BA%8F%E3%80%81%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E9%9D%9E%E9%80%92%E5%BD%92%E7%BB%9F%E4%B8%80%E8%A7%A3%E6%B3%95%EF%BC%89/"/>
    <id>https://chouxianyu.github.io/2020/07/13/二叉树前序、中序、后序遍历（非递归统一解法）/</id>
    <published>2020-07-13T06:52:57.000Z</published>
    <updated>2020-07-13T07:21:08.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>昨天和今天复习了二叉树的前序遍历、中序遍历和后序遍历，找到了一种统一的非递归的方法（即使用一个思路非递归实现二叉树的前序、中序和后序遍历）。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>思路本质上还是递归，只不过不通过递归函数显式递归，而是通过栈模拟递归。</p><p>具体思路：<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/mo-fang-di-gui-zhi-bian-yi-xing-by-sonp/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/mo-fang-di-gui-zhi-bian-yi-xing-by-sonp/</a></p><p><strong>注意：</strong></p><ul><li><p>非空的树节点指针才能存入栈中</p><p>  因为使用<code>nullptr</code>作为递归函数结束的标志，所以在栈中存储树节点指针时必须要检查是否非空。</p></li><li><p>遍历顺序和入栈顺序相反</p></li></ul><h1 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h1><p>LeetCode题目：<a href="https://www.cnblogs.com/chouxianyu/p/13290758.html" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/p/13290758.html</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt; nodes;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)</span><br><span class="line">        nodes.push(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!nodes.empty())&#123;</span><br><span class="line">        <span class="comment">// 取出节点</span></span><br><span class="line">        root = nodes.top();</span><br><span class="line">        nodes.pop();</span><br><span class="line">        <span class="comment">// 将节点对应的树拆解成前序，模拟递归解法中的函数调用</span></span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;right!=<span class="literal">nullptr</span>)</span><br><span class="line">                nodes.push(root-&gt;right);</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;left!=<span class="literal">nullptr</span>)</span><br><span class="line">                nodes.push(root-&gt;left);</span><br><span class="line">            nodes.push(root);</span><br><span class="line">            nodes.push(<span class="literal">nullptr</span>);  <span class="comment">// 设置nullptr标志</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// nullptr代表栈顶对应的树（根、左子树、右子树）已按照指定顺序遍历，一层递归函数运行结束</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result.push_back(nodes.top()-&gt;val);</span><br><span class="line">            nodes.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><p>LeetCode题目：<a href="https://www.cnblogs.com/chouxianyu/p/13293153.html" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/p/13293153.html</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt; nodes;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)</span><br><span class="line">        nodes.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!nodes.empty())&#123;</span><br><span class="line">        root = nodes.top();</span><br><span class="line">        nodes.pop();</span><br><span class="line">        <span class="comment">// 模拟调用递归函数</span></span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;right!=<span class="literal">nullptr</span>)</span><br><span class="line">                nodes.push(root-&gt;right);</span><br><span class="line">            nodes.push(root);</span><br><span class="line">            nodes.push(<span class="literal">nullptr</span>);</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;left!=<span class="literal">nullptr</span>)</span><br><span class="line">                nodes.push(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 一层递归函数结束</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result.push_back(nodes.top()-&gt;val);</span><br><span class="line">            nodes.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h1><p>LeetCode题目：<a href="https://www.cnblogs.com/chouxianyu/p/13293152.html" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/p/13293152.html</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt; nodes;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)</span><br><span class="line">        nodes.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!nodes.empty())&#123;</span><br><span class="line">        root = nodes.top();</span><br><span class="line">        nodes.pop();</span><br><span class="line">        <span class="comment">// 模拟调用递归函数</span></span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            nodes.push(root);</span><br><span class="line">            nodes.push(<span class="literal">nullptr</span>);</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;right!=<span class="literal">nullptr</span>)</span><br><span class="line">                nodes.push(root-&gt;right);</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;left!=<span class="literal">nullptr</span>)</span><br><span class="line">                nodes.push(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归函数调用成功</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result.push_back(nodes.top()-&gt;val);</span><br><span class="line">            nodes.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;昨天和今天复习了二叉树的前序遍历、中序遍历和后序遍历，找到了一种统一的非递归的方法（即使用一个思路非递归实现二叉树的前序、中序和后序遍历）。
      
    
    </summary>
    
    
      <category term="递归" scheme="https://chouxianyu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="二叉树" scheme="https://chouxianyu.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="栈" scheme="https://chouxianyu.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode94二叉树中序遍历</title>
    <link href="https://chouxianyu.github.io/2020/07/13/LeetCode94%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://chouxianyu.github.io/2020/07/13/LeetCode94二叉树中序遍历/</id>
    <published>2020-07-13T06:45:52.000Z</published>
    <updated>2020-07-13T07:03:50.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-inorder-traversal/</a></p><h1 id="题解一：递归"><a href="#题解一：递归" class="headerlink" title="题解一：递归"></a>题解一：递归</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 94</span></span><br><span class="line"><span class="comment">// URL: https://leetcode-cn.com/problems/binary-tree-inorder-traversal/</span></span><br><span class="line"><span class="comment">// Tags: Tree Recursion Stack</span></span><br><span class="line"><span class="comment">// Difficulty: Medium</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x):val(x), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode* root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            traversal(root-&gt;left, result);</span><br><span class="line">            result.push_back(root-&gt;val);</span><br><span class="line">            traversal(root-&gt;right, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        traversal(root, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"helloworld"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题解二：非递归（通过栈模拟递归）"><a href="#题解二：非递归（通过栈模拟递归）" class="headerlink" title="题解二：非递归（通过栈模拟递归）"></a>题解二：非递归（通过栈模拟递归）</h1><p>思路：<a href="https://www.cnblogs.com/chouxianyu/p/13293284.html" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/p/13293284.html</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 94</span></span><br><span class="line"><span class="comment">// URL: https://leetcode-cn.com/problems/binary-tree-inorder-traversal/</span></span><br><span class="line"><span class="comment">// Tags: Tree Recursion Stack</span></span><br><span class="line"><span class="comment">// Difficulty: Medium</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x):val(x), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; nodes;</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)</span><br><span class="line">            nodes.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!nodes.empty())&#123;</span><br><span class="line">            root = nodes.top();</span><br><span class="line">            nodes.pop();</span><br><span class="line">            <span class="comment">// 模拟调用递归函数</span></span><br><span class="line">            <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(root-&gt;right!=<span class="literal">nullptr</span>)</span><br><span class="line">                    nodes.push(root-&gt;right);</span><br><span class="line">                nodes.push(root);</span><br><span class="line">                nodes.push(<span class="literal">nullptr</span>);</span><br><span class="line">                <span class="keyword">if</span>(root-&gt;left!=<span class="literal">nullptr</span>)</span><br><span class="line">                    nodes.push(root-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 一层递归函数结束</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                result.push_back(nodes.top()-&gt;val);</span><br><span class="line">                nodes.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"helloworld"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-tree-inorder-
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://chouxianyu.github.io/tags/LeetCode/"/>
    
      <category term="递归" scheme="https://chouxianyu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="二叉树" scheme="https://chouxianyu.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="栈" scheme="https://chouxianyu.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode145二叉树后序遍历</title>
    <link href="https://chouxianyu.github.io/2020/07/13/LeetCode145%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://chouxianyu.github.io/2020/07/13/LeetCode145二叉树后序遍历/</id>
    <published>2020-07-13T06:45:11.000Z</published>
    <updated>2020-07-13T07:04:01.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/description/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-postorder-traversal/description/</a></p><h1 id="题解一：递归"><a href="#题解一：递归" class="headerlink" title="题解一：递归"></a>题解一：递归</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 145</span></span><br><span class="line"><span class="comment">// URL: https://leetcode-cn.com/problems/binary-tree-postorder-traversal/description/</span></span><br><span class="line"><span class="comment">// Tags: Stack Tree Recursion </span></span><br><span class="line"><span class="comment">// Difficulty: Hard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x): val(x), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;left!=<span class="literal">nullptr</span>)</span><br><span class="line">                traversal(root-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;right!=<span class="literal">nullptr</span>)</span><br><span class="line">                traversal(root-&gt;right);</span><br><span class="line">            result.push_back(root-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root)&#123;</span><br><span class="line">        traversal(root);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"helloworld"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题解二：非递归（通过栈模拟递归）"><a href="#题解二：非递归（通过栈模拟递归）" class="headerlink" title="题解二：非递归（通过栈模拟递归）"></a>题解二：非递归（通过栈模拟递归）</h1><p>思路：<a href="https://www.cnblogs.com/chouxianyu/p/13293284.html" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/p/13293284.html</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 145</span></span><br><span class="line"><span class="comment">// URL: https://leetcode-cn.com/problems/binary-tree-postorder-traversal/description/</span></span><br><span class="line"><span class="comment">// Tags: Stack Tree Recursion </span></span><br><span class="line"><span class="comment">// Difficulty: Hard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x): val(x), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; nodes;</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)</span><br><span class="line">            nodes.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!nodes.empty())&#123;</span><br><span class="line">            root = nodes.top();</span><br><span class="line">            nodes.pop();</span><br><span class="line">            <span class="comment">// 模拟调用递归函数</span></span><br><span class="line">            <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                nodes.push(root);</span><br><span class="line">                nodes.push(<span class="literal">nullptr</span>);</span><br><span class="line">                <span class="keyword">if</span>(root-&gt;right!=<span class="literal">nullptr</span>)</span><br><span class="line">                    nodes.push(root-&gt;right);</span><br><span class="line">                <span class="keyword">if</span>(root-&gt;left!=<span class="literal">nullptr</span>)</span><br><span class="line">                    nodes.push(root-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 递归函数调用成功</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                result.push_back(nodes.top()-&gt;val);</span><br><span class="line">                nodes.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"helloworld"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-tree-postorde
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://chouxianyu.github.io/tags/LeetCode/"/>
    
      <category term="递归" scheme="https://chouxianyu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="二叉树" scheme="https://chouxianyu.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="栈" scheme="https://chouxianyu.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode144二叉树前序遍历</title>
    <link href="https://chouxianyu.github.io/2020/07/12/LeetCode144%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://chouxianyu.github.io/2020/07/12/LeetCode144二叉树前序遍历/</id>
    <published>2020-07-12T15:40:38.000Z</published>
    <updated>2020-07-13T07:03:55.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/description/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-preorder-traversal/description/</a></p><h1 id="题解一：递归"><a href="#题解一：递归" class="headerlink" title="题解一：递归"></a>题解一：递归</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 144</span></span><br><span class="line"><span class="comment">// URL: https://leetcode-cn.com/problems/binary-tree-preorder-traversal/description/</span></span><br><span class="line"><span class="comment">// Tags: Tree Recursion Stack</span></span><br><span class="line"><span class="comment">// Difficulty: Medium</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x):val(x), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode* root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            result.push_back(root-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;left!=<span class="literal">nullptr</span>)</span><br><span class="line">                traversal(root-&gt;left, result);</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;right!=<span class="literal">nullptr</span>)</span><br><span class="line">                traversal(root-&gt;right, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        traversal(root, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"helloworld"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题解二：非递归"><a href="#题解二：非递归" class="headerlink" title="题解二：非递归"></a>题解二：非递归</h1><ul><li>需要用到栈</li><li>注意循环条件</li><li>注意是先把右子树存入栈中</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 144</span></span><br><span class="line"><span class="comment">// URL: https://leetcode-cn.com/problems/binary-tree-preorder-traversal/description/</span></span><br><span class="line"><span class="comment">// Tags: Tree Recursion Stack</span></span><br><span class="line"><span class="comment">// Difficulty: Medium</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x):val(x), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; nodes;</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)</span><br><span class="line">            nodes.push(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!nodes.empty())&#123;</span><br><span class="line">            root = nodes.top();</span><br><span class="line">            nodes.pop();</span><br><span class="line">            <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                result.push_back(root-&gt;val);</span><br><span class="line">                nodes.push(root-&gt;right);</span><br><span class="line">                nodes.push(root-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"helloworld"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题解三：非递归（通过栈模拟递归）"><a href="#题解三：非递归（通过栈模拟递归）" class="headerlink" title="题解三：非递归（通过栈模拟递归）"></a>题解三：非递归（通过栈模拟递归）</h1><p>思路：<a href="https://www.cnblogs.com/chouxianyu/p/13293284.html" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/p/13293284.html</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 144</span></span><br><span class="line"><span class="comment">// URL: https://leetcode-cn.com/problems/binary-tree-preorder-traversal/description/</span></span><br><span class="line"><span class="comment">// Tags: Tree Recursion Stack</span></span><br><span class="line"><span class="comment">// Difficulty: Medium</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x):val(x), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; nodes;</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)</span><br><span class="line">            nodes.push(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!nodes.empty())&#123;</span><br><span class="line">            <span class="comment">// 取出节点</span></span><br><span class="line">            root = nodes.top();</span><br><span class="line">            nodes.pop();</span><br><span class="line">            <span class="comment">// 将节点对应的树拆解成前序，模拟递归解法中的函数调用</span></span><br><span class="line">            <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(root-&gt;right!=<span class="literal">nullptr</span>)</span><br><span class="line">                    nodes.push(root-&gt;right);</span><br><span class="line">                <span class="keyword">if</span>(root-&gt;left!=<span class="literal">nullptr</span>)</span><br><span class="line">                    nodes.push(root-&gt;left);</span><br><span class="line">                nodes.push(root);</span><br><span class="line">                nodes.push(<span class="literal">nullptr</span>);  <span class="comment">// 设置nullptr标志</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// nullptr代表栈顶对应的树（根、左子树、右子树）已按照指定顺序遍历，一层递归函数运行结束</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                result.push_back(nodes.top()-&gt;val);</span><br><span class="line">                nodes.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"helloworld"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-tree-preorder
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://chouxianyu.github.io/tags/LeetCode/"/>
    
      <category term="递归" scheme="https://chouxianyu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="二叉树" scheme="https://chouxianyu.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="栈" scheme="https://chouxianyu.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode83</title>
    <link href="https://chouxianyu.github.io/2020/07/12/LeetCode83/"/>
    <id>https://chouxianyu.github.io/2020/07/12/LeetCode83/</id>
    <published>2020-07-12T08:43:58.000Z</published>
    <updated>2020-07-13T06:55:29.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/" target="_blank" rel="noopener">https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/</a></p><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><ul><li>链表已排序</li></ul><h1 id="题解一：迭代"><a href="#题解一：迭代" class="headerlink" title="题解一：迭代"></a>题解一：迭代</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>遍历链表，如果发现重复元素就删除。</p><p>注意发现重复时遍历链表用的指针不要后移，不重复时才后移。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 83</span></span><br><span class="line"><span class="comment">// URL: https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/description/</span></span><br><span class="line"><span class="comment">// Tags: Linked List Recursion Iteration</span></span><br><span class="line"><span class="comment">// Difficulty: Easy</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(): val(<span class="number">0</span>), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x): val(x), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x, ListNode* next) : val(x), next(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">nullptr</span> == head)&#123;<span class="keyword">return</span> head;&#125;</span><br><span class="line">        ListNode *next = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* ret = head; <span class="comment">// 用于返回</span></span><br><span class="line">        <span class="keyword">while</span>(head-&gt;next !=  <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            next = head-&gt;next;</span><br><span class="line">            <span class="comment">// 元素重复</span></span><br><span class="line">            <span class="keyword">if</span> (head-&gt;val == next-&gt;val)&#123;</span><br><span class="line">                head-&gt;next = next-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 元素未重复</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                head = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题解二：递归"><a href="#题解二：递归" class="headerlink" title="题解二：递归"></a>题解二：递归</h1><h2 id="关于递归"><a href="#关于递归" class="headerlink" title="关于递归"></a>关于递归</h2><p>又摸到一个递归函数套路（有可能仅针对这道题）：</p><ol><li>递归出口（包括边界）</li><li>递归调用</li><li>手工拼接？（这一步可能直接融合到第二步）</li></ol><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><ul><li>递归函数的功能是将一个链表去重</li><li>思路是取出head然后剩下的链表通过递归去重，然后手动去重</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 83</span></span><br><span class="line"><span class="comment">// URL: https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/description/</span></span><br><span class="line"><span class="comment">// Tags: Linked List Recursion Iteration</span></span><br><span class="line"><span class="comment">// Difficulty: Easy</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(): val(<span class="number">0</span>), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x): val(x), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x, ListNode* next) : val(x), next(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">nullptr</span> == head || <span class="literal">nullptr</span> == head-&gt;next)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取出head然后剩下的链表通过递归去重</span></span><br><span class="line">        head-&gt;next = deleteDuplicates(head-&gt;next);</span><br><span class="line">        <span class="comment">// 手动去重</span></span><br><span class="line">        <span class="keyword">if</span>(head-&gt;val == head-&gt;next-&gt;val)&#123;</span><br><span class="line">            ListNode* ret = head-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> head;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/remove-duplicates-from-
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://chouxianyu.github.io/tags/LeetCode/"/>
    
      <category term="递归" scheme="https://chouxianyu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="迭代" scheme="https://chouxianyu.github.io/tags/%E8%BF%AD%E4%BB%A3/"/>
    
      <category term="单向链表" scheme="https://chouxianyu.github.io/tags/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode21</title>
    <link href="https://chouxianyu.github.io/2020/07/11/LeetCode21/"/>
    <id>https://chouxianyu.github.io/2020/07/11/LeetCode21/</id>
    <published>2020-07-11T09:53:16.000Z</published>
    <updated>2020-07-13T06:55:16.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/description/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists/description/</a></p><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><ul><li>两个链表已排序</li><li>新链表应该是两个链表拼接起来的，而非new出来的</li><li>链表中头结点的val应该是有意义的</li></ul><h1 id="题解一：迭代"><a href="#题解一：迭代" class="headerlink" title="题解一：迭代"></a>题解一：迭代</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>先new一个无意义的头结点，方便建立新链表</li><li>同时遍历两个链表并拼接至新链表，每取一个结点就更新其所在链表的指针和新链表指针，直至两个链表中的某一个遍历结束</li><li>将未遍历完的链表拼接至新链表</li><li>delete无意义的头结点，释放内存，返回其next</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 21</span></span><br><span class="line"><span class="comment">// URL: https://leetcode-cn.com/problems/merge-two-sorted-lists/description/</span></span><br><span class="line"><span class="comment">// Tags: Linked List Recursion Iteration</span></span><br><span class="line"><span class="comment">// Difficulty: Easy</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(): val(<span class="number">0</span>), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x): val(x), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x, ListNode* next): val(x), next(next)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义头结点，方便建立新链表</span></span><br><span class="line">        ListNode *head = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// 遍历链表用的指针</span></span><br><span class="line">        ListNode *l3 = head;</span><br><span class="line">        <span class="comment">// 同时遍历两个链表并拼接值较小的结点到新链表中，同步更新链表指针，直至某个链表遍历结束</span></span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">nullptr</span> &amp;&amp; l2 != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val)&#123;</span><br><span class="line">                l3-&gt;next = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l3-&gt;next = l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            l3 = l3-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将未遍历完的链表拼接至新链表</span></span><br><span class="line">        <span class="keyword">if</span>(l1!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            l3-&gt;next = l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            l3-&gt;next = l2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放无意义头结点并返回其next</span></span><br><span class="line">        l3 = head-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> head;</span><br><span class="line">        <span class="keyword">return</span> l3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题解二：递归"><a href="#题解二：递归" class="headerlink" title="题解二：递归"></a>题解二：递归</h1><h2 id="再思递归"><a href="#再思递归" class="headerlink" title="再思递归"></a>再思递归</h2><p>昨天也做了一个<a href="https://www.cnblogs.com/chouxianyu/p/13284071.html" target="_blank" rel="noopener">递归</a>题，今天这道题也可以用递归，我又有了一些关于递归的想法：</p><ul><li>递归表达式<ul><li>其实就是函数，要求明确几点：输入、输出、功能、拼接公式，有时候还需要知道函数运行对各个变量的影响（比如昨天那道题从代码二修改至代码三）</li></ul></li><li>递归出口（也包括边界）<ul><li>一定要最小化</li><li>要求能够处理递归表达式的已知情况，即输入取特定值（因题目而不同）时的情况</li></ul></li></ul><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><ul><li><p>递归表达式</p><ul><li>输入：两个链表的头指针</li><li>输出：两个链表拼接后的头指针</li><li>功能：将两个链表拼接</li></ul></li><li><p>递归出口</p><p>  链表指针为null时。如果出口是next为null，这个出口并不是最小化的</p></li></ul><p>递归函数实现的功能和思路为：</p><p>递归函数拿到了两个链表A和B，取出两个链表中值较小的那个头结点N，然后通过递归拼接剩下的两个链表返回M，然后手动拼接N和M。</p><p>思路模拟：</p><p>假设是链表A的头结点N的值比较小，那我取出其头结点N后形成一个新的链表A1（不包括头结点），然后通过递归拼接A1和B返回M，然后手工拼接N和M（即<code>N-&gt;next=M;</code>）。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 21</span></span><br><span class="line"><span class="comment">// URL: https://leetcode-cn.com/problems/merge-two-sorted-lists/description/</span></span><br><span class="line"><span class="comment">// Tags: Linked List Recursion Iteration</span></span><br><span class="line"><span class="comment">// Difficulty: Easy</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(): val(<span class="number">0</span>), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x): val(x), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x, ListNode* next): val(x), next(next)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 边界和递归出口</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">nullptr</span>==l1)&#123;<span class="keyword">return</span> l2;&#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">nullptr</span>==l2)&#123;<span class="keyword">return</span> l1;&#125;</span><br><span class="line">        <span class="comment">// 递归表达式</span></span><br><span class="line">        <span class="keyword">if</span>(l1-&gt;val&lt;l2-&gt;val)&#123;</span><br><span class="line">            l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            l2-&gt;next = mergeTwoLists(l2-&gt;next, l1);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/merge-two-sorted-lis
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://chouxianyu.github.io/tags/LeetCode/"/>
    
      <category term="递归" scheme="https://chouxianyu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="迭代" scheme="https://chouxianyu.github.io/tags/%E8%BF%AD%E4%BB%A3/"/>
    
      <category term="单向链表" scheme="https://chouxianyu.github.io/tags/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode206</title>
    <link href="https://chouxianyu.github.io/2020/07/11/LeetCode206/"/>
    <id>https://chouxianyu.github.io/2020/07/11/LeetCode206/</id>
    <published>2020-07-11T08:13:26.000Z</published>
    <updated>2020-07-13T06:55:56.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode-cn.com/problems/reverse-linked-list/description/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-linked-list/description/</a></p><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><ul><li>要求：反转一个单向链表</li><li>代码模板里的<code>ListNode</code>给了3个构造函数，明显是方便我们构造结点用的（如果要new，最好要delete）</li><li>可以迭代实现，也可以递归实现</li></ul><h1 id="题解一：递归"><a href="#题解一：递归" class="headerlink" title="题解一：递归"></a>题解一：递归</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>递归算法中有两个重要概念：递归表达式和递归出口，这一点似乎主要是在算法设计与分析课程上学得的。</p><ul><li><p>递归出口</p><p>  递归出口越小越好，出口应该考虑到边界条件</p></li><li><p>递归表达式</p><p>  递归表达式是将链表分为两部分A和B，B用递归表达式递归处理，然后再将A和B“拼接”起来</p></li></ul><h2 id="过程经历"><a href="#过程经历" class="headerlink" title="过程经历"></a>过程经历</h2><ol><li>找错递归出口然后修改</li><li>未处理只有0或1个结点的边界情况，修改后得到代码一</li><li>代码一未将递归出口最小化，修改后得到代码二</li><li>代码二未利用一点（链表B反转后，原先的头结点已经是尾结点了，不需要通过遍历寻找尾结点），因此存在多余的遍历，修改后得到代码三</li></ol><h2 id="代码一"><a href="#代码一" class="headerlink" title="代码一"></a>代码一</h2><p>这一版不太优美，最后一层没用递归（<strong>递归应该最大化，出口应该最小化</strong>），而是手动实现了就又改了一版，可以再往下看（代码二）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 206</span></span><br><span class="line"><span class="comment">// URL: https://leetcode.com/problems/reverse-linked-list/description/</span></span><br><span class="line"><span class="comment">// Tags: Linked List Recursion Iteration</span></span><br><span class="line"><span class="comment">// Difficulty: Easy</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(): val(<span class="number">0</span>), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x): val(x), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x, ListNode* next): val(x), next(next)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">reverseList</span><span class="params">(ListNode *head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 边界：when there is no node or there is only 1 node, then it's no need to reverse,just return the input</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">nullptr</span> == head || <span class="literal">nullptr</span> == head-&gt;next)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归出口（recursive export），when there are only 2 nodes</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">nullptr</span> == head-&gt;next-&gt;next)&#123;</span><br><span class="line">            ListNode *ptrA = head;</span><br><span class="line">            ListNode *ptrB = head-&gt;next;</span><br><span class="line">            ptrB-&gt;next = ptrA;</span><br><span class="line">            ptrA-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">return</span> ptrB;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以下为递归表达式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// devide the nodes into A(the original head) and B(the nodes except the original head).</span></span><br><span class="line">        ListNode *ptrA = head;  <span class="comment">// A:原先的head</span></span><br><span class="line">        ListNode *ptrB = reverseList(head-&gt;next);  <span class="comment">// B:将原先head以外的结点逆序并返回其head</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// look for the tail of B，寻找B的尾巴</span></span><br><span class="line">        ListNode* tailB = ptrB;  </span><br><span class="line">        <span class="keyword">while</span> (tailB-&gt;next != <span class="literal">nullptr</span>)&#123;tailB = tailB-&gt;next;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将A连接到B后面并将A设置为尾结点</span></span><br><span class="line">        tailB-&gt;next = ptrA;</span><br><span class="line">        ptrA-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回链表B</span></span><br><span class="line">        <span class="keyword">return</span> ptrB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码二"><a href="#代码二" class="headerlink" title="代码二"></a>代码二</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 206</span></span><br><span class="line"><span class="comment">// URL: https://leetcode.com/problems/reverse-linked-list/description/</span></span><br><span class="line"><span class="comment">// Tags: Linked List Recursion Iteration</span></span><br><span class="line"><span class="comment">// Difficulty: Easy</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(): val(<span class="number">0</span>), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x): val(x), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x, ListNode* next): val(x), next(next)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">reverseList</span><span class="params">(ListNode *head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 边界：when there is no node, then it's no need to reverse,just return the input</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">nullptr</span> == head)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归出口（recursive export），when there is only 1 nodes</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">nullptr</span> == head-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// devide the nodes into A(the original head) and B(the nodes except the original head).</span></span><br><span class="line">        ListNode *ptrA = head; <span class="comment">// A:原先的head</span></span><br><span class="line">        ListNode *ptrB = reverseList(head-&gt;next); <span class="comment">// B:将原先head以外的结点逆序并返回其head</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// look for the tail of B，寻找B的尾巴</span></span><br><span class="line">        ListNode *tailB = ptrB;</span><br><span class="line">        <span class="keyword">while</span> (tailB-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tailB = tailB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将A连接到B后面并将A设置为尾结点</span></span><br><span class="line">        tailB-&gt;next = ptrA;</span><br><span class="line">        ptrA-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回链表B</span></span><br><span class="line">        <span class="keyword">return</span> ptrB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码三"><a href="#代码三" class="headerlink" title="代码三"></a>代码三</h2><p>第二天看了题解之后，发现我自己忽略了一点：</p><p>在<code>ListNode *ptrB = reverseList(head-&gt;next);</code>运行后，链表B反转前的第一个结点（即<code>head-&gt;next</code>）已经是链表B反转后的最后一个结点，所以不需要再寻找B的尾结点了。</p><p>修改后代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 206</span></span><br><span class="line"><span class="comment">// URL: https://leetcode.com/problems/reverse-linked-list/description/</span></span><br><span class="line"><span class="comment">// Tags: Linked List Recursion Iteration</span></span><br><span class="line"><span class="comment">// Difficulty: Easy</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(): val(<span class="number">0</span>), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x): val(x), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x, ListNode* next): val(x), next(next)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">reverseList</span><span class="params">(ListNode *head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 边界：when there is no node, then it's no need to reverse,just return the input</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">nullptr</span> == head)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归出口（recursive export），when there is only 1 nodes</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">nullptr</span> == head-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// devide the nodes into A(the original head) and B(the nodes except the original head).</span></span><br><span class="line">        ListNode *ptrA = head; <span class="comment">// A:原先的head</span></span><br><span class="line">        ListNode *ptrB = reverseList(head-&gt;next); <span class="comment">// B:将原先head以外的结点逆序并返回其head，此时head-&gt;next已经为最后一个结点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将A连接到B后面并将A设置为尾结点</span></span><br><span class="line">        head-&gt;next-&gt;next = ptrA;</span><br><span class="line">        ptrA-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回链表B</span></span><br><span class="line">        <span class="keyword">return</span> ptrB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题解二：迭代"><a href="#题解二：迭代" class="headerlink" title="题解二：迭代"></a>题解二：迭代</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>其实就是头插法，另外要注意这道题里中链表的头结点的val是有意义的，所以最后要new出来的头结点delete掉，并返回其next。</p><h2 id="代码一-1"><a href="#代码一-1" class="headerlink" title="代码一"></a>代码一</h2><p>这份代码是没有修改原链表的结构的，而是基于原链表new了一个新链表（是原链表的逆序）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 206</span></span><br><span class="line"><span class="comment">// URL: https://leetcode.com/problems/reverse-linked-list/description/</span></span><br><span class="line"><span class="comment">// Tags: Linked List Recursion Iteration</span></span><br><span class="line"><span class="comment">// Difficulty: Easy</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(): val(<span class="number">0</span>), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x): val(x), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x, ListNode* next): val(x), next(next)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">reverseList</span><span class="params">(ListNode *head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建新链表</span></span><br><span class="line">        ListNode* newHead = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            ListNode *tempNodePtr = <span class="keyword">new</span> ListNode(head-&gt;val, head-&gt;next);</span><br><span class="line">            tempNodePtr-&gt;next = newHead-&gt;next;</span><br><span class="line">            newHead-&gt;next = tempNodePtr;</span><br><span class="line">            <span class="comment">// 取下一个结点</span></span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放无用的头结点并返回真正的头结点</span></span><br><span class="line">        ListNode* ret = newHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> newHead;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码二-1"><a href="#代码二-1" class="headerlink" title="代码二"></a>代码二</h2><p>这份代码修改了原链表的结构，直接利用了原链表的结点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: LeetCode 206</span></span><br><span class="line"><span class="comment">// URL: https://leetcode.com/problems/reverse-linked-list/description/</span></span><br><span class="line"><span class="comment">// Tags: Linked List Recursion Iteration</span></span><br><span class="line"><span class="comment">// Difficulty: Easy</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(): val(<span class="number">0</span>), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x): val(x), next(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x, ListNode* next): val(x), next(next)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">reverseList</span><span class="params">(ListNode *head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建新链表</span></span><br><span class="line">        ListNode* newHead = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            ListNode* next = head-&gt;next;</span><br><span class="line">            head-&gt;next = newHead-&gt;next;</span><br><span class="line">            newHead-&gt;next = head;</span><br><span class="line">            <span class="comment">// 取下一个结点</span></span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放无用的头结点并返回真正的头结点</span></span><br><span class="line">        ListNode* ret = newHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> newHead;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-linked-list/
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://chouxianyu.github.io/tags/LeetCode/"/>
    
      <category term="递归" scheme="https://chouxianyu.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="迭代" scheme="https://chouxianyu.github.io/tags/%E8%BF%AD%E4%BB%A3/"/>
    
      <category term="单向链表" scheme="https://chouxianyu.github.io/tags/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode160</title>
    <link href="https://chouxianyu.github.io/2020/07/10/LeetCode160/"/>
    <id>https://chouxianyu.github.io/2020/07/10/LeetCode160/</id>
    <published>2020-07-10T13:25:22.000Z</published>
    <updated>2020-07-13T06:55:52.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></p><h1 id="初次读题"><a href="#初次读题" class="headerlink" title="初次读题"></a>初次读题</h1><p>初次读题可知</p><ul><li>两个指针相同即需要求得的结果</li><li>链表长度可能不同</li><li>两个链表可能没有交叉点，此时返回NULL</li><li>不可修改链表结构</li><li>链表中无循环</li></ul><p>我第一次读题时看的是英文版，并且我刚开始做LeetCode对题目风格也不熟悉，同时这道题的Example也是很神奇，我一下子没有理解题意，看了中文版的题目和题解后才明白这个题是怎么做的。</p><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>根据这道题的代码模板和最终答案可知，最终我们需要找到交叉结点的指针。</p><p>在Example1中，val为1的两个结点虽然内容相同，但不是交叉点，因为交叉点的定义是同时存在于两个链表中。</p><h1 id="题解一"><a href="#题解一" class="headerlink" title="题解一"></a>题解一</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>假如两个链表有交叉点（intersection），则可以设两个链表彼此不重复的结点个数分别为d1和d2，重复的结点个数为d。如果一个链表遍历完则使其从另外一个链表的头部重新开始，这样形成一个式子：<code>d1+d+d2=d2+d+d1</code>。</p><p>假如两个链表没有交叉点，这也只是<code>d=0</code>的一个特例，因此只要实现上述思路即可。</p><p>关于思路，可以看看这个题的一个视频题解：</p><p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/lian-biao-xiang-jiao-shuang-zhi-zhen-onshi-jian-fu/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/lian-biao-xiang-jiao-shuang-zhi-zhen-onshi-jian-fu/</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Leetcode 160</span></span><br><span class="line"><span class="comment">// URL: https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</span></span><br><span class="line"><span class="comment">// Tags: Linked List</span></span><br><span class="line"><span class="comment">// Difficulty: Easy</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x):val(x),next(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span></span>&#123;</span><br><span class="line">        <span class="comment">// Deal with the border "nullptr"</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">nullptr</span>==headA || <span class="literal">nullptr</span>==headB)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *ptrA = headA;</span><br><span class="line">        ListNode *ptrB = headB;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// d1+d+d2=d2+d+d1</span></span><br><span class="line">        <span class="keyword">while</span> (ptrA != ptrB)&#123;</span><br><span class="line">            ptrA = <span class="literal">nullptr</span> == ptrA ? headB : ptrA-&gt;next;</span><br><span class="line">            ptrB = <span class="literal">nullptr</span> == ptrB ? headA : ptrB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ptrA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题解二"><a href="#题解二" class="headerlink" title="题解二"></a>题解二</h1><p>也看到有人讲这个思路：</p><p>遍历链表A并将每个结点的指针存入set，然后遍历链表B并判断每个结点指针是否存在于set中。</p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/intersection-of-two-
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://chouxianyu.github.io/tags/LeetCode/"/>
    
      <category term="单向链表" scheme="https://chouxianyu.github.io/tags/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>计算某天的下一天：黑盒测试之等价类划分+JUnit参数化测试</title>
    <link href="https://chouxianyu.github.io/2020/04/28/%E8%AE%A1%E7%AE%97%E6%9F%90%E5%A4%A9%E7%9A%84%E4%B8%8B%E4%B8%80%E5%A4%A9%EF%BC%9A%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E4%B9%8B%E7%AD%89%E4%BB%B7%E7%B1%BB%E5%88%92%E5%88%86-JUnit%E5%8F%82%E6%95%B0%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>https://chouxianyu.github.io/2020/04/28/计算某天的下一天：黑盒测试之等价类划分-JUnit参数化测试/</id>
    <published>2020-04-27T19:10:53.000Z</published>
    <updated>2020-04-28T14:10:26.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>测试以下程序：该程序有三个输入变量month、day、year（month、day和year均为整数值，并且满足：1≤month≤12、1≤day≤31和1900≤year≤2050)，分别作为输入日期的月份、日、年份，通过程序可以输出该输入日期在日历上隔一天的日期。例如，输入为2004年11月30日，则该程序的输出为2004年12月1日。</p><ol><li>划分等价类，按照等价类划分法设计测试用例；</li><li>编写getNextDate函数；</li><li>掌握Junit4的用法，使用Junit4测试getNextDate函数。</li></ol><h1 id="等价类表"><a href="#等价类表" class="headerlink" title="等价类表"></a>等价类表</h1><p>假设输入格式为year,month,day，且三个输入变量year、month和day均被输入。</p><p><strong>year要区分闰年和平年，其中闰年还可以分为世纪闰年和普通闰年，且year要属于[1900,2050]。</strong></p><p><strong>month要根据该月有几天来进行区分，并且需要考虑是否向year进位，且month要属于[1,12]。</strong></p><p><strong>day要根据月份来判断天数是否合法，并且需要考虑是否向month进位，且day要属于[1,31]。</strong></p><p>等价类划分如下。</p><p><img src="https://images.cnblogs.com/cnblogs_com/chouxianyu/1511971/o_200427190527等价类划分表.jpg" alt="等价类划分表.jpg"></p><h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><h2 id="有效等价类测试用例"><a href="#有效等价类测试用例" class="headerlink" title="有效等价类测试用例"></a>有效等价类测试用例</h2><p>共有5个有效等价类测试用例。</p><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>测试数据</strong></th><th style="text-align:center"><strong>期望结果</strong></th><th style="text-align:center"><strong>覆盖范围</strong></th></tr></thead><tbody><tr><td style="text-align:center">2004/12/25</td><td style="text-align:center">2004/12/26</td><td style="text-align:center">2,10,14</td></tr><tr><td style="text-align:center">2001/2/28</td><td style="text-align:center">2001/3/1</td><td style="text-align:center">3,7,15</td></tr><tr><td style="text-align:center">2000/2/29</td><td style="text-align:center">2000/3/1</td><td style="text-align:center">1,7,16</td></tr><tr><td style="text-align:center">2001/4/30</td><td style="text-align:center">2001/5/1</td><td style="text-align:center">3,8,17</td></tr><tr><td style="text-align:center">2001/5/31</td><td style="text-align:center">2001/6/1</td><td style="text-align:center">3,9,18</td></tr></tbody></table></div><h2 id="无效等价类测试用例"><a href="#无效等价类测试用例" class="headerlink" title="无效等价类测试用例"></a>无效等价类测试用例</h2><p>共有12个有效等价类测试用例。</p><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>测试数据</strong></th><th style="text-align:center"><strong>期望结果</strong></th><th style="text-align:center"><strong>覆盖范围</strong></th></tr></thead><tbody><tr><td style="text-align:center">1899/6/1</td><td style="text-align:center">year非法</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">2051/6/1</td><td style="text-align:center">year非法</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">a/6/1</td><td style="text-align:center">year非法</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">1999/0/1</td><td style="text-align:center">month非法</td><td style="text-align:center">11</td></tr><tr><td style="text-align:center">1999/13/1</td><td style="text-align:center">month非法</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">1999/a/1</td><td style="text-align:center">month非法</td><td style="text-align:center">13</td></tr><tr><td style="text-align:center">1999/1/0</td><td style="text-align:center">day非法</td><td style="text-align:center">19</td></tr><tr><td style="text-align:center">1999/1/32</td><td style="text-align:center">day非法</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">1999/1/a</td><td style="text-align:center">day非法</td><td style="text-align:center">21</td></tr><tr><td style="text-align:center">2001/2/29</td><td style="text-align:center">day非法</td><td style="text-align:center">22</td></tr><tr><td style="text-align:center">2000/2/30</td><td style="text-align:center">day非法</td><td style="text-align:center">23</td></tr><tr><td style="text-align:center">2001/4/31</td><td style="text-align:center">day非法</td><td style="text-align:center">24</td></tr></tbody></table></div><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><p>项目结构如下图所示</p><p><img src="https://images.cnblogs.com/cnblogs_com/chouxianyu/1511971/o_200427190552%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.jpg" alt="项目结构.jpg"></p><h2 id="DateUtil-java"><a href="#DateUtil-java" class="headerlink" title="DateUtil.java"></a>DateUtil.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 有31天的月份</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] monthOfThirtyOne = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>&#125;;</span><br><span class="line">    <span class="comment">// 有30天的月份</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] monthOfThirty = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>&#125;;</span><br><span class="line">    <span class="comment">// 年月日</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最终实现的功能，输入是一个“年/月/日”格式的字符串；</span></span><br><span class="line">    <span class="comment">// 如果函数运行成功，输出则是相同格式的下一天，否则是错误信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNextDate</span><span class="params">(String dateStr)</span></span>&#123;</span><br><span class="line">        String updateResult = <span class="keyword">this</span>.updateDate(dateStr);</span><br><span class="line">        <span class="comment">// 如果输入合法</span></span><br><span class="line">        <span class="keyword">if</span> (updateResult.equals(<span class="string">"success"</span>))&#123;</span><br><span class="line">            String checkResult = <span class="keyword">this</span>.checkDate();</span><br><span class="line">            <span class="comment">// 如果输入合法</span></span><br><span class="line">            <span class="keyword">if</span> (checkResult.equals(<span class="string">"valid"</span>))&#123;</span><br><span class="line">                <span class="comment">// 计算明天的日期</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.calcNextDate();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> checkResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> updateResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据输入字符串转换并更新年月日</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">updateDate</span><span class="params">(String dateStr)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取年月日</span></span><br><span class="line">        String[] numbers = dateStr.split(<span class="string">"/"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.year = Integer.parseInt(numbers[<span class="number">0</span>]);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"year非法"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.month = Integer.parseInt(numbers[<span class="number">1</span>]);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"month非法"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.day = Integer.parseInt(numbers[<span class="number">2</span>]);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"day非法"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查日期是否合法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">checkDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String valid = <span class="string">"valid"</span>;</span><br><span class="line">        String yearInvalid = <span class="string">"year非法"</span>;</span><br><span class="line">        String monthInvalid = <span class="string">"month非法"</span>;</span><br><span class="line">        String dayInvalid = <span class="string">"day非法"</span>;</span><br><span class="line">        <span class="comment">// year合法</span></span><br><span class="line">        <span class="keyword">if</span> (year&gt;=<span class="number">1900</span>&amp;&amp;year&lt;=<span class="number">2050</span>)&#123;</span><br><span class="line">            <span class="comment">// month合法</span></span><br><span class="line">            <span class="keyword">if</span> (month&gt;=<span class="number">1</span>&amp;&amp;month&lt;=<span class="number">12</span>)&#123;</span><br><span class="line">                <span class="comment">// day小于1</span></span><br><span class="line">                <span class="keyword">if</span> (day&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> dayInvalid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 至此能保证day大于0</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 是2月</span></span><br><span class="line">                <span class="keyword">if</span> (month==<span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="comment">// 闰年</span></span><br><span class="line">                    <span class="keyword">if</span> (yearIsLeap(year))&#123;</span><br><span class="line">                        <span class="comment">// 1-29</span></span><br><span class="line">                        <span class="keyword">if</span> (day&lt;=<span class="number">29</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> valid;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> dayInvalid;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 平年2月</span></span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">// 1-28</span></span><br><span class="line">                        <span class="keyword">if</span> (day&lt;=<span class="number">28</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> valid;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> dayInvalid;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 至此能保证不是2月</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 是否为31天的月</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;++i)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (month==monthOfThirtyOne[i])&#123;</span><br><span class="line">                        <span class="comment">// 1-31</span></span><br><span class="line">                        <span class="keyword">if</span> (day&lt;=<span class="number">31</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> valid;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> dayInvalid;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 至此能保证不是2月和31天的月</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 是否为30天的月</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (month==monthOfThirty[i])&#123;</span><br><span class="line">                        <span class="comment">// 1-30</span></span><br><span class="line">                        <span class="keyword">if</span> (day&lt;=<span class="number">30</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> valid;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> dayInvalid;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// month非法</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> monthInvalid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// year非法</span></span><br><span class="line">        <span class="keyword">return</span> yearInvalid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算下一天</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">calcNextDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> yearNext;</span><br><span class="line">        <span class="keyword">int</span> monthNext;</span><br><span class="line">        <span class="keyword">int</span> dayNext=day+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> dayCarry=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> monthCarry=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理day</span></span><br><span class="line">        <span class="comment">// 是2月</span></span><br><span class="line">        <span class="keyword">if</span> (month==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">// 闰年</span></span><br><span class="line">            <span class="keyword">if</span> (yearIsLeap(year))&#123;</span><br><span class="line">                <span class="comment">// 1-29</span></span><br><span class="line">                <span class="keyword">if</span> (day==<span class="number">29</span>)&#123;</span><br><span class="line">                    dayNext = <span class="number">1</span>;</span><br><span class="line">                    dayCarry = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 平年2月</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 1-28</span></span><br><span class="line">                <span class="keyword">if</span> (day==<span class="number">28</span>)&#123;</span><br><span class="line">                    dayNext = <span class="number">1</span>;</span><br><span class="line">                    dayCarry = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不是2月</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> isThirtyOne= <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// 是否为31天的月</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;++i)&#123;</span><br><span class="line">                <span class="keyword">if</span> (month==monthOfThirtyOne[i])&#123;</span><br><span class="line">                    isThirtyOne = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">// 1-31</span></span><br><span class="line">                    <span class="keyword">if</span> (day==<span class="number">31</span>)&#123;</span><br><span class="line">                        dayNext = <span class="number">1</span>;</span><br><span class="line">                        dayCarry = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 至此能保证是30天的月</span></span><br><span class="line">            <span class="keyword">if</span> (!isThirtyOne)&#123;</span><br><span class="line">                <span class="comment">// 1-30</span></span><br><span class="line">                <span class="keyword">if</span> (day==<span class="number">30</span>)&#123;</span><br><span class="line">                    dayNext = <span class="number">1</span>;</span><br><span class="line">                    dayCarry = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理月</span></span><br><span class="line">        <span class="keyword">if</span> (month+dayCarry&gt;<span class="number">12</span>)&#123;</span><br><span class="line">            monthNext = <span class="number">1</span>;</span><br><span class="line">            monthCarry = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            monthNext = month+dayCarry;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  处理年</span></span><br><span class="line">        yearNext = year+monthCarry;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> yearNext +<span class="string">"/"</span>+ monthNext +<span class="string">"/"</span>+ dayNext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断某一年是否为闰年</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">yearIsLeap</span><span class="params">(<span class="keyword">int</span> year)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 普通闰年和世纪闰年</span></span><br><span class="line">        <span class="keyword">if</span> ((year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>)||(year%<span class="number">400</span>==<span class="number">0</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 平年</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DateUtilTest-java"><a href="#DateUtilTest-java" class="headerlink" title="DateUtilTest.java"></a>DateUtilTest.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.company.DateUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、参数化测试：引入相关的包和类</span></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized.Parameters;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized.class) <span class="comment">//2、参数化测试：更改测试运行器为RunWith(Parameterized.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtilTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//3、参数化测试：声明变量用来存放预期值与结果值</span></span><br><span class="line">    <span class="keyword">private</span> DateUtil util = <span class="keyword">new</span> DateUtil();</span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line">    <span class="keyword">private</span> String except;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、参数化测试：声明一个返回值为 Collection 的公共静态方法，并使用@Parameters 进行修饰</span></span><br><span class="line">    <span class="meta">@Parameters</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Collection <span class="title">data</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">                &#123;<span class="string">"2004/12/25"</span>, <span class="string">"2004/12/26"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"2001/2/28"</span>, <span class="string">"2001/3/1"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"2000/2/29"</span>, <span class="string">"2000/3/1"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"2001/4/30"</span>, <span class="string">"2001/5/1"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"2001/5/31"</span>, <span class="string">"2001/6/1"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"1899/6/1"</span>, <span class="string">"year非法"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"2051/6/1"</span>, <span class="string">"year非法"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"a/6/1"</span>, <span class="string">"year非法"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"1999/0/1"</span>, <span class="string">"month非法"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"1999/13/1"</span>, <span class="string">"month非法"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"1999/a/1"</span>, <span class="string">"month非法"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"1999/1/0"</span>, <span class="string">"day非法"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"1999/1/32"</span>, <span class="string">"day非法"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"1999/1/a"</span>, <span class="string">"day非法"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"2001/2/29"</span>, <span class="string">"day非法"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"2000/2/30"</span>, <span class="string">"day非法"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"2001/4/31"</span>, <span class="string">"day非法"</span>&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5、参数化测试：为测试类声明一个带有参数的公共构造方法，并在其中为声明变量赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateUtilTest</span><span class="params">(String date, String except)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">        <span class="keyword">this</span>.except = except;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetNextDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        assertEquals(except, util.getNextDate(date));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><p>如下图所示，17个测试用例均测试成功，程序实际输出与期望值相同。</p><p><img src="https://images.cnblogs.com/cnblogs_com/chouxianyu/1511971/o_200427190603测试结果.jpg" alt="测试结果.jpg"></p><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><p>本次实验的主要目的是巩固黑盒测试方法中的等价类划分法的知识，练习JUnit的参数化测试。在本次实验中，我认为我的getNextDate函数的实现并不是很优雅，比较过程化。写这个函数花了我很多时间，主要问题在于我没有抓住一些关键的、抽象的逻辑和子函数，比如天向月份进位和月份向年份完全可以参照加法器的循环、可以写一个函数根据年份和月份判断出天数的最大值等等。</p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目要求&quot;&gt;&lt;a href=&quot;#题目要求&quot; class=&quot;headerlink&quot; title=&quot;题目要求&quot;&gt;&lt;/a&gt;题目要求&lt;/h1&gt;&lt;p&gt;测试以下程序：该程序有三个输入变量month、day、year（month、day和year均为整数值，并且满足：1≤mon
      
    
    </summary>
    
    
      <category term="Java" scheme="https://chouxianyu.github.io/tags/Java/"/>
    
      <category term="黑盒测试" scheme="https://chouxianyu.github.io/tags/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
    
      <category term="软件测试，JUnit" scheme="https://chouxianyu.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%EF%BC%8CJUnit/"/>
    
  </entry>
  
  <entry>
    <title>黑盒测试之因果图法</title>
    <link href="https://chouxianyu.github.io/2020/04/20/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%9B%A0%E6%9E%9C%E5%9B%BE%E6%B3%95/"/>
    <id>https://chouxianyu.github.io/2020/04/20/黑盒测试之因果图法/</id>
    <published>2020-04-20T09:28:07.000Z</published>
    <updated>2020-04-20T09:37:30.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>设要对一个自动饮料售货机软件进行黑盒测试。该软件的规格说明如下：“有一个处理单价为1元5角的盒装饮料的自动售货机软件，若投入1元5角硬币，按下“可乐”、“雪碧”或“红茶”按钮，相应的饮料就送出来。若投入的是2元硬币，在送出饮料的同时退还5角硬币。“</p><ol><li>试利用因果图法，建立该软件的因果图；</li><li>设计测试该软件的全部测试用例。</li></ol><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><h2 id="原因和结果"><a href="#原因和结果" class="headerlink" title="原因和结果"></a>原因和结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>原因</strong></th><th style="text-align:center"><strong>中间原因</strong></th><th style="text-align:center"><strong>结果</strong></th></tr></thead><tbody><tr><td style="text-align:center">c1：投入1元5角硬币</td><td style="text-align:center">m1：已投币</td><td style="text-align:center">e1：退还5角硬币</td></tr><tr><td style="text-align:center">c2：投入2元硬币</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">c3：按下“可乐”按钮</td><td style="text-align:center"></td><td style="text-align:center">e2：送出可乐</td></tr><tr><td style="text-align:center">c4：按下“雪碧”按钮</td><td style="text-align:center">m2：已按下按钮</td><td style="text-align:center">e3：送出雪碧</td></tr><tr><td style="text-align:center">c5：按下“红茶”按钮</td><td style="text-align:center"></td><td style="text-align:center">e4：送出红茶</td></tr></tbody></table></div><h2 id="因果图"><a href="#因果图" class="headerlink" title="因果图"></a>因果图</h2><p><img src="https://images.cnblogs.com/cnblogs_com/chouxianyu/1511971/o_200420092644因果图.png" alt="因果图"></p><h2 id="决策表"><a href="#决策表" class="headerlink" title="决策表"></a>决策表</h2><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><strong>1</strong></th><th style="text-align:center"><strong>2</strong></th><th style="text-align:center"><strong>3</strong></th><th style="text-align:center"><strong>4</strong></th><th style="text-align:center"><strong>5</strong></th><th style="text-align:center"><strong>6</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>c1</strong></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><strong>c2</strong></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><strong>c3</strong></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><strong>c4</strong></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><strong>c5</strong></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><strong>m1</strong></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><strong>m2</strong></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><strong>e1</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>e2</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">√</td></tr><tr><td style="text-align:center"><strong>e3</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>e4</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><strong>7</strong></td><td style="text-align:center"><strong>8</strong></td><td style="text-align:center"><strong>9</strong></td><td style="text-align:center"><strong>10</strong></td><td style="text-align:center"><strong>11</strong></td><td style="text-align:center"><strong>12</strong></td></tr><tr><td style="text-align:center"><strong>c1</strong></td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><strong>c2</strong></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><strong>c3</strong></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><strong>c4</strong></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><strong>c5</strong></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><strong>m1</strong></td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><strong>m2</strong></td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><strong>e1</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center"><strong>e2</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>e3</strong></td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>e4</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">√</td></tr></tbody></table></div><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>测试用例编号</strong></th><th style="text-align:center"><strong>输入</strong></th><th style="text-align:center"><strong>预期输出</strong></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">不投币，不按按钮</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">不投币，按下“可乐”按钮</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">不投币，按下“雪碧”按钮</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">不投币，按下“红茶”按钮</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">投1元5角硬币，不按按钮</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">投1元5角硬币，按下“可乐”按钮</td><td style="text-align:center">送出可乐</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">投1元5角硬币，按下“雪碧”按钮</td><td style="text-align:center">送出雪碧</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">投1元5角硬币，按下“红茶”按钮</td><td style="text-align:center">送出红茶</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">投2元硬币，不按按钮</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">投2元硬币，按下“可乐”按钮</td><td style="text-align:center">送出可乐并退还5角硬币</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">投2元硬币，按下“雪碧”按钮</td><td style="text-align:center">送出雪碧并退还5角硬币</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">投2元硬币，按下“红茶”按钮</td><td style="text-align:center">送出红茶并退还5角硬币</td></tr></tbody></table></div><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目要求&quot;&gt;&lt;a href=&quot;#题目要求&quot; class=&quot;headerlink&quot; title=&quot;题目要求&quot;&gt;&lt;/a&gt;题目要求&lt;/h1&gt;&lt;p&gt;设要对一个自动饮料售货机软件进行黑盒测试。该软件的规格说明如下：“有一个处理单价为1元5角的盒装饮料的自动售货机软件，若投入
      
    
    </summary>
    
    
      <category term="软件测试" scheme="https://chouxianyu.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
      <category term="黑盒测试" scheme="https://chouxianyu.github.io/tags/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>黑盒测试之等价类划分</title>
    <link href="https://chouxianyu.github.io/2020/04/07/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E4%B9%8B%E7%AD%89%E4%BB%B7%E7%B1%BB%E5%88%92%E5%88%86/"/>
    <id>https://chouxianyu.github.io/2020/04/07/黑盒测试之等价类划分/</id>
    <published>2020-04-07T11:40:18.000Z</published>
    <updated>2020-04-07T11:44:56.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>某城市电话号码由三部分组成。它们的名称和内容分别是：</p><ul><li><p><strong>地区码</strong>：空白或三位数字；</p></li><li><p><strong>前缀</strong>：非“0”或“1”的三位数字</p><p>  <strong>要求不是很明确，所以将其理解为不包括“0**</strong>”也不包括“1”的三位数字**</p></li><li><p><strong>后缀</strong>：4位数字。</p></li></ul><p>假定被测程序能接受一切符合上述规定的电话号码，拒绝所有不符合规定的电话号码。根据该程序的规格说明，做等价类的划分，并设计测试用例。（按照上课例子列表格）</p><h1 id="等价类表"><a href="#等价类表" class="headerlink" title="等价类表"></a>等价类表</h1><p>等价类的划分似乎没有统一的标准？比如我这里的无效等价类划分得挺简单的，可以划分得更细一些。</p><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>输入数据</strong></th><th style="text-align:left"><strong>有效等价类</strong></th><th style="text-align:left"><strong>无效等价类</strong></th></tr></thead><tbody><tr><td style="text-align:center">地区码</td><td style="text-align:left">1空白</td><td style="text-align:left">3不是空白也不是三位数字</td></tr><tr><td style="text-align:center">地区码</td><td style="text-align:left">2三位的数字</td><td style="text-align:left">无</td></tr><tr><td style="text-align:center">前缀</td><td style="text-align:left">4不包含0且不包含1的三位数字</td><td style="text-align:left">5至少包含一个0或1</td></tr><tr><td style="text-align:center">前缀</td><td style="text-align:left">无</td><td style="text-align:left">6不是三位数字</td></tr><tr><td style="text-align:center">后缀</td><td style="text-align:left">7四位数字</td><td style="text-align:left">8不是四位数字</td></tr></tbody></table></div><h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><h2 id="有效等价类测试用例"><a href="#有效等价类测试用例" class="headerlink" title="有效等价类测试用例"></a>有效等价类测试用例</h2><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>测试数据</strong></th><th style="text-align:center"><strong>期望结果</strong></th><th style="text-align:center"><strong>覆盖范围</strong></th></tr></thead><tbody><tr><td style="text-align:center">地区码为空白  前缀为222  后缀为1234</td><td style="text-align:center">程序将该输入判定为有效输入</td><td style="text-align:center">1,4,7</td></tr><tr><td style="text-align:center">地区码为123  前缀为222  后缀为1234</td><td style="text-align:center">程序将该输入判定为有效输入</td><td style="text-align:center">2,4,7</td></tr></tbody></table></div><h2 id="无效等价类测试用例"><a href="#无效等价类测试用例" class="headerlink" title="无效等价类测试用例"></a>无效等价类测试用例</h2><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>测试数据</strong></th><th style="text-align:center"><strong>期望结果</strong></th><th style="text-align:center"><strong>覆盖范围</strong></th></tr></thead><tbody><tr><td style="text-align:center">地区码为22  前缀为222  后缀为1234</td><td style="text-align:center">程序将该输入判定为无效输入</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">地区码为空白  前缀为123  后缀为1234</td><td style="text-align:center">程序将该输入判定为无效输入</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">地区码为空白  前缀为22  后缀为1234</td><td style="text-align:center">程序将该输入判定为无效输入</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">地区码为空白  前缀为222  后缀为123</td><td style="text-align:center">程序将该输入判定为无效输入</td><td style="text-align:center">8</td></tr></tbody></table></div><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目要求&quot;&gt;&lt;a href=&quot;#题目要求&quot; class=&quot;headerlink&quot; title=&quot;题目要求&quot;&gt;&lt;/a&gt;题目要求&lt;/h1&gt;&lt;p&gt;某城市电话号码由三部分组成。它们的名称和内容分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;地区码&lt;/strong
      
    
    </summary>
    
    
      <category term="软件测试" scheme="https://chouxianyu.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
      <category term="黑盒测试" scheme="https://chouxianyu.github.io/tags/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java实现称重3次找到假球</title>
    <link href="https://chouxianyu.github.io/2020/04/07/Java%E5%AE%9E%E7%8E%B0%E7%A7%B0%E9%87%8D3%E6%AC%A1%E6%89%BE%E5%88%B0%E5%81%87%E7%90%83/"/>
    <id>https://chouxianyu.github.io/2020/04/07/Java实现称重3次找到假球/</id>
    <published>2020-04-07T05:38:29.000Z</published>
    <updated>2020-04-07T07:37:16.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前老师让写一个程序，就写了写，本文是我自己的写法。</p><p><a href="https://www.cnblogs.com/chouxianyu/p/12652784.html" target="_blank" rel="noopener">这里有老师的Java实现代码，请点击</a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><ul><li><p>程序要求</p><p>  10个铅球中有一个假球（比其他铅球的重量要轻），用天平三次称出假球。</p></li><li><p>程序设计思路</p><p>  第一次使用天平分别称5个球，判断轻的一边有假球；拿出轻的5个球，取出其中4个第二次称，两边分别放2个球：如果两边同重，则剩下的球为假球；若两边不同重，拿出轻的两个球称第三次，轻的为假球。</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>注释应该还算详细哈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算数组中连续几个球的质量之和，区间是[startIndex,endIndex]</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>[] balls,<span class="keyword">int</span> startIndex, <span class="keyword">int</span> endIndex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=startIndex;i&lt;=endIndex;++i)&#123;</span><br><span class="line">            ret+=balls[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入balls是10个球的质量，该函数返回假球在该数组中的下标</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findFakeBall</span><span class="params">(<span class="keyword">int</span>[] balls)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 第一次称重，十个，五五分，默认左边五个球中有假球</span></span><br><span class="line">        <span class="keyword">int</span> fiveStartIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 如果右边五个球中有假球</span></span><br><span class="line">        <span class="keyword">if</span> (sum(balls,<span class="number">5</span>,<span class="number">9</span>)&lt;sum(balls,<span class="number">0</span>,<span class="number">4</span>))&#123;</span><br><span class="line">            fiveStartIndex = <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二次称重，五个，二一二分，默认左边两个球中有假球</span></span><br><span class="line">        <span class="keyword">int</span> twoStartIndex = fiveStartIndex+<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 五个球中左边两个球的质量之和和右边两个球的质量之和</span></span><br><span class="line">        <span class="keyword">int</span> leftTwoSum = sum(balls,fiveStartIndex+<span class="number">0</span>,fiveStartIndex+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> rightTwoSum = sum(balls,fiveStartIndex+<span class="number">3</span>,fiveStartIndex+<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 如果右边两个球中有假球</span></span><br><span class="line">        <span class="keyword">if</span>(rightTwoSum&lt;leftTwoSum)&#123;</span><br><span class="line">            twoStartIndex = fiveStartIndex+<span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 如果左右两边的四个球中没有假球，则中间的球是假球</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rightTwoSum==leftTwoSum)&#123;</span><br><span class="line">            <span class="keyword">return</span> fiveStartIndex+<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三次称重</span></span><br><span class="line">        <span class="comment">// 如果两个球中左边是假球</span></span><br><span class="line">        <span class="keyword">if</span>(balls[twoStartIndex]&lt;balls[twoStartIndex+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> twoStartIndex;</span><br><span class="line">        <span class="comment">// 如果两个球中右边是假球</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> twoStartIndex+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对函数findFakeBall()进行测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] balls = &#123;<span class="number">5</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>&#125;;   <span class="comment">// 所有球的质量</span></span><br><span class="line">        <span class="keyword">int</span> fakeIndex =findFakeBall(balls);</span><br><span class="line">        System.out.println(fakeIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前老师让写一个程序，就写了写，本文是我自己的写法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/cho
      
    
    </summary>
    
    
      <category term="Java" scheme="https://chouxianyu.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JUnit白盒测试之基本路径测试：称重3次找到假球</title>
    <link href="https://chouxianyu.github.io/2020/04/07/JUnit%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%9F%BA%E6%9C%AC%E8%B7%AF%E5%BE%84%E6%B5%8B%E8%AF%95%EF%BC%9A%E7%A7%B0%E9%87%8D3%E6%AC%A1%E6%89%BE%E5%88%B0%E5%81%87%E7%90%83/"/>
    <id>https://chouxianyu.github.io/2020/04/07/JUnit白盒测试之基本路径测试：称重3次找到假球/</id>
    <published>2020-04-07T05:08:52.000Z</published>
    <updated>2020-04-07T07:36:18.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录一次软件测试课程的课后作业，作业内容是白盒测试中的基本路径测试，步骤如下</p><ol><li>分析程序的控制流</li><li>计算环形复杂度</li><li>找出基本路径</li><li>设计测试用例</li><li>执行测试用例（要求使用JUnit）</li></ol><h1 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h1><p>使用白盒测试用例设计方法为下面的程序设计测试用例（基本路径测试）并用JUnit测试：</p><ul><li><p>程序要求</p><p>  10个铅球中有一个假球（比其他铅球的重量要轻），用天平三次称出假球。</p></li><li><p>程序设计思路</p><p>  第一次使用天平分别称5个球，判断轻的一边有假球；拿出轻的5个球，取出其中4个第二次称，两边分别放2个球：如果两边同重，则剩下的球为假球；若两边不同重，拿出轻的两个球称第三次，轻的为假球。</p></li><li><p>递交材料</p><p>  测试用例设计电子稿、源程序、JUnit测试截图。</p></li></ul><h1 id="程序代码及控制流图"><a href="#程序代码及控制流图" class="headerlink" title="程序代码及控制流图"></a>程序代码及控制流图</h1><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><p>文件<code>SearchBall.java</code>内容如下。</p><p>注意不要让代码的行号变动，程序流图中节点的编号是根据这份代码里每条执行语句里的行号对应的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchBall</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchBall</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBWeight</span><span class="params">(<span class="keyword">int</span> w[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;w.length;i++)&#123;</span><br><span class="line">             x[i]=w[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">BeginSearch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x[<span class="number">0</span>]+x[<span class="number">1</span>]+x[<span class="number">2</span>]+x[<span class="number">3</span>]+x[<span class="number">4</span>]&lt;x[<span class="number">5</span>]+x[<span class="number">6</span>]+x[<span class="number">7</span>]+x[<span class="number">8</span>]+x[<span class="number">9</span>])&#123;</span><br><span class="line">            <span class="keyword">if</span>(x[<span class="number">1</span>]+x[<span class="number">2</span>]==x[<span class="number">3</span>]+x[<span class="number">4</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"1号是假球"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x[<span class="number">1</span>]+x[<span class="number">2</span>]&lt;x[<span class="number">3</span>]+x[<span class="number">4</span>])&#123;</span><br><span class="line">                <span class="keyword">if</span> (x[<span class="number">1</span>]&lt;x[<span class="number">2</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"2号是假球"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"3号是假球"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x[<span class="number">3</span>]&lt;x[<span class="number">4</span>])&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"4号是假球"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"5号是假球"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(x[<span class="number">6</span>]+x[<span class="number">7</span>]==x[<span class="number">8</span>]+x[<span class="number">9</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"6号是假球"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x[<span class="number">6</span>]+x[<span class="number">7</span>]&lt;x[<span class="number">8</span>]+x[<span class="number">9</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x[<span class="number">6</span>]&lt;x[<span class="number">7</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"7号是假球"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"8号是假球"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (x[<span class="number">8</span>]&lt;x[<span class="number">9</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"9号是假球"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"10号是假球"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="程序控制流图"><a href="#程序控制流图" class="headerlink" title="程序控制流图"></a>程序控制流图</h2><p>下图中<strong>节点</strong>中的数字是对应可执行语句在上面代码中的行号；<strong>边</strong>上的Y代表判定结果为真，N代表判定结果为假。</p><p><img src="https://images.cnblogs.com/cnblogs_com/chouxianyu/1511971/o_200407051334JUnit基本路径测试2.png" alt="程序控制流图"></p><h1 id="计算环形复杂度"><a href="#计算环形复杂度" class="headerlink" title="计算环形复杂度"></a>计算环形复杂度</h1><p>控制流图$G$的环形复杂度计算公式：$V(G)=E-N+2$，其中$E$为控制流图中边的数量，$N$是控制流图中的节点数量。</p><p>函数<code>BeginSearch()</code>的控制流图的环形复杂度为</p><script type="math/tex; mode=display">V(G)=18-19+2=1</script><h1 id="基本路径"><a href="#基本路径" class="headerlink" title="基本路径"></a>基本路径</h1><p>从程序流图中可知，共有10条基本路径，具体如下</p><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>路径编号</strong></th><th style="text-align:center"><strong>经过节点</strong></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">12-13-14</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">12-13-16-17-18</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">12-13-16-17-20</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">12-13-16-23-24</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">12-13-16-23-27</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">12-31-32</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">12-31-34-35-36</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">12-31-34-35-38</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">12-31-34-41-42</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">12-31-34-41-44</td></tr></tbody></table></div><h1 id="测试用例设计与执行"><a href="#测试用例设计与执行" class="headerlink" title="测试用例设计与执行"></a>测试用例设计与执行</h1><h2 id="测试用例设计"><a href="#测试用例设计" class="headerlink" title="测试用例设计"></a>测试用例设计</h2><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>路径编号</strong></th><th style="text-align:center"><strong>用例输入</strong></th><th style="text-align:center"><strong>期待输出</strong></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">{5,  10, 10, 10, 10, 10, 10, 10, 10, 10}</td><td style="text-align:center">“1号是假球”</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">{10,  5, 10, 10, 10, 10, 10, 10, 10, 10}</td><td style="text-align:center">“2号是假球”</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">{10,  10, 5, 10, 10, 10, 10, 10, 10, 10}</td><td style="text-align:center">“3号是假球”</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">{10,  10, 10, 5, 10, 10, 10, 10, 10, 10}</td><td style="text-align:center">“4号是假球”</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">{10,  10, 10, 10, 5, 10, 10, 10, 10, 10}</td><td style="text-align:center">“5号是假球”</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">{10,  10, 10, 10, 10, 5, 10, 10, 10, 10}</td><td style="text-align:center">“6号是假球”</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">{10,  10, 10, 10, 10, 10, 5, 10, 10, 10}</td><td style="text-align:center">“7号是假球”</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">{10,  10, 10, 10, 10, 10, 10, 5, 10, 10}</td><td style="text-align:center">“8号是假球”</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">{10,  10, 10, 10, 10, 10, 10, 10, 5, 10}</td><td style="text-align:center">“9号是假球”</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">{10,  10, 10, 10, 10, 10, 10, 10, 10, 5}</td><td style="text-align:center">“10号是假球”</td></tr></tbody></table></div><h2 id="Junit执行测试用例"><a href="#Junit执行测试用例" class="headerlink" title="Junit执行测试用例"></a>Junit执行测试用例</h2><p>基于JUnit生成的测试代码，我补充了测试函数<code>BeginSearch()</code>的代码，文件<code>SearchBallTest.java</code>内容如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.<span class="keyword">module</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test; </span><br><span class="line"><span class="keyword">import</span> org.junit.Before; </span><br><span class="line"><span class="keyword">import</span> org.junit.After; </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">module</span>.SearchBall;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* SearchBall Tester. </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> &lt;Authors name&gt; </span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> &lt;pre&gt;4月 7, 2020&lt;/pre&gt; </span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchBallTest</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* Method: setBWeight(int w[]) </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetBWeight</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here... </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* Method: BeginSearch() </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBeginSearch</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    SearchBall obj = <span class="keyword">new</span> SearchBall();</span><br><span class="line">    <span class="keyword">int</span>[] input;</span><br><span class="line">    <span class="keyword">int</span> ballIndex;</span><br><span class="line">    <span class="comment">// 遍历测试各个基本路径</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">        <span class="comment">// 生成用例输入</span></span><br><span class="line">        input = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>&#125;;</span><br><span class="line">        input[i]=<span class="number">5</span>;</span><br><span class="line">        obj.setBWeight(input);</span><br><span class="line">        <span class="comment">// 测试用例输出</span></span><br><span class="line">        ballIndex = i+<span class="number">1</span>;</span><br><span class="line">        assertEquals(ballIndex+<span class="string">"号是假球"</span>, obj.BeginSearch());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行函数<code>testBeginSearch()</code>，得到如下图所示的结果（从下图也可以看到项目的结构）</p><p><img src="https://images.cnblogs.com/cnblogs_com/chouxianyu/1511971/o_200407051324JUnit基本路径测试1.jpg" alt="JUnit执行结果截图"></p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><ul><li><a href="https://www.cnblogs.com/chouxianyu/p/12652969.html" target="_blank" rel="noopener">我自己实现的找到假球的程序</a></li></ul><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;记录一次软件测试课程的课后作业，作业内容是白盒测试中的基本路径测试，步骤如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分析程序的控制流&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="Java" scheme="https://chouxianyu.github.io/tags/Java/"/>
    
      <category term="软件测试" scheme="https://chouxianyu.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
      <category term="白盒测试" scheme="https://chouxianyu.github.io/tags/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
    
      <category term="基本路径测试" scheme="https://chouxianyu.github.io/tags/%E5%9F%BA%E6%9C%AC%E8%B7%AF%E5%BE%84%E6%B5%8B%E8%AF%95/"/>
    
      <category term="JUnit" scheme="https://chouxianyu.github.io/tags/JUnit/"/>
    
  </entry>
  
  <entry>
    <title>用pymysql和Flask搭建后端，响应前端POST和GET请求，实现登录和注册功能</title>
    <link href="https://chouxianyu.github.io/2020/04/05/%E7%94%A8pymysql%E5%92%8CFlask%E6%90%AD%E5%BB%BA%E5%90%8E%E7%AB%AF%EF%BC%8C%E5%93%8D%E5%BA%94%E5%89%8D%E7%AB%AFPOST%E5%92%8CGET%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E5%92%8C%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD/"/>
    <id>https://chouxianyu.github.io/2020/04/05/用pymysql和Flask搭建后端，响应前端POST和GET请求，实现登录和注册功能/</id>
    <published>2020-04-05T02:14:03.000Z</published>
    <updated>2020-07-13T07:14:13.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次作业不仅需要我<a href="https://www.cnblogs.com/chouxianyu/p/12634881.html" target="_blank" rel="noopener">建立一个数据库(详情请点击这里)</a>，还需要我基于这个数据库写后端接口（注册和登录）供前端访问，接收前端的POST和GET请求，并将登录、注册是否成功传给前端。</p><p>本文介绍如何用Flask搭建后端，其中使用了pymysql操作mysql数据库，也会做这个部分的介绍。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>需要为前端提供的接口有两个：注册和登录，为此我定义了四个函数，分别是</p><ul><li>select_user(userid, password)</li><li>insert_user(userid, password, phone, email, company)</li><li>on_register()</li><li>on_login()</li></ul><p>前两个函数是操作数据库，被后两个函数调用；后两个函数是给前端的接口。</p><h2 id="后端说明"><a href="#后端说明" class="headerlink" title="后端说明"></a>后端说明</h2><p>整个后端的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义app</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 设置跨域</span></span><br><span class="line">CORS(app, supports_credentials=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库，账号是root，密码是000，数据库名称是shopdata</span></span><br><span class="line">db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"000"</span>, <span class="string">"shopdata"</span>)  <span class="comment"># 连接数据库</span></span><br><span class="line">cursor = db.cursor()  <span class="comment"># 定义游标</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># select a user，根据userid和password获取一个用户是否存在，即判断登录是否成功</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_user</span><span class="params">(userid, password)</span>:</span></span><br><span class="line">    <span class="comment"># mysql语句</span></span><br><span class="line">    select_user_sql = <span class="string">'select * from userinfo where userid="%s" and password="%s";'</span> % (userid, password)</span><br><span class="line">    <span class="comment"># 执行mysql语句</span></span><br><span class="line">    result = cursor.execute(select_user_sql)</span><br><span class="line">    db.commit()</span><br><span class="line">    <span class="comment"># 如果返回了一条数据，则登录成功，否则登录失败</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span> == result:</span><br><span class="line">        result = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = <span class="keyword">False</span></span><br><span class="line">        print(<span class="string">'there is no user where userid="%s and password="%s"!!'</span> % (userid, password))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># insert a user，根据userid、password等信息，生成一个元组，将其插入数据库shopdata的userinfo表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_user</span><span class="params">(userid, password, phone, email, company)</span>:</span></span><br><span class="line">    <span class="comment"># mysql语句</span></span><br><span class="line">    insert_user_sql = <span class="string">'insert into userinfo(userid, password, phone, email, company)'</span> \</span><br><span class="line">                      <span class="string">'values("%s", "%s", "%s", "%s", "%s");'</span> % (userid, password, phone, email, company)</span><br><span class="line">    <span class="comment"># 执行mysql语句，如果插入成功，则注册成功，否则注册失败</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(insert_user_sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        print(<span class="string">'insert user where userid="%s" and password="%s"!!'</span> % (userid, password))</span><br><span class="line">        result = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'can not insert user where userid="%s" and password="%s"!!'</span> % (userid, password))</span><br><span class="line">        result = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># on_register，提供给前端的注册接口</span></span><br><span class="line"><span class="meta">@app.route("/api/register", methods=['POST'])  # 路由，响应POST请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_register</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 默认的用户名和密码（该用户不存在且非法）</span></span><br><span class="line">    userid = <span class="string">''</span></span><br><span class="line">    password = <span class="string">''</span></span><br><span class="line">    phone = <span class="string">''</span></span><br><span class="line">    email = <span class="string">''</span></span><br><span class="line">    company = <span class="string">''</span></span><br><span class="line">    <span class="comment"># 判断传入的参数是否为空，并取出前端传来的参数</span></span><br><span class="line">    data = request.get_data()</span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># 将bytes类型转化为字典。对应的，前端发过来的内容应该是JSON.stringify(一个对象)</span></span><br><span class="line">        data = json.loads(data)  <span class="comment"># 转化为字典对象</span></span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">        userid = data.get(<span class="string">'userid'</span>)</span><br><span class="line">        password = data.get(<span class="string">'password'</span>)</span><br><span class="line">        phone = data.get(<span class="string">'phone'</span>)</span><br><span class="line">        email = data.get(<span class="string">'email'</span>)</span><br><span class="line">        company = data.get(<span class="string">'company'</span>)</span><br><span class="line">    <span class="comment"># 判断参数是否非法。若非法则直接判断出注册失败，若合法则尝试注册，再根据数据库操作结果判断。</span></span><br><span class="line">    <span class="keyword">if</span> len(userid) &gt; <span class="number">0</span> <span class="keyword">and</span> len(password) &gt; <span class="number">0</span> <span class="keyword">and</span> len(phone) &gt; <span class="number">0</span> <span class="keyword">and</span> len(email) &gt; <span class="number">0</span> <span class="keyword">and</span> len(password) &gt; <span class="number">0</span>:</span><br><span class="line">        return_dict = &#123;<span class="string">'success'</span>: insert_user(userid=userid, password=password, phone=phone,</span><br><span class="line">                                              email=email, company=company)&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return_dict = &#123;<span class="string">'success'</span>: <span class="keyword">False</span>&#125;</span><br><span class="line">    <span class="comment"># 返回结果（结果暂时简单点，只返回成功或失败）</span></span><br><span class="line">    <span class="keyword">return</span> json.dumps(return_dict)  <span class="comment"># 字典转json</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># on_login，提供给前端的登录接口</span></span><br><span class="line"><span class="meta">@app.route("/api/login", methods=['GET'])  # 路由，响应GET请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 默认的用户名和密码（数据库中不存在该用户）</span></span><br><span class="line">    userid = <span class="string">''</span></span><br><span class="line">    password = <span class="string">''</span></span><br><span class="line">    <span class="comment"># 判断传入的参数是否为空，获取前端传来的参数</span></span><br><span class="line">    <span class="keyword">if</span> request.args <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        print(request.args)</span><br><span class="line">        data = request.args.to_dict()</span><br><span class="line">        userid = data.get(<span class="string">'userid'</span>)</span><br><span class="line">        password = data.get(<span class="string">'password'</span>)</span><br><span class="line">    <span class="comment"># 查询数据库</span></span><br><span class="line">    result = select_user(userid=userid, password=password)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        print(<span class="string">'user where userid="%s and password="%s" login!!'</span> % (userid, password))</span><br><span class="line">    <span class="comment"># 返回登录结果（暂时简单一点，成功或失败）</span></span><br><span class="line">    return_dict = &#123;<span class="string">'success'</span>: result&#125;</span><br><span class="line">    <span class="keyword">return</span> json.dumps(return_dict)  <span class="comment"># 字典转json</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 运行app</span></span><br><span class="line">    app.run()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 程序结束时释放数据库资源</span></span><br><span class="line">    cursor.close()</span><br><span class="line">    db.close()  <span class="comment"># 关闭连接</span></span><br></pre></td></tr></table></figure><p><strong>值得注意的是</strong>，这里的两个接口分别响应POST请求和GET请求。</p><p>可以发现，两个接口获取前端传过来的参数的方式是不同的：</p><ul><li><p>GET</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = request.args.to_dict()  <span class="comment"># 需from flask import request</span></span><br></pre></td></tr></table></figure><p>  这样拿到的data是一个python的字典对象</p></li><li><p>POST</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = request.get_data()  <span class="comment"># 需from flask import request</span></span><br><span class="line">data = json.loads(data)  <span class="comment"># 转化为字典对象。需import json</span></span><br></pre></td></tr></table></figure><p>  这两行代码才拿到一个python的字典对象</p></li></ul><p><strong>接口获取前端传过来的参数的方式与其响应的请求类型（如POST、GET、POST和GET）是对应的。</strong></p><p>对应地，前端发过来的参数类型也需要和后端进行匹配。</p><h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><p>这里给出前端处理用户登录和注册请求的函数。</p><ul><li><p>login</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">"http://127.0.0.1:5000/api/login"</span>;</span><br><span class="line">    <span class="keyword">var</span> userid = <span class="built_in">document</span>.getElementById(<span class="string">"userid"</span>);</span><br><span class="line">    <span class="keyword">var</span> password = <span class="built_in">document</span>.getElementById(<span class="string">"password"</span>);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: url,</span><br><span class="line">        type: <span class="string">"GET"</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            userid: userid.value,</span><br><span class="line">            password: password.value,</span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data1 = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">            <span class="comment">// console.log(data1);</span></span><br><span class="line">            <span class="keyword">if</span> (data1.success) &#123;</span><br><span class="line">                <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">"userid"</span>, userid.value);</span><br><span class="line">                alert(<span class="string">"登录成功！进入主页面！"</span>);</span><br><span class="line">                <span class="built_in">window</span>.location.href = <span class="string">'index.html'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">"登录失败！请输入正确的账号和密码！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (textStatus === <span class="string">'timeout'</span>) &#123;</span><br><span class="line">                alert(<span class="string">'请求超时，请重试！'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>register</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> password1 = <span class="built_in">document</span>.getElementById(<span class="string">"password1"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> password2 = <span class="built_in">document</span>.getElementById(<span class="string">"password2"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> userid = <span class="built_in">document</span>.getElementById(<span class="string">"userid"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> phone = <span class="built_in">document</span>.getElementById(<span class="string">"phone"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> company = <span class="built_in">document</span>.getElementById(<span class="string">"company"</span>).value;</span><br><span class="line">    <span class="keyword">if</span> (password1 !== password2) &#123;</span><br><span class="line">        alert(<span class="string">"两次输入的密码不相同,请重新输入！"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">"http://127.0.0.1:5000/api/register"</span>,</span><br><span class="line">        type: <span class="string">"POST"</span>,</span><br><span class="line">        <span class="comment">// 转成json</span></span><br><span class="line">        data: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            userid: userid,</span><br><span class="line">            password: password1,</span><br><span class="line">            phone: phone,</span><br><span class="line">            email: email,</span><br><span class="line">            company: company</span><br><span class="line">        &#125;),</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data1 = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">            <span class="keyword">if</span> (data1.success) &#123;</span><br><span class="line">                alert(<span class="string">"注册成功，请登录！"</span>);</span><br><span class="line">                <span class="built_in">window</span>.location.href = <span class="string">'login.html'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">"注册失败，请检查您输入的信息是否正确！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (textStatus === <span class="string">'timeout'</span>) &#123;</span><br><span class="line">                alert(<span class="string">"请求超时！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>可以注意到，用ajax发送GET请求和PSOT请求时，我发的数据类型是不一样的。</strong></p><ul><li><p>login是GET请求，发送了json字符串</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JSON.stringify(&#123;</span><br><span class="line">    userid: userid,</span><br><span class="line">    password: password1,</span><br><span class="line">    phone: phone,</span><br><span class="line">    email: email,</span><br><span class="line">    company: company</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>register是POST请求，发送了javascript的类的对象</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    userid: userid.value,</span><br><span class="line">    password: password.value,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>至此，本文对这次作业中后端搭建的介绍就结束了。</p><p>这次作业算是我第一次写后端，也是我第一次接触Flask，如果我有写错的地方，请在评论区指正！</p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这次作业不仅需要我&lt;a href=&quot;https://www.cnblogs.com/chouxianyu/p/12634881.html&quot; 
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="python" scheme="https://chouxianyu.github.io/tags/python/"/>
    
      <category term="mysql" scheme="https://chouxianyu.github.io/tags/mysql/"/>
    
      <category term="Flask" scheme="https://chouxianyu.github.io/tags/Flask/"/>
    
      <category term="Web" scheme="https://chouxianyu.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>作业过程及其问题的记录：mysql建立数据库、建表、查询和插入等</title>
    <link href="https://chouxianyu.github.io/2020/04/04/%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A%E8%BF%87%E7%A8%8B%E5%8F%8A%E5%85%B6%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95%EF%BC%9Amysql%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%81%E5%BB%BA%E8%A1%A8%E3%80%81%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%8F%92%E5%85%A5%E7%AD%89/"/>
    <id>https://chouxianyu.github.io/2020/04/04/一次作业过程及其问题的记录：mysql建立数据库、建表、查询和插入等/</id>
    <published>2020-04-04T14:42:24.000Z</published>
    <updated>2020-07-13T07:14:22.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次的作业需要我建立一个小的数据库。</p><p>这次作业我使用了mysql，进行了建库、建表、查询、插入等操作。</p><p>本文是对本次作业相关的mysql操作过程及过程中出现的问题的记录。</p><p><a href="https://www.cnblogs.com/chouxianyu/p/12636231.html" target="_blank" rel="noopener">另一篇文章(详情请点击)</a>介绍了如何使用pymysql连接该数据库并使用Flask搭建后端接口，响应前端的GET和POST请求。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>作业中对数据库的要求是：</p><ul><li>建立一个用户信息表，其包括用户名、密码、手机号、邮箱和手机号等属性，并向其中插入几条测试数据。</li></ul><h2 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h2><p>因为挺久没用数据库，就先测试下自己之前装的mysql还能不能用，于是打开CMD运行如下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql</span><br></pre></td></tr></table></figure><p>出现如下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1045 (28000): Access denied for user 'ODBC'@'localhost' (using password: NO)</span><br></pre></td></tr></table></figure><p>看起来是因为没输密码</p><p>所以输入密码，运行如下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><ul><li><code>-u</code>参数是指username、user之类的，即用户名，我的用户名是<code>root</code>；</li><li><code>-p</code>参数是指password，运行下面这条指令后，会要求输入密码，输入正确密码即成功登录。</li></ul><p>我的mysql环境还可以，直接登录成功。</p><h2 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h2><p>执行如下指令，创建名为shopdata的数据库，会得到<code>Query OK, 1 row affected (x.xx sec)</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database shopdata;</span><br></pre></td></tr></table></figure><h2 id="进入-选择数据库"><a href="#进入-选择数据库" class="headerlink" title="进入/选择数据库"></a>进入/选择数据库</h2><p>执行如下指令后，会看到<code>Database changed</code>的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use shopdata;</span><br></pre></td></tr></table></figure><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>执行如下指令，创建名为userinfo的表。</p><p>我这里对userinfo的定义是：</p><ul><li><p>主键是用户名userid</p></li><li><p>password是非NULL的</p></li><li><p>phone和email是unique的</p></li><li><p>这5个属性的类型都是varchar(15)</p><p>  最长15，对于email来说不太够用</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table userinfo (</span><br><span class="line">    &apos;userid&apos; varchar(15) primary key,</span><br><span class="line">    &apos;password&apos; varchar(15) not null,</span><br><span class="line">    &apos;company&apos; varchar(15),</span><br><span class="line">    &apos;phone&apos; varchar(15) unique,</span><br><span class="line">    &apos;email&apos; varchar(15) unique</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>执行上边这条命令后，得到了一个错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''userid' varchar(15) primary key,</span><br><span class="line">    'password' varchar(15) not null,</span><br><span class="line">    'comp' at line 2</span><br></pre></td></tr></table></figure><p>经查询，发现属性名应该用反引号<strong>`</strong>而不是单引号<strong>‘</strong>，所以将单引号改成反引号，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table userinfo (</span><br><span class="line">    `userid` varchar(15) primary key,</span><br><span class="line">    `password` varchar(15) not null,</span><br><span class="line">    `company` varchar(15),</span><br><span class="line">    `phone` varchar(15) unique,</span><br><span class="line">    `email` varchar(15) unique</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这条命令执行成功，得到<code>Query OK, 0 rows affected (x.xx sec)</code>。</p><h2 id="查看userinfo表"><a href="#查看userinfo表" class="headerlink" title="查看userinfo表"></a>查看userinfo表</h2><p>执行如下命令，查看userinfo表的结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">describe userinfo;</span><br></pre></td></tr></table></figure><p>执行后，得到如下结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| userid   | varchar(15) | NO   | PRI | NULL    |       |</span><br><span class="line">| password | varchar(15) | NO   |     | NULL    |       |</span><br><span class="line">| company  | varchar(15) | YES  |     | NULL    |       |</span><br><span class="line">| phone    | varchar(15) | YES  | UNI | NULL    |       |</span><br><span class="line">| email    | varchar(15) | YES  | UNI | NULL    |       |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">5 rows in set (0.57 sec)</span><br></pre></td></tr></table></figure><h2 id="插入3条数据"><a href="#插入3条数据" class="headerlink" title="插入3条数据"></a>插入3条数据</h2><p>执行如下命令，插入3条数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into userinfo values</span><br><span class="line">(&apos;user1&apos;,&apos;0000&apos;,&apos;zstu&apos;,&apos;13777860000&apos;,&apos;7746@qq.com&apos;),</span><br><span class="line">(&apos;user2&apos;,&apos;0000&apos;,&apos;zstu&apos;,&apos;13777860001&apos;,&apos;7747@qq.com&apos;),</span><br><span class="line">(&apos;user3&apos;,&apos;0000&apos;,&apos;zstu&apos;,&apos;13777860002&apos;,&apos;7748@qq.com&apos;);</span><br></pre></td></tr></table></figure><p>执行后，得到如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Query OK, 3 rows affected (0.11 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>执行如下语句，查询所有元组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from userinfo;</span><br></pre></td></tr></table></figure><p>执行后，得到如下结果（在我做好作业后、写这篇博客前，我已经插入了一些其他的数据，所以有9条记录）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+------------+----------+---------+-------------+--------------+</span><br><span class="line">| userid     | password | company | phone       | email        |</span><br><span class="line">+------------+----------+---------+-------------+--------------+</span><br><span class="line">| 111        | 111      | 111     | 111         | 111          |</span><br><span class="line">| 112        | 000      | 111     | 000         | 000          |</span><br><span class="line">| aa         | 111      | 11      | 11          | 11           |</span><br><span class="line">| test_1     | 00       | NULL    | NULL        | NULL         |</span><br><span class="line">| user_test2 | 0000     | NULL    | NULL        | NULL         |</span><br><span class="line">| user1      | 0000     | zstu    | 13777860000 | 7746@qq.com  |</span><br><span class="line">| user2      | 0000     | zstu    | 13777860001 | 7747@qq.com  |</span><br><span class="line">| user3      | 0000     | zstu    | 13777860002 | 7748@qq.com  |</span><br><span class="line">| 232222     | 0000     | 城站    | 12306       | 12306@qq.com |</span><br><span class="line">+------------+----------+---------+-------------+--------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这次的作业需要我建立一个小的数据库。&lt;/p&gt;
&lt;p&gt;这次作业我使用了mysql，进行了建库、建表、查询、插入等操作。&lt;/p&gt;
&lt;p&gt;本文是对
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="mysql" scheme="https://chouxianyu.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>关于Python的TypeError not all arguments converted during string formatting</title>
    <link href="https://chouxianyu.github.io/2020/04/04/%E5%85%B3%E4%BA%8EPython%E7%9A%84TypeError-not-all-arguments-converted-during-string-formatting/"/>
    <id>https://chouxianyu.github.io/2020/04/04/关于Python的TypeError-not-all-arguments-converted-during-string-formatting/</id>
    <published>2020-04-04T02:38:36.000Z</published>
    <updated>2020-04-04T02:54:45.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在把yolov3的cfg文件转换为model_defs时，我忘记把str类型转换成int了，导致了一个错误，在此记录下来。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><img src="https://images.cnblogs.com/cnblogs_com/chouxianyu/1511971/o_200404025426image-20200404104353866.png" alt="image-20200404104353866"></p><p>如上图所示，<code>&#39;32&#39;%2</code>就是错误发生的地方。</p><p>我以为我拿到的是一个int类型的<code>32</code>，想判断它是偶数还是奇数。</p><p>实际上我拿到的是一个str类型的<code>&#39;32&#39;</code>，这时python的解释器并没有把<code>%</code>理解成取余，而是理解成了这种东西。</p><p>我不知道“这种东西”的定义，但知道其用法和语法，其语法是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'cxy'</span></span><br><span class="line">print(<span class="string">'%s is handsome!'</span> % name)</span><br></pre></td></tr></table></figure><p>也就是说，解释器把<code>%</code>理解成了上面代码中print语句中的第二个<code>%</code>，因此出现了这个TypeError。</p><p>关于该<code>TypeError</code>，也有其他的原因，如<a href="https://blog.csdn.net/lvsehaiyang1993/article/details/80909984" target="_blank" rel="noopener">https://blog.csdn.net/lvsehaiyang1993/article/details/80909984</a>。</p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在把yolov3的cfg文件转换为model_defs时，我忘记把str类型转换成int了，导致了一个错误，在此记录下来。&lt;/p&gt;
&lt;h1 
      
    
    </summary>
    
    
      <category term="Bug" scheme="https://chouxianyu.github.io/tags/Bug/"/>
    
      <category term="python" scheme="https://chouxianyu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>解决GPU显存未释放问题</title>
    <link href="https://chouxianyu.github.io/2020/04/04/%E8%A7%A3%E5%86%B3GPU%E6%98%BE%E5%AD%98%E6%9C%AA%E9%87%8A%E6%94%BE%E9%97%AE%E9%A2%98/"/>
    <id>https://chouxianyu.github.io/2020/04/04/解决GPU显存未释放问题/</id>
    <published>2020-04-04T00:02:21.000Z</published>
    <updated>2020-04-04T02:34:55.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今早我想用多块GPU测试模型，于是就用了PyTorch里的<code>torch.nn.parallel.DistributedDataParallel</code>来支持用多块GPU的同时使用（下面简称其为<strong>Dist</strong>）。</p><p>程序运行时，由于程序中其他部分的代码（与Dist无关的代码）出现了错误，导致程序退出。这次使用Dist时没有考虑和处理这种程序崩溃的情况，因此在程序退出前没有用Dist关闭生成的所有进程，最终导致本次进程运行后GPU显存未释放（经观察，发现是由于没有用Dist关闭所有进程，导致程序运行后还有一部分进程在运行）。</p><p>下面介绍这次我解决该问题的过程。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="MVE"><a href="#MVE" class="headerlink" title="MVE"></a>MVE</h2><p>Minimal Verifiable Examples，关于本问题的程序代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.distributed <span class="keyword">as</span> dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些代码：定义model等</span></span><br><span class="line">some code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化并行训练</span></span><br><span class="line">dist.init_process_group(xxxx)  <span class="comment"># 函数参数省略</span></span><br><span class="line">model = torch.nn.parallel.DistributedDataParallel(model, find_unused_parameters=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些代码：训练、测试模型等</span></span><br><span class="line">some code  <span class="comment"># 我的程序在这个部分出错且程序直接退出，导致下面的关闭进程的代码没有运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭所有进程</span></span><br><span class="line">dist.destroy_process_group()</span><br></pre></td></tr></table></figure><h2 id="问题的出现"><a href="#问题的出现" class="headerlink" title="问题的出现"></a>问题的出现</h2><p>如下图所示，程序退出后，并没有进程在使用0号GPU，但0号GPU的显存却被占用。原因是程序退出前没有用Dist关闭所有进程，一部分进程还在运行，这些进程占用0号GPU的显存。</p><p>占用7号GPU的进程是我的另外一个进程，与本文讨论的问题无关。</p><p><img src="https://images.cnblogs.com/cnblogs_com/chouxianyu/1511971/o_200404000440image-20200404070619631.png" alt="image-20200404070619631"></p><h2 id="定位占用GPU显存的PID"><a href="#定位占用GPU显存的PID" class="headerlink" title="定位占用GPU显存的PID"></a>定位占用GPU显存的PID</h2><p>执行下面的指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuser -v /dev/nvidia*</span><br></pre></td></tr></table></figure><p>该命令执行后得到下图所示的结果，可以看到是PID为285448的进程占用了0号GPU。</p><p>下面的图中忘记打了马赛克，后来用黑色遮挡了一下信息，所以USER这一列是看起来是空的。</p><p><img src="https://images.cnblogs.com/cnblogs_com/chouxianyu/1511971/o_200404000522image-20200404070704618.png" alt="image-20200404070704618"></p><p>执行下面这条命令，查看该进程的信息，可以发现该进程的PPID（其父进程的PID）是1，说明该进程不是我占用7号GPU的进程生成的，并且现在只有它在使用0号GPU。可以推断出这个进程是因为程序运行错误导致其没有被关闭，因此可以手动关闭该进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -f -p 285448</span><br></pre></td></tr></table></figure><p>下面的图中忘记打了马赛克，后来用黑色遮挡了一下信息，所以图中的路径不是很清晰。</p><p><img src="https://images.cnblogs.com/cnblogs_com/chouxianyu/1511971/o_200404000606image-20200404070805983.png" alt="image-20200404070805983"></p><p>先后执行下面这两条命令，杀掉该进程，再查看GPU情况，可以看到0号GPU的显存已经被释放，现在的GPU显存占用情况是正常的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill -9 2885448</span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p><img src="https://images.cnblogs.com/cnblogs_com/chouxianyu/1511971/o_200404000642image-20200404070901921.png" alt="image-20200404070901921"></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今早我想用多块GPU测试模型，于是就用了PyTorch里的&lt;code&gt;torch.nn.parallel.DistributedDataPa
      
    
    </summary>
    
    
      <category term="Bug" scheme="https://chouxianyu.github.io/tags/Bug/"/>
    
      <category term="PyTorch" scheme="https://chouxianyu.github.io/tags/PyTorch/"/>
    
      <category term="linux" scheme="https://chouxianyu.github.io/tags/linux/"/>
    
      <category term="GPU" scheme="https://chouxianyu.github.io/tags/GPU/"/>
    
  </entry>
  
  <entry>
    <title>HostwindsVPS购买、支付宝支付相关</title>
    <link href="https://chouxianyu.github.io/2020/04/03/HostwindsVPS%E8%B4%AD%E4%B9%B0%E3%80%81%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E7%9B%B8%E5%85%B3/"/>
    <id>https://chouxianyu.github.io/2020/04/03/HostwindsVPS购买、支付宝支付相关/</id>
    <published>2020-04-03T03:09:06.000Z</published>
    <updated>2020-04-03T03:22:43.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我前几天买了<a href="https://www.hostwinds.com/" target="_blank" rel="noopener">Hostwinds</a>的VPS，当时买的时候支付宝支付就出了问题，最近这两天用支付宝支付又出了问题。</p><p>所以想记录一下Hostwinds支付宝支付的相关问题及解决方法，顺便也记录一下关于Hostwinds VPS的更多内容。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="支付宝支付"><a href="#支付宝支付" class="headerlink" title="支付宝支付"></a>支付宝支付</h2><ul><li><p>我在第一次用支付宝支付（购买VPS）时的操作没有错误，但没有支付成功，最后发现原因是<strong>支付宝余额不足</strong>…暴露出自己的贫穷</p><ul><li><p>解决方法：支付宝充钱就行，然后再支付</p></li><li><p>当时是看了这篇文章才知道的</p><p>  <a href="https://www.vps234.com/usa-vps-hostwinds-alipay-paid-failed/" target="_blank" rel="noopener">https://www.vps234.com/usa-vps-hostwinds-alipay-paid-failed/</a></p><p>  这个网站中还是有很多关于VPS的知识的，挺好用的</p></li></ul></li><li><p>正常情况下，如果开通了支付宝自动支付，那之后每个月（其实是我们选择的付费周期，我选的是每月）到时间的话会自动支付，如果余额够，一般不会出问题的。</p></li><li><p>我们选了付费周期之后，比如说是按月付费，3月2日、4月2日……，这里的日期其实是最后期限（Due Date），我们是可以<strong>提前付款</strong>的</p><ul><li>在每一个付费周期内，大概中间的那天（比如3月19日）会生成Invoice（中文是发票、费用清单），订单生成后你就可以付费了。</li><li>这是后来和客服交流时才发现的，问客服之前我以为只能在3月2日、4月2日付费。</li></ul></li><li><p>这两天又遇到支付宝无法支付的问题，我的支付宝里是有钱的，暂时不知道真正原因（可能是由于我提前支付了）。</p><ul><li>然后我去问客服，客服说<strong>现在不要用支付宝的自动支付，而是手动支付</strong>，具体来说就是<strong>用Account Credits支付</strong>，在这个情景中的意思是存入金额，就像充Q币一样，然后用你充值后账号里的钱去支付。</li><li>很奇怪的是，充Account Credits时我也是用支付宝支付哈哈，这不是套娃了吗？<ul><li>虽然套娃了，但我用支付宝充值成功了，然后用Account Credits支付了这个无法用支付宝自动支付的Invoice。</li></ul></li></ul></li><li><p>Hostwinds中的<strong>支付宝不支持二次支付（Recurring Agreement），Alipay is unsupported for recurring payments</strong>，这是客服说的</p><ul><li><p>We do not support recurring Alipay payments. All invoices through Alipay must be manually processed each billing cycle.</p></li><li><p>这一点似乎可以比较合理地解释上一个事情</p><p>  不确定是什么原因（估计是因为我提前支付了）一个订单在用我的支付宝自动支付时出了问题。当我发现自动支付失败时，再去用支付宝支付，这就是二次支付了，客服说不支持。</p></li></ul></li><li><p>当账户里有余额，也开通了支付宝的自动付费的话。每个付费周期的付费会先使用账户里的余额。</p></li></ul><p><strong>总结来说，使用支付宝支付时注意以下几点</strong></p><ul><li>确保支付宝里余额充足</li><li>Hostwinds网站里显示的付费日期是最后期限（Due Date），可以在订单（Invoice）生成后手动支付</li><li>如果支付宝自动支付时付费失败，可以手动充值，然后用账户余额付费</li><li>当账户里有余额，也开通了支付宝的自动付费的话。每个付费周期的付费会先使用账户里的余额。</li></ul><h2 id="客服"><a href="#客服" class="headerlink" title="客服"></a>客服</h2><ul><li>Hostwinds的客服似乎是24小时在线的。我个人觉得客服质量和态度还不错，每次去问问题都会有人给我比较及时的回复。</li><li>如果我问的问题比较简单，客服会直接回答我；如果是稍难一点的问题，客服会Open一个Ticket，让对应部门的人解决我的问题</li></ul><h2 id="ISP-Block"><a href="#ISP-Block" class="headerlink" title="ISP Block"></a>ISP Block</h2><ul><li><p>客服说要想解决这个问题只能通过’Fix IP Block’，会给我们换一个IP</p><p>  出现ISP Block问题主要还是由于自己的操作不当</p></li><li><p>我刚开始使用<a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">SS</a>时，VPS的IP和端口经常被封</p></li><li><p>后来经<a href="https://www.cnblogs.com/roadwide/" target="_blank" rel="noopener">@roadwide</a>推荐，使用了<a href="https://github.com/2dust/v2rayN" target="_blank" rel="noopener">v2RayN</a>，IP和端口就没有被封过</p></li></ul><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我前几天买了&lt;a href=&quot;https://www.hostwinds.com/&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
    
      <category term="Hostwinds" scheme="https://chouxianyu.github.io/tags/Hostwinds/"/>
    
      <category term="VPS" scheme="https://chouxianyu.github.io/tags/VPS/"/>
    
      <category term="支付宝" scheme="https://chouxianyu.github.io/tags/%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    
      <category term="ISP Block" scheme="https://chouxianyu.github.io/tags/ISP-Block/"/>
    
      <category term="v2rayN" scheme="https://chouxianyu.github.io/tags/v2rayN/"/>
    
      <category term="shadowsocks" scheme="https://chouxianyu.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>TensorBoard中HISTOGRAMS和DISTRIBUTIONS图形的含义</title>
    <link href="https://chouxianyu.github.io/2020/04/02/TensorBoard%E4%B8%ADHISTOGRAMS%E5%92%8CDISTRIBUTIONS%E5%9B%BE%E5%BD%A2%E7%9A%84%E5%90%AB%E4%B9%89/"/>
    <id>https://chouxianyu.github.io/2020/04/02/TensorBoard中HISTOGRAMS和DISTRIBUTIONS图形的含义/</id>
    <published>2020-04-02T12:50:25.000Z</published>
    <updated>2020-04-02T13:13:19.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前我都是用TensorBoard记录训练过程中的Loss、mAP等标量，很容易就知道TensorBoard里的SCALARS（标量）图是怎么看的（其中横纵轴的含义、Smoothing等）。</p><p>最近在尝试模型压缩，其中的一个步骤是对模型进行稀疏训练。</p><p>稀疏训练时需要记录模型中BN层的Gamma值的<strong>分布情况</strong>（取哪些值，这些值出现的次数/频度），这时用TensorBoard里的SCALARS之类的图就不合适了，而是应该用TensorBoard里的<strong>HISTOGRAMS</strong>（直方图）和<strong>DISTRIBUTIONS</strong>（暂未找到合适的译文）。</p><p>所以我昨天学习、了解了一点HISTOGRAMS和DISTRIBUTIONS，今天做了一部分简单记录，具体见下文。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>HISTOGRAMS和DISTRIBUTIONS这两种图的数据源是相同的，只是从不同的视角、以不同的方式来表示数据的分布情况。</p><p>下面先介绍HISTOGRAMS，再介绍DISTRIBUTIONS。</p><h2 id="HISTOGRAMS"><a href="#HISTOGRAMS" class="headerlink" title="HISTOGRAMS"></a>HISTOGRAMS</h2><p><img src="https://images.cnblogs.com/cnblogs_com/chouxianyu/1511971/o_200402115112HISTOGRAMS.jpg" alt="HISTOGRAMS"></p><p>上图是TensorBoard生成的一个直方图（OFFEST模式），下面介绍图中几个元素的含义。</p><ul><li><strong>数据源</strong><ul><li>数据源是<strong>多</strong>个<strong>一维数组</strong><ul><li>也在别处看到有人说可以是多维数组，但会被压缩成一维数组，有兴趣的小伙伴可以具体研究一下</li><li>如果你只有1个数组，也是可以的</li></ul></li></ul></li><li><strong>当鼠标放在图上时出现的一条黑线和数字</strong><ul><li>鼠标放在图上出现的一条黑线，就对应数据源里的<strong>一个一维数组</strong></li><li>上图中显示的黑线对应我的第41个数组的所有元素（index为40，因为index从0开始计数的）的取值的分布情况</li></ul></li><li><strong>图下方的横轴</strong><ul><li>横轴的值和数组内元素的取值对应</li></ul></li><li><strong>图右方的纵轴</strong><ul><li>纵轴的值对应着是哪一个数组，或者说对应了数组的id、index（上边提到的40）</li></ul></li><li><strong>颜色</strong><ul><li>可以看到上图中的颜色是渐变的，靠上（id小）的颜色深，靠下（id大）的颜色浅</li></ul></li><li>上面的用词比较“学术化”，如果看不懂，就看下边的这个解释吧<ul><li>我的数据有99个数组，index从0到98，但右侧的纵轴值只标到了90</li><li>数组元素的分布范围是横轴上的数字，可以看出我的每个数组中的元素的取值大约集中在0到0.2，超过1.5的元素很少</li><li>我的第40个数组（说法不严谨，准确地说是id为40）中大约有505个元素的值为0.536左右</li></ul></li><li>如果还是不懂的话，建议先去看看直方图是什么</li></ul><h2 id="DISTRIBUTIONS"><a href="#DISTRIBUTIONS" class="headerlink" title="DISTRIBUTIONS"></a>DISTRIBUTIONS</h2><p><img src="https://images.cnblogs.com/cnblogs_com/chouxianyu/1511971/o_200402115157DISTRIBUTIONS.jpg" alt="DISTRIBUTIONS"></p><p>把HISTOGRAMS搞懂后，这个图就很好懂的，因为这个图的数据源和HISTOGRAMS一样。</p><ul><li><strong>横轴</strong><ul><li>横轴是对应哪个数组</li></ul></li><li><strong>纵轴</strong><ul><li>数组中元素的取值</li></ul></li><li><strong>颜色</strong><ul><li>颜色深代表对应值出现的频数高</li></ul></li><li>如上图，我的99个数组从0到98，数组中元素的取值慢慢地趋近于0</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><h2 id="剪枝Github"><a href="#剪枝Github" class="headerlink" title="剪枝Github"></a>剪枝Github</h2><p><a href="https://github.com/tanluren/yolov3-channel-and-layer-pruning" target="_blank" rel="noopener">https://github.com/tanluren/yolov3-channel-and-layer-pruning</a></p><h2 id="HISTOGRAMS和DISTRIBUTIONS"><a href="#HISTOGRAMS和DISTRIBUTIONS" class="headerlink" title="HISTOGRAMS和DISTRIBUTIONS"></a>HISTOGRAMS和DISTRIBUTIONS</h2><p><a href="https://www.cnblogs.com/rainydayfmb/p/7944224.html" target="_blank" rel="noopener">https://www.cnblogs.com/rainydayfmb/p/7944224.html</a></p><p><a href="https://vimsky.com/article/3645.html" target="_blank" rel="noopener">https://vimsky.com/article/3645.html</a></p><p><a href="https://www.jianshu.com/p/8fdc43e48c86" target="_blank" rel="noopener">https://www.jianshu.com/p/8fdc43e48c86</a></p><p><a href="https://blog.csdn.net/wgj99991111/article/details/84708255" target="_blank" rel="noopener">https://blog.csdn.net/wgj99991111/article/details/84708255</a></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前我都是用TensorBoard记录训练过程中的Loss、mAP等标量，很容易就知道TensorBoard里的SCALARS（标量）图是怎
      
    
    </summary>
    
    
      <category term="深度学习" scheme="https://chouxianyu.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="TensorBoard" scheme="https://chouxianyu.github.io/tags/TensorBoard/"/>
    
  </entry>
  
</feed>
