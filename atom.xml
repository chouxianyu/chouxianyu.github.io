<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>臭咸鱼的缺氧瓶</title>
  
  <subtitle>快给我氧气！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chouxianyu.github.io/"/>
  <updated>2020-03-26T04:51:45.156Z</updated>
  <id>https://chouxianyu.github.io/</id>
  
  <author>
    <name>臭咸鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PyTorch余弦学习率衰减</title>
    <link href="https://chouxianyu.github.io/2020/03/26/PyTorch%E4%BD%99%E5%BC%A6%E5%AD%A6%E4%B9%A0%E7%8E%87%E8%A1%B0%E5%87%8F/"/>
    <id>https://chouxianyu.github.io/2020/03/26/PyTorch余弦学习率衰减/</id>
    <published>2020-03-26T04:45:13.000Z</published>
    <updated>2020-03-26T04:51:45.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天用到了PyTorch里的CosineAnnealingLR，也就是用余弦函数进行学习率的衰减。</p><p>下面讲讲定义CosineAnnealingLR这个类的对象时输入的几个参数是什么，代码示例就不放了。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max, eta_min=<span class="number">0</span>, last_epoch=<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><ul><li><p><code>optimizer</code></p><p>  需要进行学习率衰减的优化器变量</p></li><li><p><code>T_max</code></p><p>  Cosine是个周期函数嘛，这里的<code>T_max</code>就是这个周期的一半</p><p>  如果你将<code>T_max</code>设置为10，则学习率衰减的周期是20个epoch，其中前10个epoch从学习率的初值（也是最大值）下降到最低值，后10个epoch从学习率的最低值上升到最大值</p></li><li><p><code>eta_min</code></p><p>  学习率衰减时的最小值，默认值为0</p></li><li><p><code>last_epoch</code></p><p>  （上次训练）最后一个epoch的索引值，默认值为-1。</p><p>  我没有测试，猜测是：如果你将其设置为20，那定义出来的scheduler的第一次step就会到第21个epoch对应的学习率。</p></li></ul><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>我的参数是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># optimizer学习率初值为0.0005，100个epoch，从第1个epoch（索引为0）开始训练</span></span><br><span class="line">scheduler = lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="number">10</span>, eta_min=<span class="number">5e-6</span>)</span><br></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://images.cnblogs.com/cnblogs_com/chouxianyu/1511971/o_200326042806CosineAnnealingLR.png" alt="CosineAnnealingLR"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://pytorch.org/docs/stable/optim.html?highlight=cosine#torch.optim.lr_scheduler.CosineAnnealingLR" target="_blank" rel="noopener">https://pytorch.org/docs/stable/optim.html?highlight=cosine#torch.optim.lr_scheduler.CosineAnnealingLR</a></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天用到了PyTorch里的CosineAnnealingLR，也就是用余弦函数进行学习率的衰减。&lt;/p&gt;
&lt;p&gt;下面讲讲定义CosineA
      
    
    </summary>
    
    
      <category term="PyTorch" scheme="https://chouxianyu.github.io/tags/PyTorch/"/>
    
      <category term="深度学习" scheme="https://chouxianyu.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>查看pip缓存路径</title>
    <link href="https://chouxianyu.github.io/2020/03/25/%E6%9F%A5%E7%9C%8Bpip%E7%BC%93%E5%AD%98%E8%B7%AF%E5%BE%84/"/>
    <id>https://chouxianyu.github.io/2020/03/25/查看pip缓存路径/</id>
    <published>2020-03-25T12:37:14.000Z</published>
    <updated>2020-03-25T12:53:52.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们在安装python第三方库时，经常遇到下载速度慢的问题，即使换了源也不行。</p><p>好不容易下载到第三方库的文件（比如whl）后，我们可以把这些文件（比如whl）保存下来，然后可以发给同学、队友（团队开发时环境最好一致），还可以方便自己之后的重新安装。</p><p>那<code>pip</code>安装python第三方库时的缓存路径在哪呢？</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>在安装一个库时，我注意到了<code>pip</code>的缓存路径，如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Cxy\AppData\Local\pip\cache</span><br></pre></td></tr></table></figure><p>其中<code>Cxy</code>是我电脑的用户名，在你自己的电脑上的话需要改成你自己的用户名（比如<code>Administrator</code>）</p><p>这个路径应该是<code>pip</code>的默认缓存路径，这个路径应该也是可以修改的，有兴趣的小伙伴可以研究一下。</p><p>该路径下有两个文件夹，一个是<code>http</code>，一个是<code>wheels</code>；还有一个文件<code>selfcheck.json</code>。</p><p>我没研究文件夹<code>http</code>和文件<code>selfcheck.json</code>是什么，有兴趣的小伙伴可以研究一下。</p><p>经过查看，发现文件夹<code>wheels</code>里面是<code>.whl</code>文件，不过这个文件夹里面的目录结构和命名我们一般看不懂，我没有具体研究，有兴趣的小伙伴可以研究一下。</p><p>为了找到我们想要的<code>.whl</code>文件，我们在<code>wheels</code>文件夹里直接搜索就好了，不需要第三方库的全名，只需要输入第三方库名称中的一些词就行了。</p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们在安装python第三方库时，经常遇到下载速度慢的问题，即使换了源也不行。&lt;/p&gt;
&lt;p&gt;好不容易下载到第三方库的文件（比如whl）后，
      
    
    </summary>
    
    
      <category term="python" scheme="https://chouxianyu.github.io/tags/python/"/>
    
      <category term="pip" scheme="https://chouxianyu.github.io/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>《算法笔记》阅读笔记</title>
    <link href="https://chouxianyu.github.io/2020/01/29/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>https://chouxianyu.github.io/2020/01/29/《算法笔记》阅读笔记/</id>
    <published>2020-01-29T05:46:25.000Z</published>
    <updated>2020-01-29T05:52:39.903Z</updated>
    
    <content type="html"><![CDATA[<p>这是之前刷PAT时看胡凡的《算法笔记》时做的一点笔记，后来没时间，就没看完。</p><p>emmm，刚开始看的内容都很基础。现在想想这样从头到尾地学确实没必要，可能当时的目标也和现在不一样吧。</p><h1 id="第一章-如何使用本书"><a href="#第一章-如何使用本书" class="headerlink" title="第一章 如何使用本书"></a>第一章 如何使用本书</h1><h2 id="在线评测系统"><a href="#在线评测系统" class="headerlink" title="在线评测系统"></a>在线评测系统</h2><p>PAT是“单点测试”。</p><h2 id="常见的评测结果"><a href="#常见的评测结果" class="headerlink" title="常见的评测结果"></a>常见的评测结果</h2><p>==整理常见的测评结果==</p><h1 id="第二章-C-C-快速入门"><a href="#第二章-C-C-快速入门" class="headerlink" title="第二章 C/C++快速入门"></a>第二章 C/C++快速入门</h1><p><code>cin</code>和<code>cout</code>消耗的时间比<code>scanf</code>和<code>printf</code>多得多，很多题目可能输入还没结束就超时了。……。请不要同时在一个程序中使用<code>cout</code>和<code>printf</code>，有时候会出问题。</p><p>头文件的<code>h</code>是<code>head</code>的缩写</p><p>C++向下兼容C</p><p>==整理一下向下兼容、向上兼容、向前、向后==</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p><code>int</code>：$-2^{31}\sim+(2^{31}-1)$，大致范围是$-2\times10^9\sim2\times10^9$，绝对值在$10^9$以内的整数都可以定义成<code>int</code>型。</p><p><code>long long</code>：$-2^{63}\sim+(2^{63}-1)$，大致范围是$-9\times10^{18}\sim9\times10^{18}$。</p><p>浮点型都用<code>double</code>来存储。</p><p>小写字母比大写字母的ASCII码大32。</p><p><code>\0</code>代表空字符NULL，其ASCII码为0，请注意<code>\0</code>不是空格。</p><p>整型常量在赋值给布尔型变量时会自动转换为<code>true</code>（非零）和<code>false</code>（零）。</p><p>宏定义是直接将对应的部分替换，然后才进行编译和运行。</p><h2 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h2><p>类似于<code>13:45:20</code>这种<code>hh:mm:ss</code>的时间需要输入，可以使用下边的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> hh,mm,ss;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d:%d:%d"</span>,&amp;hh,&amp;mm,&amp;ss);</span><br></pre></td></tr></table></figure><p><code>scanf</code>的双引号内的内容其实就是整个输入，只不过把数据换成它们对应的格式符并把变量的地址按次序写在后面而已。</p><p>除了<code>%c</code>以外（<code>scanf</code>的<code>%c</code>格式是可以读入空格和换行的），<code>scanf</code>对其他格式符（如<code>%d</code>）的输入是以空白符（即空格、Tab）为结束判断标志的，字符数组使用<code>%s</code>读入的时候以空格和换行为读入结束的标志。</p><p><code>double</code>输出格式为<code>%f</code>，输入格式为<code>%lf</code>。</p><p><code>%.mf</code>保留$m$位小数，这个“保留”使用的是精度的“四舍六入五成双”规则。</p><p><code>getchar</code>可以识别换行符。</p><h2 id="常用数学函数"><a href="#常用数学函数" class="headerlink" title="常用数学函数"></a>常用数学函数</h2><p><code>round</code>函数，四舍五入。</p><p>==整理常用数学函数==</p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>条件判断中<code>n!=0</code>可以改为<code>n</code>，<code>n==0</code>可以改为<code>!n</code>。</p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p><code>do...while</code>会先执行循环体一次，然后才去判断循环条件是否为真，这就使得<code>do...while</code>语句的实用性远不如<code>while</code>，因为用户碰到的大部分情况都需要能处理在某些数据下不允许进入循环的情况。</p><p>C语言中不允许随时定义临时变量，C++可以。</p><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><p>数组大小必须是整数常量，不可以是变量。</p><p>如果只初始化了一维数组的一部分元素，后面未被初始化的元素将会由不同编译器内部实现的不同而被赋以不同的初值，而一般情况默认初值为0。所以可以通过下面的代码实现整个数组赋初值0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><p>递推可以分为顺推和逆推两种。</p><p>冒泡排序的本质在于交换，即<strong>每次通过交换的方式把当前剩余元素的最大值移动到一端，当剩余元素数量减少为0时，排序结束</strong>。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义含5个元素的数组</span></span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡排序（从小到大）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;<span class="comment">//5-1趟</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i;++j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;<span class="comment">// 交换</span></span><br><span class="line">            <span class="keyword">int</span> temp=a[j];</span><br><span class="line">            a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">            a[j+<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出数组元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>可以把二维数组当作一维数组的每一个元素都是一个一维数组。</p><p>二维数组初始化（下面的代码中未被初始化的元素一般默认为0）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">6</span>]=&#123;&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">8</span>,<span class="number">4</span>&#125;,&#123;&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p>如果数组大小较大（大概$10^6$级别），则需要定义在主函数外边。原因是函数内部申请的局部变量来自系统栈，允许申请的空间较小。而函数外部申请的全局变量来自静态存储区，允许申请的空间较大。</p><h2 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h2><p>一般用函数<code>memset</code>和<code>fill</code>给数组中每一个元素赋相同的值。</p><p>使用<code>memset</code>需要使用头文件<code>string.h</code>，使用<code>fill</code>需要使用STL中的头文件<code>algorithm</code>。</p><p><code>memset</code>格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(数组名，值，<span class="keyword">sizeof</span>(数组名));</span><br></pre></td></tr></table></figure><p>只建议初学者使用<code>memset</code>赋0和-1，因为<code>memset</code>是按字节赋值，即对每个字节赋同样的值，0的二进制补码为全0，-1的二进制补码为全1，不容易弄错。如果要对数组赋其它值，请使用<code>fill</code>函数（但<code>memset</code>的执行速度快）。</p><h2 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h2><p>可以使用字符串对字符数组进行初始化，但也仅限于初始化。</p><p><code>%c</code>能够识别空格和换行并将其输入，%s`通过空格或换行来识别一个字符串的结束。</p><p><code>gets</code>识别换行符作为输入结束（并会将其读取走），因此<code>scanf</code>完一个整数后，如果要用<code>gets</code>，需要用<code>getchar</code>接受整数后的换行符。</p><p>一维字符数组的末尾都会有一个<code>\0</code>，表示字符串的结束。使用<code>gets</code>和<code>scanf</code>时会自动在字符串后边添加<code>\0</code>，<code>puts</code>和<code>printf</code>也通过识别<code>\0</code>作为字符串的结尾来输出字符串。</p><h2 id="string-h"><a href="#string-h" class="headerlink" title="string.h"></a>string.h</h2><ul><li><p><code>strlen(字符数组1)</code></p><p>  得到字符数组<code>\0</code>前边的字符数</p></li><li><p><code>strcmp(字符数组1,字符数组2)</code></p><p>  按照字典序比较两个字符串的大小，返回一个整数（负数，0，正数），符号和<code>字符串1-字符串2</code>相同。</p></li><li><p><code>strcpy(字符数组1，字符数组2)</code></p><p>  把字符串2（第二个参数）赋值给字符串1（第一个参数）</p></li><li><p><code>strcat(字符数组1,字符数组2)</code></p><p>  把字符数组2接到字符数组1后边</p></li><li><p><code>sscanf(字符数组,&quot;%d&quot;,&amp;n)</code></p><p>  从字符数组中读</p></li><li><p><code>sprintf(字符数组,&quot;%d&quot;,n)</code></p><p>  往字符数组中写</p></li></ul><h2 id="数组作为函数参数"><a href="#数组作为函数参数" class="headerlink" title="数组作为函数参数"></a>数组作为函数参数</h2><p>数组作为参数时，参数中数组的第一维不需要填写长度（如果是二维数组，那么第二维需要填写长度），实际调用时</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>指针是一个<code>unsigned</code>类型的整数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p1,p2;<span class="comment">//p1是int型指针 p2是int型变量</span></span><br><span class="line"><span class="keyword">int</span>* p1,*p2;<span class="comment">//p1和p2都是int型指针</span></span><br></pre></td></tr></table></figure><h2 id="cin"><a href="#cin" class="headerlink" title="cin"></a>cin</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">cin</span>.getline(str1,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str2;</span><br><span class="line">getline(<span class="built_in">cin</span>,str2);</span><br></pre></td></tr></table></figure><h2 id="浮点数的比较"><a href="#浮点数的比较" class="headerlink" title="浮点数的比较"></a>浮点数的比较</h2><p>由于计算机采用有限位的二进制编码，因此浮点数在计算机的存储并不总是精确的，于是需要引入一个极小的<strong>EPS</strong>来对这种误差进行修正。</p><p>==待补充：通过EPS进行浮点数的比较==</p><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li><p>时间复杂度</p><p>  <strong>在时间复杂度中，高等级的幂次会覆盖低等级的幂次。</strong>当有些算法实现较为复杂时，其常数会比较大，这时即便时间复杂度（一般讲时间复杂度是不带系数的）相同，其性能也会有较大差距。</p><p>  <strong>对一般的OJ系统来说，1秒能承受的运算次数大概是$10^7\sim10^8$</strong>，因此$O(n^2)$的算法当n的规模是1000时是可以承受的，而当n的规模为100000时则是不可承受的。</p></li><li><p>空间复杂度</p><p>  在一般的应用中，一般来说空间都是足够使用的（只要不开好几个$10^7$以上的数组即可，例如<code>int A[10000][10000]</code>的定义就是不合适的）。</p><p>  $O(1)$的空间复杂度指的是算法消耗的空间不随数据规模的增大而增大。</p><p>  考虑到空间一般够用，因此常常采用以空间换时间的策略。</p></li><li><p>编码复杂度</p><p>  编码复杂度是一个定性的概念，并没有什么量化的标准。</p></li></ul><h2 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h2><p>黑盒测试是指：系统后台会准备若干组输入数据，然后将其输到提交的程序中，如果输出的结果与正确答案完全相同（字符串意义上的比较），那么就称通过了这道题的黑盒测试，否则会根据错误类型而返回不同的结果。</p><p>根据黑盒测试是否对每组输入数据都单独测试或是一次性测试所有测试数据，又可以分为<strong>单点测试</strong>和<strong>多点测试</strong>。</p><p>==整理多点测试的几种类型==</p><h1 id="第三章-入门篇（1）——入门模拟"><a href="#第三章-入门篇（1）——入门模拟" class="headerlink" title="第三章 入门篇（1）——入门模拟"></a>第三章 入门篇（1）——入门模拟</h1><p>无</p><h1 id="第四章-入门篇（2）——算法初步"><a href="#第四章-入门篇（2）——算法初步" class="headerlink" title="第四章 入门篇（2）——算法初步"></a>第四章 入门篇（2）——算法初步</h1><h2 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h2><p>选择排序是最简单的排序算法之一，本节介绍众多选择排序方法中最常用的<strong>简单选择排序</strong>。</p><p>将数组分为前后两部分：有序部分和无序部分。遍历数组，每次选择最小的值放在数组前边（有序部分），时间复杂度为$O(n^2)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义含5个元素的数组</span></span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择排序（从小到大）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> k=i;<span class="comment">// 默认当前待排序的第一个值是最小值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;<span class="comment">// 遍历之后的待排序的值，寻找最小值</span></span><br><span class="line">        <span class="keyword">if</span>(a[j]&lt;a[k])&#123;<span class="comment">// 更新待排序的最小值的下标</span></span><br><span class="line">            k=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 交换</span></span><br><span class="line">    <span class="keyword">int</span> temp=a[i];</span><br><span class="line">    a[i]=a[k];</span><br><span class="line">    a[k]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出数组元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序也是最简单的一类排序方法，本节主要介绍众多插入排序方法中最直观的<strong>直接插入排序</strong>。</p><p>把序列分为左右两部分：有序（左）和无序（右），从无序的部分取出元素，插入有序序列对应位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义含5个元素的数组</span></span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接插入排序（从小到大）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 记录要插入的值</span></span><br><span class="line"><span class="keyword">int</span> temp=a[i],j=i;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有序元素后移</span></span><br><span class="line">    <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;temp&gt;a[j<span class="number">-1</span>])&#123;</span><br><span class="line">        a[j]=a[j<span class="number">-1</span>];</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入</span></span><br><span class="line">    a[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出数组元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="散列的定义和整数散列"><a href="#散列的定义和整数散列" class="headerlink" title="散列的定义和整数散列"></a>散列的定义和整数散列</h2><p>散列（hash）是常见的算法思想之一，在很多程序中都会有意无意地使用到。</p><p>若给出$N$个正整数，再给出$M$个正整数，问这M个数中的每个数分别是在$N$个数出现过，其中$N,M\leq10^5$，且所有正整数均不超过$10^5$。</p><p>对这个问题，最直接的思路是：对每个欲查询的正整数$x$，遍历$N$个数，看是否有一个数与x相等。这种做法的时间复杂度是$O(NM)$，当$N$和$M$都很大（$10^5$级别）时，显然是无法承受的。</p><p>不妨用空间换时间，即设定一个<code>bool</code>型数组<code>hashTable[100010]</code>，其中<code>hashTable[x]==true</code>表示正整数$x$在$n$个正整数中出现过。这样就可以在一开始读入$N$个正整数时就对<code>hashTable</code>进行赋值，于是对于$M$个欲查询的数，就能直接通过<code>hashTable</code>判断出每个数是否出现过。显然这种做法的时间复杂度为$O(M+N)$。</p><p>同样的，如果题目要求统计次数而非是否出现，就把数组改成<code>int</code>型，这两个问题的解法都有一个特点，那就是直接把输入的数作为数组的下标来对这个数的性质进行统计（<strong>这种做法非常实用，请务必掌握</strong>）。这是一个很好的用空间换时间的策略，因为它将查询的复杂度降到了$O(1)$级别。</p><p>但这个策略暂时还有一个问题——上面的题目中出现的每个数都不会超过$10^5$，因此直接作为数组下标是可行的，但是如果输入可能是$10^9$大小的整数，或者甚至是一个字符串，就不能将它们直接作为数组下标了。</p><p>这时可以使用<strong>散列</strong>。一般来说，散列可以浓缩成“<strong>将元素通过一个函数转换为整数，使得改正数可以尽量唯一地代表这个元素</strong>”，其中把这个转换函数称为<strong>散列函数H</strong>，也就是说，如果元素在转换前为<code>key</code>，那么转换后就是一个整数<code>H(key)</code>。</p><p>对于<code>key</code>是整数的情况来说，<strong>常用的散列函数</strong>有直接定址法、平方取中法、除留余数法。</p><p><code>H(key1)==H(key2)</code>，这种情况叫作<strong>冲突</strong>。<strong>常用的解决冲突的方法</strong>有线性探查法、平方探查法和链地址法，其中前两种都计算了新的hash值，又称为开放定址法。</p><p>在写代码时，这种散列的功能可以用STL中的<code>map</code>代替。</p><h2 id="字符串hash初步"><a href="#字符串hash初步" class="headerlink" title="字符串hash初步"></a>字符串hash初步</h2><p>一个点$P$的坐标$(x,y)$可以用下面的散列函数进行处理：</p><p>$H(P)=x\times Range+y$，这样对数据范围内的任意两个整点$P_1$和$P_2$，$H(P_1)$都不会等于$H(P_2)$。</p><p><strong>字符串hash</strong>是指将一个字符串$S$转换为一个整数,使得该整数可以尽可能地唯一地代表字符串$S$。本节只讨论将字符串转换为唯一的整数。</p><p>假设字符串$S$由大写字母$A \sim Z$构成。在这个假设下，可以把26个大写字母视为$0\sim25$，进而转换为二十六进制，再转换为十进制，可得一唯一整数。只是$S$的长度并不可太长。</p><p>在上面的假设下，假如还可以由$a\sim z$组成，可以再把$a\sim z$对应为$26\sim51$，进而转换为五十二进制，再转换为十进制。</p><h2 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h2><p>分治法（divide and conquer）将原问题划分成若干个规模较小而结构与原问题相同或相似的子问题，然后分别地解决这些子问题，最后合并子问题的解，即可得到原问题的解。</p><p>分治法的三个步骤：</p><ol><li><p>分解</p><p> 将原问题分解为若干和原问题拥有相同或相似结构的子问题</p></li><li><p>解决</p><p> 递归求解所有子问题。如果存在子问题的规模小到可以直接解决，就直接解决它。</p></li><li><p>合并</p><p> 将子问题的解合并成原问题的解。</p></li></ol><p>分治法分解出的子问题应当是相互独立、没有交叉的。如果存在两个子问题有相交部分，那么不应当使用分治法解决。</p><p>广义上来讲，分治法分解成的子问题个数只要大于0即可。从严格的定义上讲，一般把子问题的个数为1的情况称为<strong>减治</strong>，而把子问题个数大于1的情况称为分治。</p><p>分治法作为一种算法思想，既可以使用递归的手段去实现，也可以通过非递归的手段去实现。</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归有两个重要概念：</p><ol><li>递归边界</li><li>递归式</li></ol><p>求$n$的阶乘体现了减治的思想，求$Fibonacci$数列的第$n$项体现了分治的思想。</p><p>一般把$1\sim n$这$n$个整数按某个顺序摆放的结果称为这$n$个整数的一个排列，而全排列指这$n$个整数能形成的所有排列。</p><p>$n$皇后问题就可以使用解决全排列问题的方法去解决。</p><p>如果在到达递归边界前的某层，由于一些事实导致已经不需要往任何一个子问题递归，就可以直接返回上一层。一般把这种做法称为<strong>回溯法</strong>。</p><h2 id="简单贪心"><a href="#简单贪心" class="headerlink" title="简单贪心"></a>简单贪心</h2><p><strong>贪心法</strong>是求解一类最优化问题的方法，它总是考虑当前状态下<strong>局部最优</strong>（或较优）的策略，来使全局的结果达到最优（或较优）。</p><p>可以使用贪心法的问题一定满足<strong>最优子结构</strong>性质，即一个问题的最优解可以由它的子问题的最优解构造出来。</p><p>要获得全局最优解，则要求中间的每步策略都是最优的，因此严谨使用贪心法来求解最优哈问题需要对采取的策略进行证明。证明的一般思路是使用反证法及数学归纳法，即假设策略不能导致最优解，然后通过一系列推导来得到矛盾，以此证明策略是最优的，最后用数学归纳法保证全局最优。不过对于平常来说，不太容易对想到的策略进行严谨的证明（贪心的证明往往比贪心本身更难），<strong>如果在想到某个似乎可行的策略，并且自己无法举出反例，那就勇敢地实现它。</strong></p><h2 id="区间贪心"><a href="#区间贪心" class="headerlink" title="区间贪心"></a>区间贪心</h2><p>区间不相交问题和区间选点</p><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>二分查找是基于有序序列的查找算法，二分查找的高效之处在于，每一步都可以去除当前区间中的一半元素，因此其时间复杂度是$O(logn)$。</p><p><strong>如果序列是严格递增</strong>：</p><ul><li>递归方法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>* arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义含10个元素的升序数组</span></span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询key</span></span><br><span class="line">    <span class="keyword">int</span> key=<span class="number">15</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, binarySearch(a, <span class="number">0</span>, n<span class="number">-1</span>, key));</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在数组arr的[left,right]中寻找key，找到则返回key在数组中的位置，否则返回-1</span></span><br><span class="line"><span class="comment">// 初始区间一般是[0,n-1]</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 区间正确</span></span><br><span class="line">    <span class="keyword">if</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="comment">// 设置区间中间下标</span></span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到</span></span><br><span class="line">        <span class="keyword">if</span> (key == arr[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左半区间查找</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; arr[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearch(arr, left, mid - <span class="number">1</span>, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右半区间查找</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearch(arr, mid+<span class="number">1</span>,right, key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 区间错误</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>非递归方法</li></ul><p>在程序设计时，更多采用的是非递归的写法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>* arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义含10个元素的升序数组</span></span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询key</span></span><br><span class="line">    <span class="keyword">int</span> key=<span class="number">19</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, binarySearch(a, <span class="number">0</span>, n<span class="number">-1</span>, key));</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在数组arr的[left,right]中寻找key，找到则返回key在数组中的位置，否则返回-1</span></span><br><span class="line"><span class="comment">// 初始区间一般是[0,n-1]</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当可以形成区间时，进行查找</span></span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="comment">// 设置区间中间下标</span></span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到，返回对应位置</span></span><br><span class="line">        <span class="keyword">if</span> (key==arr[mid])&#123;</span><br><span class="line">            <span class="keyword">return</span> mid; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// key在左半区间，更新right</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(key&lt;arr[mid])&#123;</span><br><span class="line">            right=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// key在右半区间，更新left</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未寻找到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果序列是严格递减</strong>：</p><p>只需要把<code>if(key&lt;arr[mid])</code>语句中的<code>&lt;</code>改成<code>&gt;</code>就好了。</p><p><strong>如果序列是非严格递增（即递增，但元素可能重复）</strong>：</p><p>如何求出序列中第一个大于等于<code>key</code>的元素的位置<code>L</code>和第一个大于<code>key</code>的元素的位置<code>R</code>，这样元素<code>key</code>在序列中的存在区间就是左闭右开区间$[L,R)$。显然，如果序列中没有<code>key</code>，那么<code>L</code>和<code>R</code>可以理解为假设序列中存在<code>key</code>，<code>key</code>应该在的位置。</p><p>上面有两个问题：</p><ul><li>求<code>L</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowerBound</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义含10个元素的升序数组</span></span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询key</span></span><br><span class="line">    <span class="keyword">int</span> key=<span class="number">4</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lowerBound(a, <span class="number">0</span>, n, key));</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在非严格递增数组arr的[left,right]中寻找第一个大于等于key的值的位置，如果不存在则返回该值应该在的位置（即最后一个元素后边）</span></span><br><span class="line"><span class="comment">// 初始区间一般是[0,n]</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowerBound</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当left==right时，刚好求出大于等于key的第一个数字的位置</span></span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">// 设置区间中间下标</span></span><br><span class="line">        <span class="comment">//mid = (left + right) / 2;</span></span><br><span class="line">        mid=left+(right-left)/<span class="number">2</span>;    <span class="comment">// 避免溢出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// key在左半区间，更新right</span></span><br><span class="line">        <span class="keyword">if</span>(key&lt;=arr[mid])&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// key在右半区间，更新left</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未寻找到</span></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>求<code>R</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upperBound</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义含10个元素的升序数组</span></span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询key</span></span><br><span class="line">    <span class="keyword">int</span> key=<span class="number">4</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, upperBound(a, <span class="number">0</span>, n, key));</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在非严格递增数组arr的[left,right]中寻找第一个大于key的值的位置，如果不存在则返回该值应该在的位置（即最后一个元素后边）</span></span><br><span class="line"><span class="comment">// 初始区间一般是[0,n]</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upperBound</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当left==right时，刚好求出大于等于key的第一个数字的位置</span></span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">// 设置区间中间下标</span></span><br><span class="line">        <span class="comment">//mid = (left + right) / 2;</span></span><br><span class="line">        mid=left+(right-left)/<span class="number">2</span>;    <span class="comment">// 避免溢出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// key在左半区间，更新right</span></span><br><span class="line">        <span class="keyword">if</span>(key&lt;arr[mid])&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// key在右半区间，更新left</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未寻找到</span></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比<code>lowerBound</code>和<code>upperBound</code>的代码可知，<code>upperBound</code>函数只是把代码中的<code>if(key&lt;=arr[mid])</code>改成<code>if(key&lt;arr[mid])</code>，其他完全相同，这启发我们去寻找它们的共同点。</p><p>可以发现，两者都在解决这样一个问题：寻找有序序列中第一个满足某条件<code>C</code>的元素的位置。这是一个非常重要且经典的问题，平常能碰到的大部分二分法问题都可以归结于这个问题。显然，所谓的条件<code>C</code>在序列中一定是从左到右先不满足，然后满足的。该类问题代码模板如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(C成立)&#123;</span><br><span class="line">        right=mid;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若想寻找<strong>最后一个</strong>满足条件<code>C</code>的元素的位置，则可以先求第一个满足条件<code>!c</code>的元素的位置，然后将该位置减1即可。</p><p>如果目的是判断有序序列中是否存在满足某条件的元素，使用刚开始的二分最合适。</p><h2 id="二分法的其他应用"><a href="#二分法的其他应用" class="headerlink" title="二分法的其他应用"></a>二分法的其他应用</h2><p>上面讲了二分查找，事实上二分法的应用远不止如此。</p><h3 id="估算-sqrt-2"><a href="#估算-sqrt-2" class="headerlink" title="估算$\sqrt{2}$"></a>估算$\sqrt{2}$</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 误差</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">10e-5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">double</span> left=<span class="number">1</span>,right=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">double</span> mid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逼近2^0.5</span></span><br><span class="line">    <span class="keyword">while</span>(right-left&gt;eps)&#123;</span><br><span class="line">        <span class="comment">// 计算mid</span></span><br><span class="line">        mid = left+(right - left) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span>&gt;mid * mid)&#123;</span><br><span class="line">            left=mid;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">2</span>&lt;mid*mid)&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    mid = left+(right - left) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>,mid);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装水问题"><a href="#装水问题" class="headerlink" title="装水问题"></a>装水问题</h3><p>有一个侧面看上去是半圆的储水装置，该半圆的半径是$R$，要求往里面装入高度为$h$的水，使其在侧面看去的面积与半圆面积的比例恰好为$r$。已知$r$，求$h$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 一些常量</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">10e-5</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> r=<span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> R=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="number">3.1415926535</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">double</span> left=<span class="number">0</span>,right=R;</span><br><span class="line">    <span class="keyword">double</span> mid,alpha,L,S1,S2=pi*R*R/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逼近</span></span><br><span class="line">    <span class="keyword">while</span>(right-left&gt;eps)&#123;</span><br><span class="line">        <span class="comment">// 计算mid</span></span><br><span class="line">        mid = left+(right - left) / <span class="number">2</span>;</span><br><span class="line">        alpha=<span class="number">2</span>*<span class="built_in">acos</span>((R-mid)/R);</span><br><span class="line">        L = <span class="number">2</span> * <span class="built_in">sqrt</span>(R * R - (R - mid) * (R - mid));</span><br><span class="line">        S1 = alpha*R*R/<span class="number">2</span>-L*(R-mid)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r&gt;S1/S2)&#123;</span><br><span class="line">            left=mid;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (r &lt; S1 / S2)&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>,mid);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="木棒切割"><a href="#木棒切割" class="headerlink" title="木棒切割"></a>木棒切割</h3><p>给出$N$根木棒，长度均已知，现在希望通过切割它们来得到至少$K$段长度相等的木棒（长度必须是整数），问这些长度相等的木棒最长能有多长。例如对于三根长度分别为10、24、15的木棒来说，假设$K=7$，即至少需要7段长度相等的木棒，那么可以得到的最大长度为6（$(10+24+15)/7=7$），在这种情况下，第一根木棒可以提供$10/6=1$段、第二根木棒可以提供$24/6=4$根、第三根木棒可以提供$15/6=2$根，达到了7根的要求。</p><p>对于这道题，我们可以注意到一个结论：如果长度相等的木棒的长度$L$越长，那么热可以得到的木棒段数$k$越小。</p><p>==P142==</p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是之前刷PAT时看胡凡的《算法笔记》时做的一点笔记，后来没时间，就没看完。&lt;/p&gt;
&lt;p&gt;emmm，刚开始看的内容都很基础。现在想想这样从头到尾地学确实没必要，可能当时的目标也和现在不一样吧。&lt;/p&gt;
&lt;h1 id=&quot;第一章-如何使用本书&quot;&gt;&lt;a href=&quot;#第一章-如
      
    
    </summary>
    
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LOAD DATA INFILE读取CSV中一千万条数据至mysql</title>
    <link href="https://chouxianyu.github.io/2019/11/02/LOAD-DATA-INFILE%E8%AF%BB%E5%8F%96CSV%E4%B8%AD%E4%B8%80%E5%8D%83%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E8%87%B3mysql/"/>
    <id>https://chouxianyu.github.io/2019/11/02/LOAD-DATA-INFILE读取CSV中一千万条数据至mysql/</id>
    <published>2019-11-01T16:00:34.000Z</published>
    <updated>2019-11-10T08:51:19.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h1><p>构建一个关系模式和课本中的关系<code>movies(title,year,length,movietype,studioname,producerC)</code>一样的关系，名称自定，在这个关系中插入1000万条记录。</p><p>注：关系<code>movies</code>的主键为<code>(title,year)</code>。</p><p>要求如下：</p><ol><li>在尽可能短的时间内完成；</li><li>只允许使用原生的SQL，不允许将SQL作为嵌入语言，也不允许使用其他语言如C#、Python等来完成；</li><li>提交你的详细解决方案和结果。</li></ol><p>本文利用<code>LOAD DATA INFILE</code>将包含一千万条数据的CSV文件存入mysql。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>除了<code>newcsv.py</code>，其他命令均为cmd命令。</p><h2 id="生成包含1千万条数据的CSV文件"><a href="#生成包含1千万条数据的CSV文件" class="headerlink" title="生成包含1千万条数据的CSV文件"></a>生成包含1千万条数据的CSV文件</h2><p>用python生成与关系movies结构相同的包含1千万条数据的CSV文件。</p><p><code>newcsv.py</code>如下：</p><p>该程序大概耗时18秒。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># num_value条数据</span></span><br><span class="line">num_value = <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始计时</span></span><br><span class="line">time_start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'C:\ProgramData\MySQL\MySQL Server 8.0\Uploads\bigdata.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f_csv = csv.writer(f)</span><br><span class="line">    f_csv.writerow([<span class="string">'title'</span>, <span class="string">'year'</span>, <span class="string">'length'</span>, <span class="string">'movieType'</span>, <span class="string">'studioName'</span>, <span class="string">'producerC'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, num_value+<span class="number">1</span>):</span><br><span class="line">        f_csv.writerow([<span class="string">'GoGoGo'</span>, i, <span class="number">120</span>, <span class="string">'sicFic'</span>, <span class="string">'MGM'</span>, <span class="number">100</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结束计时</span></span><br><span class="line">time_end = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出耗费时间（秒）</span></span><br><span class="line">print(<span class="string">'Time Cost：'</span>, time_end - time_start)</span><br></pre></td></tr></table></figure><h2 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure><p>上面<code>root</code>是我的mysql用户名，<code>123456</code>是我的mysql密码。</p><h2 id="进入数据库moviesdb"><a href="#进入数据库moviesdb" class="headerlink" title="进入数据库moviesdb"></a>进入数据库moviesdb</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use moviesdb;</span><br></pre></td></tr></table></figure><h2 id="创建关系mymovies"><a href="#创建关系mymovies" class="headerlink" title="创建关系mymovies"></a>创建关系mymovies</h2><p>只复制关系movies的结构，并不复制其数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE mymovies LIKE movies;</span><br></pre></td></tr></table></figure><h2 id="将CSV文件存入数据库"><a href="#将CSV文件存入数据库" class="headerlink" title="将CSV文件存入数据库"></a>将CSV文件存入数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOAD DATA INFILE &apos;C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/bigdata.csv&apos; INTO TABLE mymovies FIELDS TERMINATED BY &apos;,&apos; ENCLOSED BY &apos;&quot;&apos; LINES TERMINATED BY &apos;\n&apos; IGNORE 1 ROWS;</span><br></pre></td></tr></table></figure><p>我的电脑上，该文件存入mysql耗时862.646秒，大概14分钟，如下图所示：</p><p><img src="https://img2018.cnblogs.com/blog/1478490/201911/1478490-20191101235840939-2109334428.jpg" alt="LOADDATAINFILE插入一千万条数据结果"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/freefei/p/7679991.html" target="_blank" rel="noopener">https://www.cnblogs.com/freefei/p/7679991.html</a></p><p><a href="https://blog.csdn.net/qq_22855325/article/details/76087138" target="_blank" rel="noopener">https://blog.csdn.net/qq_22855325/article/details/76087138</a></p><p><a href="https://blog.csdn.net/weixin_44595372/article/details/88723191" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44595372/article/details/88723191</a></p><p><a href="https://zhidao.baidu.com/question/185665472.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/185665472.html</a></p><p><a href="https://www.cnblogs.com/zhangjpn/p/6231662.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangjpn/p/6231662.html</a></p><p><a href="https://www.cnblogs.com/wangcp-2014/p/8038683.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangcp-2014/p/8038683.html</a></p><p><a href="https://blog.csdn.net/gb4215287/article/details/82669785" target="_blank" rel="noopener">https://blog.csdn.net/gb4215287/article/details/82669785</a></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;作业要求&quot;&gt;&lt;a href=&quot;#作业要求&quot; class=&quot;headerlink&quot; title=&quot;作业要求&quot;&gt;&lt;/a&gt;作业要求&lt;/h1&gt;&lt;p&gt;构建一个关系模式和课本中的关系&lt;code&gt;movies(title,year,length,movietype,studio
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="python" scheme="https://chouxianyu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>L1与L2正则化</title>
    <link href="https://chouxianyu.github.io/2019/10/22/L1%E4%B8%8EL2%E6%AD%A3%E5%88%99%E5%8C%96/"/>
    <id>https://chouxianyu.github.io/2019/10/22/L1与L2正则化/</id>
    <published>2019-10-21T17:06:13.000Z</published>
    <updated>2019-10-21T17:06:59.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h1><p>机器学习中，如果参数过多、模型过于复杂，容易造成过拟合。</p><h1 id="结构风险最小化原理"><a href="#结构风险最小化原理" class="headerlink" title="结构风险最小化原理"></a>结构风险最小化原理</h1><p>在经验风险最小化（训练误差最小化）的基础上，尽可能采用简单的模型，以提高模型泛化预测精度。</p><h1 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h1><p>为了避免过拟合，最常用的一种方法是使用正则化，例如L1和L2正则化。</p><p>所谓的正则化，就是在原来损失函数的基础上，加了一些正则化项，或者叫做模型复杂度惩罚项。</p><h1 id="L2正则化"><a href="#L2正则化" class="headerlink" title="L2正则化"></a>L2正则化</h1><p>L2正则化即：$L=E_{in}+\lambda\sum_j\omega^2_j$，其中，$E_{in}$是原来的损失函数；$\lambda$是正则化参数，可调整；$\omega_j$是参数。</p><p>由上可知，正则化是为了限制参数过多，避免模型过于复杂。因此，我们可以令高阶部分的权重$\omega$为0，这样就相当于从高阶转换为低阶。然而，这是个NP难问题，将其适度简化为：$\sum_j\omega_j^2≤C$，令$\omega_j$的平方和小于$C$。这时，我们的目标就转换为：令$E_{in}$最小，但是要遵循$w$平方和小于$C$的条件，如下图所示：</p><p><img src="https://img-blog.csdn.net/20180621085848886?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JlZF9zdG9uZTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><h1 id="L1正则化"><a href="#L1正则化" class="headerlink" title="L1正则化"></a>L1正则化</h1><p>L1正则化和L2正则化相似：$L=E_{in}+\lambda\sum_j|\omega_j|$，同样地，图形如下：</p><p><img src="https://img-blog.csdn.net/20180621090333882?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JlZF9zdG9uZTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><h1 id="L1与L2正则化"><a href="#L1与L2正则化" class="headerlink" title="L1与L2正则化"></a>L1与L2正则化</h1><p>满足正则化条件，实际上是求解上面图中红色形状与蓝色椭圆的交点，即同时满足限定条件和$E_{in}$最小化。</p><p>对于L2来说，限定区域是圆，这样得到的解$\omega_1$或$\omega_2$（以二元为例）为0的概率很小，且很大概率是非零的。</p><p>对于L1来说，限定区域是正方形，方形与蓝色区域相交的交点是顶点的概率很大，这从视觉和常识上来看是很容易理解的。也就是说，正方形的凸点会更接近 $E_{in}$最优解对应的$\omega$位置，而凸点处必有$\omega_1$或$\omega_2$为0。这样，得到的解$\omega_1$或$\omega_2$为零的概率就很大了。所以，L1正则化的解具有稀疏性。</p><p>扩展到高维，同样的道理，L2的限定区域是平滑的，与中心点等距；而 L1 的限定区域是包含凸点的，尖锐的。这些凸点更接近$E_{in}$的最优解位置，而在这些凸点上，很多$\omega_j$为0。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.jianshu.com/p/76368eba9c90" target="_blank" rel="noopener">https://www.jianshu.com/p/76368eba9c90</a></p><p><a href="https://segmentfault.com/a/1190000014680167?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014680167?utm_source=tag-newest</a></p><p><a href="https://blog.csdn.net/red_stone1/article/details/80755144" target="_blank" rel="noopener">https://blog.csdn.net/red_stone1/article/details/80755144</a></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;过拟合&quot;&gt;&lt;a href=&quot;#过拟合&quot; class=&quot;headerlink&quot; title=&quot;过拟合&quot;&gt;&lt;/a&gt;过拟合&lt;/h1&gt;&lt;p&gt;机器学习中，如果参数过多、模型过于复杂，容易造成过拟合。&lt;/p&gt;
&lt;h1 id=&quot;结构风险最小化原理&quot;&gt;&lt;a href=&quot;#结构风险
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://chouxianyu.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>sklearn逻辑回归实战</title>
    <link href="https://chouxianyu.github.io/2019/10/22/sklearn%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E5%AE%9E%E6%88%98/"/>
    <id>https://chouxianyu.github.io/2019/10/22/sklearn逻辑回归实战/</id>
    <published>2019-10-21T17:02:12.000Z</published>
    <updated>2019-10-21T17:04:21.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>根据学生两门课的成绩和是否入学的数据，预测学生能否顺利入学：利用<code>ex2data1.txt</code>和<code>ex2data2.txt</code>中的数据，进行逻辑回归和预测。</p><p>数据放在最后边。</p><h1 id="ex2data1-txt处理"><a href="#ex2data1-txt处理" class="headerlink" title="ex2data1.txt处理"></a>ex2data1.txt处理</h1><p>作散点图可知，决策大致符合线性关系，但还是有弯曲（非线性），用线性效果并不好，因此可用两种方案：方案一，无多项式特征；方案二，有多项式特征。</p><h2 id="方案一：无多项式特征"><a href="#方案一：无多项式特征" class="headerlink" title="方案一：无多项式特征"></a>方案一：无多项式特征</h2><p><strong>对ex2data1.txt中的数据进行逻辑回归，无多项式特征</strong></p><p><strong>代码实现如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    对ex2data1.txt中的数据进行逻辑回归（无多项式特征）</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据格式：成绩1,成绩2,是否被录取（1代表被录取，0代表未被录取）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数（画决策边界）定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_decision_boundary</span><span class="params">(model, axis)</span>:</span></span><br><span class="line">    x0, x1 = np.meshgrid(</span><br><span class="line">        np.linspace(axis[<span class="number">0</span>], axis[<span class="number">1</span>], int((axis[<span class="number">1</span>] - axis[<span class="number">0</span>]) * <span class="number">100</span>)).reshape(<span class="number">-1</span>, <span class="number">1</span>),</span><br><span class="line">        np.linspace(axis[<span class="number">2</span>], axis[<span class="number">3</span>], int((axis[<span class="number">3</span>] - axis[<span class="number">2</span>]) * <span class="number">100</span>)).reshape(<span class="number">-1</span>, <span class="number">1</span>),</span><br><span class="line">    )</span><br><span class="line">    X_new = np.c_[x0.ravel(), x1.ravel()]</span><br><span class="line"></span><br><span class="line">    y_predict = model.predict(X_new)</span><br><span class="line">    zz = y_predict.reshape(x0.shape)</span><br><span class="line"></span><br><span class="line">    custom_cmap = ListedColormap([<span class="string">'#EF9A9A'</span>, <span class="string">'#FFF59D'</span>, <span class="string">'#90CAF9'</span>])</span><br><span class="line"></span><br><span class="line">    plt.contourf(x0, x1, zz, cmap=custom_cmap)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">data = np.loadtxt(<span class="string">'ex2data1.txt'</span>, delimiter=<span class="string">','</span>)</span><br><span class="line">data_X = data[:, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">data_y = data[:, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据分割</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(data_X, data_y, random_state=<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">log_reg = LogisticRegression()</span><br><span class="line">log_reg.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果可视化</span></span><br><span class="line">plot_decision_boundary(log_reg, axis=[<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">100</span>])</span><br><span class="line">plt.scatter(data_X[data_y == <span class="number">0</span>, <span class="number">0</span>], data_X[data_y == <span class="number">0</span>, <span class="number">1</span>], color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(data_X[data_y == <span class="number">1</span>, <span class="number">0</span>], data_X[data_y == <span class="number">1</span>, <span class="number">1</span>], color=<span class="string">'blue'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'成绩1'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'成绩2'</span>)</span><br><span class="line">plt.title(<span class="string">'两门课程成绩与是否录取的关系'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型测试</span></span><br><span class="line">print(log_reg.score(X_train, y_train))</span><br><span class="line">print(log_reg.score(X_test, y_test))</span><br></pre></td></tr></table></figure><p><strong>输出结果如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.8533333333333334</span></span><br><span class="line"><span class="number">0.76</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/21/fpXKzIyd83xJCHr.png" alt="ex2data1逻辑回归（无多项式）.png"></p><h2 id="方案二：引入多项式特征"><a href="#方案二：引入多项式特征" class="headerlink" title="方案二：引入多项式特征"></a>方案二：引入多项式特征</h2><p><strong>对ex2data1.txt中的数据进行逻辑回归，引入多项式特征。经调试，当degree为3时，耗费时间较长；当degree为2时，耗费时间可接受，效果与方案一相比好了很多</strong></p><p><strong>实现如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    对ex2data1.txt中的数据进行逻辑回归（引入多项式特征）</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据格式：成绩1,成绩2,是否被录取（1代表被录取，0代表未被录取）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_decision_boundary</span><span class="params">(model, axis)</span>:</span></span><br><span class="line">    x0, x1 = np.meshgrid(</span><br><span class="line">        np.linspace(axis[<span class="number">0</span>], axis[<span class="number">1</span>], int((axis[<span class="number">1</span>] - axis[<span class="number">0</span>]) * <span class="number">100</span>)).reshape(<span class="number">-1</span>, <span class="number">1</span>),</span><br><span class="line">        np.linspace(axis[<span class="number">2</span>], axis[<span class="number">3</span>], int((axis[<span class="number">3</span>] - axis[<span class="number">2</span>]) * <span class="number">100</span>)).reshape(<span class="number">-1</span>, <span class="number">1</span>),</span><br><span class="line">    )</span><br><span class="line">    X_new = np.c_[x0.ravel(), x1.ravel()]</span><br><span class="line"></span><br><span class="line">    y_predict = model.predict(X_new)</span><br><span class="line">    zz = y_predict.reshape(x0.shape)</span><br><span class="line"></span><br><span class="line">    custom_cmap = ListedColormap([<span class="string">'#EF9A9A'</span>, <span class="string">'#FFF59D'</span>, <span class="string">'#90CAF9'</span>])</span><br><span class="line"></span><br><span class="line">    plt.contourf(x0, x1, zz, cmap=custom_cmap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PolynomialLogisticRegression</span><span class="params">(degree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Pipeline([</span><br><span class="line">        (<span class="string">'poly'</span>, PolynomialFeatures(degree=degree)),</span><br><span class="line">        (<span class="string">'std_scaler'</span>, StandardScaler()),</span><br><span class="line">        (<span class="string">'log_reg'</span>, LogisticRegression())</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">data = np.loadtxt(<span class="string">'ex2data1.txt'</span>, delimiter=<span class="string">','</span>)</span><br><span class="line">data_X = data[:, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">data_y = data[:, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据分割</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(data_X, data_y, random_state=<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">poly_log_reg = PolynomialLogisticRegression(degree=<span class="number">2</span>)</span><br><span class="line">poly_log_reg.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果可视化</span></span><br><span class="line">plot_decision_boundary(poly_log_reg, axis=[<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">100</span>])</span><br><span class="line">plt.scatter(data_X[data_y == <span class="number">0</span>, <span class="number">0</span>], data_X[data_y == <span class="number">0</span>, <span class="number">1</span>], color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(data_X[data_y == <span class="number">1</span>, <span class="number">0</span>], data_X[data_y == <span class="number">1</span>, <span class="number">1</span>], color=<span class="string">'blue'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'成绩1'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'成绩2'</span>)</span><br><span class="line">plt.title(<span class="string">'两门课程成绩与是否录取的关系'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型测试</span></span><br><span class="line">print(poly_log_reg.score(X_train, y_train))</span><br><span class="line">print(poly_log_reg.score(X_test, y_test))</span><br></pre></td></tr></table></figure><p><strong>输出如下</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.92</span></span><br><span class="line"><span class="number">0.92</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/21/cRzgUKvxTqPhio7.png" alt="ex2data1逻辑回归（有多项式）.png"></p><h1 id="ex2data2-txt处理"><a href="#ex2data2-txt处理" class="headerlink" title="ex2data2.txt处理"></a>ex2data2.txt处理</h1><p><strong>作散点图可知，这组数据的决策边界绝对是非线性的，所以直接引入多项式特征对ex2data2.txt中的数据进行逻辑回归。</strong></p><p><strong>代码实现如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    对ex2data2.txt中的数据进行逻辑回归（引入多项式特征）</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据格式：成绩1,成绩2,是否被录取（1代表被录取，0代表未被录取）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_decision_boundary</span><span class="params">(model, axis)</span>:</span></span><br><span class="line">    x0, x1 = np.meshgrid(</span><br><span class="line">        np.linspace(axis[<span class="number">0</span>], axis[<span class="number">1</span>], int((axis[<span class="number">1</span>] - axis[<span class="number">0</span>]) * <span class="number">100</span>)).reshape(<span class="number">-1</span>, <span class="number">1</span>),</span><br><span class="line">        np.linspace(axis[<span class="number">2</span>], axis[<span class="number">3</span>], int((axis[<span class="number">3</span>] - axis[<span class="number">2</span>]) * <span class="number">100</span>)).reshape(<span class="number">-1</span>, <span class="number">1</span>),</span><br><span class="line">    )</span><br><span class="line">    X_new = np.c_[x0.ravel(), x1.ravel()]</span><br><span class="line"></span><br><span class="line">    y_predict = model.predict(X_new)</span><br><span class="line">    zz = y_predict.reshape(x0.shape)</span><br><span class="line"></span><br><span class="line">    custom_cmap = ListedColormap([<span class="string">'#EF9A9A'</span>, <span class="string">'#FFF59D'</span>, <span class="string">'#90CAF9'</span>])</span><br><span class="line"></span><br><span class="line">    plt.contourf(x0, x1, zz, cmap=custom_cmap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PolynomialLogisticRegression</span><span class="params">(degree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Pipeline([</span><br><span class="line">        (<span class="string">'poly'</span>, PolynomialFeatures(degree=degree)),</span><br><span class="line">        (<span class="string">'std_scaler'</span>, StandardScaler()),</span><br><span class="line">        (<span class="string">'log_reg'</span>, LogisticRegression())</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">data = np.loadtxt(<span class="string">'ex2data2.txt'</span>, delimiter=<span class="string">','</span>)</span><br><span class="line">data_X = data[:, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">data_y = data[:, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据分割</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(data_X, data_y, random_state=<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">poly_log_reg = PolynomialLogisticRegression(degree=<span class="number">2</span>)</span><br><span class="line">poly_log_reg.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果可视化</span></span><br><span class="line">plot_decision_boundary(poly_log_reg, axis=[<span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>])</span><br><span class="line">plt.scatter(data_X[data_y == <span class="number">0</span>, <span class="number">0</span>], data_X[data_y == <span class="number">0</span>, <span class="number">1</span>], color=<span class="string">'red'</span>)</span><br><span class="line">plt.scatter(data_X[data_y == <span class="number">1</span>, <span class="number">0</span>], data_X[data_y == <span class="number">1</span>, <span class="number">1</span>], color=<span class="string">'blue'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'成绩1'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'成绩2'</span>)</span><br><span class="line">plt.title(<span class="string">'两门课程成绩与是否录取的关系'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型测试</span></span><br><span class="line">print(poly_log_reg.score(X_train, y_train))</span><br><span class="line">print(poly_log_reg.score(X_test, y_test))</span><br></pre></td></tr></table></figure><p><strong>输出结果如下：</strong></p><p>由图可知，分类结果较好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.7954545454545454</span></span><br><span class="line"><span class="number">0.9</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/21/Cb6MdOTazNrs14i.png" alt="ex2data2逻辑回归（有多项式）.png"></p><h1 id="两份数据"><a href="#两份数据" class="headerlink" title="两份数据"></a>两份数据</h1><h2 id="ex2data1-txt"><a href="#ex2data1-txt" class="headerlink" title="ex2data1.txt"></a>ex2data1.txt</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">34.62365962451697</span>,<span class="number">78.0246928153624</span>,<span class="number">0</span></span><br><span class="line"><span class="number">30.28671076822607</span>,<span class="number">43.89499752400101</span>,<span class="number">0</span></span><br><span class="line"><span class="number">35.84740876993872</span>,<span class="number">72.90219802708364</span>,<span class="number">0</span></span><br><span class="line"><span class="number">60.18259938620976</span>,<span class="number">86.30855209546826</span>,<span class="number">1</span></span><br><span class="line"><span class="number">79.0327360507101</span>,<span class="number">75.3443764369103</span>,<span class="number">1</span></span><br><span class="line"><span class="number">45.08327747668339</span>,<span class="number">56.3163717815305</span>,<span class="number">0</span></span><br><span class="line"><span class="number">61.10666453684766</span>,<span class="number">96.51142588489624</span>,<span class="number">1</span></span><br><span class="line"><span class="number">75.02474556738889</span>,<span class="number">46.55401354116538</span>,<span class="number">1</span></span><br><span class="line"><span class="number">76.09878670226257</span>,<span class="number">87.42056971926803</span>,<span class="number">1</span></span><br><span class="line"><span class="number">84.43281996120035</span>,<span class="number">43.53339331072109</span>,<span class="number">1</span></span><br><span class="line"><span class="number">95.86155507093572</span>,<span class="number">38.22527805795094</span>,<span class="number">0</span></span><br><span class="line"><span class="number">75.01365838958247</span>,<span class="number">30.60326323428011</span>,<span class="number">0</span></span><br><span class="line"><span class="number">82.30705337399482</span>,<span class="number">76.48196330235604</span>,<span class="number">1</span></span><br><span class="line"><span class="number">69.36458875970939</span>,<span class="number">97.71869196188608</span>,<span class="number">1</span></span><br><span class="line"><span class="number">39.53833914367223</span>,<span class="number">76.03681085115882</span>,<span class="number">0</span></span><br><span class="line"><span class="number">53.9710521485623</span>,<span class="number">89.20735013750205</span>,<span class="number">1</span></span><br><span class="line"><span class="number">69.07014406283025</span>,<span class="number">52.74046973016765</span>,<span class="number">1</span></span><br><span class="line"><span class="number">67.94685547711617</span>,<span class="number">46.67857410673128</span>,<span class="number">0</span></span><br><span class="line"><span class="number">70.66150955499435</span>,<span class="number">92.92713789364831</span>,<span class="number">1</span></span><br><span class="line"><span class="number">76.97878372747498</span>,<span class="number">47.57596364975532</span>,<span class="number">1</span></span><br><span class="line"><span class="number">67.37202754570876</span>,<span class="number">42.83843832029179</span>,<span class="number">0</span></span><br><span class="line"><span class="number">89.67677575072079</span>,<span class="number">65.79936592745237</span>,<span class="number">1</span></span><br><span class="line"><span class="number">50.534788289883</span>,<span class="number">48.85581152764205</span>,<span class="number">0</span></span><br><span class="line"><span class="number">34.21206097786789</span>,<span class="number">44.20952859866288</span>,<span class="number">0</span></span><br><span class="line"><span class="number">77.9240914545704</span>,<span class="number">68.9723599933059</span>,<span class="number">1</span></span><br><span class="line"><span class="number">62.27101367004632</span>,<span class="number">69.95445795447587</span>,<span class="number">1</span></span><br><span class="line"><span class="number">80.1901807509566</span>,<span class="number">44.82162893218353</span>,<span class="number">1</span></span><br><span class="line"><span class="number">93.114388797442</span>,<span class="number">38.80067033713209</span>,<span class="number">0</span></span><br><span class="line"><span class="number">61.83020602312595</span>,<span class="number">50.25610789244621</span>,<span class="number">0</span></span><br><span class="line"><span class="number">38.78580379679423</span>,<span class="number">64.99568095539578</span>,<span class="number">0</span></span><br><span class="line"><span class="number">61.379289447425</span>,<span class="number">72.80788731317097</span>,<span class="number">1</span></span><br><span class="line"><span class="number">85.40451939411645</span>,<span class="number">57.05198397627122</span>,<span class="number">1</span></span><br><span class="line"><span class="number">52.10797973193984</span>,<span class="number">63.12762376881715</span>,<span class="number">0</span></span><br><span class="line"><span class="number">52.04540476831827</span>,<span class="number">69.43286012045222</span>,<span class="number">1</span></span><br><span class="line"><span class="number">40.23689373545111</span>,<span class="number">71.16774802184875</span>,<span class="number">0</span></span><br><span class="line"><span class="number">54.63510555424817</span>,<span class="number">52.21388588061123</span>,<span class="number">0</span></span><br><span class="line"><span class="number">33.91550010906887</span>,<span class="number">98.86943574220611</span>,<span class="number">0</span></span><br><span class="line"><span class="number">64.17698887494485</span>,<span class="number">80.90806058670817</span>,<span class="number">1</span></span><br><span class="line"><span class="number">74.78925295941542</span>,<span class="number">41.57341522824434</span>,<span class="number">0</span></span><br><span class="line"><span class="number">34.1836400264419</span>,<span class="number">75.2377203360134</span>,<span class="number">0</span></span><br><span class="line"><span class="number">83.90239366249155</span>,<span class="number">56.30804621605327</span>,<span class="number">1</span></span><br><span class="line"><span class="number">51.54772026906181</span>,<span class="number">46.85629026349976</span>,<span class="number">0</span></span><br><span class="line"><span class="number">94.44336776917852</span>,<span class="number">65.56892160559052</span>,<span class="number">1</span></span><br><span class="line"><span class="number">82.36875375713919</span>,<span class="number">40.61825515970618</span>,<span class="number">0</span></span><br><span class="line"><span class="number">51.04775177128865</span>,<span class="number">45.82270145776001</span>,<span class="number">0</span></span><br><span class="line"><span class="number">62.22267576120188</span>,<span class="number">52.06099194836679</span>,<span class="number">0</span></span><br><span class="line"><span class="number">77.19303492601364</span>,<span class="number">70.45820000180959</span>,<span class="number">1</span></span><br><span class="line"><span class="number">97.77159928000232</span>,<span class="number">86.7278223300282</span>,<span class="number">1</span></span><br><span class="line"><span class="number">62.07306379667647</span>,<span class="number">96.76882412413983</span>,<span class="number">1</span></span><br><span class="line"><span class="number">91.56497449807442</span>,<span class="number">88.69629254546599</span>,<span class="number">1</span></span><br><span class="line"><span class="number">79.94481794066932</span>,<span class="number">74.16311935043758</span>,<span class="number">1</span></span><br><span class="line"><span class="number">99.2725269292572</span>,<span class="number">60.99903099844988</span>,<span class="number">1</span></span><br><span class="line"><span class="number">90.54671411399852</span>,<span class="number">43.39060180650027</span>,<span class="number">1</span></span><br><span class="line"><span class="number">34.52451385320009</span>,<span class="number">60.39634245837173</span>,<span class="number">0</span></span><br><span class="line"><span class="number">50.2864961189907</span>,<span class="number">49.80453881323059</span>,<span class="number">0</span></span><br><span class="line"><span class="number">49.58667721632031</span>,<span class="number">59.80895099453265</span>,<span class="number">0</span></span><br><span class="line"><span class="number">97.64563396007767</span>,<span class="number">68.86157272420604</span>,<span class="number">1</span></span><br><span class="line"><span class="number">32.57720016809309</span>,<span class="number">95.59854761387875</span>,<span class="number">0</span></span><br><span class="line"><span class="number">74.24869136721598</span>,<span class="number">69.82457122657193</span>,<span class="number">1</span></span><br><span class="line"><span class="number">71.79646205863379</span>,<span class="number">78.45356224515052</span>,<span class="number">1</span></span><br><span class="line"><span class="number">75.3956114656803</span>,<span class="number">85.75993667331619</span>,<span class="number">1</span></span><br><span class="line"><span class="number">35.28611281526193</span>,<span class="number">47.02051394723416</span>,<span class="number">0</span></span><br><span class="line"><span class="number">56.25381749711624</span>,<span class="number">39.26147251058019</span>,<span class="number">0</span></span><br><span class="line"><span class="number">30.05882244669796</span>,<span class="number">49.59297386723685</span>,<span class="number">0</span></span><br><span class="line"><span class="number">44.66826172480893</span>,<span class="number">66.45008614558913</span>,<span class="number">0</span></span><br><span class="line"><span class="number">66.56089447242954</span>,<span class="number">41.09209807936973</span>,<span class="number">0</span></span><br><span class="line"><span class="number">40.45755098375164</span>,<span class="number">97.53518548909936</span>,<span class="number">1</span></span><br><span class="line"><span class="number">49.07256321908844</span>,<span class="number">51.88321182073966</span>,<span class="number">0</span></span><br><span class="line"><span class="number">80.27957401466998</span>,<span class="number">92.11606081344084</span>,<span class="number">1</span></span><br><span class="line"><span class="number">66.74671856944039</span>,<span class="number">60.99139402740988</span>,<span class="number">1</span></span><br><span class="line"><span class="number">32.72283304060323</span>,<span class="number">43.30717306430063</span>,<span class="number">0</span></span><br><span class="line"><span class="number">64.0393204150601</span>,<span class="number">78.03168802018232</span>,<span class="number">1</span></span><br><span class="line"><span class="number">72.34649422579923</span>,<span class="number">96.22759296761404</span>,<span class="number">1</span></span><br><span class="line"><span class="number">60.45788573918959</span>,<span class="number">73.09499809758037</span>,<span class="number">1</span></span><br><span class="line"><span class="number">58.84095621726802</span>,<span class="number">75.85844831279042</span>,<span class="number">1</span></span><br><span class="line"><span class="number">99.82785779692128</span>,<span class="number">72.36925193383885</span>,<span class="number">1</span></span><br><span class="line"><span class="number">47.26426910848174</span>,<span class="number">88.47586499559782</span>,<span class="number">1</span></span><br><span class="line"><span class="number">50.45815980285988</span>,<span class="number">75.80985952982456</span>,<span class="number">1</span></span><br><span class="line"><span class="number">60.45555629271532</span>,<span class="number">42.50840943572217</span>,<span class="number">0</span></span><br><span class="line"><span class="number">82.22666157785568</span>,<span class="number">42.71987853716458</span>,<span class="number">0</span></span><br><span class="line"><span class="number">88.9138964166533</span>,<span class="number">69.80378889835472</span>,<span class="number">1</span></span><br><span class="line"><span class="number">94.83450672430196</span>,<span class="number">45.69430680250754</span>,<span class="number">1</span></span><br><span class="line"><span class="number">67.31925746917527</span>,<span class="number">66.58935317747915</span>,<span class="number">1</span></span><br><span class="line"><span class="number">57.23870631569862</span>,<span class="number">59.51428198012956</span>,<span class="number">1</span></span><br><span class="line"><span class="number">80.36675600171273</span>,<span class="number">90.96014789746954</span>,<span class="number">1</span></span><br><span class="line"><span class="number">68.46852178591112</span>,<span class="number">85.59430710452014</span>,<span class="number">1</span></span><br><span class="line"><span class="number">42.0754545384731</span>,<span class="number">78.84478600148043</span>,<span class="number">0</span></span><br><span class="line"><span class="number">75.47770200533905</span>,<span class="number">90.42453899753964</span>,<span class="number">1</span></span><br><span class="line"><span class="number">78.63542434898018</span>,<span class="number">96.64742716885644</span>,<span class="number">1</span></span><br><span class="line"><span class="number">52.34800398794107</span>,<span class="number">60.76950525602592</span>,<span class="number">0</span></span><br><span class="line"><span class="number">94.09433112516793</span>,<span class="number">77.15910509073893</span>,<span class="number">1</span></span><br><span class="line"><span class="number">90.44855097096364</span>,<span class="number">87.50879176484702</span>,<span class="number">1</span></span><br><span class="line"><span class="number">55.48216114069585</span>,<span class="number">35.57070347228866</span>,<span class="number">0</span></span><br><span class="line"><span class="number">74.49269241843041</span>,<span class="number">84.84513684930135</span>,<span class="number">1</span></span><br><span class="line"><span class="number">89.84580670720979</span>,<span class="number">45.35828361091658</span>,<span class="number">1</span></span><br><span class="line"><span class="number">83.48916274498238</span>,<span class="number">48.38028579728175</span>,<span class="number">1</span></span><br><span class="line"><span class="number">42.2617008099817</span>,<span class="number">87.10385094025457</span>,<span class="number">1</span></span><br><span class="line"><span class="number">99.31500880510394</span>,<span class="number">68.77540947206617</span>,<span class="number">1</span></span><br><span class="line"><span class="number">55.34001756003703</span>,<span class="number">64.9319380069486</span>,<span class="number">1</span></span><br><span class="line"><span class="number">74.77589300092767</span>,<span class="number">89.52981289513276</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="ex2data2-txt"><a href="#ex2data2-txt" class="headerlink" title="ex2data2.txt"></a>ex2data2.txt</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.051267</span>,<span class="number">0.69956</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.092742</span>,<span class="number">0.68494</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.21371</span>,<span class="number">0.69225</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.375</span>,<span class="number">0.50219</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.51325</span>,<span class="number">0.46564</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.52477</span>,<span class="number">0.2098</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.39804</span>,<span class="number">0.034357</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.30588</span>,<span class="number">-0.19225</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.016705</span>,<span class="number">-0.40424</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.13191</span>,<span class="number">-0.51389</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.38537</span>,<span class="number">-0.56506</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.52938</span>,<span class="number">-0.5212</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.63882</span>,<span class="number">-0.24342</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.73675</span>,<span class="number">-0.18494</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.54666</span>,<span class="number">0.48757</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.322</span>,<span class="number">0.5826</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.16647</span>,<span class="number">0.53874</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.046659</span>,<span class="number">0.81652</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.17339</span>,<span class="number">0.69956</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.47869</span>,<span class="number">0.63377</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.60541</span>,<span class="number">0.59722</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.62846</span>,<span class="number">0.33406</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.59389</span>,<span class="number">0.005117</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.42108</span>,<span class="number">-0.27266</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.11578</span>,<span class="number">-0.39693</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.20104</span>,<span class="number">-0.60161</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.46601</span>,<span class="number">-0.53582</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.67339</span>,<span class="number">-0.53582</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.13882</span>,<span class="number">0.54605</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.29435</span>,<span class="number">0.77997</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.26555</span>,<span class="number">0.96272</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.16187</span>,<span class="number">0.8019</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.17339</span>,<span class="number">0.64839</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.28283</span>,<span class="number">0.47295</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.36348</span>,<span class="number">0.31213</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.30012</span>,<span class="number">0.027047</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.23675</span>,<span class="number">-0.21418</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.06394</span>,<span class="number">-0.18494</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.062788</span>,<span class="number">-0.16301</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.22984</span>,<span class="number">-0.41155</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.2932</span>,<span class="number">-0.2288</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.48329</span>,<span class="number">-0.18494</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.64459</span>,<span class="number">-0.14108</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.46025</span>,<span class="number">0.012427</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.6273</span>,<span class="number">0.15863</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.57546</span>,<span class="number">0.26827</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.72523</span>,<span class="number">0.44371</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.22408</span>,<span class="number">0.52412</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.44297</span>,<span class="number">0.67032</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.322</span>,<span class="number">0.69225</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.13767</span>,<span class="number">0.57529</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.0063364</span>,<span class="number">0.39985</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.092742</span>,<span class="number">0.55336</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.20795</span>,<span class="number">0.35599</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.20795</span>,<span class="number">0.17325</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.43836</span>,<span class="number">0.21711</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.21947</span>,<span class="number">-0.016813</span>,<span class="number">1</span></span><br><span class="line"><span class="number">-0.13882</span>,<span class="number">-0.27266</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0.18376</span>,<span class="number">0.93348</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.22408</span>,<span class="number">0.77997</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.29896</span>,<span class="number">0.61915</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.50634</span>,<span class="number">0.75804</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.61578</span>,<span class="number">0.7288</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.60426</span>,<span class="number">0.59722</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.76555</span>,<span class="number">0.50219</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.92684</span>,<span class="number">0.3633</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.82316</span>,<span class="number">0.27558</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.96141</span>,<span class="number">0.085526</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.93836</span>,<span class="number">0.012427</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.86348</span>,<span class="number">-0.082602</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.89804</span>,<span class="number">-0.20687</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.85196</span>,<span class="number">-0.36769</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.82892</span>,<span class="number">-0.5212</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.79435</span>,<span class="number">-0.55775</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.59274</span>,<span class="number">-0.7405</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.51786</span>,<span class="number">-0.5943</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.46601</span>,<span class="number">-0.41886</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.35081</span>,<span class="number">-0.57968</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.28744</span>,<span class="number">-0.76974</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.085829</span>,<span class="number">-0.75512</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.14919</span>,<span class="number">-0.57968</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.13306</span>,<span class="number">-0.4481</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.40956</span>,<span class="number">-0.41155</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.39228</span>,<span class="number">-0.25804</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.74366</span>,<span class="number">-0.25804</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.69758</span>,<span class="number">0.041667</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.75518</span>,<span class="number">0.2902</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.69758</span>,<span class="number">0.68494</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.4038</span>,<span class="number">0.70687</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.38076</span>,<span class="number">0.91886</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.50749</span>,<span class="number">0.90424</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.54781</span>,<span class="number">0.70687</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.10311</span>,<span class="number">0.77997</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.057028</span>,<span class="number">0.91886</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.10426</span>,<span class="number">0.99196</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.081221</span>,<span class="number">1.1089</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.28744</span>,<span class="number">1.087</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.39689</span>,<span class="number">0.82383</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.63882</span>,<span class="number">0.88962</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.82316</span>,<span class="number">0.66301</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.67339</span>,<span class="number">0.64108</span>,<span class="number">0</span></span><br><span class="line"><span class="number">1.0709</span>,<span class="number">0.10015</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.046659</span>,<span class="number">-0.57968</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.23675</span>,<span class="number">-0.63816</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.15035</span>,<span class="number">-0.36769</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.49021</span>,<span class="number">-0.3019</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.46717</span>,<span class="number">-0.13377</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.28859</span>,<span class="number">-0.060673</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.61118</span>,<span class="number">-0.067982</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.66302</span>,<span class="number">-0.21418</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.59965</span>,<span class="number">-0.41886</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.72638</span>,<span class="number">-0.082602</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.83007</span>,<span class="number">0.31213</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.72062</span>,<span class="number">0.53874</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.59389</span>,<span class="number">0.49488</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.48445</span>,<span class="number">0.99927</span>,<span class="number">0</span></span><br><span class="line"><span class="number">-0.0063364</span>,<span class="number">0.99927</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0.63265</span>,<span class="number">-0.030612</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目要求&quot;&gt;&lt;a href=&quot;#题目要求&quot; class=&quot;headerlink&quot; title=&quot;题目要求&quot;&gt;&lt;/a&gt;题目要求&lt;/h1&gt;&lt;p&gt;根据学生两门课的成绩和是否入学的数据，预测学生能否顺利入学：利用&lt;code&gt;ex2data1.txt&lt;/code&gt;和&lt;cod
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://chouxianyu.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="python" scheme="https://chouxianyu.github.io/tags/python/"/>
    
      <category term="sklearn" scheme="https://chouxianyu.github.io/tags/sklearn/"/>
    
      <category term="逻辑回归" scheme="https://chouxianyu.github.io/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>sklearn线性回归实现房价预测模型</title>
    <link href="https://chouxianyu.github.io/2019/10/19/sklearn%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%88%BF%E4%BB%B7%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>https://chouxianyu.github.io/2019/10/19/sklearn线性回归实现房价预测模型/</id>
    <published>2019-10-19T09:58:50.000Z</published>
    <updated>2019-10-21T17:01:02.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>建立房价预测模型：利用<code>ex1data1.txt</code>（<strong>单特征</strong>）和<code>ex1data2.txt</code>（<strong>多特征</strong>）中的数据，进行线性回归和预测。</p><p>作散点图可知，数据大致符合线性关系，故暂不研究其他形式的回归。</p><p>两份数据放在最后。</p><h1 id="单特征线性回归"><a href="#单特征线性回归" class="headerlink" title="单特征线性回归"></a>单特征线性回归</h1><p><code>ex1data1.txt</code>中的数据是单特征，作一个简单的线性回归即可：$y=ax+b$。</p><p>根据是否分割数据，产生两种方案：方案一，所有样本都用来训练和预测；方案二，一部分样本用来训练，一部分用来检验模型。</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p><strong>对ex1data1.txt中的数据进行线性回归，所有样本都用来训练和预测。</strong></p><p><strong>代码实现如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    对ex1data1.txt中的数据进行线性回归，所有样本都用来训练和预测</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score</span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据格式：城市人口,食品经销商利润</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">data = np.loadtxt(<span class="string">'ex1data1.txt'</span>, delimiter=<span class="string">','</span>)</span><br><span class="line">data_X = data[:, <span class="number">0</span>]</span><br><span class="line">data_y = data[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(data_X.reshape([<span class="number">-1</span>, <span class="number">1</span>]), data_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用模型进行预测</span></span><br><span class="line">y_predict = model.predict(data_X.reshape([<span class="number">-1</span>, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果可视化</span></span><br><span class="line">plt.scatter(data_X, data_y, color=<span class="string">'red'</span>)</span><br><span class="line">plt.plot(data_X, y_predict, color=<span class="string">'blue'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">plt.xlabel(<span class="string">'城市人口'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'食品经销商利润'</span>)</span><br><span class="line">plt.title(<span class="string">'线性回归——城市人口与食品经销商利润的关系'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型参数</span></span><br><span class="line">print(model.coef_)</span><br><span class="line">print(model.intercept_)</span><br><span class="line"><span class="comment"># MSE</span></span><br><span class="line">print(mean_squared_error(data_y, y_predict))</span><br><span class="line"><span class="comment"># R^2</span></span><br><span class="line">print(r2_score(data_y, y_predict))</span><br></pre></td></tr></table></figure><p><strong>结果如下：</strong></p><p>由下可知函数形式以及$R^2$为0.70</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1.19303364</span>]</span><br><span class="line"><span class="number">-3.89578087831185</span></span><br><span class="line"><span class="number">8.953942751950358</span></span><br><span class="line"><span class="number">0.7020315537841397</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/19/q1nRIceKBXrLt3P.png" alt="ex1data1_1.png"></p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p><strong>对ex1data1.txt中的数据进行线性回归，部分样本用来训练，部分样本用来预测。</strong></p><p><strong>实现如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    对ex1data1.txt中的数据进行线性回归，部分样本用来训练，部分样本用来预测</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score</span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据格式：城市人口,食品经销商利润</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">data = np.loadtxt(<span class="string">'ex1data1.txt'</span>, delimiter=<span class="string">','</span>)</span><br><span class="line">data_X = data[:, <span class="number">0</span>]</span><br><span class="line">data_y = data[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据分割</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(data_X, data_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(X_train.reshape([<span class="number">-1</span>, <span class="number">1</span>]), y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用模型进行预测</span></span><br><span class="line">y_predict = model.predict(X_test.reshape([<span class="number">-1</span>, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果可视化</span></span><br><span class="line">plt.scatter(X_test, y_test, color=<span class="string">'red'</span>)  <span class="comment"># 测试样本</span></span><br><span class="line">plt.plot(X_test, y_predict, color=<span class="string">'blue'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">plt.xlabel(<span class="string">'城市人口'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'食品经销商利润'</span>)</span><br><span class="line">plt.title(<span class="string">'线性回归——城市人口与食品经销商利润的关系'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型参数</span></span><br><span class="line">print(model.coef_)</span><br><span class="line">print(model.intercept_)</span><br><span class="line"><span class="comment"># MSE</span></span><br><span class="line">print(mean_squared_error(y_test, y_predict))</span><br><span class="line"><span class="comment"># R^2</span></span><br><span class="line">print(r2_score(y_test, y_predict))</span><br></pre></td></tr></table></figure><p><strong>结果如下</strong>：</p><p>由下可知函数形式以及$R^2$为0.80</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1.21063939</span>]</span><br><span class="line"><span class="number">-4.195481965945055</span></span><br><span class="line"><span class="number">5.994362667047617</span></span><br><span class="line"><span class="number">0.8095125123727652</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/19/B23Ga4cetvqFQAJ.png" alt="ex1data1_2.png"></p><h1 id="多特征线性回归"><a href="#多特征线性回归" class="headerlink" title="多特征线性回归"></a>多特征线性回归</h1><p><code>ex1data2.txt</code>中的数据是二个特征，作一个最简单的多元（在此为二元）线性回归即可：$y=a_1x_1+a_2x_2+b$。</p><p><strong>对ex1data2.txt中的数据进行线性回归，所有样本都用来训练和预测。</strong></p><p><strong>代码实现如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    对ex1data2.txt中的数据进行线性回归，所有样本都用来训练和预测</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D  <span class="comment"># 不要去掉这个import</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score</span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据格式：城市人口,房间数目,房价</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">data = np.loadtxt(<span class="string">'ex1data2.txt'</span>, delimiter=<span class="string">','</span>)</span><br><span class="line">data_X = data[:, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">data_y = data[:, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(data_X, data_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用模型进行预测</span></span><br><span class="line">y_predict = model.predict(data_X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果可视化</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.gca(projection=<span class="string">'3d'</span>)</span><br><span class="line">ax.scatter(data_X[:, <span class="number">0</span>], data_X[:, <span class="number">1</span>], data_y, color=<span class="string">'red'</span>)</span><br><span class="line">ax.plot(data_X[:, <span class="number">0</span>], data_X[:, <span class="number">1</span>], y_predict, color=<span class="string">'blue'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'城市人口'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'房间数目'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'房价'</span>)</span><br><span class="line">plt.title(<span class="string">'线性回归——城市人口、房间数目与房价的关系'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型参数</span></span><br><span class="line">print(model.coef_)</span><br><span class="line">print(model.intercept_)</span><br><span class="line"><span class="comment"># MSE</span></span><br><span class="line">print(mean_squared_error(data_y, y_predict))</span><br><span class="line"><span class="comment"># R^2</span></span><br><span class="line">print(r2_score(data_y, y_predict))</span><br></pre></td></tr></table></figure><p><strong>结果如下：</strong></p><p>由下可知函数形式以及$R^2$为0.73</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[  <span class="number">139.21067402</span> <span class="number">-8738.01911233</span>]</span><br><span class="line"><span class="number">89597.90954279748</span></span><br><span class="line"><span class="number">4086560101.205658</span></span><br><span class="line"><span class="number">0.7329450180289141</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/19/kMKdfpgbwF4EXhR.png" alt="ex1data2.png"></p><h1 id="两份数据"><a href="#两份数据" class="headerlink" title="两份数据"></a>两份数据</h1><h2 id="ex1data1-txt"><a href="#ex1data1-txt" class="headerlink" title="ex1data1.txt"></a>ex1data1.txt</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6.1101</span>,<span class="number">17.592</span></span><br><span class="line"><span class="number">5.5277</span>,<span class="number">9.1302</span></span><br><span class="line"><span class="number">8.5186</span>,<span class="number">13.662</span></span><br><span class="line"><span class="number">7.0032</span>,<span class="number">11.854</span></span><br><span class="line"><span class="number">5.8598</span>,<span class="number">6.8233</span></span><br><span class="line"><span class="number">8.3829</span>,<span class="number">11.886</span></span><br><span class="line"><span class="number">7.4764</span>,<span class="number">4.3483</span></span><br><span class="line"><span class="number">8.5781</span>,<span class="number">12</span></span><br><span class="line"><span class="number">6.4862</span>,<span class="number">6.5987</span></span><br><span class="line"><span class="number">5.0546</span>,<span class="number">3.8166</span></span><br><span class="line"><span class="number">5.7107</span>,<span class="number">3.2522</span></span><br><span class="line"><span class="number">14.164</span>,<span class="number">15.505</span></span><br><span class="line"><span class="number">5.734</span>,<span class="number">3.1551</span></span><br><span class="line"><span class="number">8.4084</span>,<span class="number">7.2258</span></span><br><span class="line"><span class="number">5.6407</span>,<span class="number">0.71618</span></span><br><span class="line"><span class="number">5.3794</span>,<span class="number">3.5129</span></span><br><span class="line"><span class="number">6.3654</span>,<span class="number">5.3048</span></span><br><span class="line"><span class="number">5.1301</span>,<span class="number">0.56077</span></span><br><span class="line"><span class="number">6.4296</span>,<span class="number">3.6518</span></span><br><span class="line"><span class="number">7.0708</span>,<span class="number">5.3893</span></span><br><span class="line"><span class="number">6.1891</span>,<span class="number">3.1386</span></span><br><span class="line"><span class="number">20.27</span>,<span class="number">21.767</span></span><br><span class="line"><span class="number">5.4901</span>,<span class="number">4.263</span></span><br><span class="line"><span class="number">6.3261</span>,<span class="number">5.1875</span></span><br><span class="line"><span class="number">5.5649</span>,<span class="number">3.0825</span></span><br><span class="line"><span class="number">18.945</span>,<span class="number">22.638</span></span><br><span class="line"><span class="number">12.828</span>,<span class="number">13.501</span></span><br><span class="line"><span class="number">10.957</span>,<span class="number">7.0467</span></span><br><span class="line"><span class="number">13.176</span>,<span class="number">14.692</span></span><br><span class="line"><span class="number">22.203</span>,<span class="number">24.147</span></span><br><span class="line"><span class="number">5.2524</span>,<span class="number">-1.22</span></span><br><span class="line"><span class="number">6.5894</span>,<span class="number">5.9966</span></span><br><span class="line"><span class="number">9.2482</span>,<span class="number">12.134</span></span><br><span class="line"><span class="number">5.8918</span>,<span class="number">1.8495</span></span><br><span class="line"><span class="number">8.2111</span>,<span class="number">6.5426</span></span><br><span class="line"><span class="number">7.9334</span>,<span class="number">4.5623</span></span><br><span class="line"><span class="number">8.0959</span>,<span class="number">4.1164</span></span><br><span class="line"><span class="number">5.6063</span>,<span class="number">3.3928</span></span><br><span class="line"><span class="number">12.836</span>,<span class="number">10.117</span></span><br><span class="line"><span class="number">6.3534</span>,<span class="number">5.4974</span></span><br><span class="line"><span class="number">5.4069</span>,<span class="number">0.55657</span></span><br><span class="line"><span class="number">6.8825</span>,<span class="number">3.9115</span></span><br><span class="line"><span class="number">11.708</span>,<span class="number">5.3854</span></span><br><span class="line"><span class="number">5.7737</span>,<span class="number">2.4406</span></span><br><span class="line"><span class="number">7.8247</span>,<span class="number">6.7318</span></span><br><span class="line"><span class="number">7.0931</span>,<span class="number">1.0463</span></span><br><span class="line"><span class="number">5.0702</span>,<span class="number">5.1337</span></span><br><span class="line"><span class="number">5.8014</span>,<span class="number">1.844</span></span><br><span class="line"><span class="number">11.7</span>,<span class="number">8.0043</span></span><br><span class="line"><span class="number">5.5416</span>,<span class="number">1.0179</span></span><br><span class="line"><span class="number">7.5402</span>,<span class="number">6.7504</span></span><br><span class="line"><span class="number">5.3077</span>,<span class="number">1.8396</span></span><br><span class="line"><span class="number">7.4239</span>,<span class="number">4.2885</span></span><br><span class="line"><span class="number">7.6031</span>,<span class="number">4.9981</span></span><br><span class="line"><span class="number">6.3328</span>,<span class="number">1.4233</span></span><br><span class="line"><span class="number">6.3589</span>,<span class="number">-1.4211</span></span><br><span class="line"><span class="number">6.2742</span>,<span class="number">2.4756</span></span><br><span class="line"><span class="number">5.6397</span>,<span class="number">4.6042</span></span><br><span class="line"><span class="number">9.3102</span>,<span class="number">3.9624</span></span><br><span class="line"><span class="number">9.4536</span>,<span class="number">5.4141</span></span><br><span class="line"><span class="number">8.8254</span>,<span class="number">5.1694</span></span><br><span class="line"><span class="number">5.1793</span>,<span class="number">-0.74279</span></span><br><span class="line"><span class="number">21.279</span>,<span class="number">17.929</span></span><br><span class="line"><span class="number">14.908</span>,<span class="number">12.054</span></span><br><span class="line"><span class="number">18.959</span>,<span class="number">17.054</span></span><br><span class="line"><span class="number">7.2182</span>,<span class="number">4.8852</span></span><br><span class="line"><span class="number">8.2951</span>,<span class="number">5.7442</span></span><br><span class="line"><span class="number">10.236</span>,<span class="number">7.7754</span></span><br><span class="line"><span class="number">5.4994</span>,<span class="number">1.0173</span></span><br><span class="line"><span class="number">20.341</span>,<span class="number">20.992</span></span><br><span class="line"><span class="number">10.136</span>,<span class="number">6.6799</span></span><br><span class="line"><span class="number">7.3345</span>,<span class="number">4.0259</span></span><br><span class="line"><span class="number">6.0062</span>,<span class="number">1.2784</span></span><br><span class="line"><span class="number">7.2259</span>,<span class="number">3.3411</span></span><br><span class="line"><span class="number">5.0269</span>,<span class="number">-2.6807</span></span><br><span class="line"><span class="number">6.5479</span>,<span class="number">0.29678</span></span><br><span class="line"><span class="number">7.5386</span>,<span class="number">3.8845</span></span><br><span class="line"><span class="number">5.0365</span>,<span class="number">5.7014</span></span><br><span class="line"><span class="number">10.274</span>,<span class="number">6.7526</span></span><br><span class="line"><span class="number">5.1077</span>,<span class="number">2.0576</span></span><br><span class="line"><span class="number">5.7292</span>,<span class="number">0.47953</span></span><br><span class="line"><span class="number">5.1884</span>,<span class="number">0.20421</span></span><br><span class="line"><span class="number">6.3557</span>,<span class="number">0.67861</span></span><br><span class="line"><span class="number">9.7687</span>,<span class="number">7.5435</span></span><br><span class="line"><span class="number">6.5159</span>,<span class="number">5.3436</span></span><br><span class="line"><span class="number">8.5172</span>,<span class="number">4.2415</span></span><br><span class="line"><span class="number">9.1802</span>,<span class="number">6.7981</span></span><br><span class="line"><span class="number">6.002</span>,<span class="number">0.92695</span></span><br><span class="line"><span class="number">5.5204</span>,<span class="number">0.152</span></span><br><span class="line"><span class="number">5.0594</span>,<span class="number">2.8214</span></span><br><span class="line"><span class="number">5.7077</span>,<span class="number">1.8451</span></span><br><span class="line"><span class="number">7.6366</span>,<span class="number">4.2959</span></span><br><span class="line"><span class="number">5.8707</span>,<span class="number">7.2029</span></span><br><span class="line"><span class="number">5.3054</span>,<span class="number">1.9869</span></span><br><span class="line"><span class="number">8.2934</span>,<span class="number">0.14454</span></span><br><span class="line"><span class="number">13.394</span>,<span class="number">9.0551</span></span><br><span class="line"><span class="number">5.4369</span>,<span class="number">0.61705</span></span><br></pre></td></tr></table></figure><h2 id="ex1data2-txt"><a href="#ex1data2-txt" class="headerlink" title="ex1data2.txt"></a>ex1data2.txt</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2104</span>,<span class="number">3</span>,<span class="number">399900</span></span><br><span class="line"><span class="number">1600</span>,<span class="number">3</span>,<span class="number">329900</span></span><br><span class="line"><span class="number">2400</span>,<span class="number">3</span>,<span class="number">369000</span></span><br><span class="line"><span class="number">1416</span>,<span class="number">2</span>,<span class="number">232000</span></span><br><span class="line"><span class="number">3000</span>,<span class="number">4</span>,<span class="number">539900</span></span><br><span class="line"><span class="number">1985</span>,<span class="number">4</span>,<span class="number">299900</span></span><br><span class="line"><span class="number">1534</span>,<span class="number">3</span>,<span class="number">314900</span></span><br><span class="line"><span class="number">1427</span>,<span class="number">3</span>,<span class="number">198999</span></span><br><span class="line"><span class="number">1380</span>,<span class="number">3</span>,<span class="number">212000</span></span><br><span class="line"><span class="number">1494</span>,<span class="number">3</span>,<span class="number">242500</span></span><br><span class="line"><span class="number">1940</span>,<span class="number">4</span>,<span class="number">239999</span></span><br><span class="line"><span class="number">2000</span>,<span class="number">3</span>,<span class="number">347000</span></span><br><span class="line"><span class="number">1890</span>,<span class="number">3</span>,<span class="number">329999</span></span><br><span class="line"><span class="number">4478</span>,<span class="number">5</span>,<span class="number">699900</span></span><br><span class="line"><span class="number">1268</span>,<span class="number">3</span>,<span class="number">259900</span></span><br><span class="line"><span class="number">2300</span>,<span class="number">4</span>,<span class="number">449900</span></span><br><span class="line"><span class="number">1320</span>,<span class="number">2</span>,<span class="number">299900</span></span><br><span class="line"><span class="number">1236</span>,<span class="number">3</span>,<span class="number">199900</span></span><br><span class="line"><span class="number">2609</span>,<span class="number">4</span>,<span class="number">499998</span></span><br><span class="line"><span class="number">3031</span>,<span class="number">4</span>,<span class="number">599000</span></span><br><span class="line"><span class="number">1767</span>,<span class="number">3</span>,<span class="number">252900</span></span><br><span class="line"><span class="number">1888</span>,<span class="number">2</span>,<span class="number">255000</span></span><br><span class="line"><span class="number">1604</span>,<span class="number">3</span>,<span class="number">242900</span></span><br><span class="line"><span class="number">1962</span>,<span class="number">4</span>,<span class="number">259900</span></span><br><span class="line"><span class="number">3890</span>,<span class="number">3</span>,<span class="number">573900</span></span><br><span class="line"><span class="number">1100</span>,<span class="number">3</span>,<span class="number">249900</span></span><br><span class="line"><span class="number">1458</span>,<span class="number">3</span>,<span class="number">464500</span></span><br><span class="line"><span class="number">2526</span>,<span class="number">3</span>,<span class="number">469000</span></span><br><span class="line"><span class="number">2200</span>,<span class="number">3</span>,<span class="number">475000</span></span><br><span class="line"><span class="number">2637</span>,<span class="number">3</span>,<span class="number">299900</span></span><br><span class="line"><span class="number">1839</span>,<span class="number">2</span>,<span class="number">349900</span></span><br><span class="line"><span class="number">1000</span>,<span class="number">1</span>,<span class="number">169900</span></span><br><span class="line"><span class="number">2040</span>,<span class="number">4</span>,<span class="number">314900</span></span><br><span class="line"><span class="number">3137</span>,<span class="number">3</span>,<span class="number">579900</span></span><br><span class="line"><span class="number">1811</span>,<span class="number">4</span>,<span class="number">285900</span></span><br><span class="line"><span class="number">1437</span>,<span class="number">3</span>,<span class="number">249900</span></span><br><span class="line"><span class="number">1239</span>,<span class="number">3</span>,<span class="number">229900</span></span><br><span class="line"><span class="number">2132</span>,<span class="number">4</span>,<span class="number">345000</span></span><br><span class="line"><span class="number">4215</span>,<span class="number">4</span>,<span class="number">549000</span></span><br><span class="line"><span class="number">2162</span>,<span class="number">4</span>,<span class="number">287000</span></span><br><span class="line"><span class="number">1664</span>,<span class="number">2</span>,<span class="number">368500</span></span><br><span class="line"><span class="number">2238</span>,<span class="number">3</span>,<span class="number">329900</span></span><br><span class="line"><span class="number">2567</span>,<span class="number">4</span>,<span class="number">314000</span></span><br><span class="line"><span class="number">1200</span>,<span class="number">3</span>,<span class="number">299000</span></span><br><span class="line"><span class="number">852</span>,<span class="number">2</span>,<span class="number">179900</span></span><br><span class="line"><span class="number">1852</span>,<span class="number">4</span>,<span class="number">299900</span></span><br><span class="line"><span class="number">1203</span>,<span class="number">3</span>,<span class="number">239500</span></span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目要求&quot;&gt;&lt;a href=&quot;#题目要求&quot; class=&quot;headerlink&quot; title=&quot;题目要求&quot;&gt;&lt;/a&gt;题目要求&lt;/h1&gt;&lt;p&gt;建立房价预测模型：利用&lt;code&gt;ex1data1.txt&lt;/code&gt;（&lt;strong&gt;单特征&lt;/strong&gt;）和&lt;co
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://chouxianyu.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="python" scheme="https://chouxianyu.github.io/tags/python/"/>
    
      <category term="sklearn" scheme="https://chouxianyu.github.io/tags/sklearn/"/>
    
      <category term="线性回归" scheme="https://chouxianyu.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>python+mysql:实现一千万条数据插入数据库</title>
    <link href="https://chouxianyu.github.io/2019/10/18/python-mysql-%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%8D%83%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://chouxianyu.github.io/2019/10/18/python-mysql-实现一千万条数据插入数据库/</id>
    <published>2019-10-17T19:05:49.000Z</published>
    <updated>2019-11-10T08:48:37.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h1><p>构建一个关系模式和课本中的关系<code>movies(title,year,length,movietype,studioname,producerC)</code>一样的关系，名称自定，在这个关系中插入1000万条记录。</p><p>注：关系<code>movies</code>的主键为<code>(title,year)</code>。</p><p>要求如下：</p><ol><li>在尽可能短的时间内完成；</li><li>只允许使用原生的SQL，不允许将SQL作为嵌入语言，也不允许使用其他语言如C#、Python等来完成；</li><li>提交你的详细解决方案和结果。</li></ol><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>查资料得知</p><ul><li>可以将多条insert语句合并为一句，即一条insert语句插入多个元组</li><li>可以通过事务，减少每条insert语句都建立新事务带来的时空消耗</li><li>可以通过<code>load data infile</code>将文件中的数据导入mysql，似乎很快的样子</li></ul><p>虽然第三种似乎很快，但在此我采用了前两种方法，通过合并+事务实现。</p><p>我通过python模拟生成（只改变主键中的year，以生成不同元组）1千万条记录，将其组织为$10\times100\times10000$条记录添加进<code>movies</code>，分成10个事务，每个事务里有100条insert语句，每条insert语句插入10000个元组。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>实现思路如下：</p><ol><li>复制原数据库<code>moviedb</code>至<code>newmoviedb</code></li><li>设置max_allowed_packet，以保证一条insert语句可以插入足够多的元组</li><li>用python生成一条一次插入10000个元组的insert语句</li><li>用python生成一个包含100条insert语句的事务，保存至sql文件</li><li>用navicat运行该sql文件</li></ol><p>至此就可以实现一百万条记录的插入了（我的电脑耗时327s？好像很慢！？）</p><p>之后再套一层循环就可以继续完成1千万条记录的插入了。</p><p>下面给出可能用到的步骤（如未说明，代码默认为控制行或者mysql环境下的命令）：</p><h2 id="复制数据库"><a href="#复制数据库" class="headerlink" title="复制数据库"></a>复制数据库</h2><h3 id="创建新数据库newmoviedb"><a href="#创建新数据库newmoviedb" class="headerlink" title="创建新数据库newmoviedb"></a>创建新数据库newmoviedb</h3><p>登录并创建数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">CREATE DATABASE `newmoviedb` DEFAULT CHARACTER SET UTF8 COLLATE UTF8_GENERAL_CI;</span><br></pre></td></tr></table></figure><h3 id="复制moviedb至newmoviedb"><a href="#复制moviedb至newmoviedb" class="headerlink" title="复制moviedb至newmoviedb"></a>复制moviedb至newmoviedb</h3><p>复制数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump moviedb -u root -pchouxianyu --add-drop-table | mysql newmoviedb -u root -pchouxianyu</span><br></pre></td></tr></table></figure><p>上面<code>chouxianyu</code>是我的mysql密码</p><h3 id="进入newmoviedb"><a href="#进入newmoviedb" class="headerlink" title="进入newmoviedb"></a>进入newmoviedb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use newmoviedb;</span><br></pre></td></tr></table></figure><h2 id="设置max-allowed-packet"><a href="#设置max-allowed-packet" class="headerlink" title="设置max_allowed_packet"></a>设置max_allowed_packet</h2><p>设置max_allowed_packet为100M</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global max_allowed_packet = 100*1024*1024;</span><br></pre></td></tr></table></figure><h2 id="删除movies中所有元素（调试用）"><a href="#删除movies中所有元素（调试用）" class="headerlink" title="删除movies中所有元素（调试用）"></a>删除movies中所有元素（调试用）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> from movies;</span><br></pre></td></tr></table></figure><h2 id="生成一条insert语句"><a href="#生成一条insert语句" class="headerlink" title="生成一条insert语句"></a>生成一条insert语句</h2><p>下边是<code>insert.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">insertStr = <span class="string">"INSERT INTO movies(title,year,length,movietype,studioname,producerC) VALUES"</span></span><br><span class="line">value1_str = <span class="string">"('mymovietitle',"</span></span><br><span class="line"><span class="comment"># j</span></span><br><span class="line">value2_str = <span class="string">",120,'sciFic','MGM',100)"</span></span><br><span class="line"><span class="comment"># ,;</span></span><br><span class="line">num_value = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">r'C:\Users\Cxy\Documents\Navicat\MySQL\Servers\MySQL\newmoviedb\insertRow.sql'</span>, <span class="string">'w'</span>)  <span class="comment"># 清空文件内容再写</span></span><br><span class="line"></span><br><span class="line">f.write(insertStr)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, num_value):</span><br><span class="line">    f.write(value1_str)</span><br><span class="line">    f.write(str(j))</span><br><span class="line">    f.write(value2_str)</span><br><span class="line">    f.write(<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line">f.write(value1_str)</span><br><span class="line">f.write(str(num_value))</span><br><span class="line">f.write(value2_str)</span><br><span class="line">f.write(<span class="string">';'</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h2 id="生成一个事务"><a href="#生成一个事务" class="headerlink" title="生成一个事务"></a>生成一个事务</h2><p>以下是<code>transaction.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">transaction_begin_str = <span class="string">"START TRANSACTION;\n"</span></span><br><span class="line">transaction_end_str = <span class="string">"COMMIT;\n"</span></span><br><span class="line"></span><br><span class="line">insertStr = <span class="string">"INSERT INTO movies(title,year,length,movietype,studioname,producerC) VALUES"</span></span><br><span class="line">value1_str = <span class="string">"('mymovietitle',"</span></span><br><span class="line"><span class="comment"># j</span></span><br><span class="line">value2_str = <span class="string">",120,'sciFic','MGM',100)"</span></span><br><span class="line"><span class="comment"># ,;</span></span><br><span class="line">num_value = <span class="number">10000</span></span><br><span class="line">num_sql = <span class="number">100</span></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">f = open(<span class="string">r'C:\Users\Cxy\Documents\Navicat\MySQL\Servers\MySQL\newmoviedb\transaction.sql'</span>, <span class="string">'w'</span>)  <span class="comment"># 清空文件内容再写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将SQL语句写入文件</span></span><br><span class="line">f.write(transaction_begin_str)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, num_sql+<span class="number">1</span>):</span><br><span class="line">    f.write(insertStr)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, num_value):</span><br><span class="line">        f.write(value1_str)</span><br><span class="line">        f.write(str(i*num_value*<span class="number">10</span>+j))</span><br><span class="line">        f.write(value2_str)</span><br><span class="line">        f.write(<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line">    f.write(value1_str)</span><br><span class="line">    f.write(str(i*num_value*<span class="number">10</span>+num_value))</span><br><span class="line">    f.write(value2_str)</span><br><span class="line">    f.write(<span class="string">';\n'</span>)</span><br><span class="line">f.write(transaction_end_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/freefei/p/7679991.html" target="_blank" rel="noopener">https://www.cnblogs.com/freefei/p/7679991.html</a></p><p><a href="https://blog.csdn.net/qq_22855325/article/details/76087138" target="_blank" rel="noopener">https://blog.csdn.net/qq_22855325/article/details/76087138</a></p><p><a href="https://blog.csdn.net/weixin_44595372/article/details/88723191" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44595372/article/details/88723191</a></p><p><a href="https://zhidao.baidu.com/question/185665472.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/185665472.html</a></p><p><a href="https://www.cnblogs.com/zhangjpn/p/6231662.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangjpn/p/6231662.html</a></p><p><a href="https://www.cnblogs.com/wangcp-2014/p/8038683.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangcp-2014/p/8038683.html</a></p><p><a href="https://blog.csdn.net/gb4215287/article/details/82669785" target="_blank" rel="noopener">https://blog.csdn.net/gb4215287/article/details/82669785</a></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;作业要求&quot;&gt;&lt;a href=&quot;#作业要求&quot; class=&quot;headerlink&quot; title=&quot;作业要求&quot;&gt;&lt;/a&gt;作业要求&lt;/h1&gt;&lt;p&gt;构建一个关系模式和课本中的关系&lt;code&gt;movies(title,year,length,movietype,studio
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="python" scheme="https://chouxianyu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1044</title>
    <link href="https://chouxianyu.github.io/2019/10/17/PAT%E4%B9%99%E7%BA%A71044/"/>
    <id>https://chouxianyu.github.io/2019/10/17/PAT乙级1044/</id>
    <published>2019-10-16T16:07:06.000Z</published>
    <updated>2019-10-16T16:12:03.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805279328157696" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805279328157696</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>需要注意的几个点：</p><ul><li><p>题目有指出给出的数字范围是[0,169)，即0至13*13，所以可知火星文不超两个单词：高位 低位</p><p>  这点我没注意（只是看了，没有细想）</p></li><li><p>火星数字低位数字是tret时（即是13的整数倍时），不用输出这个tret。</p><p>  这一点样例中有暗示，我没完全体会出来，只是看到数字为13时不用输出tret</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1044</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805279328157696</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RADIX 13</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 地球数字与火星数字的映射</span></span><br><span class="line"><span class="built_in">string</span> mars0[] = &#123;<span class="string">"tret"</span>, <span class="string">"jan"</span>, <span class="string">"feb"</span>, <span class="string">"mar"</span>, <span class="string">"apr"</span>, <span class="string">"may"</span>, <span class="string">"jun"</span>, <span class="string">"jly"</span>, <span class="string">"aug"</span>, <span class="string">"sep"</span>, <span class="string">"oct"</span>, <span class="string">"nov"</span>, <span class="string">"dec"</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> mars1[] = &#123;<span class="string">""</span>, <span class="string">"tam"</span>, <span class="string">"hel"</span>, <span class="string">"maa"</span>, <span class="string">"huh"</span>, <span class="string">"tou"</span>, <span class="string">"kes"</span>, <span class="string">"hei"</span>, <span class="string">"elo"</span>, <span class="string">"syy"</span>, <span class="string">"lok"</span>, <span class="string">"mer"</span>, <span class="string">"jou"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">earthToMars</span><span class="params">(<span class="built_in">string</span> line)</span></span>; <span class="comment">// 地球数字转火星数字，line是一行输入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">marsToEarth</span><span class="params">(<span class="built_in">string</span> line)</span></span>; <span class="comment">// 火星数字转地球数字，line是一行输入</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;             <span class="comment">// n行输入</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d\n"</span>, &amp;n); <span class="comment">// scanf默认不读取换行符，加上\n会读取换行符，或者使用getchar()读取换行符</span></span><br><span class="line">    <span class="built_in">string</span> line;       <span class="comment">// 保存一行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取n行输入并进行相应处理</span></span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 读取一行</span></span><br><span class="line">        getline(<span class="built_in">cin</span>, line);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分别处理并输出结果</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(line[<span class="number">0</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            earthToMars(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            marsToEarth(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">earthToMars</span><span class="params">(<span class="built_in">string</span> line)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = stoi(line);</span><br><span class="line">    <span class="keyword">if</span> (num &gt;= RADIX)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % RADIX == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; mars1[num / RADIX] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; mars1[num / RADIX] &lt;&lt; <span class="string">' '</span> &lt;&lt; mars0[num % RADIX] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mars0[num] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">marsToEarth</span><span class="params">(<span class="built_in">string</span> line)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(line)</span></span>; <span class="comment">// 用户输入的一行</span></span><br><span class="line">    <span class="built_in">string</span> str;            <span class="comment">// 用户输入的一个字符串</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strVec; <span class="comment">// 保存各位火星数字</span></span><br><span class="line">    <span class="keyword">int</span> num;               <span class="comment">// 最终求得的地球数字</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取字符串</span></span><br><span class="line">    <span class="keyword">while</span> (ss &gt;&gt; str)</span><br><span class="line">    &#123;</span><br><span class="line">        strVec.push_back(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一行有两个字符串，可表示[157,158]</span></span><br><span class="line">    <span class="keyword">if</span> (strVec.size() == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        str = strVec.front();</span><br><span class="line">        <span class="comment">// 高位数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RADIX; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str == mars1[i])</span><br><span class="line">            &#123;</span><br><span class="line">                num = RADIX * i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 低位数字</span></span><br><span class="line">        str = strVec.back();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RADIX; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str == mars0[i])</span><br><span class="line">            &#123;</span><br><span class="line">                num += i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一行有一个字符串，可表示[0,156]</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (strVec.size() == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        str = strVec.front();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RADIX; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 小于RADIX，即[0,12]</span></span><br><span class="line">            <span class="keyword">if</span> (str == mars0[i])</span><br><span class="line">            &#123;</span><br><span class="line">                num = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 大于等于RADIX，即[13,156]</span></span><br><span class="line">            <span class="keyword">if</span> (str == mars1[i])</span><br><span class="line">            &#123;</span><br><span class="line">                num = i * RADIX;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/qq_22194315/article/details/54428678" target="_blank" rel="noopener">https://blog.csdn.net/qq_22194315/article/details/54428678</a></p><p><a href="https://blog.csdn.net/weixin_39345384/article/details/82317205" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39345384/article/details/82317205</a></p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1046</title>
    <link href="https://chouxianyu.github.io/2019/10/16/PAT%E4%B9%99%E7%BA%A71046/"/>
    <id>https://chouxianyu.github.io/2019/10/16/PAT乙级1046/</id>
    <published>2019-10-15T17:34:08.000Z</published>
    <updated>2019-10-15T17:38:04.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805277847568384" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805277847568384</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>题目有几个点需要注意：</p><ul><li>甲和乙同时赢或者同时输都算平局，甲和乙都不需要喝酒</li><li>游戏结束不用我们判断</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1046</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805277847568384</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 变量定义</span></span><br><span class="line">    <span class="keyword">int</span> N;  <span class="comment">// N次划拳</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line">    <span class="keyword">int</span> AYell, AOut;  <span class="comment">// A喊的数字和出的数字</span></span><br><span class="line">    <span class="keyword">int</span> BYell, BOut;  <span class="comment">// B喊的数字和出的数字</span></span><br><span class="line">    <span class="keyword">bool</span> AWin,BWin;  <span class="comment">// 此次划拳A和B的输赢</span></span><br><span class="line">    <span class="keyword">int</span> ALose=<span class="number">0</span>,BLose=<span class="number">0</span>;  <span class="comment">// A和B输的次数</span></span><br><span class="line">    <span class="keyword">int</span> yellSum;  <span class="comment">// 此次划拳喊的数字之和</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计杯数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;AYell,&amp;AOut,&amp;BYell,&amp;BOut);</span><br><span class="line">        yellSum = AYell + BYell;  <span class="comment">// 此次划拳喊的数字之和</span></span><br><span class="line">        AWin = (AOut == yellSum);  <span class="comment">// A的输赢</span></span><br><span class="line">        BWin = (BOut == yellSum);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果一人赢一人输</span></span><br><span class="line">        <span class="keyword">if</span>(AWin!=BWin)</span><br><span class="line">        &#123;</span><br><span class="line">            ALose += !AWin;</span><br><span class="line">            BLose += !BWin;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>,ALose,BLose);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1005</title>
    <link href="https://chouxianyu.github.io/2019/10/16/PAT%E4%B9%99%E7%BA%A71005/"/>
    <id>https://chouxianyu.github.io/2019/10/16/PAT乙级1005/</id>
    <published>2019-10-15T16:53:15.000Z</published>
    <updated>2019-10-16T16:51:04.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>题意很简单，我并没有理解错，但刚开始最后一个测试点过不了。</p><p>代码逻辑检查多次后问了室友，说是<code>isKey</code>数组会越界，因为在<code>callatz(n)</code>中使用了<code>isKey[n]</code>，这个<code>n</code>由于<code>n=(3*n+1)/2</code>导致<code>n</code>的范围变化，不再是小于100。</p><p>我真的呜了……</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1005</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 310        <span class="comment">// 数组大小</span></span></span><br><span class="line"><span class="keyword">bool</span> isKey[N];       <span class="comment">// N个数字是否为关键数：isKey[i]==true，则i是关键数；否则i不是关键数</span></span><br><span class="line"><span class="keyword">bool</span> isValid[N];     <span class="comment">// N个数字是否被用户输入：isValid[i]==true，则i已被用户输入；否则i未被用户输入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callatz</span><span class="params">(<span class="keyword">int</span> n)</span></span>; <span class="comment">// 循环处理isKey[n]：n若被覆盖，则不必往下计算，函数结束；若n未被覆盖，则覆盖n并按规则更新n。循环以上过程</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 默认N个数字都未被覆盖，即N个数字是关键数</span></span><br><span class="line">    fill(isKey, isKey + N, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录k个正整数n；对于每个正整数n，调用callatz()函数（用户输入的正整数n，并不会被自己覆盖，所以传参时直接将n更新）</span></span><br><span class="line">    <span class="keyword">int</span> k, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k); <span class="comment">// k个整数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        isValid[n] = <span class="literal">true</span>; <span class="comment">// 记录用户输入的正整数n</span></span><br><span class="line">        callatz(n % <span class="number">2</span> == <span class="number">0</span> ? n / <span class="number">2</span> : (<span class="number">3</span> * n + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">bool</span> isFirstKey = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isValid[i] &amp;&amp; isKey[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (isFirstKey)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, i);</span><br><span class="line">                isFirstKey = <span class="literal">false</span>; <span class="comment">// 输出第一个关键数后，之后输出的关键数就不是第一个关键数了</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" %d"</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callatz</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// n未被覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (isKey[n])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 将n覆盖</span></span><br><span class="line">            isKey[n] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 按照规则更新n</span></span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                n = n / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                n = (<span class="number">3</span> * n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// n已被覆盖，不必往下计算</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库-关系代数作业</title>
    <link href="https://chouxianyu.github.io/2019/10/12/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0%E4%BD%9C%E4%B8%9A/"/>
    <id>https://chouxianyu.github.io/2019/10/12/数据库-关系代数作业/</id>
    <published>2019-10-12T13:48:22.000Z</published>
    <updated>2020-03-20T04:30:56.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><strong>现有一产品数据库，该数据库模式由四个关系组成，这四个关系的模式如下：</strong><br><br>$Product(maker,model,type)$<br><br>$PC(model,speed,ram,hd,price)$<br><br>$Laptop(model,speed,ram,id,hd,screen,price)$<br><br>$Printer(model,color,type,price)$<br><br><strong>试写出下列查询的关系代数表达式，并针对下面数据样例，给出查询的结果。</strong>（你的答案应该在任何数据上都能正确工作，而不仅限于图中的数据）<br><br>a)哪种PC模型具有最少3.00的速度？<br><br>b)哪个生产厂商的笔记本电脑（笔记本）的硬盘容量至少100GB？<br><br>c)查询厂商B生产的所有产品的型号和价格。<br><br>d)查询所有彩色激光打印机的型号。<br><br>e)查询那些只出售笔记本电脑，不出售PC的厂商。<br><br>f)查询在一种或者两种PC机中出现过的硬盘的容量。<br><br>g)查询有同样处理速度和同样内存大小的PC对。每对只被列表一次，即列表给出$(i,j)$但不给出$(j,i)$。<br><br>h)查询那些至少生产两种处理速度大于2.80的PC或者笔记本电脑的厂商。<br><br>i)查询平均处理速度（PC或者是笔记本电脑）最高的所有厂商。<br><br>j)查询至少生产三种不同处理速度电脑的厂商。<br><br>k)查询恰好出售三种型号的PC厂商。<br><br><strong>四个关系的数据样例如下图所示：</strong><br><img src="https://i.loli.net/2019/10/05/dXTYNUulj1bkO5M.jpg" alt="四个关系的数据样例"></p><h1 id="a-哪种PC模型具有最少3-00的速度？"><a href="#a-哪种PC模型具有最少3-00的速度？" class="headerlink" title="a)哪种PC模型具有最少3.00的速度？"></a>a)哪种PC模型具有最少3.00的速度？</h1><h2 id="1-要操作的表：-PC"><a href="#1-要操作的表：-PC" class="headerlink" title="1.要操作的表：$PC$"></a>1.要操作的表：$PC$</h2><h2 id="2-要进行的操作：选择、投影"><a href="#2-要进行的操作：选择、投影" class="headerlink" title="2.要进行的操作：选择、投影"></a>2.要进行的操作：选择、投影</h2><h2 id="3-各操作的对象和顺序"><a href="#3-各操作的对象和顺序" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li><strong>选择</strong>关系$PC$中$speed\ge3.0$的元组：$R_1:=\sigma_{speed\ge3.0}(PC)$</li><li>将$R_1$<strong>投影</strong>到属性$model$上：$R_2:=\pi_{model}(R_1)$</li></ol><h2 id="4-关系代数表达式"><a href="#4-关系代数表达式" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$\pi_{model}(\sigma_{speed\ge3.0}(PC))$</li></ul><h2 id="5-数据样例查询结果"><a href="#5-数据样例查询结果" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$model$</th></tr></thead><tbody><tr><td style="text-align:center">1005</td></tr><tr><td style="text-align:center">1006</td></tr><tr><td style="text-align:center">1013</td></tr></tbody></table></div><h1 id="b-哪个生产厂商的笔记本电脑（笔记本）的硬盘容量至少100GB？"><a href="#b-哪个生产厂商的笔记本电脑（笔记本）的硬盘容量至少100GB？" class="headerlink" title="b)哪个生产厂商的笔记本电脑（笔记本）的硬盘容量至少100GB？"></a>b)哪个生产厂商的笔记本电脑（笔记本）的硬盘容量至少100GB？</h1><h2 id="1-要操作的表：-Laptop-、-Product"><a href="#1-要操作的表：-Laptop-、-Product" class="headerlink" title="1.要操作的表：$Laptop$、$Product$"></a>1.要操作的表：$Laptop$、$Product$</h2><h2 id="2-要进行的操作：选择、自然连接、投影、差"><a href="#2-要进行的操作：选择、自然连接、投影、差" class="headerlink" title="2.要进行的操作：选择、自然连接、投影、差"></a>2.要进行的操作：选择、自然连接、投影、差</h2><h2 id="3-各操作的对象和顺序-1"><a href="#3-各操作的对象和顺序-1" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li><strong>选择</strong>关系$Laptop$中$hd&lt;100$的元组$R_1$：$R_1:=\sigma_{hd&lt;100}(Laptop)$</li><li>将关系$Product$和关系$R_1$<strong>自然连接</strong>：$R_2:=R_1\bowtie Product$</li><li>将$R_2$<strong>投影</strong>到属性$maker$上：$R_3:=\pi_{maker}(R_2)$</li><li>将关系$Product$和关系$Laptop$<strong>自然连接</strong>：$R_4:=Product\bowtie Laptop$</li><li>将关系$R_4$<strong>投影</strong>到属性$maker$上：$R_5:=\pi_{maker}(R_4)$</li><li>求关系$R_5$和关系$R_3$的<strong>差</strong>：$R_6:=R_5-R_3$</li></ol><h2 id="4-关系代数表达式-1"><a href="#4-关系代数表达式-1" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$Product\bowtie Laptop-\pi_{maker}(\sigma_{hd&lt;100}(Laptop)\bowtie Product)$</li></ul><h2 id="5-数据样例查询结果-1"><a href="#5-数据样例查询结果-1" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$maker$</th></tr></thead><tbody><tr><td style="text-align:center">B</td></tr><tr><td style="text-align:center">G</td></tr></tbody></table></div><h1 id="c-查询厂商B生产的所有产品的型号和价格。"><a href="#c-查询厂商B生产的所有产品的型号和价格。" class="headerlink" title="c)查询厂商B生产的所有产品的型号和价格。"></a>c)查询厂商B生产的所有产品的型号和价格。</h1><h2 id="1-要操作的表：-Product-、-PC-、-Laptop-、-Printer"><a href="#1-要操作的表：-Product-、-PC-、-Laptop-、-Printer" class="headerlink" title="1.要操作的表：$Product$、$PC$、$Laptop$、$Printer$"></a>1.要操作的表：$Product$、$PC$、$Laptop$、$Printer$</h2><h2 id="2-要进行的操作：选择、投影、自然连接、并"><a href="#2-要进行的操作：选择、投影、自然连接、并" class="headerlink" title="2.要进行的操作：选择、投影、自然连接、并"></a>2.要进行的操作：选择、投影、自然连接、并</h2><h2 id="3-各操作的对象和顺序-2"><a href="#3-各操作的对象和顺序-2" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li><strong>选择</strong>关系$Product$中$maker=’B’$的元组：$R_1:=\sigma_{maker=’B’}(Product)$</li><li>将关系$R_1$<strong>投影</strong>到属性$model$上：$R_2:=\pi_{model}(R_1)$</li><li>将关系$R_2$和关系$PC$<strong>自然连接</strong>：$R_3:=R_2\bowtie PC$</li><li>将关系$R_2$和关系$Laptop$<strong>自然连接</strong>：$R_4:=R_2\bowtie Laptop$</li><li>将关系$R_2$和关系$Printer$<strong>自然连接</strong>：$R_5:=R_2\bowtie Printer$</li><li>将关系$R_3$<strong>投影</strong>到属性组$\{ model,price \}$上：$R_6:=\pi_{model,price}(R_3)$</li><li>将关系$R_4$<strong>投影</strong>到属性组$\{ model,price \}$上：$R_7:=\pi_{model,price}(R_4)$</li><li>将关系$R_5$<strong>投影</strong>到属性组$\{ model,price \}$上：$R_8:=\pi_{model,price}(R_5)$</li><li>将关系$R_6$、$R_7$和$R_8$<strong>并</strong>起来：$R_9:=R_6\cup R_7\cup R_8$</li></ol><h2 id="4-关系代数表达式-2"><a href="#4-关系代数表达式-2" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$R_9$，该表达式展开写会太长，因此省略其展开式。</li></ul><h2 id="5-数据样例查询结果-2"><a href="#5-数据样例查询结果-2" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$model$</th><th style="text-align:center">$price$</th></tr></thead><tbody><tr><td style="text-align:center">1004</td><td style="text-align:center">649</td></tr><tr><td style="text-align:center">1005</td><td style="text-align:center">630</td></tr><tr><td style="text-align:center">1006</td><td style="text-align:center">1049</td></tr><tr><td style="text-align:center">2007</td><td style="text-align:center">1429</td></tr></tbody></table></div><h1 id="d-查询所有彩色激光打印机的型号。"><a href="#d-查询所有彩色激光打印机的型号。" class="headerlink" title="d)查询所有彩色激光打印机的型号。"></a>d)查询所有彩色激光打印机的型号。</h1><h2 id="1-要操作的表：-Printer"><a href="#1-要操作的表：-Printer" class="headerlink" title="1.要操作的表：$Printer$"></a>1.要操作的表：$Printer$</h2><h2 id="2-要进行的操作：选择、投影-1"><a href="#2-要进行的操作：选择、投影-1" class="headerlink" title="2.要进行的操作：选择、投影"></a>2.要进行的操作：选择、投影</h2><h2 id="3-各操作的对象和顺序-3"><a href="#3-各操作的对象和顺序-3" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li><strong>选择</strong>关系$Printer$中$color=true$并且$type=’laser’$的元组：$R_1:=\sigma_{color=true\wedge type=’laser’}(Printer)$</li><li>将关系$R_1$<strong>投影</strong>到属性$model$上：$R_2:=\pi_{model}(R_1)$</li></ol><h2 id="4-关系代数表达式-3"><a href="#4-关系代数表达式-3" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$\pi_{model}(\sigma_{color=true\wedge type=’laser’}(Printer))$</li></ul><h2 id="5-数据样例查询结果-3"><a href="#5-数据样例查询结果-3" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$model$</th></tr></thead><tbody><tr><td style="text-align:center">3003</td></tr><tr><td style="text-align:center">3007</td></tr></tbody></table></div><h1 id="e-查询那些只出售笔记本电脑，不出售PC的厂商。"><a href="#e-查询那些只出售笔记本电脑，不出售PC的厂商。" class="headerlink" title="e)查询那些只出售笔记本电脑，不出售PC的厂商。"></a>e)查询那些只出售笔记本电脑，不出售PC的厂商。</h1><p><strong>20200320更新：经网友<a href="https://www.cnblogs.com/mmjjww/" target="_blank" rel="noopener">@我要我觉得</a>提醒，发现下边的$R_1$和$R_2$有点错误，具体可看本文评论和我修改后的答案（想看修改后的答案的话继续往下看就找到了）</strong></p><h2 id="1-要操作的表：-Product-、-PC-、-Laptop"><a href="#1-要操作的表：-Product-、-PC-、-Laptop" class="headerlink" title="1.要操作的表：$Product$、$PC$、$Laptop$"></a>1.要操作的表：$Product$、$PC$、$Laptop$</h2><h2 id="2-要进行的操作：自然连接、投影、差"><a href="#2-要进行的操作：自然连接、投影、差" class="headerlink" title="2.要进行的操作：自然连接、投影、差"></a>2.要进行的操作：自然连接、投影、差</h2><h2 id="3-各操作的对象和顺序-4"><a href="#3-各操作的对象和顺序-4" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li>将关系$Product$与关系$Laptop$<strong>自然连接</strong>：$R_1:=Product\bowtie Laptop$</li><li>将关系$Product$与关系$PC$<strong>自然连接</strong>：$R_2:=Product\bowtie PC$</li><li>将关系$R_1$<strong>投影</strong>到属性$maker$上：$R_3:=\pi_{maker}(R_1)$</li><li>将关系$R_2$<strong>投影</strong>到属性$maker$上：$R_4:=\pi_{maker}(R_2)$</li><li>求关系$R_3$和$R_4$的<strong>差</strong>：$R_5:=R_3-R_4$</li></ol><h2 id="4-关系代数表达式-4"><a href="#4-关系代数表达式-4" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$\pi_{maker}(Product\bowtie Laptop)-\pi_{maker}(Product\bowtie PC)$</li></ul><h2 id="5-数据样例查询结果-4"><a href="#5-数据样例查询结果-4" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$maker$</th></tr></thead><tbody><tr><td style="text-align:center">F</td></tr><tr><td style="text-align:center">G</td></tr></tbody></table></div><p><strong>20200320将$R_1$和$R_2$的错误修改后，正确答案应该如下：</strong></p><h2 id="1-要操作的表：-Product"><a href="#1-要操作的表：-Product" class="headerlink" title="1.要操作的表：$Product$"></a>1.要操作的表：$Product$</h2><h2 id="2-要进行的操作：选择、投影、差"><a href="#2-要进行的操作：选择、投影、差" class="headerlink" title="2.要进行的操作：选择、投影、差"></a>2.要进行的操作：选择、投影、差</h2><h2 id="3-各操作的对象和顺序-5"><a href="#3-各操作的对象和顺序-5" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li><strong>选择</strong>属性$type$的值为$laptop$的$Product$：$R_1:=\sigma_{type=laptop}(Product)$</li><li><strong>选择</strong>属性$type$的值为$pc$的$Product$：$R_2:=\sigma_{type=pc}(Product)$</li><li>将关系$R_1$<strong>投影</strong>到属性$maker$上：$R_3:=\pi_{maker}(R_1)$</li><li>将关系$R_2$<strong>投影</strong>到属性$maker$上：$R_4:=\pi_{maker}(R_2)$</li><li>求关系$R_3$和$R_4$的<strong>差</strong>：$R_5:=R_3-R_4$</li></ol><h2 id="4-关系代数表达式-5"><a href="#4-关系代数表达式-5" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$\pi_{maker}(\sigma_{type=laptop}(Product))-\pi_{maker}(\sigma_{type=pc}(Product))$</li></ul><h2 id="5-数据样例查询结果-5"><a href="#5-数据样例查询结果-5" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$maker$</th></tr></thead><tbody><tr><td style="text-align:center">F</td></tr><tr><td style="text-align:center">G</td></tr></tbody></table></div><h1 id="f-查询在一种或者两种PC机中出现过的硬盘的容量。"><a href="#f-查询在一种或者两种PC机中出现过的硬盘的容量。" class="headerlink" title="f)查询在一种或者两种PC机中出现过的硬盘的容量。"></a>f)查询在一种或者两种PC机中出现过的硬盘的容量。</h1><h2 id="1-要操作的表：-PC-1"><a href="#1-要操作的表：-PC-1" class="headerlink" title="1.要操作的表：$PC$"></a>1.要操作的表：$PC$</h2><h2 id="2-要进行的操作：重命名、-theta-连接、投影、差"><a href="#2-要进行的操作：重命名、-theta-连接、投影、差" class="headerlink" title="2.要进行的操作：重命名、$\theta$连接、投影、差"></a>2.要进行的操作：重命名、$\theta$连接、投影、差</h2><h2 id="3-各操作的对象和顺序-6"><a href="#3-各操作的对象和顺序-6" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li><p>将关系$PC$通过<strong>重命名</strong>复制：$R_1:=\rho_{PC1(model_1,speed,ram,hd,price)}(PC)$</p></li><li><p>将关系$PC$通过<strong>重命名</strong>复制：$R_2:=\rho_{PC2(model_2,speed,ram,hd,price)}(PC)$</p></li><li><p>将关系$R_1$和$R_2$进行$\theta$<strong>连接</strong>：$R_3:=R_1\bowtie_{R_1.hd=R_2.hd\wedge R_1.model_1\neq R_2.model_2}R_2$</p></li><li><p>将关系$R_3$和$PC$进行$\theta$<strong>连接</strong>：$R_4:=PC\bowtie_{PC.hd=R_3.hd\wedge PC.model\neq R_3.model_1\wedge PC.model\neq R_3.model_2}R_3$，由此得到至少出现三次的$hd$值</p></li><li><p>将关系$R_4$<strong>投影</strong>到属性$hd$上：$R_5:=\pi_{hd}(R_4)$</p></li><li><p>将关系$PC$<strong>投影</strong>到属性$hd$上：$R_6:=\pi_{hd}(PC)$</p></li><li><p>求关系$R_6$和$R_5$的<strong>差</strong>：$R_7:=R_6-R_5$</p></li></ol><h2 id="4-关系代数表达式-6"><a href="#4-关系代数表达式-6" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$R_7$，该关系代数表达式展开长度太长，略</li></ul><h2 id="5-数据样例查询结果-6"><a href="#5-数据样例查询结果-6" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$hd$</th></tr></thead><tbody><tr><td style="text-align:center">80</td></tr><tr><td style="text-align:center">320</td></tr><tr><td style="text-align:center">200</td></tr><tr><td style="text-align:center">300</td></tr><tr><td style="text-align:center">160</td></tr></tbody></table></div><h1 id="g-查询有同样处理速度和同样内存大小的PC对。"><a href="#g-查询有同样处理速度和同样内存大小的PC对。" class="headerlink" title="g)查询有同样处理速度和同样内存大小的PC对。"></a>g)查询有同样处理速度和同样内存大小的PC对。</h1><h2 id="1-要操作的表：-PC-2"><a href="#1-要操作的表：-PC-2" class="headerlink" title="1.要操作的表：$PC$"></a>1.要操作的表：$PC$</h2><h2 id="2-要进行的操作：重命名、-theta-连接、投影"><a href="#2-要进行的操作：重命名、-theta-连接、投影" class="headerlink" title="2.要进行的操作：重命名、$\theta$连接、投影"></a>2.要进行的操作：重命名、$\theta$连接、投影</h2><h2 id="3-各操作的对象和顺序-7"><a href="#3-各操作的对象和顺序-7" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li>将关系$PC$通过<strong>重命名</strong>复制：$R_1:=\rho_{PC1(model_1,speed,ram,hd,price)}(PC)$</li><li>将关系$PC$通过<strong>重命名</strong>复制：$R_2:=\rho_{PC2(model_2,speed,ram,hd,price)}(PC)$</li><li>将关系$R_1$和$R_2$进行$\theta$<strong>连接</strong>：$R_3:=R_1\bowtie_{R_1.speed=R_2.speed\wedge R_1.ram=R_2.ram\wedge R_1.model_1\neq R_2.model_2}R_2$</li><li>将关系$R_3$<strong>投影</strong>到属性组$\{ model_1,model_2 \}$上：$R_4:=\pi_{model_1,model_2}(R_3)$</li></ol><h2 id="4-关系代数表达式-7"><a href="#4-关系代数表达式-7" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$R_4$，该关系代数表达式展开长度太长，略</li></ul><h2 id="5-数据样例查询结果-7"><a href="#5-数据样例查询结果-7" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$model_1$</th><th style="text-align:center">$model_2$</th></tr></thead><tbody><tr><td style="text-align:center">1004</td><td style="text-align:center">1012</td></tr></tbody></table></div><h1 id="h-查询那些至少生产两种处理速度大于2-80的PC或者笔记本电脑的厂商。"><a href="#h-查询那些至少生产两种处理速度大于2-80的PC或者笔记本电脑的厂商。" class="headerlink" title="h)查询那些至少生产两种处理速度大于2.80的PC或者笔记本电脑的厂商。"></a>h)查询那些至少生产两种处理速度大于2.80的PC或者笔记本电脑的厂商。</h1><h2 id="1-要操作的表：-PC-3"><a href="#1-要操作的表：-PC-3" class="headerlink" title="1.要操作的表：$PC$"></a>1.要操作的表：$PC$</h2><h2 id="2-要进行的操作：选择、并、投影、自然连接、重命名、-theta-连接"><a href="#2-要进行的操作：选择、并、投影、自然连接、重命名、-theta-连接" class="headerlink" title="2.要进行的操作：选择、并、投影、自然连接、重命名、$\theta$连接"></a>2.要进行的操作：选择、并、投影、自然连接、重命名、$\theta$连接</h2><h2 id="3-各操作的对象和顺序-8"><a href="#3-各操作的对象和顺序-8" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li><strong>选择</strong>关系$PC$中属性$speed&gt;2.80$的元组：$R_1:=\sigma_{speed&gt;2.80}(PC)$</li><li><strong>选择</strong>关系$Laptop$中属性$speed&gt;2.80$的元组：$R_2:=\sigma_{speed&gt;2.80}(Laptop)$</li><li>将关系$R_1$和$R_2$<strong>并</strong>起来，并求其在属性$model$上的<strong>投影</strong>：$R_3=\pi_{model}(R_1\cup R_2)$</li><li>将关系$R_3$与$Product$<strong>自然连接</strong>，并求其在属性组$\{ maker,model \}$上的<strong>投影</strong>：$R_4:=\pi_{maker,model}(R_3\bowtie Product)$</li><li>将关系$R_4$通过<strong>重命名</strong>复制：$R_5:=\rho_{R_5(maker,model_5)}(R_4)$</li><li>将关系$R_4$通过<strong>重命名</strong>复制：$R_6:=\rho_{R_6(maker,model_6)}(R_4)$</li><li>将关系$R_5$和$R_6$进行$\theta$<strong>连接</strong>：$R_7:=R_5\bowtie_{R_5.maker=R_6.maker\wedge R_5.model_5\neq R_6.model_6}R_6$</li><li>将关系$R_7$<strong>投影</strong>到属性$maker$上：$R_8:=\pi_{maker}(R_7)$</li></ol><h2 id="4-关系代数表达式-8"><a href="#4-关系代数表达式-8" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$R_8$，该关系代数表达式展开长度太长，略</li></ul><h2 id="5-数据样例查询结果-8"><a href="#5-数据样例查询结果-8" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$maker$</th></tr></thead><tbody><tr><td style="text-align:center">B</td></tr></tbody></table></div><h1 id="i-查询平均处理速度（PC或者是笔记本电脑）最高的所有厂商。"><a href="#i-查询平均处理速度（PC或者是笔记本电脑）最高的所有厂商。" class="headerlink" title="i)查询平均处理速度（PC或者是笔记本电脑）最高的所有厂商。"></a>i)查询平均处理速度（PC或者是笔记本电脑）最高的所有厂商。</h1><h2 id="1-要操作的表：-PC-、-Laptop-、-Product"><a href="#1-要操作的表：-PC-、-Laptop-、-Product" class="headerlink" title="1.要操作的表：$PC$、$Laptop$、$Product$"></a>1.要操作的表：$PC$、$Laptop$、$Product$</h2><h2 id="2-要进行的操作：投影、重命名、-theta-连接、差、自然连接"><a href="#2-要进行的操作：投影、重命名、-theta-连接、差、自然连接" class="headerlink" title="2.要进行的操作：投影、重命名、$\theta$连接、差、自然连接"></a>2.要进行的操作：投影、重命名、$\theta$连接、差、自然连接</h2><h2 id="3-各操作的对象和顺序-9"><a href="#3-各操作的对象和顺序-9" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li>将关系$PC$和$Laptop$<strong>投影</strong>到属性组$\{ model,speed \}$上并将两者<strong>并</strong>起来：$R_1:=\pi_{model,speed}(PC)\cup\pi_{model,speed}(Laptop)$</li><li>通过<strong>重命名</strong>复制关系$R_1$：$R_2:=\rho_{R_2}(R_1)$</li><li>关系$R_1$和$R_2$进行$\theta$<strong>连接</strong>：$R_3:=R_1\bowtie_{R_1.speed&lt;R_2.speed} R_2$，求出$speed$小于最大值的元组</li><li>求关系$R_1$和$R_3$的<strong>差</strong>：$R_4:=R_1-R_3$</li><li>关系$R_4$和$Product$<strong>自然连接</strong>：$R_5:=R_4\bowtie Product$</li></ol><h2 id="4-关系代数表达式-9"><a href="#4-关系代数表达式-9" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$R_5$，该关系代数表达式展开长度太长，略</li></ul><h2 id="5-数据样例查询结果-9"><a href="#5-数据样例查询结果-9" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$maker$</th></tr></thead><tbody><tr><td style="text-align:center">B</td></tr></tbody></table></div><h1 id="j-查询至少生产三种不同处理速度电脑的厂商。"><a href="#j-查询至少生产三种不同处理速度电脑的厂商。" class="headerlink" title="j)查询至少生产三种不同处理速度电脑的厂商。"></a>j)查询至少生产三种不同处理速度电脑的厂商。</h1><h2 id="1-要操作的表：-PC-、-Product"><a href="#1-要操作的表：-PC-、-Product" class="headerlink" title="1.要操作的表：$PC$、$Product$"></a>1.要操作的表：$PC$、$Product$</h2><h2 id="2-要进行的操作：自然连接、投影、重命名、-theta-连接"><a href="#2-要进行的操作：自然连接、投影、重命名、-theta-连接" class="headerlink" title="2.要进行的操作：自然连接、投影、重命名、$\theta$连接"></a>2.要进行的操作：自然连接、投影、重命名、$\theta$连接</h2><h2 id="3-各操作的对象和顺序-10"><a href="#3-各操作的对象和顺序-10" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li>关系$Product$和$PC$<strong>自然连接</strong>并<strong>投影</strong>到属性组$\{ maker,speed \}$上：$R_1:=\pi_{maker,speed}(Procuct\bowtie PC)$</li><li>复制并<strong>重命名</strong>关系$R_1$：$R_2:=\rho_{R_2(maker,speed_2)}(R_1)$</li><li>复制并<strong>重命名</strong>关系$R_1$：$R_3:=\rho_{R_3(marker,speed_3)}(R_1)$</li><li>关系$R_1$和$R_2$进行$\theta$<strong>连接</strong>：$R_4:=R_1\bowtie_{R_1.maker=R_2.maker\wedge R_1.speed\neq R_2.speed_2}R_2$</li><li>关系$R_3$和$R_4$进行$\theta$<strong>连接</strong>：$R_5:=R_3\bowtie_{R_3.maker=R_4.maker\wedge R_4.speed\neq R_3.speed_3 /wedge R_4.speed_2\neq R_3.speed_3}R_4$</li><li>将关系$R_5$<strong>投影</strong>到属性$maker$上：$R_6:=\pi_{maker}(R_5)$</li></ol><h2 id="4-关系代数表达式-10"><a href="#4-关系代数表达式-10" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$R_5$，该关系代数表达式展开长度太长，略</li></ul><h2 id="5-数据样例查询结果-10"><a href="#5-数据样例查询结果-10" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$maker$</th></tr></thead><tbody><tr><td style="text-align:center">A</td></tr><tr><td style="text-align:center">D</td></tr><tr><td style="text-align:center">E</td></tr></tbody></table></div><h1 id="k-查询恰好出售三种型号的PC厂商。"><a href="#k-查询恰好出售三种型号的PC厂商。" class="headerlink" title="k)查询恰好出售三种型号的PC厂商。"></a>k)查询恰好出售三种型号的PC厂商。</h1><h2 id="1-要操作的表：-PC-、-Product-1"><a href="#1-要操作的表：-PC-、-Product-1" class="headerlink" title="1.要操作的表：$PC$、$Product$"></a>1.要操作的表：$PC$、$Product$</h2><h2 id="2-要进行的操作：自然连接、投影、重命名、-theta-连接、差"><a href="#2-要进行的操作：自然连接、投影、重命名、-theta-连接、差" class="headerlink" title="2.要进行的操作：自然连接、投影、重命名、$\theta$连接、差"></a>2.要进行的操作：自然连接、投影、重命名、$\theta$连接、差</h2><h2 id="3-各操作的对象和顺序-11"><a href="#3-各操作的对象和顺序-11" class="headerlink" title="3.各操作的对象和顺序"></a>3.各操作的对象和顺序</h2><ol><li>关系$Product$和$PC$<strong>自然连接</strong>并<strong>投影</strong>到属性组$\{ maker,model \}$上：$R_1:=\pi_{maker,model}(Procuct\bowtie PC)$</li><li>复制并<strong>重命名</strong>关系$R_1$：$R_2:=\rho_{R_2(maker,model_2)}(R_1)$</li><li>复制并<strong>重命名</strong>关系$R_1$：$R_3:=\rho_{R_3(marker,model_3)}(R_1)$</li><li>复制并<strong>重命名</strong>关系$R_1$：$R_4:=\rho_{R_4(marker,model_4)}(R_1)$</li><li>关系$R_1$和$R_2$进行$\theta$<strong>连接</strong>：$R_5:=R_1\bowtie_{R_1.maker=R_2.maker\wedge R_1.model\neq R_2.model_2}R_2$</li><li>关系$R_3$和$R_5$进行$\theta$<strong>连接</strong>：$R_6:=R_3\bowtie_{R_3.maker=R_5.maker\wedge R_5.model\neq R_3.model_3 /wedge R_5.model_2\neq R_3.model_3}R_5$</li><li>关系$R_4$和$R_6$进行$\theta$<strong>连接</strong>：$R_7:=R_4\bowtie_{R_4.maker=R_6.maker\wedge R_6.model\ne R_4.model_4 \wedge R_6.model_2\ne R_4.model_4 \wedge R_6.model_3\ne R_4.model_4}R_6$</li><li>求关系$R_6$和$R_7$的<strong>差</strong>：$R_8:=R_6-R_7$</li><li>将关系$R_8$<strong>投影</strong>到属性$maker$上：$R_8:=\pi_{maker}(R_8)$</li></ol><h2 id="4-关系代数表达式-11"><a href="#4-关系代数表达式-11" class="headerlink" title="4.关系代数表达式"></a>4.关系代数表达式</h2><ul><li>$R_8$，该关系代数表达式展开长度太长，略</li></ul><h2 id="5-数据样例查询结果-11"><a href="#5-数据样例查询结果-11" class="headerlink" title="5.数据样例查询结果"></a>5.数据样例查询结果</h2><div class="table-container"><table><thead><tr><th style="text-align:center">$maker$</th></tr></thead><tbody><tr><td style="text-align:center">A</td></tr><tr><td style="text-align:center">B</td></tr><tr><td style="text-align:center">D</td></tr><tr><td style="text-align:center">E</td></tr></tbody></table></div><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;现有一产品数据库，该数据库模式由四个关系组成，这四个关系的模式如下：&lt;/strong&gt;&lt;br&gt;&lt;br&gt;$Product(ma
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://chouxianyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-线性回归与梯度下降</title>
    <link href="https://chouxianyu.github.io/2019/09/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%B8%8E%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    <id>https://chouxianyu.github.io/2019/09/23/机器学习-线性回归与梯度下降/</id>
    <published>2019-09-23T12:12:52.000Z</published>
    <updated>2019-09-23T12:15:09.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><p>linear regression</p><h2 id="符号定义"><a href="#符号定义" class="headerlink" title="符号定义"></a>符号定义</h2><p>notation，仅为本教程中的符号定义。</p><ul><li><p>$m$</p><p>  训练集中样本的数量 </p></li><li><p>$x$</p><p>  输入值，features。</p><p>  $x^{(i)}$，表示第$i$个样本的features</p></li><li><p>$y$</p><p>  输出值，target</p><p>  $y^{(i)}$，表示第$i$个样本的label</p></li><li><p>$\theta_i$</p><p>  parameters，第$i$个模型参数</p></li><li><p>$h_\theta$</p><p>  hypothesis（假设），这是一个在早期被用于机器学习的名称算法得到的函数（$x$到$y$）</p><p>  $h_\theta(x)=\theta_0+\theta_1x$</p></li></ul><p>$(x,y)$代表一个样本，$(x^{(i)},y^{(i)})$代表第$i$个样本</p><h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p>cost function，有很多种。</p><p>符号是$J(\theta_1,\theta_2)$。</p><ul><li><p>平方误差函数</p><p>  square error function，最小二乘法。</p><p>  对于大多数问题，特别是回归问题，平方误差函数都是一个合理的选择。</p></li><li></li></ul><h1 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h1><p>gradient descent，可以用梯度下降法使各种各样的代价函数$J$最小化</p><p>它不仅被用在线性回归上，实际上被广泛地应用于机器学习的众多领域。 </p><h2 id="符号定义-1"><a href="#符号定义-1" class="headerlink" title="符号定义"></a>符号定义</h2><ul><li><p>$:=$</p><p>  赋值</p></li><li><p>$=$</p><p>  相等</p></li><li><p>$\alpha$</p><p>  是个数字，叫做学习速率，它控制以多大的幅度更新参数$\theta$</p></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><p>多个$\theta$需要同时更新（如果不同时，可能也能得到答案，但就并不是人们所指的梯度下降了，而是其他性质的其它算法），所以应该先计算，最后再同时更新$\theta$</p></li><li><p>在梯度下降法中，当我们接近局部最低点时，梯度下降法会自动采取更小的幅度。</p><p>  因为当我们接近局部最低点时，导数会变得越来越小，所以梯度下降将自动采取较小的幅度。</p><p>  据上，可知实际上没有必要在接近局部最低点的时候减小$\alpha$。</p></li><li><p>梯度下降法求得的可能是局部最优解</p><p>  但线性回归的成本函数总是一个凸函数（convex function），凸函数使用梯度下降法求得最小值就是全局最小值。</p></li></ul><h2 id="“Batch”-Gradient-Descent"><a href="#“Batch”-Gradient-Descent" class="headerlink" title="“Batch” Gradient Descent"></a>“Batch” Gradient Descent</h2><p>“Batch”指的是梯度下降的每一步都使用所有的训练样本。</p><h1 id="矩阵和向量"><a href="#矩阵和向量" class="headerlink" title="矩阵和向量"></a>矩阵和向量</h1><p>向量指的是列向量，4维的向量指的就是4行1列的矩阵。</p><p>按照惯例，通常用大写字母表示矩阵，用小写字母表示数字、标量或向量。</p><h1 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h1><h2 id="符号定义-2"><a href="#符号定义-2" class="headerlink" title="符号定义"></a>符号定义</h2><ul><li><p>$n$</p><p>  特征的数量，形成一个$m$行$n$列的矩阵</p></li></ul><h2 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h2><p>features scaling</p><p>处理不同feature之间的数量级差异，使梯度下降收敛速度更快，否则可能会收敛得很慢</p><p>方法有很多种：</p><ul><li>$\frac{x}{x_{max}}$</li><li>$\frac{x-x_{mean}}{x_{max}}$</li><li>$\frac{x-x_{mean}}{标准差}$</li><li>$\frac{x-x_{mean}}{x_{max}-x_{min}}$</li></ul><h1 id="学习率"><a href="#学习率" class="headerlink" title="学习率"></a>学习率</h1><p>学习率$\alpha$的选取是十分重要的。</p><p>学习率太小，收敛会很慢；学习率太大，代价函数的值可能不会每步都在减小，或者无法收敛。</p><p>学习率一般都是试出来的。</p><p>可以用自动收敛测试来判断代价函数是否已经收敛；也可以以迭代次数为横轴，代价函数的最小值为纵轴作图，通过观察判断。</p><h2 id="自动收敛测试"><a href="#自动收敛测试" class="headerlink" title="自动收敛测试"></a>自动收敛测试</h2><p>当某步时，代价函数的减小值很小（比如小于$10^{-3}$，这个阈值也是不好确定的）时，则认为代价函数已经收敛。</p><h1 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h1><p>基于已有特征构造新的特征（乘积或次方）</p><h1 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h1><p>nomal equation</p><p>线性方程组有解的话，使用该方法即可，可以一次性求得最优解，不需使用梯度下降法之类的迭代算法，求得的是解析解。</p><p>正规方程法不需要特征缩放。</p><script type="math/tex; mode=display">\theta=(X^TX)^{-1}X^Ty</script><p>$X^TX$不可逆的情况很少出现，如果不可逆，就用它的伪逆。</p><h1 id="梯度下降与正规方程对比"><a href="#梯度下降与正规方程对比" class="headerlink" title="梯度下降与正规方程对比"></a>梯度下降与正规方程对比</h1><div class="table-container"><table><thead><tr><th style="text-align:center">梯度下降</th><th style="text-align:center">正规方程</th></tr></thead><tbody><tr><td style="text-align:center">不需要选择学习率</td><td style="text-align:center">需要选择学习率</td></tr><tr><td style="text-align:center">需要多次迭代</td><td style="text-align:center">不需要迭代</td></tr><tr><td style="text-align:center">$n$很大时效果也很好</td><td style="text-align:center">需要计算矩阵的逆，$n$很大时速度很慢</td></tr></tbody></table></div><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性回归&quot;&gt;&lt;a href=&quot;#线性回归&quot; class=&quot;headerlink&quot; title=&quot;线性回归&quot;&gt;&lt;/a&gt;线性回归&lt;/h1&gt;&lt;p&gt;linear regression&lt;/p&gt;
&lt;h2 id=&quot;符号定义&quot;&gt;&lt;a href=&quot;#符号定义&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://chouxianyu.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-绪论</title>
    <link href="https://chouxianyu.github.io/2019/09/23/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%BB%AA%E8%AE%BA/"/>
    <id>https://chouxianyu.github.io/2019/09/23/机器学习-绪论/</id>
    <published>2019-09-23T12:12:33.000Z</published>
    <updated>2019-09-23T12:15:57.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>机器学习是一门多领域交叉学科，涉及概率论、统计学、逼近论等多门学科。它是人工智能的核心。</p><p>机器学习暂无一个被广泛认可的定义来准确定义机器学习是什么或不是什么。</p><h1 id="机器学习算法的分类"><a href="#机器学习算法的分类" class="headerlink" title="机器学习算法的分类"></a>机器学习算法的分类</h1><p>按照学习方式来分，主要可以分为两类（这两类算法也是最常使用的）：</p><ul><li><p>监督学习（supervised learning）</p><p>  会教计算机如何去完成任务</p></li><li><p>无监督学习（unsupervised learning）</p><p>  让计算机自己学习如何完成任务</p></li></ul><p>其他学习方法还有强化学习（reinforcement learning）和推荐系统（recommender systems）等。</p><h1 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h1><p>监督学习：数据集中的每个样本的正确答案（label）是有给出的。</p><h2 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h2><p>regression problem，预测一个连续的输出值</p><h2 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h2><p>classification problem，预测一个离散的输出值</p><p>（支持向量机可以处理无限多的features）</p><h1 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h1><p>无监督学习：数据集中的每个样本是没有正确答案（label）的。</p><h2 id="聚类算法"><a href="#聚类算法" class="headerlink" title="聚类算法"></a>聚类算法</h2><p>cluster algorithm</p><p>将个例分为几类，比如新闻的专题分类、基因分类、组织计算机集群、社交网络分析、市场细分和天文数据分析等。</p><p>聚类只是无监督学习的一种。</p><h2 id="鸡尾酒会算法"><a href="#鸡尾酒会算法" class="headerlink" title="鸡尾酒会算法"></a>鸡尾酒会算法</h2><p>cocktail party problem algorithm</p><p>两个声源同时发声，两个收音器收音，用算法分离两个声源发出的声音。</p><p>利用Octave和Matlab这样的软件，一行代码就可以实现这样的算法。</p><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;机器学习是一门多领域交叉学科，涉及概率论、统计学、逼近论等多门学科。它是人工智能的核心。&lt;/p&gt;
&lt;p&gt;机器学习暂无一个被广泛认可的定义来准
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://chouxianyu.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1043</title>
    <link href="https://chouxianyu.github.io/2019/08/11/PAT%E4%B9%99%E7%BA%A71043/"/>
    <id>https://chouxianyu.github.io/2019/08/11/PAT乙级1043/</id>
    <published>2019-08-11T14:15:04.000Z</published>
    <updated>2019-08-11T14:15:40.352Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805280074743808" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805280074743808</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>这次再次体会到题意理解的正确性，理解正确的话其实就是用代码实现自己的想法。</p><p>难的是，刚开始想错了，然后再去改，这样完全没有思路，很麻烦的。</p><p>这道题的意思是：按照<code>PATest</code>的顺序去字符串里找，找得到就输出，找不到就找下一个，直至字符串里找不到<code>PATest</code>中的任意一个字符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1043</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805280074743808</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 用户输入</span></span><br><span class="line">    <span class="built_in">string</span> str,PATest=<span class="string">"PATest"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> notFoundCount=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (notFoundCount &lt; <span class="number">6</span>)&#123;</span><br><span class="line">        <span class="comment">// 找到了想要的字符</span></span><br><span class="line">        <span class="keyword">if</span> (str.find_first_of(PATest[i]) != <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; PATest[i];</span><br><span class="line">            str.erase(str.begin() + str.find_first_of(PATest[i]));</span><br><span class="line">            notFoundCount = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找不到该字符</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            notFoundCount++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找下一个</span></span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1042</title>
    <link href="https://chouxianyu.github.io/2019/08/10/PAT%E4%B9%99%E7%BA%A71042/"/>
    <id>https://chouxianyu.github.io/2019/08/10/PAT乙级1042/</id>
    <published>2019-08-10T11:44:34.000Z</published>
    <updated>2019-08-10T11:46:14.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805280817135616" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805280817135616</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>用数组<code>count</code>存储字母出现次数，数组下标代表字母，数组元素是次数。遍历字符串，统计各字母出现次数，最后遍历<code>count</code>寻找出现次数最多的字母。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1042</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805280817135616</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 26个字母计数</span></span><br><span class="line">    <span class="keyword">int</span> count[<span class="number">26</span>];</span><br><span class="line">    fill(count,count+<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取字符串</span></span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    getline(<span class="built_in">cin</span>, str);  <span class="comment">// 字符串可能包含空格</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计字符出现次数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isalpha</span>(str[i]))&#123;</span><br><span class="line">            count[<span class="built_in">tolower</span>(str[i])-<span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找出现最频繁的英文字母（其实可以在统计的时候进行）</span></span><br><span class="line">    <span class="keyword">int</span> maxCount=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> maxIndex=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count[i]&gt;maxCount)&#123;  <span class="comment">// 用于实现数量并列则输出字母序最小的那个字母</span></span><br><span class="line">            maxCount = count[i];</span><br><span class="line">            maxIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(<span class="string">'a'</span> + maxIndex)&lt;&lt; <span class="string">' '</span> &lt;&lt; maxCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1041</title>
    <link href="https://chouxianyu.github.io/2019/08/10/PAT%E4%B9%99%E7%BA%A71041/"/>
    <id>https://chouxianyu.github.io/2019/08/10/PAT乙级1041/</id>
    <published>2019-08-10T11:44:27.000Z</published>
    <updated>2019-08-10T11:46:08.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805281567916032" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805281567916032</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>简单的信息录入和查询而已。</p><p>根据需求，使用试机座位号作为学生的标识进行信息录入和查询。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1041</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805281567916032</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> zhunkaozhenghao;</span><br><span class="line">    <span class="keyword">int</span> kaoshizuoweihao;</span><br><span class="line">    Student() &#123;&#125;</span><br><span class="line">    Student(<span class="built_in">string</span> zhunkaozhenghao, <span class="keyword">int</span> kaoshizuoweihao)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;zhunkaozhenghao = zhunkaozhenghao;</span><br><span class="line">        <span class="keyword">this</span>-&gt;kaoshizuoweihao = kaoshizuoweihao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; zhunkaozhenghao &lt;&lt; <span class="string">' '</span> &lt;&lt; kaoshizuoweihao &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// n个学生</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    Student stuArr[<span class="number">1001</span>];   <span class="comment">// 学生信息</span></span><br><span class="line">    <span class="built_in">string</span> zhunkaozhenghao; <span class="comment">// 准考证号</span></span><br><span class="line">    <span class="keyword">int</span> kaoshizuoweihao;    <span class="comment">// 考试座位号</span></span><br><span class="line">    <span class="keyword">int</span> shijizuoweihao;     <span class="comment">// 试机位号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 录入学生信息</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; zhunkaozhenghao &gt;&gt; shijizuoweihao &gt;&gt; kaoshizuoweihao;</span><br><span class="line">        stuArr[shijizuoweihao]=Student(zhunkaozhenghao,kaoshizuoweihao);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询m个学生的信息并输出</span></span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;shijizuoweihao;</span><br><span class="line">        stuArr[shijizuoweihao].print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1039</title>
    <link href="https://chouxianyu.github.io/2019/08/10/PAT%E4%B9%99%E7%BA%A71039/"/>
    <id>https://chouxianyu.github.io/2019/08/10/PAT乙级1039/</id>
    <published>2019-08-10T11:44:22.000Z</published>
    <updated>2019-08-10T11:46:03.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805283241443328" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805283241443328</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>用两个字符串表示两个箱子，一个装有的珠子，一个装想要的珠子。</p><p>如果发现两个箱子里都有某个珠子，则把这两个珠子都取出来，重复该操作至某个箱子中没有珠子了或者两个箱子里没有相同的珠子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1039</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805283241443328</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 有的珠子和想要的珠子</span></span><br><span class="line">    <span class="built_in">string</span> have,want;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; have &gt;&gt; want;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有想要的并且还有珠子</span></span><br><span class="line">    <span class="keyword">while</span>(have.length()&gt;<span class="number">0</span> &amp;&amp; want.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历想要的珠子在有的珠子里找</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; want.length())&#123;</span><br><span class="line">            <span class="keyword">char</span> c = want[i];</span><br><span class="line">            <span class="keyword">if</span> (have.find(c) != <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                want.erase(want.begin() +i);</span><br><span class="line">                have.erase(have.begin()+have.find(c));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有想要的任意一个珠子</span></span><br><span class="line">        <span class="keyword">if</span>(i==want.length())&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要的珠子都拿到了</span></span><br><span class="line">    <span class="keyword">if</span>(want.length()==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes "</span> &lt;&lt; have.length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 还有珠子没拿到</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No "</span> &lt;&lt; want.length();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1038</title>
    <link href="https://chouxianyu.github.io/2019/08/10/PAT%E4%B9%99%E7%BA%A71038/"/>
    <id>https://chouxianyu.github.io/2019/08/10/PAT乙级1038/</id>
    <published>2019-08-10T11:44:18.000Z</published>
    <updated>2019-08-10T11:45:56.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040</a></p><h1 id="题解一"><a href="#题解一" class="headerlink" title="题解一"></a>题解一</h1><p>这份代码最后一个点会超时</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1038</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// n个学生及其分数</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> *scores = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; scores[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// k个查询的分数</span></span><br><span class="line">    <span class="keyword">int</span> k,search;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; search;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; count(scores, scores + n, search);</span><br><span class="line">        <span class="keyword">if</span>(k)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="keyword">delete</span>[] scores;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题解二"><a href="#题解二" class="headerlink" title="题解二"></a>题解二</h1><p>这个所有点都过了。用数组存储各分数学生数量，下标是分数，数组元素值是数量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1038</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// n个学生</span></span><br><span class="line">    <span class="keyword">int</span> n,score;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 各分数人数</span></span><br><span class="line">    <span class="keyword">int</span> count[<span class="number">101</span>];</span><br><span class="line">    fill(count,count+<span class="number">101</span>,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 各分数的学生数量统计</span></span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; score;</span><br><span class="line">        count[score]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// k个查询的分数</span></span><br><span class="line">    <span class="keyword">int</span> k,search;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; search;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; count[search];</span><br><span class="line">        <span class="keyword">if</span>(k)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级1037</title>
    <link href="https://chouxianyu.github.io/2019/08/10/PAT%E4%B9%99%E7%BA%A71037/"/>
    <id>https://chouxianyu.github.io/2019/08/10/PAT乙级1037/</id>
    <published>2019-08-10T11:44:09.000Z</published>
    <updated>2019-08-10T11:45:50.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805284923359232" target="_blank" rel="noopener">https://pintia.cn/problem-sets/994805260223102976/problems/994805284923359232</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>还算简单，就是模拟我们在生活中的计算，但我想应该会有一个通用性较高的方法，下边的代码还是有重复程度较大的代码的。</p><p>两个需要注意的点：</p><ol><li>负数</li><li>借位</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PAT BasicLevel 1037</span></span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/994805260223102976/problems/994805284923359232</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">str2num</span><span class="params">(<span class="built_in">string</span> str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span>* p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取用户输入</span></span><br><span class="line">    <span class="built_in">string</span> strP,strA;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; strP &gt;&gt; strA;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 应付</span></span><br><span class="line">    <span class="keyword">int</span> p[<span class="number">3</span>];</span><br><span class="line">    p[<span class="number">0</span>] = str2num(strP.substr(<span class="number">0</span>, strP.find_first_of(<span class="string">'.'</span>) - <span class="number">0</span>));</span><br><span class="line">    p[<span class="number">1</span>] = str2num(strP.substr(strP.find_first_of(<span class="string">'.'</span>) + <span class="number">1</span>, strP.find_last_of(<span class="string">'.'</span>) - strP.find_first_of(<span class="string">'.'</span>) - <span class="number">1</span>));</span><br><span class="line">    p[<span class="number">2</span>] = str2num(strP.substr(strP.find_last_of(<span class="string">'.'</span>) + <span class="number">1</span>, strP.length() - strP.find_last_of(<span class="string">'.'</span>) - <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 实付</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>];</span><br><span class="line">    a[<span class="number">0</span>] = str2num(strA.substr(<span class="number">0</span>, strA.find_first_of(<span class="string">'.'</span>) - <span class="number">0</span>));</span><br><span class="line">    a[<span class="number">1</span>] = str2num(strA.substr(strA.find_first_of(<span class="string">'.'</span>) + <span class="number">1</span>, strA.find_last_of(<span class="string">'.'</span>) - strA.find_first_of(<span class="string">'.'</span>) - <span class="number">1</span>));</span><br><span class="line">    a[<span class="number">2</span>] = str2num(strA.substr(strA.find_last_of(<span class="string">'.'</span>) + <span class="number">1</span>, strA.length() - strA.find_last_of(<span class="string">'.'</span>) - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断符号</span></span><br><span class="line">    <span class="keyword">int</span> flag=getSum(a)-getSum(p)&gt;=<span class="number">0</span>?<span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果少付了，就交换数组元素</span></span><br><span class="line">    <span class="keyword">if</span>(flag&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,temp;i&lt;<span class="number">3</span>;++i)&#123;</span><br><span class="line">            temp=a[i];</span><br><span class="line">            a[i]=p[i];</span><br><span class="line">            p[i]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被找钱数</span></span><br><span class="line">    <span class="keyword">int</span> result[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> diff,borrow;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第三个数</span></span><br><span class="line">    diff=a[<span class="number">2</span>]-p[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span>(diff&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        result[<span class="number">2</span>] = diff;</span><br><span class="line">        borrow=<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result[<span class="number">2</span>] = diff+<span class="number">29</span>;</span><br><span class="line">        borrow=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二个数</span></span><br><span class="line">    diff=a[<span class="number">1</span>]-p[<span class="number">1</span>]+borrow;</span><br><span class="line">    <span class="keyword">if</span>(diff&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        result[<span class="number">1</span>] = diff;</span><br><span class="line">        borrow=<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result[<span class="number">1</span>] = diff+<span class="number">17</span>;</span><br><span class="line">        borrow = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个数</span></span><br><span class="line">    result[<span class="number">0</span>]=a[<span class="number">0</span>]-p[<span class="number">0</span>]+borrow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结果</span></span><br><span class="line">    <span class="keyword">if</span>(flag&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'-'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; result[<span class="number">0</span>] &lt;&lt; <span class="string">'.'</span> &lt;&lt; result[<span class="number">1</span>] &lt;&lt; <span class="string">'.'</span> &lt;&lt; result[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 以Knut为单位计算总钱数</span></span><br><span class="line">    <span class="keyword">return</span> (p[<span class="number">0</span>] * <span class="number">17</span> + p[<span class="number">1</span>])*<span class="number">29</span>+p[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">str2num</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 不考虑负数，字符串转数字</span></span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();++i)&#123;</span><br><span class="line">        num=num*<span class="number">10</span>+(str[i]-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>作者：<a href="https://github.com/chouxianyu" target="_blank" rel="noopener">@臭咸鱼</a></p><p>转载请注明出处：<a href="https://www.cnblogs.com/chouxianyu/" target="_blank" rel="noopener">https://www.cnblogs.com/chouxianyu/</a></p><p>欢迎讨论和交流!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805260223102976/pro
      
    
    </summary>
    
    
      <category term="PAT" scheme="https://chouxianyu.github.io/tags/PAT/"/>
    
      <category term="算法" scheme="https://chouxianyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
