<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[指针间的互相赋值]]></title>
    <url>%2F2018%2F09%2F01%2F%E6%8C%87%E9%92%88%E9%97%B4%E7%9A%84%E4%BA%92%E7%9B%B8%E8%B5%8B%E5%80%BC%2F</url>
    <content type="text"><![CDATA[文章分为三个大的部分 大标题1提出权限”理念”，大标题2验证赋值规则 大标题3、4、5是我的个人理解。 大标题6是最直接的结论。 提醒 看懂这篇文章可能需要你知道并理解四种指针的定义，这是基础。当然如果真的不懂，可以直接去文尾记住结论。 四种指针详解戳这https://chouxianyu.github.io/2018/08/26/常量指针与指针常量/#more 指针修改指向内容的权限普通指针=指针常量&gt;常量指针=四号指针 这个权限指的是通过该指针是否可以修改内存，情况只有两种：是和否。是的话就有权限，否的话就没有权限，这个大小是0和1，false和true，是有和没有，不是12345678的大和小。 普通指针很好说，四号指针也是个常量指针嘛，当然不可以修改内存 这个权限大小关系不难理解，前提是你有理解常指和指常这两个名词吧。 前边的普指和指常都可以修改内存中的内容，而常指和四号则不可以。 指针赋值规则指针间的赋值：权限大的可以赋值给权限小的（权限指操作内存即修改内存中的内容的权限） 权限大的可以赋值给权限小的，同级权限也可以，小赋值给大不行。 123456789101112131415161718192021222324252627282930313233const int n = 0; //常量nint m = 0; //变量mint* p1; //普通指针const int* p2; //常量指针 与int const* p2相同//int* const p3=nullptr; //指针常量//int const * const p4; //四号指针 既是常指又是指常，即自身不可修改，也不可通过它修改指向的内存p1 = p2; //error 普指=常指p1 = p3; //correct 普指=指常p1 = p4; //error 普指=四号p1 = &amp;n; //error 普指=常指p1 = &amp;m; //correct 普指=普指p2 = p1; //correct 常指=普指p2 = p3; //correct 常指=指常p2 = p4; //correct 常指=四号p2 = &amp;n; //correct 常指=常指p2 = &amp;m; //correct 常指=普指//p3是指常，是常量 赋值当然不行了，更别说权限了，所以上边不定义p3，//要讨论的是权限，在此定义并初始化以作示例，但定义只能有一个的啊，我在这提醒过了啊int* const p3 = p1; //correct 指常=普指int* const p3 = p2; //error 指常=常指int* const p3 = p4; //error 指常=四号int* const p3 = &amp;n; //error 指常=常指int* const p3 = &amp;m; //correct 指常=普指//p4是四号，是常量，同p3，不赘述int const * const p4 = p1; //correct 四号=普指int const * const p4 = p2; //correct 四号=常指int const * const p4 = p3; //correct 四号=指常int const * const p4 = &amp;n; //correct 四号=常指int const * const p4 = &amp;m; //correct 四号=普指 这个规则是我自己想出来的，可能书上云里雾里的背后就是这么个规律。我之前好像说过存在即合理..实际表述不太对，应该是存在就有原因。上边的代码应该囊括了所有“品种”指针的互相赋值，验证也都符合预期。如有错误，欢迎指出。 赋值规则的过程赋值得要满足被赋值方的要求，就像你想娶我（捂脸），我就需要你一米八，宠我，其他的都不需要，有的话我也一点不碰。但只要你这两点缺一点，我就不要，你是马云爸爸也不行！ 赋值就是那么个意思，我是指常或者普指，我要求有权限修改内存，所以就只有指常和普指能娶我，能给我赋值，因为常指和四号没有那个权限啊！反过来的话，我是常指和四号，我什么都不要，所以谁赋值都行，上面我们也能看到给常指和四号赋值的时候全都correct了。 赋值规则的必要性赋值规则前提是不同指针的权限不同我想多种指针是为了程序更好吧，不然只有一种指针能实现所有的功能，岂不是很可怕。给了程序员太大的权利，程序员一跑神犯错，程序就极有可能崩溃。给予指针权限之差就像c++里override吧，也是一种对程序员的友好？这是一方面,这应该能说明赋予指针不同权限的必要。 然后才有了赋值规则我们举个例子，如果没有这个规则，不同类型指针自由互相赋值：你定义一个常量n，然后再定义一个int* p，就是普指，普指按说是有修改内存的权利的，然后p=&amp;n，拿到n的地址，是不是就可以通过p改变n了？（在存在不同权限指针的前提下）。如果没有这个规则，我们可以很随意地改变常量了。干嘛自己造了一座木屋，然后又给它浇上油？ 斗胆扯内存不管是指针常量还是常量指针还有普通指针，它们本身和那块内存都是没有本质关系的。 它们（也包括普通类型的指针）只是一个带着镣铐或者没有镣铐的工具，我们可以通过const控制指针的权限以及它本身，同时我们在使用它们时也不能超出它们的权限范围和它们的个人承受力。 还是说我在做梦！？？！那有人也在做梦的话，联系我可获得王子之吻，开玩笑的啊，我不是gay，也不是变态 结论1234int* p1; //普通指针const int* p2; //常量指针 与int const* p2相同int* const p3=nullptr; //指针常量int const * const p4; //四号指针 既是常指又是指常 p1和p3可以互相赋值； p2和p4可以互相赋值； p1和p3可以给p2和p4赋值，反之不行； p3和p4在程序中只能在定义时被赋值一次，因为它们是const类型的量。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io/2018/09/01/指针间的互相赋值/#more 欢迎转发和评论]]></content>
      <tags>
        <tag>指针</tag>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[物不知其数]]></title>
    <url>%2F2018%2F09%2F01%2F%E7%89%A9%E4%B8%8D%E7%9F%A5%E5%85%B6%E6%95%B0%2F</url>
    <content type="text"><![CDATA[文章分为三个大的部分： 大标题1是物不知其数问题的引入，大标题2将问题抽象。 大标题3、4、5是物不知其数问题的三种解法及其代码实现。 大标题6是提出的一些问题及不太完善的解释。 提醒： 看文章最好先掌握文章整体结构，电脑会比较方便，可以点击标题跳到自己想看的部分。 看代码发现看不到后边的注释的话，调整网页显示比例（Ctrl+鼠标滚轮） 另外代码里的注释也是有规律的，单独一行的注释是解释下边的几行的功能的，写在代码右边的注释解释这一行代码功能。 问题引入秦王暗点兵和韩信乱点兵都是后人对物不知其数问题的一种故事化，有兴趣可以搜索一下。 物不知其数问题出自《孙子算经》。 原题为：”今有物不知其数，三三数之二，五五数之三，七七数之二，问物几何？” 这道题的意思是：有一批物品，不知道有几件。如果三件三件地数，就会剩下两件；如果五件五件地数，就会剩下三件；如果七件七件地数，也会剩下两件。 问：这批物品共有多少件？ 变成一个纯粹的数学问题就是：有一个数，用3除余2，用5除余3，用7除余2。求这个数。 拿到这个问题，我们可以发现用3和7除余数都是2，自然而然想到3*7=21,21+2=23,23%5=3。所以23就是答案之一，而后边问题中我们求最小值。 这个问题之所以简单，是由于有被3除和被7除余数相同这个特殊性。 问题抽象去除这个特殊性之后，真正的问题可以是： 三人一组余两人，五人一组余三人，七人一组余四人。问：这队士兵至少有多少人？ 就是说我们要找到一个最小的数，使其除以3余2，除以5余3，除以7余4 数据变量化后问题改成：找到一个最小的数，使其除以x余a，除以y余b，除以z余c 三个条件按顺序分别称为条件1，条件2，条件3。 暴力方法定义变量n，在范围内从头到尾递增，循环内判断条件为n%3==2&amp;&amp;n%5==3&amp;&amp;n%7==4，符合条件就break 代码实现123456789101112//找到一个最小的数，使其除以x余a，除以y余b，除以z余cint x,y,z; //除数int a,b,c; //余数scanf("%d %d %d %d %d %d",&amp;x,&amp;y,&amp;z,&amp;a,&amp;b,&amp;c);for(int n=1;;n++) //在这里不设范围&#123; if(n%x==a&amp;&amp;n%y==b&amp;&amp;n%z==c) &#123; printf("%d",n); break; &#125;&#125; 合并方法题目中有三个条件，我们可以将前两个条件合并成条件A，再把条件A与第三个条件合并，最后得出结果。 过程条件1和条件2合并成条件A已知n除以3余2，可设n=3i+2(i是正整数)，使i从1变大，判断3i+2除以5是否余3。 我们发现当i=2时，3i+2=8除以5余数为3，即n=8时除以3余2，除以5余3。 然后前两个条件就被我们合并成了条件A：n=15i+8， 本质是：最小的符合前两个条件的数字8加上3和5的最小公倍数15的整数倍 定理：若n除以a余b，n加上a的倍数再除以a余数仍然为b。我们加上的15i即为a的倍数 注意： 是最小公倍数，不要直接看做是两数乘积，因为只有在指出三个除数两两互质的情况下，两数乘积即为最小公倍数，在这里提醒一下，不要理解错误。 如果用的不是最小公倍数，我们下边n增加的单位就变大了，可能会求不到最小值，而题目要求是取得符合要求的最小值，如果没有这个要求，也没必要是最小公倍数了。 条件A和条件3合并成结果我们再使条件A和第三个条件合并，n=15i+8(i是正整数)，使i从1变大，判断15i+8除以7的余数是否为4。 我们发现当i=3时，15i+8=53除以7余4，53即为答案 拓展过程中条件合并了两次，让我想到定义一个函数。这个函数要调用两次 写一个比伪代码还伪的代码： 结果 合并(条件，条件) 代码实现12345678910111213141516171819202122232425262728293031323334353637int Gcd(int a,int b) //Greatest Common divisior&#123; int c; //辗转相除法求最大公约数 Greatest Common Divisor /* 余数不为0，继续相除，直到余数为0 */ while(b!=0) &#123; c=a%b; a=b; b=c; &#125; return a;&#125;int Lcm(int a,int b) //Least Common Multiple &#123; //最小公倍数等于乘积除以最大公约数 return a*b/Gcd(a,b);&#125;//找到一个最小的数，使其除以x余a，除以y余b，除以z余cint x,y,z; //除数int a,b,c; //余数scanf("%d %d %d %d %d %d",&amp;x,&amp;y,&amp;z,&amp;a,&amp;b,&amp;c);//合并条件1和条件2int i=1;while((x*i+a)%y!=b) //循环跳条件为(x*i+a)%y==b i++;//得到条件Aint d=x*i+a; //得到条件A//合并条件A和条件3int j=1;while((Lcm(x,y)*j+d)%z!=c) //while((Lcm(x,y)*j+d)%z !=c)求得的不一定是最小值 j++;//得到结果int result=Lcm(x,y)*j+d; //int result=x*y*j+d求得的不一定是最小值printf("%d",result); 中国剩余定理方法除数分别是3、5、7，用70(5乘7乘2)乘以用3除的余数，用21(3乘7)乘以用5除的余数，用15(3乘5)乘以用7除的余数，然后把这三个乘积相加。加得的结果如果比105(3乘5乘7)大，就除以105，所得的余数就是满足题目要求的最小正整数解。 过程除数两两结合得到公倍数对所得公倍数的目标(要求)：除以另外一个除数余1 这一步骤中，不用关注三个条件要求余几，条件中的余几会在下一步体现 条件一：用3除 这里是用3除，求另外两个除数的公倍数，并要求用3除余1,5*7=35除以3余2,5乘7乘2=70除以3余1，所以是70 条件二：用5除 3*7=21除以5余1，所以是21 条件三：用7除 3*5=15除以7余1，所以是15 公倍数乘以余数相加70*2+21*3+15*4=263 解读加法：设上式为q+p+r=n。只判断加法会不会影响满足条件1(用3除余2)即可推导出是否满足另外两个条件。 若n除以a余b，n加上a的倍数再除以a余数仍然为b，这里n为140，a为3，b为2，加上的p、r之和是3的倍数，所以余数仍为2，仍满足条件1。（发现百度百科这条定理写错了，嘻。我这数学水平也就能折腾折腾小学数学了吧） 【百度】您于2018-08-31提交的百科词条“秦王暗点兵”版本已通过，查看词条内容：（ http://dwz.cn/s4JsvyGW ）。感谢您参与编写百度百科，亿万网友因您的贡献受益。 9月1日跑步时收到这条短信，这比兴奋剂还兴奋剂，就想来段加速跑。wuhu~ 同理可得，通过加法之后我们得到了一个同时满足三个条件的数字 检验是否最小用上边得到的数字不断减去三个除数的最小公倍数直至数字小于最小公倍数(其实就是得到的数字除以公倍数取余了)，得到最终答案！ 解读：其实就是上边加粗定理的变式，若n除以a余b，n减去a的倍数再除以a余数仍然为b，只是可能说成余数是几不太合理，但要懂那个意思。 拓展个人感觉过程中的前两步完全可以合成一步，在代码实现中很容易就可以看出来，拆开反而更难理解…(差评) 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445//找到一个最小的数，使其除以x余a，除以y余b，除以z余cint x,y,z; //除数int a,b,c; //余数scanf("%d %d %d %d %d %d",&amp;x,&amp;y,&amp;z,&amp;a,&amp;b,&amp;c);//求第二、三个除数的公倍数int i=1;while((Lcm(y,z)*i%x)!=1) i++;//求第一、三个除数的公倍数int j=1;while(((Lcm(x,z)*j%y))!=1) j++;//求第一、二个除数的公倍数int k=1;while((Lcm(x,y)*k%z)!=1) k++;//公倍数乘以对应余数后求和int sum=0;sum+=Lcm(x,z)*j*b;sum+=Lcm(y,z)*i*a;sum+=Lcm(x,y)*k*c;//确认最小值printf("%d\n",sum%Lcm(Lcm(x,y),z));/*拓展对应的代码~~~~~~~~可以替代5到23行int sum = 0;//求第二、三个除数的公倍数同时乘以相应余数求和int i = 1;while ((Lcm(y, z)*i%x) != a) i++;sum += Lcm(y, z)*i;//求第一、三个除数的公倍数同时乘以相应余数求和int j = 1;while (((Lcm(x, z)*j%y)) != b) j++;sum += Lcm(x, z)*j;//求第一、二个除数的公倍数同时乘以相应余数求和int k = 1;while ((Lcm(x, y)*k%z) != c) k++;sum += Lcm(x, y)*k;//确认最小printf("%d\n", sum % Lcm(Lcm(x, y), z));*/ 瑕不掩瑜如果输入 3 3 3 1 1 1(可能这有点刁钻啊) 合并法中，会发现结果是7，但按照我们给出的题目结果应该是1啊！？ 7的来源是： 第一次合并为3*1+1=4，除以3余1，符合条件2，所以得到4； 第二次合并为4*1+1=7，除以3余1，符合条件3，结果为7。 所以答案是7的原因是因为我们默认i是从1开始增长，它代表我们要求的数一定大于三个除数，算经中的问题其实也隐含了这个条件结果要大于三个除数。 如果i从0开始增长，最终答案会是1。 在中国剩余定理中，我们会发现无法跳出循环while ((Lcm(y, z)*i%x) != a) i++;， 原因可能就是定理不适用这种情况吧。我没有深入了解中国剩余定理及其使用。因为我是从韩信点兵的题目了解到这些知识的。搜了一下中国剩余定理，发现它是数论里的一个知识，似乎使用也有一些条件，这里不再过多探索。 emm还是去看了下，中国剩余定理用的时候已经假设了三个除数两两互质。所以输入3 3 3 1 1 1这种就没必要了。但如果能弄懂3 3 3 1 1 1，还是可以让我们对定理有个更好的理解。 (放过我吧，每次写完东西都会发现bug，让我不爽..再多的抽象，也得加点前提条件呐。哪有那么多适用于所有情况的东西，真理也是少之又少。但简单的东西又没那么值得写，最多算个记录罢了) 希望有人可以给我提提建议~单机一点不好玩 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io/2018/09/01/物不知其数/#more]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常量指针与指针常量]]></title>
    <url>%2F2018%2F08%2F26%2F%E5%B8%B8%E9%87%8F%E6%8C%87%E9%92%88%E4%B8%8E%E6%8C%87%E9%92%88%E5%B8%B8%E9%87%8F%2F</url>
    <content type="text"><![CDATA[常量指针和指针常量是两个经常出现的概念，今天做个小小总结。 文章各部分的内容都是很容易理解的，并且附加代码说明，一切的前提是理解文章2.1和2.2部分，所以搞好基础再往后看呐。干货在嫌长的直接跳到结论去。 废话最近在看vc，看到书里有提这两个概念，学c的时候也有这两个概念，学c++的时候也有顶层const和底层const（这个我懂是懂，但从理解层次上不是那么懂）。所以就是很常见啦，但似乎很多人很迷惑，或者说理解着不舒服。于是我的“神逻辑”就来了。（希望不要被大佬按在地上摩擦，谢谢合作。欢迎讨论，欢迎留言，欢迎转发。如果你不嫌我菜的话，欢迎提各方面的问题，我可以研究研究） 我对它们的理解常指指常这种名词是英文翻译过来的，所以中文会有点拗口。常量的、指针的，我们生活中是没有这样的词的。 有的英语变成中文会很生涩。英文里是这样的两个东西:pointer to const, const pointer。const是constant的缩写。 中文有两种翻译方法：pointer to const, const pointer。constant可以是名词也可以是形容词 第一种：指向常量的指针（常量指针），指针常量。 第二种：指向常量的指针（指针常量，有人讲就不应该有指针常量的说法），常量指针。 说来说去都是中文的文字游戏，那个英文该怎么翻译。英文里很容易能看懂的，换成中文就有两种换法。 第二种方法确实不该有指针常量这个说法。所以要讨论中文版的话，如果出现指针常量，就应该是第一种方法。 https://www.thegeekstuff.com/2012/06/c-constant-pointers换成英文就不用玩文字游戏了 所以呢，本质上应该用英语去讲。但本篇是讲中文版的一种方法。（去百度也会发现有两种方法）。 本文用第一种说法，常指是pointer to const，指常是 const pointer。我觉得两种翻译都可以。这里是这种中文说法而已。 基础常指指常就是两个词而已，都是四个字。把前边的两个字当做形容词（是用来修饰后边的名词的），后边的名词才是重点。 指针就是地址嘛，常量就是不可以修改的量（初始化不算做赋值，不算做修改）。 注意区分指针本身（的内容）和指向的内存的内容。 修改指针即改变指针本身的内容，修改内存或者说修改内存内容就是修改指针指向的内存中的内容。这样讲的很清楚了吧…….. 常量指针常量指针中的常量呢，指的是这个指针的作用是常量性的、不可修改的，即不可以通过该指针修改内存中的内容，并不代表指向的内存不修改，注意前边有通过二字。 这个词也有指向常量的指针的叫法，我认为这个中文叫法是不准确的甚至是错误的。如果说常量指针是指向常量的指针，我认为这句话最直接的意思是说指针指向的内存是常量，这个意思是错误的，会误导他人，所以我不提倡这样叫它。证明参见文章3.3部分 在讨论问题的时候，互相知道对方说的是什么东西非常重要~，比如c++里默认构造，没有构造函数这样的句子，不同人的理解方式不同，这些概念理解也是讨论进行的一个前提。 指针常量这里的指针呢，指的是这个常量是一个地址。 如何根据定义判断类型1234//代码1const char * p; //常量指针char const * p; //常量指针 跟上一句等效char * const p; //指针常量 根据const和*的相对位置const 在*左边=》常量指针；反之，指针常量。 根据谁离变量名近const近=》指针常量；反之，常量指针。（const就是不变嘛，*就是指针啊，所以理解是很重要的，也就是2.1） 代码验证常量指针123456789//代码2//char ch[] = "HelloWorld!";const char* pStr1=ch; //定义常量指针//1.常量指针本身的值可以修改pStr1 = nullptr; //correct//2.不能通过常量指针修改它所指向的内存中的内容（注意通过二字，不要误会常量指针）*pStr1 = 'h'; //error*(pStr1 + 1) = 'E'; //errorpStr1[2] = 'L'; //error 指针常量123456//代码3//char ch[] = "HelloWorld!";//指针常量（顶层const）char * const pStr2 = ch; //定义并初始化//1.是常量，不可以被赋值（不把初始化叫做赋值）pStr2 = nullptr; //error 常量指针容易被误解的地方1234567//代码4int n = 0; //定义变量nconst int * p1 = &amp;n; //常量指针p1int * const p2 = &amp;n; //指针常量p2*p1 = 3; //error 因为不能通过常量指针修改内存中的内容，划重点！：但这不是说指向内存中的内容不可修改n = 3; //correct 这是对的，因为n是变量啊*p2 = 3; //correct 指针常量部分的代码就有体现，不多说 123456//代码5const int n = 0; //定义变量nconst int * p1 = &amp;n; //常量指针p1int * const p2 = &amp;n; //error 错误的 原因见下-指针间的赋值*p1 = 3; //error 原因是常指不可修改内存n = 3; //error 原因是n是变量 代码4和代码5中的常量指针p1都不能改变内存中内容，但内存中内容是否可修改是不一定的。（代码4的第5第6行要好好看） 原因是：常量指针不可以修改内存是因为不可以通过常量指针修改内存所致（你不通过常量指针的话，变量是否可以修改就不一定了），内存是否修改则是根据定义的情况了。 结论常量指针在这里指pointer to const。指针作用是常量性的，不可以通过它修改指向内存（容易被误会成内存一定不可修改）。 指针常量英文里指const pointer。指针是一个常量，指针本身不可以被修改。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io/2018/08/26/常量指针与指针常量/#more 欢迎转发和评论]]></content>
      <tags>
        <tag>指针</tag>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAI丢包掉帧处理]]></title>
    <url>%2F2018%2F08%2F22%2FJAI%E4%B8%A2%E5%8C%85%E6%8E%89%E5%B8%A7%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[问题：时间戳停止变化/图像停止更新描述本小白刚刚接触JAI，有很多不懂的地方。这次遇到问题是请教了YZ大哥（不知道年龄，暂时这么称呼），很感谢YZ大哥的耐心指导。因为我不仅不知道怎么调，连在哪里调也不知道╭(╯^╰)╮。以下是此次问题解决步骤，是YZ大哥跟我说怎么做，然后我照做，过程中又遇到问题，下边也给出了碰到的问题以及相应的解决方法。（8.21更） 刚刚又看了下JAI SDK Getting Started Guide，发现YZ讲的方法就是文档里那部分我觉得可以先跳过的内容，出现问题应该也是因为我没有按照文档进行配置…..可能我写的这个会有错误、遗漏、表述模糊，具体操作还可参加文档说明（8.22更） 4.4=》设置接收缓冲区 4.5=》设置中断调整 4.6=》打开巨型帧 4.7=》计算和设置包延迟 出现问题原因：图像传输时丢包（掉帧）解决方法：使用 JAI Control Tool 采集图像 防止丢包如何使用JAI Control Tool 采集图像 如何查看是否丢包？ 除了通过搜索，也可以找到GigE Image Acquisition-Total missing packets其实观察刚开始采集图像时图片是否有撕裂的情况（出现水平黑线） 如果丢包 设置相机据包为8000左右（我是8196）如何设置相机数据包 设置相机数据包后用JAI Control Tool采图时黑屏，查看黑屏是是否有帧率如何查看帧率 有帧率则调整网卡巨型帧等如何找到相机连接的网卡网络和共享中心-以太网（就是相机那条网线）-属性-由勾选EBUS设置为不勾选EBUS 同时可以看到连接时使用的网卡 找到网卡右击-属性-高级-巨型帧（由关闭设为9KB MTU）接收缓冲区设为最大（我的最大只有512，只能这样了） 提醒：文档中指出当巨型帧打开的时候，相机数据包大小就可以大于1500bytes，但相机数据包必须小于巨型帧大小。 提醒：文档中指出典型的接收缓冲区最大值为2048，标准默认值为256，请结合自己的实际情况 是不是我的网卡太菜了，众筹给我买个好的可以吗？？？ 如果仍丢包则根据文档设置延时直至成功如何设置延时？参照文档设置延时（主要是帧率）我的Max Fps是2.00 ，Band Width是90% 修改最大帧率，调整带宽，点击calculate，点击ok。（文档指出当数据包大小或者像素格式改变时，数据包延迟都需要重新计算） 最后查看是否丢包 如有丢包可以再次调整数据包大小和延迟。另外有一点是，图像的传输是和你整个电脑的运行都有关系的，而不只是网卡和相机设置。 这是第一次记录bug，图片好像有点多或者说有点乱，下次可以尝试以文字为主！]]></content>
      <tags>
        <tag>JAI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FirstWriting]]></title>
    <url>%2F2018%2F08%2F16%2FFirstWriting%2F</url>
    <content type="text"><![CDATA[在很久很久以前，你拥有我我拥有你 《外面的世界》在很久很久以前我就有搞一个类似博客的东西的想法，不过一直都没有尝试着搞……某天（10号左右吧）刷知乎看到github和hexo可以搭建博客，于是我就来了hhh不过搞的时候也遇到了好多bug，跳了好多坑…博客一是分享，二是记录，三四五还没想起来。 这是第一次写博客，学习内容是一点点markdown语法，文末有这次学习的链接，之后应该会再好好学学markdown语法。 字体设置斜体1：文字两侧各一个星号斜体2：文字两侧各一个下划线粗体：文字两侧各两个星号粗斜体：文字两侧各三个星号删除线：文字两侧各两个波浪号 那就有个疑问了，如果星号、波浪号、下划线出现在文字中怎么处理…或者说这种情况很少吧，并且对内容没什么影响 标题怎么用二级标题三级标题四级标题五级标题六级标题超链接行内形式：我的博客参考形式：[我的博客][1],[github][2][1]:https://chouxianyu.github.io/[2]:https://github.com/自动链接：我的博客地址https://chouxianyu.github.io/ 列表无序列表 无序列表项1 无序列表项2 无序列表项3 有序列表1.有序列表项12.有序列表项23.有序列表项3 插入图片 表格 表头1 表头2 表头3 表头4 默认左对齐 显式左对齐 居中对齐 右对齐 默认左对齐 显式左对齐 居中对齐 右对齐 默认左对齐 显式左对齐 居中对齐 右对齐 默认左对齐 显式左对齐 居中对齐 右对齐 转载自https://www.jianshu.com/p/56d99a3049a5]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyHelloWorld]]></title>
    <url>%2F2018%2F08%2F16%2FMyHelloWorld%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F10%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
