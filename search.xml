<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[LeetCode144二叉树前序遍历]]></title>
    <url>%2F2020%2F07%2F12%2FLeetCode144%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[题目链接https://leetcode-cn.com/problems/binary-tree-preorder-traversal/description/ 题解一：递归1234567891011121314151617181920212223242526272829303132333435363738// Problem: LeetCode 144// URL: https://leetcode-cn.com/problems/binary-tree-preorder-traversal/description/// Tags: Tree Recursion Stack// Difficulty: Medium#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;struct TreeNode&#123; int val; TreeNode* left; TreeNode* right; TreeNode(int x):val(x), left(nullptr), right(nullptr)&#123;&#125;&#125;;class Solution&#123;public: void func(TreeNode* root, vector&lt;int&gt;&amp; result)&#123; if (root != nullptr)&#123; result.push_back(root-&gt;val); func(root-&gt;left, result); func(root-&gt;right, result); &#125; &#125; vector&lt;int&gt; preorderTraversal(TreeNode* root)&#123; vector&lt;int&gt; result; func(root, result); return result; &#125;&#125;;int main()&#123; cout &lt;&lt; "helloworld" &lt;&lt; endl; // system("pause"); return 0;&#125; 题解二：非递归 需要用到栈 注意循环条件 注意是先把右子树存入栈中 12345678910111213141516171819202122232425262728293031323334353637383940414243// Problem: LeetCode 144// URL: https://leetcode-cn.com/problems/binary-tree-preorder-traversal/description/// Tags: Tree Recursion Stack// Difficulty: Medium#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;stack&gt;using namespace std;struct TreeNode&#123; int val; TreeNode* left; TreeNode* right; TreeNode(int x):val(x), left(nullptr), right(nullptr)&#123;&#125;&#125;;class Solution&#123;public: vector&lt;int&gt; preorderTraversal(TreeNode* root)&#123; vector&lt;int&gt; result; stack&lt;TreeNode*&gt; nodes; nodes.push(root); while(!nodes.empty())&#123; root = nodes.top(); nodes.pop(); if(root!=nullptr)&#123; result.push_back(root-&gt;val); nodes.push(root-&gt;right); nodes.push(root-&gt;left); &#125; &#125; return result; &#125;&#125;;int main()&#123; cout &lt;&lt; "helloworld" &lt;&lt; endl; // system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>递归</tag>
        <tag>树</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode83]]></title>
    <url>%2F2020%2F07%2F12%2FLeetCode83%2F</url>
    <content type="text"><![CDATA[题目链接https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/ 题目分析 链表已排序 题解一：迭代思路遍历链表，如果发现重复元素就删除。 注意发现重复时遍历链表用的指针不要后移，不重复时才后移。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243// Problem: LeetCode 83// URL: https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/description/// Tags: Linked List Recursion Iteration// Difficulty: Easy#include &lt;iostream&gt;using namespace std;struct ListNode&#123; int val; ListNode* next; ListNode(): val(0), next(nullptr)&#123;&#125; ListNode(int x): val(x), next(nullptr)&#123;&#125; ListNode(int x, ListNode* next) : val(x), next(next) &#123;&#125;&#125;;class Solution&#123;public: ListNode* deleteDuplicates(ListNode* head)&#123; if(nullptr == head)&#123;return head;&#125; ListNode *next = nullptr; ListNode* ret = head; // 用于返回 while(head-&gt;next != nullptr)&#123; next = head-&gt;next; // 元素重复 if (head-&gt;val == next-&gt;val)&#123; head-&gt;next = next-&gt;next; delete next; &#125; // 元素未重复 else&#123; head = next; &#125; &#125; return ret; &#125;&#125;;int main()&#123; // system("pause"); return 0;&#125; 题解二：递归关于递归又摸到一个递归函数套路（有可能仅针对这道题）： 递归出口（包括边界） 递归调用 手工拼接？（这一步可能直接融合到第二步） 思路 递归函数的功能是将一个链表去重 思路是取出head然后剩下的链表通过递归去重，然后手动去重 代码12345678910111213141516171819202122232425262728293031323334353637383940// Problem: LeetCode 83// URL: https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/description/// Tags: Linked List Recursion Iteration// Difficulty: Easy#include &lt;iostream&gt;using namespace std;struct ListNode&#123; int val; ListNode* next; ListNode(): val(0), next(nullptr)&#123;&#125; ListNode(int x): val(x), next(nullptr)&#123;&#125; ListNode(int x, ListNode* next) : val(x), next(next) &#123;&#125;&#125;;class Solution&#123;public: ListNode* deleteDuplicates(ListNode* head)&#123; if (nullptr == head || nullptr == head-&gt;next)&#123; return head; &#125; // 取出head然后剩下的链表通过递归去重 head-&gt;next = deleteDuplicates(head-&gt;next); // 手动去重 if(head-&gt;val == head-&gt;next-&gt;val)&#123; ListNode* ret = head-&gt;next; delete head; return ret; &#125;else&#123; return head; &#125; &#125;&#125;;int main()&#123; // system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>递归</tag>
        <tag>链表</tag>
        <tag>迭代</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode21]]></title>
    <url>%2F2020%2F07%2F11%2FLeetCode21%2F</url>
    <content type="text"><![CDATA[题目链接https://leetcode-cn.com/problems/merge-two-sorted-lists/description/ 题目分析 两个链表已排序 新链表应该是两个链表拼接起来的，而非new出来的 链表中头结点的val应该是有意义的 题解一：迭代思路 先new一个无意义的头结点，方便建立新链表 同时遍历两个链表并拼接至新链表，每取一个结点就更新其所在链表的指针和新链表指针，直至两个链表中的某一个遍历结束 将未遍历完的链表拼接至新链表 delete无意义的头结点，释放内存，返回其next 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354// Problem: LeetCode 21// URL: https://leetcode-cn.com/problems/merge-two-sorted-lists/description/// Tags: Linked List Recursion Iteration// Difficulty: Easy#include &lt;iostream&gt;using namespace std;struct ListNode&#123; int val; ListNode* next; ListNode(): val(0), next(nullptr)&#123;&#125; ListNode(int x): val(x), next(nullptr)&#123;&#125; ListNode(int x, ListNode* next): val(x), next(next)&#123;&#125;&#125;;class Solution &#123;public: ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) &#123; // 定义头结点，方便建立新链表 ListNode *head = new ListNode(-1); // 遍历链表用的指针 ListNode *l3 = head; // 同时遍历两个链表并拼接值较小的结点到新链表中，同步更新链表指针，直至某个链表遍历结束 while (l1 != nullptr &amp;&amp; l2 != nullptr)&#123; if (l1-&gt;val &lt; l2-&gt;val)&#123; l3-&gt;next = l1; l1 = l1-&gt;next; &#125;else&#123; l3-&gt;next = l2; l2 = l2-&gt;next; &#125; l3 = l3-&gt;next; &#125; // 将未遍历完的链表拼接至新链表 if(l1!=nullptr)&#123; l3-&gt;next = l1; &#125; if (l2 != nullptr)&#123; l3-&gt;next = l2; &#125; // 释放无意义头结点并返回其next l3 = head-&gt;next; delete head; return l3; &#125;&#125;;int main()&#123; // system("pause"); return 0;&#125; 题解二：递归再思递归昨天也做了一个递归题，今天这道题也可以用递归，我又有了一些关于递归的想法： 递归表达式 其实就是函数，要求明确几点：输入、输出、功能、拼接公式，有时候还需要知道函数运行对各个变量的影响（比如昨天那道题从代码二修改至代码三） 递归出口（也包括边界） 一定要最小化 要求能够处理递归表达式的已知情况，即输入取特定值（因题目而不同）时的情况 思路 递归表达式 输入：两个链表的头指针 输出：两个链表拼接后的头指针 功能：将两个链表拼接 递归出口 链表指针为null时。如果出口是next为null，这个出口并不是最小化的 递归函数实现的功能和思路为： 递归函数拿到了两个链表A和B，取出两个链表中值较小的那个头结点N，然后通过递归拼接剩下的两个链表返回M，然后手动拼接N和M。 思路模拟： 假设是链表A的头结点N的值比较小，那我取出其头结点N后形成一个新的链表A1（不包括头结点），然后通过递归拼接A1和B返回M，然后手工拼接N和M（即N-&gt;next=M;）。 代码123456789101112131415161718192021222324252627282930313233343536373839// Problem: LeetCode 21// URL: https://leetcode-cn.com/problems/merge-two-sorted-lists/description/// Tags: Linked List Recursion Iteration// Difficulty: Easy#include &lt;iostream&gt;using namespace std;struct ListNode&#123; int val; ListNode* next; ListNode(): val(0), next(nullptr)&#123;&#125; ListNode(int x): val(x), next(nullptr)&#123;&#125; ListNode(int x, ListNode* next): val(x), next(next)&#123;&#125;&#125;;class Solution &#123;public: ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) &#123; // 边界和递归出口 if(nullptr==l1)&#123;return l2;&#125; if(nullptr==l2)&#123;return l1;&#125; // 递归表达式 if(l1-&gt;val&lt;l2-&gt;val)&#123; l1-&gt;next = mergeTwoLists(l1-&gt;next, l2); return l1; &#125; else&#123; l2-&gt;next = mergeTwoLists(l2-&gt;next, l1); return l2; &#125; &#125;&#125;;int main()&#123; // system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>递归</tag>
        <tag>链表</tag>
        <tag>迭代</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode206]]></title>
    <url>%2F2020%2F07%2F11%2FLeetCode206%2F</url>
    <content type="text"><![CDATA[题目链接https://leetcode-cn.com/problems/reverse-linked-list/description/ 题目分析 要求：反转一个单向链表 代码模板里的ListNode给了3个构造函数，明显是方便我们构造结点用的（如果要new，最好要delete） 可以迭代实现，也可以递归实现 题解一：递归思路递归算法中有两个重要概念：递归表达式和递归出口，这一点似乎主要是在算法设计与分析课程上学得的。 递归出口 递归出口越小越好，出口应该考虑到边界条件 递归表达式 递归表达式是将链表分为两部分A和B，B用递归表达式递归处理，然后再将A和B“拼接”起来 过程经历 找错递归出口然后修改 未处理只有0或1个结点的边界情况，修改后得到代码一 代码一未将递归出口最小化，修改后得到代码二 代码二未利用一点（链表B反转后，原先的头结点已经是尾结点了，不需要通过遍历寻找尾结点），因此存在多余的遍历，修改后得到代码三 代码一这一版不太优美，最后一层没用递归（递归应该最大化，出口应该最小化），而是手动实现了就又改了一版，可以再往下看（代码二）。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758// Problem: LeetCode 206// URL: https://leetcode.com/problems/reverse-linked-list/description/// Tags: Linked List Recursion Iteration// Difficulty: Easy#include &lt;iostream&gt;using namespace std;struct ListNode&#123; int val; ListNode* next; ListNode(): val(0), next(nullptr)&#123;&#125; ListNode(int x): val(x), next(nullptr)&#123;&#125; ListNode(int x, ListNode* next): val(x), next(next)&#123;&#125;&#125;;class Solution&#123;public: ListNode *reverseList(ListNode *head) &#123; // 边界：when there is no node or there is only 1 node, then it's no need to reverse,just return the input if(nullptr == head || nullptr == head-&gt;next)&#123; return head; &#125; // 递归出口（recursive export），when there are only 2 nodes if(nullptr == head-&gt;next-&gt;next)&#123; ListNode *ptrA = head; ListNode *ptrB = head-&gt;next; ptrB-&gt;next = ptrA; ptrA-&gt;next = nullptr; return ptrB; &#125; // 以下为递归表达式 // devide the nodes into A(the original head) and B(the nodes except the original head). ListNode *ptrA = head; // A:原先的head ListNode *ptrB = reverseList(head-&gt;next); // B:将原先head以外的结点逆序并返回其head // look for the tail of B，寻找B的尾巴 ListNode* tailB = ptrB; while (tailB-&gt;next != nullptr)&#123;tailB = tailB-&gt;next;&#125; // 将A连接到B后面并将A设置为尾结点 tailB-&gt;next = ptrA; ptrA-&gt;next = nullptr; // 返回链表B return ptrB; &#125;&#125;;int main()&#123; // system("pause"); return 0;&#125; 代码二123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// Problem: LeetCode 206// URL: https://leetcode.com/problems/reverse-linked-list/description/// Tags: Linked List Recursion Iteration// Difficulty: Easy#include &lt;iostream&gt;using namespace std;struct ListNode&#123; int val; ListNode* next; ListNode(): val(0), next(nullptr)&#123;&#125; ListNode(int x): val(x), next(nullptr)&#123;&#125; ListNode(int x, ListNode* next): val(x), next(next)&#123;&#125;&#125;;class Solution&#123;public: ListNode *reverseList(ListNode *head) &#123; // 边界：when there is no node, then it's no need to reverse,just return the input if (nullptr == head) &#123; return head; &#125; // 递归出口（recursive export），when there is only 1 nodes if (nullptr == head-&gt;next) &#123; return head; &#125; // devide the nodes into A(the original head) and B(the nodes except the original head). ListNode *ptrA = head; // A:原先的head ListNode *ptrB = reverseList(head-&gt;next); // B:将原先head以外的结点逆序并返回其head // look for the tail of B，寻找B的尾巴 ListNode *tailB = ptrB; while (tailB-&gt;next != nullptr) &#123; tailB = tailB-&gt;next; &#125; // 将A连接到B后面并将A设置为尾结点 tailB-&gt;next = ptrA; ptrA-&gt;next = nullptr; // 返回链表B return ptrB; &#125;&#125;;int main()&#123; // system("pause"); return 0;&#125; 代码三第二天看了题解之后，发现我自己忽略了一点： 在ListNode *ptrB = reverseList(head-&gt;next);运行后，链表B反转前的第一个结点（即head-&gt;next）已经是链表B反转后的最后一个结点，所以不需要再寻找B的尾结点了。 修改后代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// Problem: LeetCode 206// URL: https://leetcode.com/problems/reverse-linked-list/description/// Tags: Linked List Recursion Iteration// Difficulty: Easy#include &lt;iostream&gt;using namespace std;struct ListNode&#123; int val; ListNode* next; ListNode(): val(0), next(nullptr)&#123;&#125; ListNode(int x): val(x), next(nullptr)&#123;&#125; ListNode(int x, ListNode* next): val(x), next(next)&#123;&#125;&#125;;class Solution&#123;public: ListNode *reverseList(ListNode *head) &#123; // 边界：when there is no node, then it's no need to reverse,just return the input if (nullptr == head) &#123; return head; &#125; // 递归出口（recursive export），when there is only 1 nodes if (nullptr == head-&gt;next) &#123; return head; &#125; // devide the nodes into A(the original head) and B(the nodes except the original head). ListNode *ptrA = head; // A:原先的head ListNode *ptrB = reverseList(head-&gt;next); // B:将原先head以外的结点逆序并返回其head，此时head-&gt;next已经为最后一个结点 // 将A连接到B后面并将A设置为尾结点 head-&gt;next-&gt;next = ptrA; ptrA-&gt;next = nullptr; // 返回链表B return ptrB; &#125;&#125;;int main()&#123; // system("pause"); return 0;&#125; 题解二：迭代思路其实就是头插法，另外要注意这道题里中链表的头结点的val是有意义的，所以最后要new出来的头结点delete掉，并返回其next。 代码一这份代码是没有修改原链表的结构的，而是基于原链表new了一个新链表（是原链表的逆序） 123456789101112131415161718192021222324252627282930313233343536373839404142// Problem: LeetCode 206// URL: https://leetcode.com/problems/reverse-linked-list/description/// Tags: Linked List Recursion Iteration// Difficulty: Easy#include &lt;iostream&gt;using namespace std;struct ListNode&#123; int val; ListNode* next; ListNode(): val(0), next(nullptr)&#123;&#125; ListNode(int x): val(x), next(nullptr)&#123;&#125; ListNode(int x, ListNode* next): val(x), next(next)&#123;&#125;&#125;;class Solution&#123;public: ListNode *reverseList(ListNode *head) &#123; // 创建新链表 ListNode* newHead = new ListNode(-1); while (head != nullptr)&#123; ListNode *tempNodePtr = new ListNode(head-&gt;val, head-&gt;next); tempNodePtr-&gt;next = newHead-&gt;next; newHead-&gt;next = tempNodePtr; // 取下一个结点 head = head-&gt;next; &#125; // 释放无用的头结点并返回真正的头结点 ListNode* ret = newHead-&gt;next; delete newHead; return ret; &#125;&#125;;int main()&#123; // system("pause"); return 0;&#125; 代码二这份代码修改了原链表的结构，直接利用了原链表的结点 123456789101112131415161718192021222324252627282930313233343536373839404142// Problem: LeetCode 206// URL: https://leetcode.com/problems/reverse-linked-list/description/// Tags: Linked List Recursion Iteration// Difficulty: Easy#include &lt;iostream&gt;using namespace std;struct ListNode&#123; int val; ListNode* next; ListNode(): val(0), next(nullptr)&#123;&#125; ListNode(int x): val(x), next(nullptr)&#123;&#125; ListNode(int x, ListNode* next): val(x), next(next)&#123;&#125;&#125;;class Solution&#123;public: ListNode *reverseList(ListNode *head) &#123; // 创建新链表 ListNode* newHead = new ListNode(-1); while (head != nullptr)&#123; ListNode* next = head-&gt;next; head-&gt;next = newHead-&gt;next; newHead-&gt;next = head; // 取下一个结点 head = next; &#125; // 释放无用的头结点并返回真正的头结点 ListNode* ret = newHead-&gt;next; delete newHead; return ret; &#125;&#125;;int main()&#123; // system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>递归</tag>
        <tag>链表</tag>
        <tag>迭代</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode160]]></title>
    <url>%2F2020%2F07%2F10%2FLeetCode160%2F</url>
    <content type="text"><![CDATA[题目链接https://leetcode-cn.com/problems/intersection-of-two-linked-lists/ 初次读题初次读题可知 两个指针相同即需要求得的结果 链表长度可能不同 两个链表可能没有交叉点，此时返回NULL 不可修改链表结构 链表中无循环 我第一次读题时看的是英文版，并且我刚开始做LeetCode对题目风格也不熟悉，同时这道题的Example也是很神奇，我一下子没有理解题意，看了中文版的题目和题解后才明白这个题是怎么做的。 注意点根据这道题的代码模板和最终答案可知，最终我们需要找到交叉结点的指针。 在Example1中，val为1的两个结点虽然内容相同，但不是交叉点，因为交叉点的定义是同时存在于两个链表中。 题解一思路假如两个链表有交叉点（intersection），则可以设两个链表彼此不重复的结点个数分别为d1和d2，重复的结点个数为d。如果一个链表遍历完则使其从另外一个链表的头部重新开始，这样形成一个式子：d1+d+d2=d2+d+d1。 假如两个链表没有交叉点，这也只是d=0的一个特例，因此只要实现上述思路即可。 关于思路，可以看看这个题的一个视频题解： https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/lian-biao-xiang-jiao-shuang-zhi-zhen-onshi-jian-fu/ 代码123456789101112131415161718192021222324252627282930313233343536373839// Problem: Leetcode 160// URL: https://leetcode-cn.com/problems/intersection-of-two-linked-lists/// Tags: Linked List// Difficulty: Easy#include &lt;iostream&gt;using namespace std;struct ListNode&#123; int val; ListNode* next; ListNode(int x):val(x),next(NULL)&#123;&#125;&#125;;class Solution&#123;public: ListNode *getIntersectionNode(ListNode *headA, ListNode *headB)&#123; // Deal with the border "nullptr" if (nullptr==headA || nullptr==headB) &#123; return nullptr; &#125; ListNode *ptrA = headA; ListNode *ptrB = headB; // d1+d+d2=d2+d+d1 while (ptrA != ptrB)&#123; ptrA = nullptr == ptrA ? headB : ptrA-&gt;next; ptrB = nullptr == ptrB ? headA : ptrB-&gt;next; &#125; return ptrA; &#125;&#125;;int main()&#123; // system("pause"); return 0;&#125; 题解二也看到有人讲这个思路： 遍历链表A并将每个结点的指针存入set，然后遍历链表B并判断每个结点指针是否存在于set中。 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算某天的下一天：黑盒测试之等价类划分+JUnit参数化测试]]></title>
    <url>%2F2020%2F04%2F28%2F%E8%AE%A1%E7%AE%97%E6%9F%90%E5%A4%A9%E7%9A%84%E4%B8%8B%E4%B8%80%E5%A4%A9%EF%BC%9A%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E4%B9%8B%E7%AD%89%E4%BB%B7%E7%B1%BB%E5%88%92%E5%88%86-JUnit%E5%8F%82%E6%95%B0%E5%8C%96%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[题目要求测试以下程序：该程序有三个输入变量month、day、year（month、day和year均为整数值，并且满足：1≤month≤12、1≤day≤31和1900≤year≤2050)，分别作为输入日期的月份、日、年份，通过程序可以输出该输入日期在日历上隔一天的日期。例如，输入为2004年11月30日，则该程序的输出为2004年12月1日。 划分等价类，按照等价类划分法设计测试用例； 编写getNextDate函数； 掌握Junit4的用法，使用Junit4测试getNextDate函数。 等价类表假设输入格式为year,month,day，且三个输入变量year、month和day均被输入。 year要区分闰年和平年，其中闰年还可以分为世纪闰年和普通闰年，且year要属于[1900,2050]。 month要根据该月有几天来进行区分，并且需要考虑是否向year进位，且month要属于[1,12]。 day要根据月份来判断天数是否合法，并且需要考虑是否向month进位，且day要属于[1,31]。 等价类划分如下。 测试用例有效等价类测试用例共有5个有效等价类测试用例。 测试数据 期望结果 覆盖范围 2004/12/25 2004/12/26 2,10,14 2001/2/28 2001/3/1 3,7,15 2000/2/29 2000/3/1 1,7,16 2001/4/30 2001/5/1 3,8,17 2001/5/31 2001/6/1 3,9,18 无效等价类测试用例共有12个有效等价类测试用例。 测试数据 期望结果 覆盖范围 1899/6/1 year非法 4 2051/6/1 year非法 5 a/6/1 year非法 6 1999/0/1 month非法 11 1999/13/1 month非法 12 1999/a/1 month非法 13 1999/1/0 day非法 19 1999/1/32 day非法 20 1999/1/a day非法 21 2001/2/29 day非法 22 2000/2/30 day非法 23 2001/4/31 day非法 24 源代码项目结构如下图所示 DateUtil.javapackage com.company;public class DateUtil &#123; // 有31天的月份 private static int[] monthOfThirtyOne = new int[]&#123;1,3,5,7,8,10,12&#125;; // 有30天的月份 private static int[] monthOfThirty = new int[]&#123;4,6,9,11&#125;; // 年月日 private int year; private int month; private int day; // 最终实现的功能，输入是一个“年/月/日”格式的字符串； // 如果函数运行成功，输出则是相同格式的下一天，否则是错误信息 public String getNextDate(String dateStr)&#123; String updateResult = this.updateDate(dateStr); // 如果输入合法 if (updateResult.equals("success"))&#123; String checkResult = this.checkDate(); // 如果输入合法 if (checkResult.equals("valid"))&#123; // 计算明天的日期 return this.calcNextDate(); &#125; return checkResult; &#125; return updateResult; &#125; // 根据输入字符串转换并更新年月日 private String updateDate(String dateStr)&#123; // 获取年月日 String[] numbers = dateStr.split("/"); try&#123; this.year = Integer.parseInt(numbers[0]); &#125;catch (NumberFormatException e)&#123; return "year非法"; &#125; try&#123; this.month = Integer.parseInt(numbers[1]); &#125;catch (NumberFormatException e)&#123; return "month非法"; &#125; try&#123; this.day = Integer.parseInt(numbers[2]); &#125;catch (NumberFormatException e)&#123; return "day非法"; &#125; return "success"; &#125; // 检查日期是否合法 private String checkDate()&#123; String valid = "valid"; String yearInvalid = "year非法"; String monthInvalid = "month非法"; String dayInvalid = "day非法"; // year合法 if (year&gt;=1900&amp;&amp;year&lt;=2050)&#123; // month合法 if (month&gt;=1&amp;&amp;month&lt;=12)&#123; // day小于1 if (day&lt;=0)&#123; return dayInvalid; &#125; // 至此能保证day大于0 // 是2月 if (month==2)&#123; // 闰年 if (yearIsLeap(year))&#123; // 1-29 if (day&lt;=29)&#123; return valid; &#125;else&#123; return dayInvalid; &#125; &#125; // 平年2月 else&#123; // 1-28 if (day&lt;=28)&#123; return valid; &#125;else&#123; return dayInvalid; &#125; &#125; &#125; // 至此能保证不是2月 // 是否为31天的月 for(int i=0;i&lt;7;++i)&#123; if (month==monthOfThirtyOne[i])&#123; // 1-31 if (day&lt;=31)&#123; return valid; &#125;else&#123; return dayInvalid; &#125; &#125; &#125; // 至此能保证不是2月和31天的月 // 是否为30天的月 for(int i=0;i&lt;4;++i)&#123; if (month==monthOfThirty[i])&#123; // 1-30 if (day&lt;=30)&#123; return valid; &#125;else&#123; return dayInvalid; &#125; &#125; &#125; &#125; // month非法 else&#123; return monthInvalid; &#125; &#125; // year非法 return yearInvalid; &#125; // 计算下一天 private String calcNextDate()&#123; int yearNext; int monthNext; int dayNext=day+1; int dayCarry=0; int monthCarry=0; // 处理day // 是2月 if (month==2)&#123; // 闰年 if (yearIsLeap(year))&#123; // 1-29 if (day==29)&#123; dayNext = 1; dayCarry = 1; &#125; &#125; // 平年2月 else&#123; // 1-28 if (day==28)&#123; dayNext = 1; dayCarry = 1; &#125; &#125; &#125; // 不是2月 else&#123; boolean isThirtyOne= false; // 是否为31天的月 for(int i=0;i&lt;7;++i)&#123; if (month==monthOfThirtyOne[i])&#123; isThirtyOne = true; // 1-31 if (day==31)&#123; dayNext = 1; dayCarry = 1; &#125; break; &#125; &#125; // 至此能保证是30天的月 if (!isThirtyOne)&#123; // 1-30 if (day==30)&#123; dayNext = 1; dayCarry = 1; &#125; &#125; &#125; // 处理月 if (month+dayCarry&gt;12)&#123; monthNext = 1; monthCarry = 1; &#125;else&#123; monthNext = month+dayCarry; &#125; // 处理年 yearNext = year+monthCarry; return yearNext +"/"+ monthNext +"/"+ dayNext; &#125; // 判断某一年是否为闰年 private boolean yearIsLeap(int year)&#123; // 普通闰年和世纪闰年 if ((year%4==0&amp;&amp;year%100!=0)||(year%400==0))&#123; return true; &#125; // 平年 return false; &#125;&#125; DateUtilTest.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package com.test;import com.company.DateUtil;import static org.junit.Assert.*;import org.junit.Test;//1、参数化测试：引入相关的包和类import java.util.Collection;import java.util.Arrays;import org.junit.runner.RunWith;import org.junit.runners.Parameterized;import org.junit.runners.Parameterized.Parameters;@RunWith(Parameterized.class) //2、参数化测试：更改测试运行器为RunWith(Parameterized.class)public class DateUtilTest &#123; //3、参数化测试：声明变量用来存放预期值与结果值 private DateUtil util = new DateUtil(); private String date; private String except; //4、参数化测试：声明一个返回值为 Collection 的公共静态方法，并使用@Parameters 进行修饰 @Parameters public static Collection data()&#123; return Arrays.asList(new Object[][]&#123; &#123;"2004/12/25", "2004/12/26"&#125;, &#123;"2001/2/28", "2001/3/1"&#125;, &#123;"2000/2/29", "2000/3/1"&#125;, &#123;"2001/4/30", "2001/5/1"&#125;, &#123;"2001/5/31", "2001/6/1"&#125;, &#123;"1899/6/1", "year非法"&#125;, &#123;"2051/6/1", "year非法"&#125;, &#123;"a/6/1", "year非法"&#125;, &#123;"1999/0/1", "month非法"&#125;, &#123;"1999/13/1", "month非法"&#125;, &#123;"1999/a/1", "month非法"&#125;, &#123;"1999/1/0", "day非法"&#125;, &#123;"1999/1/32", "day非法"&#125;, &#123;"1999/1/a", "day非法"&#125;, &#123;"2001/2/29", "day非法"&#125;, &#123;"2000/2/30", "day非法"&#125;, &#123;"2001/4/31", "day非法"&#125;, &#125;); &#125; //5、参数化测试：为测试类声明一个带有参数的公共构造方法，并在其中为声明变量赋值 public DateUtilTest(String date, String except)&#123; this.date = date; this.except = except; &#125; @Test public void testGetNextDate()&#123; assertEquals(except, util.getNextDate(date)); &#125;&#125; 测试结果如下图所示，17个测试用例均测试成功，程序实际输出与期望值相同。 实验总结本次实验的主要目的是巩固黑盒测试方法中的等价类划分法的知识，练习JUnit的参数化测试。在本次实验中，我认为我的getNextDate函数的实现并不是很优雅，比较过程化。写这个函数花了我很多时间，主要问题在于我没有抓住一些关键的、抽象的逻辑和子函数，比如天向月份进位和月份向年份完全可以参照加法器的循环、可以写一个函数根据年份和月份判断出天数的最大值等等。 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Java</tag>
        <tag>黑盒测试</tag>
        <tag>软件测试，JUnit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[黑盒测试之因果图法]]></title>
    <url>%2F2020%2F04%2F20%2F%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%9B%A0%E6%9E%9C%E5%9B%BE%E6%B3%95%2F</url>
    <content type="text"><![CDATA[题目要求设要对一个自动饮料售货机软件进行黑盒测试。该软件的规格说明如下：“有一个处理单价为1元5角的盒装饮料的自动售货机软件，若投入1元5角硬币，按下“可乐”、“雪碧”或“红茶”按钮，相应的饮料就送出来。若投入的是2元硬币，在送出饮料的同时退还5角硬币。“ 试利用因果图法，建立该软件的因果图； 设计测试该软件的全部测试用例。 具体步骤原因和结果 原因 中间原因 结果 c1：投入1元5角硬币 m1：已投币 e1：退还5角硬币 c2：投入2元硬币 c3：按下“可乐”按钮 e2：送出可乐 c4：按下“雪碧”按钮 m2：已按下按钮 e3：送出雪碧 c5：按下“红茶”按钮 e4：送出红茶 因果图 决策表 1 2 3 4 5 6 c1 0 0 0 0 1 1 c2 0 0 0 0 0 0 c3 0 1 0 0 0 1 c4 0 0 1 0 0 0 c5 0 0 0 1 0 0 m1 0 0 0 0 1 1 m2 0 1 1 1 0 1 e1 e2 √ e3 e4 7 8 9 10 11 12 c1 1 1 0 0 0 0 c2 0 0 1 1 1 1 c3 0 0 0 1 0 0 c4 1 0 0 0 1 0 c5 0 1 0 0 0 1 m1 1 1 1 1 1 1 m2 1 1 0 1 1 1 e1 √ √ √ e2 √ e3 √ √ e4 √ 测试用例 测试用例编号 输入 预期输出 1 不投币，不按按钮 无 2 不投币，按下“可乐”按钮 无 3 不投币，按下“雪碧”按钮 无 4 不投币，按下“红茶”按钮 无 5 投1元5角硬币，不按按钮 无 6 投1元5角硬币，按下“可乐”按钮 送出可乐 7 投1元5角硬币，按下“雪碧”按钮 送出雪碧 8 投1元5角硬币，按下“红茶”按钮 送出红茶 9 投2元硬币，不按按钮 无 10 投2元硬币，按下“可乐”按钮 送出可乐并退还5角硬币 11 投2元硬币，按下“雪碧”按钮 送出雪碧并退还5角硬币 12 投2元硬币，按下“红茶”按钮 送出红茶并退还5角硬币 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>软件测试</tag>
        <tag>黑盒测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[黑盒测试之等价类划分]]></title>
    <url>%2F2020%2F04%2F07%2F%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E4%B9%8B%E7%AD%89%E4%BB%B7%E7%B1%BB%E5%88%92%E5%88%86%2F</url>
    <content type="text"><![CDATA[题目要求某城市电话号码由三部分组成。它们的名称和内容分别是： 地区码：空白或三位数字； 前缀：非“0”或“1”的三位数字 要求不是很明确，所以将其理解为不包括“0**”也不包括“1”的三位数字** 后缀：4位数字。 假定被测程序能接受一切符合上述规定的电话号码，拒绝所有不符合规定的电话号码。根据该程序的规格说明，做等价类的划分，并设计测试用例。（按照上课例子列表格） 等价类表等价类的划分似乎没有统一的标准？比如我这里的无效等价类划分得挺简单的，可以划分得更细一些。 输入数据 有效等价类 无效等价类 地区码 1空白 3不是空白也不是三位数字 地区码 2三位的数字 无 前缀 4不包含0且不包含1的三位数字 5至少包含一个0或1 前缀 无 6不是三位数字 后缀 7四位数字 8不是四位数字 测试用例有效等价类测试用例 测试数据 期望结果 覆盖范围 地区码为空白 前缀为222 后缀为1234 程序将该输入判定为有效输入 1,4,7 地区码为123 前缀为222 后缀为1234 程序将该输入判定为有效输入 2,4,7 无效等价类测试用例 测试数据 期望结果 覆盖范围 地区码为22 前缀为222 后缀为1234 程序将该输入判定为无效输入 3 地区码为空白 前缀为123 后缀为1234 程序将该输入判定为无效输入 5 地区码为空白 前缀为22 后缀为1234 程序将该输入判定为无效输入 6 地区码为空白 前缀为222 后缀为123 程序将该输入判定为无效输入 8 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>软件测试</tag>
        <tag>黑盒测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java实现称重3次找到假球]]></title>
    <url>%2F2020%2F04%2F07%2FJava%E5%AE%9E%E7%8E%B0%E7%A7%B0%E9%87%8D3%E6%AC%A1%E6%89%BE%E5%88%B0%E5%81%87%E7%90%83%2F</url>
    <content type="text"><![CDATA[前言之前老师让写一个程序，就写了写，本文是我自己的写法。 这里有老师的Java实现代码，请点击 正文题目要求 程序要求 10个铅球中有一个假球（比其他铅球的重量要轻），用天平三次称出假球。 程序设计思路 第一次使用天平分别称5个球，判断轻的一边有假球；拿出轻的5个球，取出其中4个第二次称，两边分别放2个球：如果两边同重，则剩下的球为假球；若两边不同重，拿出轻的两个球称第三次，轻的为假球。 代码注释应该还算详细哈。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public class Main &#123; // 计算数组中连续几个球的质量之和，区间是[startIndex,endIndex] public static int sum(int[] balls,int startIndex, int endIndex)&#123; int ret =0; for(int i=startIndex;i&lt;=endIndex;++i)&#123; ret+=balls[i]; &#125; return ret; &#125; // 输入balls是10个球的质量，该函数返回假球在该数组中的下标 public static int findFakeBall(int[] balls)&#123; // 第一次称重，十个，五五分，默认左边五个球中有假球 int fiveStartIndex = 0; // 如果右边五个球中有假球 if (sum(balls,5,9)&lt;sum(balls,0,4))&#123; fiveStartIndex = 5; &#125; // 第二次称重，五个，二一二分，默认左边两个球中有假球 int twoStartIndex = fiveStartIndex+0; // 五个球中左边两个球的质量之和和右边两个球的质量之和 int leftTwoSum = sum(balls,fiveStartIndex+0,fiveStartIndex+1); int rightTwoSum = sum(balls,fiveStartIndex+3,fiveStartIndex+4); // 如果右边两个球中有假球 if(rightTwoSum&lt;leftTwoSum)&#123; twoStartIndex = fiveStartIndex+3; // 如果左右两边的四个球中没有假球，则中间的球是假球 &#125;else if(rightTwoSum==leftTwoSum)&#123; return fiveStartIndex+2; &#125; // 第三次称重 // 如果两个球中左边是假球 if(balls[twoStartIndex]&lt;balls[twoStartIndex+1])&#123; return twoStartIndex; // 如果两个球中右边是假球 &#125;else&#123; return twoStartIndex+1; &#125; &#125; // 对函数findFakeBall()进行测试 public static void main(String[] args) &#123; int[] balls = &#123;5,10,10,10,10,10,10,10,10,10&#125;; // 所有球的质量 int fakeIndex =findFakeBall(balls); System.out.println(fakeIndex); &#125;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JUnit白盒测试之基本路径测试：称重3次找到假球]]></title>
    <url>%2F2020%2F04%2F07%2FJUnit%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%9F%BA%E6%9C%AC%E8%B7%AF%E5%BE%84%E6%B5%8B%E8%AF%95%EF%BC%9A%E7%A7%B0%E9%87%8D3%E6%AC%A1%E6%89%BE%E5%88%B0%E5%81%87%E7%90%83%2F</url>
    <content type="text"><![CDATA[前言记录一次软件测试课程的课后作业，作业内容是白盒测试中的基本路径测试，步骤如下 分析程序的控制流 计算环形复杂度 找出基本路径 设计测试用例 执行测试用例（要求使用JUnit） 作业要求使用白盒测试用例设计方法为下面的程序设计测试用例（基本路径测试）并用JUnit测试： 程序要求 10个铅球中有一个假球（比其他铅球的重量要轻），用天平三次称出假球。 程序设计思路 第一次使用天平分别称5个球，判断轻的一边有假球；拿出轻的5个球，取出其中4个第二次称，两边分别放2个球：如果两边同重，则剩下的球为假球；若两边不同重，拿出轻的两个球称第三次，轻的为假球。 递交材料 测试用例设计电子稿、源程序、JUnit测试截图。 程序代码及控制流图程序代码文件SearchBall.java内容如下。 注意不要让代码的行号变动，程序流图中节点的编号是根据这份代码里每条执行语句里的行号对应的。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package module;public class SearchBall &#123; private static int x[]=new int[10]; public SearchBall()&#123;&#125; public void setBWeight(int w[])&#123; for(int i=0;i&lt;w.length;i++)&#123; x[i]=w[i]; &#125; &#125; public String BeginSearch()&#123; if(x[0]+x[1]+x[2]+x[3]+x[4]&lt;x[5]+x[6]+x[7]+x[8]+x[9])&#123; if(x[1]+x[2]==x[3]+x[4])&#123; return "1号是假球"; &#125; if(x[1]+x[2]&lt;x[3]+x[4])&#123; if (x[1]&lt;x[2]) &#123; return "2号是假球"; &#125;else &#123; return "3号是假球"; &#125; &#125;else &#123; if (x[3]&lt;x[4])&#123; return "4号是假球"; &#125; else&#123; return "5号是假球"; &#125; &#125; &#125;else &#123; if(x[6]+x[7]==x[8]+x[9])&#123; return "6号是假球"; &#125; if(x[6]+x[7]&lt;x[8]+x[9]) &#123; if (x[6]&lt;x[7]) &#123; return "7号是假球"; &#125;else &#123; return "8号是假球"; &#125; &#125;else &#123; if (x[8]&lt;x[9]) &#123; return "9号是假球"; &#125;else &#123; return "10号是假球"; &#125; &#125; &#125; &#125;&#125; 程序控制流图下图中节点中的数字是对应可执行语句在上面代码中的行号；边上的Y代表判定结果为真，N代表判定结果为假。 计算环形复杂度控制流图$G$的环形复杂度计算公式：$V(G)=E-N+2$，其中$E$为控制流图中边的数量，$N$是控制流图中的节点数量。 函数BeginSearch()的控制流图的环形复杂度为 V(G)=18-19+2=1基本路径从程序流图中可知，共有10条基本路径，具体如下 路径编号 经过节点 1 12-13-14 2 12-13-16-17-18 3 12-13-16-17-20 4 12-13-16-23-24 5 12-13-16-23-27 6 12-31-32 7 12-31-34-35-36 8 12-31-34-35-38 9 12-31-34-41-42 10 12-31-34-41-44 测试用例设计与执行测试用例设计 路径编号 用例输入 期待输出 1 {5, 10, 10, 10, 10, 10, 10, 10, 10, 10} “1号是假球” 2 {10, 5, 10, 10, 10, 10, 10, 10, 10, 10} “2号是假球” 3 {10, 10, 5, 10, 10, 10, 10, 10, 10, 10} “3号是假球” 4 {10, 10, 10, 5, 10, 10, 10, 10, 10, 10} “4号是假球” 5 {10, 10, 10, 10, 5, 10, 10, 10, 10, 10} “5号是假球” 6 {10, 10, 10, 10, 10, 5, 10, 10, 10, 10} “6号是假球” 7 {10, 10, 10, 10, 10, 10, 5, 10, 10, 10} “7号是假球” 8 {10, 10, 10, 10, 10, 10, 10, 5, 10, 10} “8号是假球” 9 {10, 10, 10, 10, 10, 10, 10, 10, 5, 10} “9号是假球” 10 {10, 10, 10, 10, 10, 10, 10, 10, 10, 5} “10号是假球” Junit执行测试用例基于JUnit生成的测试代码，我补充了测试函数BeginSearch()的代码，文件SearchBallTest.java内容如下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package test.module; import org.junit.Test; import org.junit.Before; import org.junit.After; import module.SearchBall;import static org.junit.Assert.assertEquals;/** * SearchBall Tester. * * @author &lt;Authors name&gt; * @since &lt;pre&gt;4月 7, 2020&lt;/pre&gt; * @version 1.0 */ public class SearchBallTest &#123; @Beforepublic void before() throws Exception &#123; &#125; @Afterpublic void after() throws Exception &#123; &#125; /** * * Method: setBWeight(int w[]) * */ @Testpublic void testSetBWeight() throws Exception &#123; //TODO: Test goes here... &#125; /** * * Method: BeginSearch() * */ @Testpublic void testBeginSearch() throws Exception &#123; SearchBall obj = new SearchBall(); int[] input; int ballIndex; // 遍历测试各个基本路径 for(int i=0;i&lt;10;++i)&#123; // 生成用例输入 input = new int[]&#123;10, 10, 10, 10, 10, 10, 10, 10, 10, 10&#125;; input[i]=5; obj.setBWeight(input); // 测试用例输出 ballIndex = i+1; assertEquals(ballIndex+"号是假球", obj.BeginSearch()); &#125;&#125; &#125; 执行函数testBeginSearch()，得到如下图所示的结果（从下图也可以看到项目的结构） 其它 我自己实现的找到假球的程序 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Java</tag>
        <tag>软件测试</tag>
        <tag>白盒测试</tag>
        <tag>基本路径测试</tag>
        <tag>JUnit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用pymysql和Flask搭建后端，响应前端POST和GET请求，实现登录和注册功能]]></title>
    <url>%2F2020%2F04%2F05%2F%E7%94%A8pymysql%E5%92%8CFlask%E6%90%AD%E5%BB%BA%E5%90%8E%E7%AB%AF%EF%BC%8C%E5%93%8D%E5%BA%94%E5%89%8D%E7%AB%AFPOST%E5%92%8CGET%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E5%92%8C%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[前言这次作业不仅需要我建立一个数据库(详情请点击这里)，还需要我基于这个数据库写后端接口（注册和登录）供前端访问，接收前端的POST和GET请求，并将登录、注册是否成功传给前端。 本文介绍如何用Flask搭建后端，其中使用了pymysql操作mysql数据库，也会做这个部分的介绍。 正文需要为前端提供的接口有两个：注册和登录，为此我定义了四个函数，分别是 select_user(userid, password) insert_user(userid, password, phone, email, company) on_register() on_login() 前两个函数是操作数据库，被后两个函数调用；后两个函数是给前端的接口。 后端说明整个后端的代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109from flask import Flask, requestimport jsonimport pymysqlfrom flask_cors import CORS# 定义appapp = Flask(__name__)# 设置跨域CORS(app, supports_credentials=True)# 连接数据库，账号是root，密码是000，数据库名称是shopdatadb = pymysql.connect("localhost", "root", "000", "shopdata") # 连接数据库cursor = db.cursor() # 定义游标# select a user，根据userid和password获取一个用户是否存在，即判断登录是否成功def select_user(userid, password): # mysql语句 select_user_sql = 'select * from userinfo where userid="%s" and password="%s";' % (userid, password) # 执行mysql语句 result = cursor.execute(select_user_sql) db.commit() # 如果返回了一条数据，则登录成功，否则登录失败 if 1 == result: result = True else: result = False print('there is no user where userid="%s and password="%s"!!' % (userid, password)) return result# insert a user，根据userid、password等信息，生成一个元组，将其插入数据库shopdata的userinfo表def insert_user(userid, password, phone, email, company): # mysql语句 insert_user_sql = 'insert into userinfo(userid, password, phone, email, company)' \ 'values("%s", "%s", "%s", "%s", "%s");' % (userid, password, phone, email, company) # 执行mysql语句，如果插入成功，则注册成功，否则注册失败 try: cursor.execute(insert_user_sql) db.commit() print('insert user where userid="%s" and password="%s"!!' % (userid, password)) result = True except: print('can not insert user where userid="%s" and password="%s"!!' % (userid, password)) result = False finally: return result# on_register，提供给前端的注册接口@app.route("/api/register", methods=['POST']) # 路由，响应POST请求def on_register(): # 默认的用户名和密码（该用户不存在且非法） userid = '' password = '' phone = '' email = '' company = '' # 判断传入的参数是否为空，并取出前端传来的参数 data = request.get_data() # print(data) if data is not None: # 将bytes类型转化为字典。对应的，前端发过来的内容应该是JSON.stringify(一个对象) data = json.loads(data) # 转化为字典对象 # print(data) userid = data.get('userid') password = data.get('password') phone = data.get('phone') email = data.get('email') company = data.get('company') # 判断参数是否非法。若非法则直接判断出注册失败，若合法则尝试注册，再根据数据库操作结果判断。 if len(userid) &gt; 0 and len(password) &gt; 0 and len(phone) &gt; 0 and len(email) &gt; 0 and len(password) &gt; 0: return_dict = &#123;'success': insert_user(userid=userid, password=password, phone=phone, email=email, company=company)&#125; else: return_dict = &#123;'success': False&#125; # 返回结果（结果暂时简单点，只返回成功或失败） return json.dumps(return_dict) # 字典转json# on_login，提供给前端的登录接口@app.route("/api/login", methods=['GET']) # 路由，响应GET请求def on_login(): # 默认的用户名和密码（数据库中不存在该用户） userid = '' password = '' # 判断传入的参数是否为空，获取前端传来的参数 if request.args is not None: print(request.args) data = request.args.to_dict() userid = data.get('userid') password = data.get('password') # 查询数据库 result = select_user(userid=userid, password=password) if not result: print('user where userid="%s and password="%s" login!!' % (userid, password)) # 返回登录结果（暂时简单一点，成功或失败） return_dict = &#123;'success': result&#125; return json.dumps(return_dict) # 字典转jsonif __name__ == '__main__': # 运行app app.run() # 程序结束时释放数据库资源 cursor.close() db.close() # 关闭连接 值得注意的是，这里的两个接口分别响应POST请求和GET请求。 可以发现，两个接口获取前端传过来的参数的方式是不同的： GET 1data = request.args.to_dict() # 需from flask import request 这样拿到的data是一个python的字典对象 POST 12data = request.get_data() # 需from flask import requestdata = json.loads(data) # 转化为字典对象。需import json 这两行代码才拿到一个python的字典对象 接口获取前端传过来的参数的方式与其响应的请求类型（如POST、GET、POST和GET）是对应的。 对应地，前端发过来的参数类型也需要和后端进行匹配。 前端代码这里给出前端处理用户登录和注册请求的函数。 login 123456789101112131415161718192021222324252627282930function login() &#123; var url = "http://127.0.0.1:5000/api/login"; var userid = document.getElementById("userid"); var password = document.getElementById("password"); $.ajax(&#123; url: url, type: "GET", data: &#123; userid: userid.value, password: password.value, &#125;, success: function(data) &#123; var data1 = JSON.parse(data); // console.log(data1); if (data1.success) &#123; window.sessionStorage.setItem("userid", userid.value); alert("登录成功！进入主页面！"); window.location.href = 'index.html'; &#125; else &#123; alert("登录失败！请输入正确的账号和密码！"); &#125; &#125;, error: function(XMLHttpRequest, textStatus, errorThrown) &#123; if (textStatus === 'timeout') &#123; alert('请求超时，请重试！'); &#125; &#125; &#125;)&#125; register 1234567891011121314151617181920212223242526272829303132333435363738function register() &#123; var password1 = document.getElementById("password1").value; var password2 = document.getElementById("password2").value; var userid = document.getElementById("userid").value; var phone = document.getElementById("phone").value; var email = document.getElementById("email").value; var company = document.getElementById("company").value; if (password1 !== password2) &#123; alert("两次输入的密码不相同,请重新输入！"); return; &#125; $.ajax(&#123; url: "http://127.0.0.1:5000/api/register", type: "POST", // 转成json data: JSON.stringify(&#123; userid: userid, password: password1, phone: phone, email: email, company: company &#125;), success: function(data) &#123; var data1 = JSON.parse(data); if (data1.success) &#123; alert("注册成功，请登录！"); window.location.href = 'login.html'; &#125; else &#123; alert("注册失败，请检查您输入的信息是否正确！"); &#125; &#125;, error: function(XMLHttpRequest, textStatus, errorThrown) &#123; if (textStatus === 'timeout') &#123; alert("请求超时！"); &#125; &#125; &#125;)&#125; 可以注意到，用ajax发送GET请求和PSOT请求时，我发的数据类型是不一样的。 login是GET请求，发送了json字符串 1234567JSON.stringify(&#123; userid: userid, password: password1, phone: phone, email: email, company: company&#125;) register是POST请求，发送了javascript的类的对象 1234&#123; userid: userid.value, password: password.value,&#125; 至此，本文对这次作业中后端搭建的介绍就结束了。 这次作业算是我第一次写后端，也是我第一次接触Flask，如果我有写错的地方，请在评论区指正！ 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
        <tag>Flask</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业过程及其问题的记录：mysql建立数据库、建表、查询和插入等]]></title>
    <url>%2F2020%2F04%2F04%2F%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A%E8%BF%87%E7%A8%8B%E5%8F%8A%E5%85%B6%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95%EF%BC%9Amysql%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%81%E5%BB%BA%E8%A1%A8%E3%80%81%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%8F%92%E5%85%A5%E7%AD%89%2F</url>
    <content type="text"><![CDATA[前言这次的作业需要我建立一个小的数据库。 这次作业我使用了mysql，进行了建库、建表、查询、插入等操作。 本文是对本次作业相关的mysql操作过程及过程中出现的问题的记录。 另一篇文章(详情请点击)介绍了如何使用pymysql连接该数据库并使用Flask搭建后端接口，响应前端的GET和POST请求。 正文作业中对数据库的要求是： 建立一个用户信息表，其包括用户名、密码、手机号、邮箱和手机号等属性，并向其中插入几条测试数据。 登录数据库因为挺久没用数据库，就先测试下自己之前装的mysql还能不能用，于是打开CMD运行如下指令： 1mysql 出现如下错误： 1ERROR 1045 (28000): Access denied for user 'ODBC'@'localhost' (using password: NO) 看起来是因为没输密码 所以输入密码，运行如下指令： 1mysql -u root -p -u参数是指username、user之类的，即用户名，我的用户名是root； -p参数是指password，运行下面这条指令后，会要求输入密码，输入正确密码即成功登录。 我的mysql环境还可以，直接登录成功。 建库执行如下指令，创建名为shopdata的数据库，会得到Query OK, 1 row affected (x.xx sec)。 1create database shopdata; 进入/选择数据库执行如下指令后，会看到Database changed的信息。 1use shopdata; 建表执行如下指令，创建名为userinfo的表。 我这里对userinfo的定义是： 主键是用户名userid password是非NULL的 phone和email是unique的 这5个属性的类型都是varchar(15) 最长15，对于email来说不太够用 1234567create table userinfo ( &apos;userid&apos; varchar(15) primary key, &apos;password&apos; varchar(15) not null, &apos;company&apos; varchar(15), &apos;phone&apos; varchar(15) unique, &apos;email&apos; varchar(15) unique); 执行上边这条命令后，得到了一个错误： 123ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''userid' varchar(15) primary key, 'password' varchar(15) not null, 'comp' at line 2 经查询，发现属性名应该用反引号`而不是单引号‘，所以将单引号改成反引号，执行如下命令： 1234567create table userinfo ( `userid` varchar(15) primary key, `password` varchar(15) not null, `company` varchar(15), `phone` varchar(15) unique, `email` varchar(15) unique); 这条命令执行成功，得到Query OK, 0 rows affected (x.xx sec)。 查看userinfo表执行如下命令，查看userinfo表的结构。 1describe userinfo; 执行后，得到如下结果： 12345678910+----------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------+-------------+------+-----+---------+-------+| userid | varchar(15) | NO | PRI | NULL | || password | varchar(15) | NO | | NULL | || company | varchar(15) | YES | | NULL | || phone | varchar(15) | YES | UNI | NULL | || email | varchar(15) | YES | UNI | NULL | |+----------+-------------+------+-----+---------+-------+5 rows in set (0.57 sec) 插入3条数据执行如下命令，插入3条数据。 1234insert into userinfo values (&apos;user1&apos;,&apos;0000&apos;,&apos;zstu&apos;,&apos;13777860000&apos;,&apos;7746@qq.com&apos;), (&apos;user2&apos;,&apos;0000&apos;,&apos;zstu&apos;,&apos;13777860001&apos;,&apos;7747@qq.com&apos;), (&apos;user3&apos;,&apos;0000&apos;,&apos;zstu&apos;,&apos;13777860002&apos;,&apos;7748@qq.com&apos;); 执行后，得到如下信息： 12Query OK, 3 rows affected (0.11 sec)Records: 3 Duplicates: 0 Warnings: 0 查询数据执行如下语句，查询所有元组。 1select * from userinfo; 执行后，得到如下结果（在我做好作业后、写这篇博客前，我已经插入了一些其他的数据，所以有9条记录）： 1234567891011121314+------------+----------+---------+-------------+--------------+| userid | password | company | phone | email |+------------+----------+---------+-------------+--------------+| 111 | 111 | 111 | 111 | 111 || 112 | 000 | 111 | 000 | 000 || aa | 111 | 11 | 11 | 11 || test_1 | 00 | NULL | NULL | NULL || user_test2 | 0000 | NULL | NULL | NULL || user1 | 0000 | zstu | 13777860000 | 7746@qq.com || user2 | 0000 | zstu | 13777860001 | 7747@qq.com || user3 | 0000 | zstu | 13777860002 | 7748@qq.com || 232222 | 0000 | 城站 | 12306 | 12306@qq.com |+------------+----------+---------+-------------+--------------+9 rows in set (0.00 sec) 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Python的TypeError not all arguments converted during string formatting]]></title>
    <url>%2F2020%2F04%2F04%2F%E5%85%B3%E4%BA%8EPython%E7%9A%84TypeError-not-all-arguments-converted-during-string-formatting%2F</url>
    <content type="text"><![CDATA[前言在把yolov3的cfg文件转换为model_defs时，我忘记把str类型转换成int了，导致了一个错误，在此记录下来。 正文 如上图所示，&#39;32&#39;%2就是错误发生的地方。 我以为我拿到的是一个int类型的32，想判断它是偶数还是奇数。 实际上我拿到的是一个str类型的&#39;32&#39;，这时python的解释器并没有把%理解成取余，而是理解成了这种东西。 我不知道“这种东西”的定义，但知道其用法和语法，其语法是这样的： 12name = 'cxy'print('%s is handsome!' % name) 也就是说，解释器把%理解成了上面代码中print语句中的第二个%，因此出现了这个TypeError。 关于该TypeError，也有其他的原因，如https://blog.csdn.net/lvsehaiyang1993/article/details/80909984。 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Bug</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决GPU显存未释放问题]]></title>
    <url>%2F2020%2F04%2F04%2F%E8%A7%A3%E5%86%B3GPU%E6%98%BE%E5%AD%98%E6%9C%AA%E9%87%8A%E6%94%BE%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言今早我想用多块GPU测试模型，于是就用了PyTorch里的torch.nn.parallel.DistributedDataParallel来支持用多块GPU的同时使用（下面简称其为Dist）。 程序运行时，由于程序中其他部分的代码（与Dist无关的代码）出现了错误，导致程序退出。这次使用Dist时没有考虑和处理这种程序崩溃的情况，因此在程序退出前没有用Dist关闭生成的所有进程，最终导致本次进程运行后GPU显存未释放（经观察，发现是由于没有用Dist关闭所有进程，导致程序运行后还有一部分进程在运行）。 下面介绍这次我解决该问题的过程。 正文MVEMinimal Verifiable Examples，关于本问题的程序代码如下： 1234567891011121314import torch.distributed as dist# 一些代码：定义model等some code# 初始化并行训练dist.init_process_group(xxxx) # 函数参数省略model = torch.nn.parallel.DistributedDataParallel(model, find_unused_parameters=True)# 一些代码：训练、测试模型等some code # 我的程序在这个部分出错且程序直接退出，导致下面的关闭进程的代码没有运行# 关闭所有进程dist.destroy_process_group() 问题的出现如下图所示，程序退出后，并没有进程在使用0号GPU，但0号GPU的显存却被占用。原因是程序退出前没有用Dist关闭所有进程，一部分进程还在运行，这些进程占用0号GPU的显存。 占用7号GPU的进程是我的另外一个进程，与本文讨论的问题无关。 定位占用GPU显存的PID执行下面的指令 1fuser -v /dev/nvidia* 该命令执行后得到下图所示的结果，可以看到是PID为285448的进程占用了0号GPU。 下面的图中忘记打了马赛克，后来用黑色遮挡了一下信息，所以USER这一列是看起来是空的。 执行下面这条命令，查看该进程的信息，可以发现该进程的PPID（其父进程的PID）是1，说明该进程不是我占用7号GPU的进程生成的，并且现在只有它在使用0号GPU。可以推断出这个进程是因为程序运行错误导致其没有被关闭，因此可以手动关闭该进程。 1ps -f -p 285448 下面的图中忘记打了马赛克，后来用黑色遮挡了一下信息，所以图中的路径不是很清晰。 先后执行下面这两条命令，杀掉该进程，再查看GPU情况，可以看到0号GPU的显存已经被释放，现在的GPU显存占用情况是正常的。 12kill -9 2885448nvidia-smi 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Bug</tag>
        <tag>PyTorch</tag>
        <tag>linux</tag>
        <tag>GPU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HostwindsVPS购买、支付宝支付相关]]></title>
    <url>%2F2020%2F04%2F03%2FHostwindsVPS%E8%B4%AD%E4%B9%B0%E3%80%81%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[前言我前几天买了Hostwinds的VPS，当时买的时候支付宝支付就出了问题，最近这两天用支付宝支付又出了问题。 所以想记录一下Hostwinds支付宝支付的相关问题及解决方法，顺便也记录一下关于Hostwinds VPS的更多内容。 正文支付宝支付 我在第一次用支付宝支付（购买VPS）时的操作没有错误，但没有支付成功，最后发现原因是支付宝余额不足…暴露出自己的贫穷 解决方法：支付宝充钱就行，然后再支付 当时是看了这篇文章才知道的 https://www.vps234.com/usa-vps-hostwinds-alipay-paid-failed/ 这个网站中还是有很多关于VPS的知识的，挺好用的 正常情况下，如果开通了支付宝自动支付，那之后每个月（其实是我们选择的付费周期，我选的是每月）到时间的话会自动支付，如果余额够，一般不会出问题的。 我们选了付费周期之后，比如说是按月付费，3月2日、4月2日……，这里的日期其实是最后期限（Due Date），我们是可以提前付款的 在每一个付费周期内，大概中间的那天（比如3月19日）会生成Invoice（中文是发票、费用清单），订单生成后你就可以付费了。 这是后来和客服交流时才发现的，问客服之前我以为只能在3月2日、4月2日付费。 这两天又遇到支付宝无法支付的问题，我的支付宝里是有钱的，暂时不知道真正原因（可能是由于我提前支付了）。 然后我去问客服，客服说现在不要用支付宝的自动支付，而是手动支付，具体来说就是用Account Credits支付，在这个情景中的意思是存入金额，就像充Q币一样，然后用你充值后账号里的钱去支付。 很奇怪的是，充Account Credits时我也是用支付宝支付哈哈，这不是套娃了吗？ 虽然套娃了，但我用支付宝充值成功了，然后用Account Credits支付了这个无法用支付宝自动支付的Invoice。 Hostwinds中的支付宝不支持二次支付（Recurring Agreement），Alipay is unsupported for recurring payments，这是客服说的 We do not support recurring Alipay payments. All invoices through Alipay must be manually processed each billing cycle. 这一点似乎可以比较合理地解释上一个事情 不确定是什么原因（估计是因为我提前支付了）一个订单在用我的支付宝自动支付时出了问题。当我发现自动支付失败时，再去用支付宝支付，这就是二次支付了，客服说不支持。 当账户里有余额，也开通了支付宝的自动付费的话。每个付费周期的付费会先使用账户里的余额。 总结来说，使用支付宝支付时注意以下几点 确保支付宝里余额充足 Hostwinds网站里显示的付费日期是最后期限（Due Date），可以在订单（Invoice）生成后手动支付 如果支付宝自动支付时付费失败，可以手动充值，然后用账户余额付费 当账户里有余额，也开通了支付宝的自动付费的话。每个付费周期的付费会先使用账户里的余额。 客服 Hostwinds的客服似乎是24小时在线的。我个人觉得客服质量和态度还不错，每次去问问题都会有人给我比较及时的回复。 如果我问的问题比较简单，客服会直接回答我；如果是稍难一点的问题，客服会Open一个Ticket，让对应部门的人解决我的问题 ISP Block 客服说要想解决这个问题只能通过’Fix IP Block’，会给我们换一个IP 出现ISP Block问题主要还是由于自己的操作不当 我刚开始使用SS时，VPS的IP和端口经常被封 后来经@roadwide推荐，使用了v2RayN，IP和端口就没有被封过 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Hostwinds</tag>
        <tag>VPS</tag>
        <tag>支付宝</tag>
        <tag>ISP Block</tag>
        <tag>v2rayN</tag>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TensorBoard中HISTOGRAMS和DISTRIBUTIONS图形的含义]]></title>
    <url>%2F2020%2F04%2F02%2FTensorBoard%E4%B8%ADHISTOGRAMS%E5%92%8CDISTRIBUTIONS%E5%9B%BE%E5%BD%A2%E7%9A%84%E5%90%AB%E4%B9%89%2F</url>
    <content type="text"><![CDATA[前言之前我都是用TensorBoard记录训练过程中的Loss、mAP等标量，很容易就知道TensorBoard里的SCALARS（标量）图是怎么看的（其中横纵轴的含义、Smoothing等）。 最近在尝试模型压缩，其中的一个步骤是对模型进行稀疏训练。 稀疏训练时需要记录模型中BN层的Gamma值的分布情况（取哪些值，这些值出现的次数/频度），这时用TensorBoard里的SCALARS之类的图就不合适了，而是应该用TensorBoard里的HISTOGRAMS（直方图）和DISTRIBUTIONS（暂未找到合适的译文）。 所以我昨天学习、了解了一点HISTOGRAMS和DISTRIBUTIONS，今天做了一部分简单记录，具体见下文。 正文HISTOGRAMS和DISTRIBUTIONS这两种图的数据源是相同的，只是从不同的视角、以不同的方式来表示数据的分布情况。 下面先介绍HISTOGRAMS，再介绍DISTRIBUTIONS。 HISTOGRAMS 上图是TensorBoard生成的一个直方图（OFFEST模式），下面介绍图中几个元素的含义。 数据源 数据源是多个一维数组 也在别处看到有人说可以是多维数组，但会被压缩成一维数组，有兴趣的小伙伴可以具体研究一下 如果你只有1个数组，也是可以的 当鼠标放在图上时出现的一条黑线和数字 鼠标放在图上出现的一条黑线，就对应数据源里的一个一维数组 上图中显示的黑线对应我的第41个数组的所有元素（index为40，因为index从0开始计数的）的取值的分布情况 图下方的横轴 横轴的值和数组内元素的取值对应 图右方的纵轴 纵轴的值对应着是哪一个数组，或者说对应了数组的id、index（上边提到的40） 颜色 可以看到上图中的颜色是渐变的，靠上（id小）的颜色深，靠下（id大）的颜色浅 上面的用词比较“学术化”，如果看不懂，就看下边的这个解释吧 我的数据有99个数组，index从0到98，但右侧的纵轴值只标到了90 数组元素的分布范围是横轴上的数字，可以看出我的每个数组中的元素的取值大约集中在0到0.2，超过1.5的元素很少 我的第40个数组（说法不严谨，准确地说是id为40）中大约有505个元素的值为0.536左右 如果还是不懂的话，建议先去看看直方图是什么 DISTRIBUTIONS 把HISTOGRAMS搞懂后，这个图就很好懂的，因为这个图的数据源和HISTOGRAMS一样。 横轴 横轴是对应哪个数组 纵轴 数组中元素的取值 颜色 颜色深代表对应值出现的频数高 如上图，我的99个数组从0到98，数组中元素的取值慢慢地趋近于0 参考链接剪枝Githubhttps://github.com/tanluren/yolov3-channel-and-layer-pruning HISTOGRAMS和DISTRIBUTIONShttps://www.cnblogs.com/rainydayfmb/p/7944224.html https://vimsky.com/article/3645.html https://www.jianshu.com/p/8fdc43e48c86 https://blog.csdn.net/wgj99991111/article/details/84708255 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>深度学习</tag>
        <tag>TensorBoard</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu中百度网盘BaiduPCS-Go的安装及简单使用]]></title>
    <url>%2F2020%2F04%2F01%2FUbuntu%E4%B8%AD%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98BaiduPCS-Go%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言今天用服务器训练模型时，服务器突然关机了，然后我的文件突然没了…昨天刚训练好的呀！ 没办法，只能把数据再传到服务器上，但是文件很大，用Xftp传肯定很慢，所以用了百度云。（后来发现文件没有丢，重新挂载一下文件夹就好了，但我这个过程记录也写好了…） 下面记录了Ubuntu上如何安装BaiduPCS-Go并用其下载百度网盘文件，安装成功后的具体使用方法请参考Github中的说明（Github里讲得比较详细了）。 正文 下载对应的BaiduPCS-Go Release，我用的下面这个，命令如下： 1wget https://github.com/iikira/BaiduPCS-Go/releases/download/v3.6.1/BaiduPCS-Go-v3.6.1-linux-amd64.zip 注意是下载发行版，而不是git clone。 解压上一步下载到的zip到当前文件夹，命令如下： 1unzip BaiduPCS-Go-v3.6.1-linux-amd64.zip 删除zip文件（也可以不删除该zip文件），命令如下： 1rm BaiduPCS-Go-v3.6.1-linux-amd64.zip 进入解压得到的文件夹，命令如下： 1cd BaiduPCS-Go-v3.6.1-linux-amd64/ 查看文件夹中的内容（也可以不查看），命令如下： 1ls 运行BaiduPCS-Go，命令如下： 1BaiduPCS-Go 登录并进入百度云盘中的某个目录（步骤请参考Github中的说明） 下载文件labels.zip并保存至当前文件夹，命令如下： 1d labels.zip --saveto ./ 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>linux</tag>
        <tag>BaiduPCS-Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA滚轮控制字体大小]]></title>
    <url>%2F2020%2F03%2F31%2FIDEA%E6%BB%9A%E8%BD%AE%E6%8E%A7%E5%88%B6%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%2F</url>
    <content type="text"><![CDATA[File-&gt;Setting-&gt;Editor-&gt;General，然后勾选Change font size (Zoom) with Ctrl+Mouse Wheel即可。 这个园子里洪水泛滥！ 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA插件搜索失败]]></title>
    <url>%2F2020%2F03%2F31%2FIDEA%E6%8F%92%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%A4%B1%E8%B4%A5%2F</url>
    <content type="text"><![CDATA[前言今天要做软件测试的实验：用JUnit做白盒测试，所以昨天想在IDEA里安装JUnitGenerator V2.0，遇到了在IDEA的插件库里搜不到任何插件的问题。 这个问题也有其他描述： Marketplace plugins are not loaded. Search results are not loaded.Check the internet connection. 等等 问题详细描述IDEA搜索插件时搜不出结果，具体如下。 进入IDEA界面，点击File-&gt;Settings-&gt;Plugins-&gt;Marketplace。 （我的IDEA是IntelliJ IDEA Community Edition 2019.3.4 x64，其他版本可能界面不太一样，但不影响操作。） 不搜索时会出现： 1Marketplace plugins are not loaded. 搜索junit等任何插件，都会出现下面这个情况： 12Search results are not loaded.Check the internet connection. 经查询和测试，可以通过以下步骤解决： 关闭电脑的防火墙 我的系统是Windows10，关闭了Windows Defender的所有防火墙。（怎么关闭防火墙应该不用讲吧） 在IDEA中添加Plugin Repository 点击Manage Plugin Repositories，然后点击+按钮添加一个Plugin Repository，然后点击OK。 1http://plugins.jetbrains.com/ 然后就可以看到插件了。 如果还是不行，试试重启IDEA或重启电脑。 如果再不行的话，试试下面的方法。 其他说明在昨天我这么做的时候，上面的方法是OK的。 在今天写博客重新尝试这个方法的时候，又发现这个方法不行。在研究的过程中，还是用这个方法的情况下，这个方法突然又可以了。 也就是说，这个方法并不稳定……，原因..未知 经过查询，还有其他方法，比如用管理员模式打开IDEA、关闭IDEA的版本更新提示和代理等方法，详细见参考链接吧。 参考链接 我参考的方法 用代理proxy 应该是靠谱一点的方法。 管理员模式打开IDEA 关闭IDEA的版本更新提示 听起来不太靠谱。 关闭User Secure Connection 我这个版本的IDEA已经不能这样了 这个链接里的第二个参考链接挺不错的，跟我讲的几个方法差不多。如果问题还没有解决，可以看看。 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>IDEA</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode生成HTML代码模板]]></title>
    <url>%2F2020%2F03%2F30%2FVSCode%E7%94%9F%E6%88%90HTML%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[用VSCode写HTML代码时，可以输入感叹号!，然后按Tab或Enter生成HTML代码的模板，估计SublimeText等编辑器也有这种功能。 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>VSCode</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux中nohup运行python程序无后台输出]]></title>
    <url>%2F2020%2F03%2F27%2Flinux%E4%B8%ADnohup%E8%BF%90%E8%A1%8Cpython%E7%A8%8B%E5%BA%8F%E6%97%A0%E5%90%8E%E5%8F%B0%E8%BE%93%E5%87%BA%2F</url>
    <content type="text"><![CDATA[之前，我都是使用下面这条命令在linux上运行python程序，并将程序输出（print）的内容存放至文件。 1nohup python helloworld.py &gt; helloworld.log 2&gt;&amp;1 &amp; 一般情况下，这条命令是可以将python程序的输出存放至指定文件的。 但我发现，用这条语句运行程序，偶尔会出现没有输出至指定文件（该文件被创建，但长时间不更新内容）的情况。 经过查询，我发现原因是： 默认情况下，python程序在执行时是有输出缓冲的（没有细究，个人理解是需要等输出的内容达到一定量才会输出，有兴趣的小伙伴可以研究一下） 解决该问题的一个方法是：使用python的-u参数，如下所示。 1nohup python -u helloworld.py &gt; helloworld.log 2&gt;&amp;1 &amp; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>python</tag>
        <tag>linux</tag>
        <tag>nohup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PyTorch余弦学习率衰减]]></title>
    <url>%2F2020%2F03%2F26%2FPyTorch%E4%BD%99%E5%BC%A6%E5%AD%A6%E4%B9%A0%E7%8E%87%E8%A1%B0%E5%87%8F%2F</url>
    <content type="text"><![CDATA[前言今天用到了PyTorch里的CosineAnnealingLR，也就是用余弦函数进行学习率的衰减。 下面讲讲定义CosineAnnealingLR这个类的对象时输入的几个参数是什么，代码示例就不放了。 正文1torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max, eta_min=0, last_epoch=-1) optimizer 需要进行学习率衰减的优化器变量 T_max Cosine是个周期函数嘛，这里的T_max就是这个周期的一半 如果你将T_max设置为10，则学习率衰减的周期是20个epoch，其中前10个epoch从学习率的初值（也是最大值）下降到最低值，后10个epoch从学习率的最低值上升到最大值 eta_min 学习率衰减时的最小值，默认值为0 last_epoch （上次训练）最后一个epoch的索引值，默认值为-1。 我没有测试，猜测是：如果你将其设置为20，那定义出来的scheduler的第一次step就会到第21个epoch对应的学习率。 效果我的参数是： 12# optimizer学习率初值为0.0005，100个epoch，从第1个epoch（索引为0）开始训练scheduler = lr_scheduler.CosineAnnealingLR(optimizer, T_max=10, eta_min=5e-6) 效果图如下： 参考链接https://pytorch.org/docs/stable/optim.html?highlight=cosine#torch.optim.lr_scheduler.CosineAnnealingLR 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>PyTorch</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[查看pip缓存路径]]></title>
    <url>%2F2020%2F03%2F25%2F%E6%9F%A5%E7%9C%8Bpip%E7%BC%93%E5%AD%98%E8%B7%AF%E5%BE%84%2F</url>
    <content type="text"><![CDATA[前言我们在安装python第三方库时，经常遇到下载速度慢的问题，即使换了源也不行。 好不容易下载到第三方库的文件（比如whl）后，我们可以把这些文件（比如whl）保存下来，然后可以发给同学、队友（团队开发时环境最好一致），还可以方便自己之后的重新安装。 那pip安装python第三方库时的缓存路径在哪呢？ 正文在安装一个库时，我注意到了pip的缓存路径，如下。 1C:\Users\Cxy\AppData\Local\pip\cache 其中Cxy是我电脑的用户名，在你自己的电脑上的话需要改成你自己的用户名（比如Administrator） 这个路径应该是pip的默认缓存路径，这个路径应该也是可以修改的，有兴趣的小伙伴可以研究一下。 该路径下有两个文件夹，一个是http，一个是wheels；还有一个文件selfcheck.json。 我没研究文件夹http和文件selfcheck.json是什么，有兴趣的小伙伴可以研究一下。 经过查看，发现文件夹wheels里面是.whl文件，不过这个文件夹里面的目录结构和命名我们一般看不懂，我没有具体研究，有兴趣的小伙伴可以研究一下。 为了找到我们想要的.whl文件，我们在wheels文件夹里直接搜索就好了，不需要第三方库的全名，只需要输入第三方库名称中的一些词就行了。 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《算法笔记》阅读笔记]]></title>
    <url>%2F2020%2F01%2F29%2F%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[这是之前刷PAT时看胡凡的《算法笔记》时做的一点笔记，后来没时间，就没看完。 emmm，刚开始看的内容都很基础。现在想想这样从头到尾地学确实没必要，可能当时的目标也和现在不一样吧。 第一章 如何使用本书在线评测系统PAT是“单点测试”。 常见的评测结果==整理常见的测评结果== 第二章 C/C++快速入门cin和cout消耗的时间比scanf和printf多得多，很多题目可能输入还没结束就超时了。……。请不要同时在一个程序中使用cout和printf，有时候会出问题。 头文件的h是head的缩写 C++向下兼容C ==整理一下向下兼容、向上兼容、向前、向后== 基本数据类型int：$-2^{31}\sim+(2^{31}-1)$，大致范围是$-2\times10^9\sim2\times10^9$，绝对值在$10^9$以内的整数都可以定义成int型。 long long：$-2^{63}\sim+(2^{63}-1)$，大致范围是$-9\times10^{18}\sim9\times10^{18}$。 浮点型都用double来存储。 小写字母比大写字母的ASCII码大32。 \0代表空字符NULL，其ASCII码为0，请注意\0不是空格。 整型常量在赋值给布尔型变量时会自动转换为true（非零）和false（零）。 宏定义是直接将对应的部分替换，然后才进行编译和运行。 输入和输出类似于13:45:20这种hh:mm:ss的时间需要输入，可以使用下边的代码： 12int hh,mm,ss;scanf("%d:%d:%d",&amp;hh,&amp;mm,&amp;ss); scanf的双引号内的内容其实就是整个输入，只不过把数据换成它们对应的格式符并把变量的地址按次序写在后面而已。 除了%c以外（scanf的%c格式是可以读入空格和换行的），scanf对其他格式符（如%d）的输入是以空白符（即空格、Tab）为结束判断标志的，字符数组使用%s读入的时候以空格和换行为读入结束的标志。 double输出格式为%f，输入格式为%lf。 %.mf保留$m$位小数，这个“保留”使用的是精度的“四舍六入五成双”规则。 getchar可以识别换行符。 常用数学函数round函数，四舍五入。 ==整理常用数学函数== 条件判断条件判断中n!=0可以改为n，n==0可以改为!n。 循环语句do...while会先执行循环体一次，然后才去判断循环条件是否为真，这就使得do...while语句的实用性远不如while，因为用户碰到的大部分情况都需要能处理在某些数据下不允许进入循环的情况。 C语言中不允许随时定义临时变量，C++可以。 一维数组数组大小必须是整数常量，不可以是变量。 如果只初始化了一维数组的一部分元素，后面未被初始化的元素将会由不同编译器内部实现的不同而被赋以不同的初值，而一般情况默认初值为0。所以可以通过下面的代码实现整个数组赋初值0 12int a[10]=&#123;&#125;;int a[10]=&#123;0&#125;; 递推可以分为顺推和逆推两种。 冒泡排序的本质在于交换，即每次通过交换的方式把当前剩余元素的最大值移动到一端，当剩余元素数量减少为0时，排序结束。代码如下： 12345678910111213141516171819// 定义含5个元素的数组int a[]=&#123;3,1,4,5,2&#125;;int n=5;// 冒泡排序（从小到大）for(int i=1;i&lt;n;++i)&#123; //5-1趟 for(int j=0;j&lt;n-i;++j)&#123; if(a[j]&gt;a[j+1])&#123; // 交换 int temp=a[j]; a[j]=a[j+1]; a[j+1]=temp; &#125; &#125;&#125;// 输出数组元素for(int i=0;i&lt;n;++i)&#123; printf("%d ",a[i]);&#125; 二维数组可以把二维数组当作一维数组的每一个元素都是一个一维数组。 二维数组初始化（下面的代码中未被初始化的元素一般默认为0）： 1int a[5][6]=&#123;&#123;3,1,2&#125;,&#123;8,4&#125;,&#123;&#125;,&#123;1,2,3,4,5&#125;&#125;; 如果数组大小较大（大概$10^6$级别），则需要定义在主函数外边。原因是函数内部申请的局部变量来自系统栈，允许申请的空间较小。而函数外部申请的全局变量来自静态存储区，允许申请的空间较大。 memset一般用函数memset和fill给数组中每一个元素赋相同的值。 使用memset需要使用头文件string.h，使用fill需要使用STL中的头文件algorithm。 memset格式如下： 1memset(数组名，值，sizeof(数组名)); 只建议初学者使用memset赋0和-1，因为memset是按字节赋值，即对每个字节赋同样的值，0的二进制补码为全0，-1的二进制补码为全1，不容易弄错。如果要对数组赋其它值，请使用fill函数（但memset的执行速度快）。 字符数组可以使用字符串对字符数组进行初始化，但也仅限于初始化。 %c能够识别空格和换行并将其输入，%s`通过空格或换行来识别一个字符串的结束。 gets识别换行符作为输入结束（并会将其读取走），因此scanf完一个整数后，如果要用gets，需要用getchar接受整数后的换行符。 一维字符数组的末尾都会有一个\0，表示字符串的结束。使用gets和scanf时会自动在字符串后边添加\0，puts和printf也通过识别\0作为字符串的结尾来输出字符串。 string.h strlen(字符数组1) 得到字符数组\0前边的字符数 strcmp(字符数组1,字符数组2) 按照字典序比较两个字符串的大小，返回一个整数（负数，0，正数），符号和字符串1-字符串2相同。 strcpy(字符数组1，字符数组2) 把字符串2（第二个参数）赋值给字符串1（第一个参数） strcat(字符数组1,字符数组2) 把字符数组2接到字符数组1后边 sscanf(字符数组,&quot;%d&quot;,&amp;n) 从字符数组中读 sprintf(字符数组,&quot;%d&quot;,n) 往字符数组中写 数组作为函数参数数组作为参数时，参数中数组的第一维不需要填写长度（如果是二维数组，那么第二维需要填写长度），实际调用时 指针指针是一个unsigned类型的整数 12int* p1,p2; //p1是int型指针 p2是int型变量int* p1,*p2; //p1和p2都是int型指针 cin12345char str1[100];cin.getline(str1,100);string str2;getline(cin,str2); 浮点数的比较由于计算机采用有限位的二进制编码，因此浮点数在计算机的存储并不总是精确的，于是需要引入一个极小的EPS来对这种误差进行修正。 ==待补充：通过EPS进行浮点数的比较== 复杂度 时间复杂度 在时间复杂度中，高等级的幂次会覆盖低等级的幂次。当有些算法实现较为复杂时，其常数会比较大，这时即便时间复杂度（一般讲时间复杂度是不带系数的）相同，其性能也会有较大差距。 对一般的OJ系统来说，1秒能承受的运算次数大概是$10^7\sim10^8$，因此$O(n^2)$的算法当n的规模是1000时是可以承受的，而当n的规模为100000时则是不可承受的。 空间复杂度 在一般的应用中，一般来说空间都是足够使用的（只要不开好几个$10^7$以上的数组即可，例如int A[10000][10000]的定义就是不合适的）。 $O(1)$的空间复杂度指的是算法消耗的空间不随数据规模的增大而增大。 考虑到空间一般够用，因此常常采用以空间换时间的策略。 编码复杂度 编码复杂度是一个定性的概念，并没有什么量化的标准。 黑盒测试黑盒测试是指：系统后台会准备若干组输入数据，然后将其输到提交的程序中，如果输出的结果与正确答案完全相同（字符串意义上的比较），那么就称通过了这道题的黑盒测试，否则会根据错误类型而返回不同的结果。 根据黑盒测试是否对每组输入数据都单独测试或是一次性测试所有测试数据，又可以分为单点测试和多点测试。 ==整理多点测试的几种类型== 第三章 入门篇（1）——入门模拟无 第四章 入门篇（2）——算法初步简单选择排序选择排序是最简单的排序算法之一，本节介绍众多选择排序方法中最常用的简单选择排序。 将数组分为前后两部分：有序部分和无序部分。遍历数组，每次选择最小的值放在数组前边（有序部分），时间复杂度为$O(n^2)$ 1234567891011121314151617181920212223// 定义含5个元素的数组int a[]=&#123;3,1,4,5,2&#125;;int n=5;// 选择排序（从小到大）for(int i=0;i&lt;n;++i)&#123; int k=i; // 默认当前待排序的第一个值是最小值 for(int j=i+1;j&lt;n;j++)&#123; // 遍历之后的待排序的值，寻找最小值 if(a[j]&lt;a[k])&#123; // 更新待排序的最小值的下标 k=j; &#125; &#125; // 交换 int temp=a[i]; a[i]=a[k]; a[k]=temp;&#125;// 输出数组元素for(int i=0;i&lt;n;++i)&#123; printf("%d ",a[i]);&#125; 插入排序插入排序也是最简单的一类排序方法，本节主要介绍众多插入排序方法中最直观的直接插入排序。 把序列分为左右两部分：有序（左）和无序（右），从无序的部分取出元素，插入有序序列对应位置。 123456789101112131415161718192021222324// 定义含5个元素的数组int a[]=&#123;3,1,4,5,2&#125;;int n=5;// 直接插入排序（从小到大）for(int i=1;i&lt;n;++i)&#123; // 记录要插入的值 int temp=a[i],j=i; // 有序元素后移 while(j&gt;0&amp;&amp;temp&gt;a[j-1])&#123; a[j]=a[j-1]; j--; &#125; // 插入 a[j]=temp;&#125;// 输出数组元素for(int i=0;i&lt;n;++i)&#123; printf("%d ",a[i]);&#125; 散列的定义和整数散列散列（hash）是常见的算法思想之一，在很多程序中都会有意无意地使用到。 若给出$N$个正整数，再给出$M$个正整数，问这M个数中的每个数分别是在$N$个数出现过，其中$N,M\leq10^5$，且所有正整数均不超过$10^5$。 对这个问题，最直接的思路是：对每个欲查询的正整数$x$，遍历$N$个数，看是否有一个数与x相等。这种做法的时间复杂度是$O(NM)$，当$N$和$M$都很大（$10^5$级别）时，显然是无法承受的。 不妨用空间换时间，即设定一个bool型数组hashTable[100010]，其中hashTable[x]==true表示正整数$x$在$n$个正整数中出现过。这样就可以在一开始读入$N$个正整数时就对hashTable进行赋值，于是对于$M$个欲查询的数，就能直接通过hashTable判断出每个数是否出现过。显然这种做法的时间复杂度为$O(M+N)$。 同样的，如果题目要求统计次数而非是否出现，就把数组改成int型，这两个问题的解法都有一个特点，那就是直接把输入的数作为数组的下标来对这个数的性质进行统计（这种做法非常实用，请务必掌握）。这是一个很好的用空间换时间的策略，因为它将查询的复杂度降到了$O(1)$级别。 但这个策略暂时还有一个问题——上面的题目中出现的每个数都不会超过$10^5$，因此直接作为数组下标是可行的，但是如果输入可能是$10^9$大小的整数，或者甚至是一个字符串，就不能将它们直接作为数组下标了。 这时可以使用散列。一般来说，散列可以浓缩成“将元素通过一个函数转换为整数，使得改正数可以尽量唯一地代表这个元素”，其中把这个转换函数称为散列函数H，也就是说，如果元素在转换前为key，那么转换后就是一个整数H(key)。 对于key是整数的情况来说，常用的散列函数有直接定址法、平方取中法、除留余数法。 H(key1)==H(key2)，这种情况叫作冲突。常用的解决冲突的方法有线性探查法、平方探查法和链地址法，其中前两种都计算了新的hash值，又称为开放定址法。 在写代码时，这种散列的功能可以用STL中的map代替。 字符串hash初步一个点$P$的坐标$(x,y)$可以用下面的散列函数进行处理： $H(P)=x\times Range+y$，这样对数据范围内的任意两个整点$P_1$和$P_2$，$H(P_1)$都不会等于$H(P_2)$。 字符串hash是指将一个字符串$S$转换为一个整数,使得该整数可以尽可能地唯一地代表字符串$S$。本节只讨论将字符串转换为唯一的整数。 假设字符串$S$由大写字母$A \sim Z$构成。在这个假设下，可以把26个大写字母视为$0\sim25$，进而转换为二十六进制，再转换为十进制，可得一唯一整数。只是$S$的长度并不可太长。 在上面的假设下，假如还可以由$a\sim z$组成，可以再把$a\sim z$对应为$26\sim51$，进而转换为五十二进制，再转换为十进制。 分治分治法（divide and conquer）将原问题划分成若干个规模较小而结构与原问题相同或相似的子问题，然后分别地解决这些子问题，最后合并子问题的解，即可得到原问题的解。 分治法的三个步骤： 分解 将原问题分解为若干和原问题拥有相同或相似结构的子问题 解决 递归求解所有子问题。如果存在子问题的规模小到可以直接解决，就直接解决它。 合并 将子问题的解合并成原问题的解。 分治法分解出的子问题应当是相互独立、没有交叉的。如果存在两个子问题有相交部分，那么不应当使用分治法解决。 广义上来讲，分治法分解成的子问题个数只要大于0即可。从严格的定义上讲，一般把子问题的个数为1的情况称为减治，而把子问题个数大于1的情况称为分治。 分治法作为一种算法思想，既可以使用递归的手段去实现，也可以通过非递归的手段去实现。 递归递归有两个重要概念： 递归边界 递归式 求$n$的阶乘体现了减治的思想，求$Fibonacci$数列的第$n$项体现了分治的思想。 一般把$1\sim n$这$n$个整数按某个顺序摆放的结果称为这$n$个整数的一个排列，而全排列指这$n$个整数能形成的所有排列。 $n$皇后问题就可以使用解决全排列问题的方法去解决。 如果在到达递归边界前的某层，由于一些事实导致已经不需要往任何一个子问题递归，就可以直接返回上一层。一般把这种做法称为回溯法。 简单贪心贪心法是求解一类最优化问题的方法，它总是考虑当前状态下局部最优（或较优）的策略，来使全局的结果达到最优（或较优）。 可以使用贪心法的问题一定满足最优子结构性质，即一个问题的最优解可以由它的子问题的最优解构造出来。 要获得全局最优解，则要求中间的每步策略都是最优的，因此严谨使用贪心法来求解最优哈问题需要对采取的策略进行证明。证明的一般思路是使用反证法及数学归纳法，即假设策略不能导致最优解，然后通过一系列推导来得到矛盾，以此证明策略是最优的，最后用数学归纳法保证全局最优。不过对于平常来说，不太容易对想到的策略进行严谨的证明（贪心的证明往往比贪心本身更难），如果在想到某个似乎可行的策略，并且自己无法举出反例，那就勇敢地实现它。 区间贪心区间不相交问题和区间选点 二分查找二分查找是基于有序序列的查找算法，二分查找的高效之处在于，每一步都可以去除当前区间中的一半元素，因此其时间复杂度是$O(logn)$。 如果序列是严格递增： 递归方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;iostream&gt;using namespace std;int binarySearch(int* arr,int left,int right,int key);int main()&#123; // 定义含10个元素的升序数组 int a[] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;; int n = 10; // 查询key int key=15; printf("%d\n", binarySearch(a, 0, n-1, key)); system("pause"); return 0;&#125;// 在数组arr的[left,right]中寻找key，找到则返回key在数组中的位置，否则返回-1// 初始区间一般是[0,n-1]int binarySearch(int *arr, int left, int right, int key)&#123; // 区间正确 if(left&lt;=right)&#123; // 设置区间中间下标 int mid = (left + right) / 2; // 找到 if (key == arr[mid]) &#123; return mid; &#125; // 左半区间查找 else if (key &lt; arr[mid]) &#123; return binarySearch(arr, left, mid - 1, key); &#125; // 右半区间查找 else &#123; return binarySearch(arr, mid+1,right, key); &#125; &#125; // 区间错误 return -1;&#125; 非递归方法 在程序设计时，更多采用的是非递归的写法。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;iostream&gt;using namespace std;int binarySearch(int* arr,int left,int right,int key);int main()&#123; // 定义含10个元素的升序数组 int a[] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;; int n = 10; // 查询key int key=19; printf("%d\n", binarySearch(a, 0, n-1, key)); system("pause"); return 0;&#125;// 在数组arr的[left,right]中寻找key，找到则返回key在数组中的位置，否则返回-1// 初始区间一般是[0,n-1]int binarySearch(int *arr, int left, int right, int key)&#123; int mid; //当可以形成区间时，进行查找 while(left&lt;=right)&#123; // 设置区间中间下标 mid = (left + right) / 2; // 找到，返回对应位置 if (key==arr[mid])&#123; return mid; &#125; // key在左半区间，更新right else if(key&lt;arr[mid])&#123; right=mid-1; &#125; // key在右半区间，更新left else&#123; left=mid+1; &#125; &#125; // 未寻找到 return -1;&#125; 如果序列是严格递减： 只需要把if(key&lt;arr[mid])语句中的&lt;改成&gt;就好了。 如果序列是非严格递增（即递增，但元素可能重复）： 如何求出序列中第一个大于等于key的元素的位置L和第一个大于key的元素的位置R，这样元素key在序列中的存在区间就是左闭右开区间$[L,R)$。显然，如果序列中没有key，那么L和R可以理解为假设序列中存在key，key应该在的位置。 上面有两个问题： 求L 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;iostream&gt;using namespace std;int lowerBound(int *arr, int left, int right, int key);int main()&#123; // 定义含10个元素的升序数组 int a[] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;; int n = 10; // 查询key int key=4; printf("%d\n", lowerBound(a, 0, n, key)); system("pause"); return 0;&#125;// 在非严格递增数组arr的[left,right]中寻找第一个大于等于key的值的位置，如果不存在则返回该值应该在的位置（即最后一个元素后边）// 初始区间一般是[0,n]int lowerBound(int *arr, int left, int right, int key)&#123; int mid; // 当left==right时，刚好求出大于等于key的第一个数字的位置 while(left&lt;right)&#123; // 设置区间中间下标 //mid = (left + right) / 2; mid=left+(right-left)/2; // 避免溢出 // key在左半区间，更新right if(key&lt;=arr[mid])&#123; right=mid; &#125; // key在右半区间，更新left else&#123; left=mid+1; &#125; &#125; // 未寻找到 return left;&#125; 求R 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;iostream&gt;using namespace std;int upperBound(int *arr, int left, int right, int key);int main()&#123; // 定义含10个元素的升序数组 int a[] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;; int n = 10; // 查询key int key=4; printf("%d\n", upperBound(a, 0, n, key)); system("pause"); return 0;&#125;// 在非严格递增数组arr的[left,right]中寻找第一个大于key的值的位置，如果不存在则返回该值应该在的位置（即最后一个元素后边）// 初始区间一般是[0,n]int upperBound(int *arr, int left, int right, int key)&#123; int mid; // 当left==right时，刚好求出大于等于key的第一个数字的位置 while(left&lt;right)&#123; // 设置区间中间下标 //mid = (left + right) / 2; mid=left+(right-left)/2; // 避免溢出 // key在左半区间，更新right if(key&lt;arr[mid])&#123; right=mid; &#125; // key在右半区间，更新left else&#123; left=mid+1; &#125; &#125; // 未寻找到 return left;&#125; 对比lowerBound和upperBound的代码可知，upperBound函数只是把代码中的if(key&lt;=arr[mid])改成if(key&lt;arr[mid])，其他完全相同，这启发我们去寻找它们的共同点。 可以发现，两者都在解决这样一个问题：寻找有序序列中第一个满足某条件C的元素的位置。这是一个非常重要且经典的问题，平常能碰到的大部分二分法问题都可以归结于这个问题。显然，所谓的条件C在序列中一定是从左到右先不满足，然后满足的。该类问题代码模板如下： 1234567891011121314int solve(int left,int right)&#123; int mid; while(left&lt;right)&#123; mid=left+(right-left)/2; if(C成立)&#123; right=mid; &#125; else&#123; left=mid+1; &#125; &#125; return left;&#125; 若想寻找最后一个满足条件C的元素的位置，则可以先求第一个满足条件!c的元素的位置，然后将该位置减1即可。 如果目的是判断有序序列中是否存在满足某条件的元素，使用刚开始的二分最合适。 二分法的其他应用上面讲了二分查找，事实上二分法的应用远不止如此。 估算$\sqrt{2}$1234567891011121314151617181920212223242526272829303132#include &lt;iostream&gt;using namespace std;int main()&#123; // 误差 const double eps=10e-5; // double left=1,right=2; double mid; // 逼近2^0.5 while(right-left&gt;eps)&#123; // 计算mid mid = left+(right - left) / 2; if (2&gt;mid * mid)&#123; left=mid; &#125; else if(2&lt;mid*mid)&#123; right=mid; &#125; &#125; // 输出结果 mid = left+(right - left) / 2; printf("%f\n",mid); system("pause"); return 0;&#125; 装水问题有一个侧面看上去是半圆的储水装置，该半圆的半径是$R$，要求往里面装入高度为$h$的水，使其在侧面看去的面积与半圆面积的比例恰好为$r$。已知$r$，求$h$。 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; // 一些常量 const double eps=10e-5; const double r=0.5; const double R=1; const double pi=3.1415926535; // double left=0,right=R; double mid,alpha,L,S1,S2=pi*R*R/2; // 逼近 while(right-left&gt;eps)&#123; // 计算mid mid = left+(right - left) / 2; alpha=2*acos((R-mid)/R); L = 2 * sqrt(R * R - (R - mid) * (R - mid)); S1 = alpha*R*R/2-L*(R-mid)/2; if (r&gt;S1/S2)&#123; left=mid; &#125; else if (r &lt; S1 / S2)&#123; right=mid; &#125; &#125; // 输出结果 mid = left + (right - left) / 2; printf("%f\n",mid); system("pause"); return 0;&#125; 木棒切割给出$N$根木棒，长度均已知，现在希望通过切割它们来得到至少$K$段长度相等的木棒（长度必须是整数），问这些长度相等的木棒最长能有多长。例如对于三根长度分别为10、24、15的木棒来说，假设$K=7$，即至少需要7段长度相等的木棒，那么可以得到的最大长度为6（$(10+24+15)/7=7$），在这种情况下，第一根木棒可以提供$10/6=1$段、第二根木棒可以提供$24/6=4$根、第三根木棒可以提供$15/6=2$根，达到了7根的要求。 对于这道题，我们可以注意到一个结论：如果长度相等的木棒的长度$L$越长，那么热可以得到的木棒段数$k$越小。 ==P142== 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOAD DATA INFILE读取CSV中一千万条数据至mysql]]></title>
    <url>%2F2019%2F11%2F02%2FLOAD-DATA-INFILE%E8%AF%BB%E5%8F%96CSV%E4%B8%AD%E4%B8%80%E5%8D%83%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E8%87%B3mysql%2F</url>
    <content type="text"><![CDATA[作业要求构建一个关系模式和课本中的关系movies(title,year,length,movietype,studioname,producerC)一样的关系，名称自定，在这个关系中插入1000万条记录。 注：关系movies的主键为(title,year)。 要求如下： 在尽可能短的时间内完成； 只允许使用原生的SQL，不允许将SQL作为嵌入语言，也不允许使用其他语言如C#、Python等来完成； 提交你的详细解决方案和结果。 本文利用LOAD DATA INFILE将包含一千万条数据的CSV文件存入mysql。 实现除了newcsv.py，其他命令均为cmd命令。 生成包含1千万条数据的CSV文件用python生成与关系movies结构相同的包含1千万条数据的CSV文件。 newcsv.py如下： 该程序大概耗时18秒。 12345678910111213141516171819202122import csvimport time# num_value条数据num_value = 10000000# 开始计时time_start = time.time()# 生成文件with open(r'C:\ProgramData\MySQL\MySQL Server 8.0\Uploads\bigdata.csv', 'w', newline='') as f: f_csv = csv.writer(f) f_csv.writerow(['title', 'year', 'length', 'movieType', 'studioName', 'producerC']) for i in range(1, num_value+1): f_csv.writerow(['GoGoGo', i, 120, 'sicFic', 'MGM', 100])# 结束计时time_end = time.time()# 输出耗费时间（秒）print('Time Cost：', time_end - time_start) 登录mysql1mysql -uroot -p123456 上面root是我的mysql用户名，123456是我的mysql密码。 进入数据库moviesdb1use moviesdb; 创建关系mymovies只复制关系movies的结构，并不复制其数据 1CREATE TABLE mymovies LIKE movies; 将CSV文件存入数据库1LOAD DATA INFILE &apos;C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/bigdata.csv&apos; INTO TABLE mymovies FIELDS TERMINATED BY &apos;,&apos; ENCLOSED BY &apos;&quot;&apos; LINES TERMINATED BY &apos;\n&apos; IGNORE 1 ROWS; 我的电脑上，该文件存入mysql耗时862.646秒，大概14分钟，如下图所示： 参考链接https://www.cnblogs.com/freefei/p/7679991.html https://blog.csdn.net/qq_22855325/article/details/76087138 https://blog.csdn.net/weixin_44595372/article/details/88723191 https://zhidao.baidu.com/question/185665472.html https://www.cnblogs.com/zhangjpn/p/6231662.html https://www.cnblogs.com/wangcp-2014/p/8038683.html https://blog.csdn.net/gb4215287/article/details/82669785 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[L1与L2正则化]]></title>
    <url>%2F2019%2F10%2F22%2FL1%E4%B8%8EL2%E6%AD%A3%E5%88%99%E5%8C%96%2F</url>
    <content type="text"><![CDATA[过拟合机器学习中，如果参数过多、模型过于复杂，容易造成过拟合。 结构风险最小化原理在经验风险最小化（训练误差最小化）的基础上，尽可能采用简单的模型，以提高模型泛化预测精度。 正则化为了避免过拟合，最常用的一种方法是使用正则化，例如L1和L2正则化。 所谓的正则化，就是在原来损失函数的基础上，加了一些正则化项，或者叫做模型复杂度惩罚项。 L2正则化L2正则化即：$L=E_{in}+\lambda\sum_j\omega^2_j$，其中，$E_{in}$是原来的损失函数；$\lambda$是正则化参数，可调整；$\omega_j$是参数。 由上可知，正则化是为了限制参数过多，避免模型过于复杂。因此，我们可以令高阶部分的权重$\omega$为0，这样就相当于从高阶转换为低阶。然而，这是个NP难问题，将其适度简化为：$\sum_j\omega_j^2≤C$，令$\omega_j$的平方和小于$C$。这时，我们的目标就转换为：令$E_{in}$最小，但是要遵循$w$平方和小于$C$的条件，如下图所示： L1正则化L1正则化和L2正则化相似：$L=E_{in}+\lambda\sum_j|\omega_j|$，同样地，图形如下： L1与L2正则化满足正则化条件，实际上是求解上面图中红色形状与蓝色椭圆的交点，即同时满足限定条件和$E_{in}$最小化。 对于L2来说，限定区域是圆，这样得到的解$\omega_1$或$\omega_2$（以二元为例）为0的概率很小，且很大概率是非零的。 对于L1来说，限定区域是正方形，方形与蓝色区域相交的交点是顶点的概率很大，这从视觉和常识上来看是很容易理解的。也就是说，正方形的凸点会更接近 $E_{in}$最优解对应的$\omega$位置，而凸点处必有$\omega_1$或$\omega_2$为0。这样，得到的解$\omega_1$或$\omega_2$为零的概率就很大了。所以，L1正则化的解具有稀疏性。 扩展到高维，同样的道理，L2的限定区域是平滑的，与中心点等距；而 L1 的限定区域是包含凸点的，尖锐的。这些凸点更接近$E_{in}$的最优解位置，而在这些凸点上，很多$\omega_j$为0。 参考链接https://www.jianshu.com/p/76368eba9c90 https://segmentfault.com/a/1190000014680167?utm_source=tag-newest https://blog.csdn.net/red_stone1/article/details/80755144 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sklearn逻辑回归实战]]></title>
    <url>%2F2019%2F10%2F22%2Fsklearn%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E5%AE%9E%E6%88%98%2F</url>
    <content type="text"><![CDATA[题目要求根据学生两门课的成绩和是否入学的数据，预测学生能否顺利入学：利用ex2data1.txt和ex2data2.txt中的数据，进行逻辑回归和预测。 数据放在最后边。 ex2data1.txt处理作散点图可知，决策大致符合线性关系，但还是有弯曲（非线性），用线性效果并不好，因此可用两种方案：方案一，无多项式特征；方案二，有多项式特征。 方案一：无多项式特征对ex2data1.txt中的数据进行逻辑回归，无多项式特征 代码实现如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253""" 对ex2data1.txt中的数据进行逻辑回归（无多项式特征）"""from sklearn.model_selection import train_test_splitfrom matplotlib.colors import ListedColormapfrom sklearn.linear_model import LogisticRegressionimport numpy as npimport matplotlib.pyplot as pltplt.rcParams['font.sans-serif'] = ['SimHei'] # 用来正常显示中文标签plt.rcParams['axes.unicode_minus'] = False # 用来正常显示负号# 数据格式：成绩1,成绩2,是否被录取（1代表被录取，0代表未被录取）# 函数（画决策边界）定义def plot_decision_boundary(model, axis): x0, x1 = np.meshgrid( np.linspace(axis[0], axis[1], int((axis[1] - axis[0]) * 100)).reshape(-1, 1), np.linspace(axis[2], axis[3], int((axis[3] - axis[2]) * 100)).reshape(-1, 1), ) X_new = np.c_[x0.ravel(), x1.ravel()] y_predict = model.predict(X_new) zz = y_predict.reshape(x0.shape) custom_cmap = ListedColormap(['#EF9A9A', '#FFF59D', '#90CAF9']) plt.contourf(x0, x1, zz, cmap=custom_cmap)# 读取数据data = np.loadtxt('ex2data1.txt', delimiter=',')data_X = data[:, 0:2]data_y = data[:, 2]# 数据分割X_train, X_test, y_train, y_test = train_test_split(data_X, data_y, random_state=666)# 训练模型log_reg = LogisticRegression()log_reg.fit(X_train, y_train)# 结果可视化plot_decision_boundary(log_reg, axis=[0, 100, 0, 100])plt.scatter(data_X[data_y == 0, 0], data_X[data_y == 0, 1], color='red')plt.scatter(data_X[data_y == 1, 0], data_X[data_y == 1, 1], color='blue')plt.xlabel('成绩1')plt.ylabel('成绩2')plt.title('两门课程成绩与是否录取的关系')plt.show()# 模型测试print(log_reg.score(X_train, y_train))print(log_reg.score(X_test, y_test)) 输出结果如下： 120.85333333333333340.76 方案二：引入多项式特征对ex2data1.txt中的数据进行逻辑回归，引入多项式特征。经调试，当degree为3时，耗费时间较长；当degree为2时，耗费时间可接受，效果与方案一相比好了很多 实现如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465""" 对ex2data1.txt中的数据进行逻辑回归（引入多项式特征）"""from sklearn.model_selection import train_test_splitfrom matplotlib.colors import ListedColormapfrom sklearn.linear_model import LogisticRegressionimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.preprocessing import PolynomialFeaturesfrom sklearn.pipeline import Pipelinefrom sklearn.preprocessing import StandardScalerplt.rcParams['font.sans-serif'] = ['SimHei'] # 用来正常显示中文标签plt.rcParams['axes.unicode_minus'] = False # 用来正常显示负号# 数据格式：成绩1,成绩2,是否被录取（1代表被录取，0代表未被录取）# 函数定义def plot_decision_boundary(model, axis): x0, x1 = np.meshgrid( np.linspace(axis[0], axis[1], int((axis[1] - axis[0]) * 100)).reshape(-1, 1), np.linspace(axis[2], axis[3], int((axis[3] - axis[2]) * 100)).reshape(-1, 1), ) X_new = np.c_[x0.ravel(), x1.ravel()] y_predict = model.predict(X_new) zz = y_predict.reshape(x0.shape) custom_cmap = ListedColormap(['#EF9A9A', '#FFF59D', '#90CAF9']) plt.contourf(x0, x1, zz, cmap=custom_cmap)def PolynomialLogisticRegression(degree): return Pipeline([ ('poly', PolynomialFeatures(degree=degree)), ('std_scaler', StandardScaler()), ('log_reg', LogisticRegression()) ])# 读取数据data = np.loadtxt('ex2data1.txt', delimiter=',')data_X = data[:, 0:2]data_y = data[:, 2]# 数据分割X_train, X_test, y_train, y_test = train_test_split(data_X, data_y, random_state=666)# 训练模型poly_log_reg = PolynomialLogisticRegression(degree=2)poly_log_reg.fit(X_train, y_train)# 结果可视化plot_decision_boundary(poly_log_reg, axis=[0, 100, 0, 100])plt.scatter(data_X[data_y == 0, 0], data_X[data_y == 0, 1], color='red')plt.scatter(data_X[data_y == 1, 0], data_X[data_y == 1, 1], color='blue')plt.xlabel('成绩1')plt.ylabel('成绩2')plt.title('两门课程成绩与是否录取的关系')plt.show()# 模型测试print(poly_log_reg.score(X_train, y_train))print(poly_log_reg.score(X_test, y_test)) 输出如下： 120.920.92 ex2data2.txt处理作散点图可知，这组数据的决策边界绝对是非线性的，所以直接引入多项式特征对ex2data2.txt中的数据进行逻辑回归。 代码实现如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465""" 对ex2data2.txt中的数据进行逻辑回归（引入多项式特征）"""from sklearn.model_selection import train_test_splitfrom matplotlib.colors import ListedColormapfrom sklearn.linear_model import LogisticRegressionimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.preprocessing import PolynomialFeaturesfrom sklearn.pipeline import Pipelinefrom sklearn.preprocessing import StandardScalerplt.rcParams['font.sans-serif'] = ['SimHei'] # 用来正常显示中文标签plt.rcParams['axes.unicode_minus'] = False # 用来正常显示负号# 数据格式：成绩1,成绩2,是否被录取（1代表被录取，0代表未被录取）# 函数定义def plot_decision_boundary(model, axis): x0, x1 = np.meshgrid( np.linspace(axis[0], axis[1], int((axis[1] - axis[0]) * 100)).reshape(-1, 1), np.linspace(axis[2], axis[3], int((axis[3] - axis[2]) * 100)).reshape(-1, 1), ) X_new = np.c_[x0.ravel(), x1.ravel()] y_predict = model.predict(X_new) zz = y_predict.reshape(x0.shape) custom_cmap = ListedColormap(['#EF9A9A', '#FFF59D', '#90CAF9']) plt.contourf(x0, x1, zz, cmap=custom_cmap)def PolynomialLogisticRegression(degree): return Pipeline([ ('poly', PolynomialFeatures(degree=degree)), ('std_scaler', StandardScaler()), ('log_reg', LogisticRegression()) ])# 读取数据data = np.loadtxt('ex2data2.txt', delimiter=',')data_X = data[:, 0:2]data_y = data[:, 2]# 数据分割X_train, X_test, y_train, y_test = train_test_split(data_X, data_y, random_state=666)# 训练模型poly_log_reg = PolynomialLogisticRegression(degree=2)poly_log_reg.fit(X_train, y_train)# 结果可视化plot_decision_boundary(poly_log_reg, axis=[-1, 1, -1, 1])plt.scatter(data_X[data_y == 0, 0], data_X[data_y == 0, 1], color='red')plt.scatter(data_X[data_y == 1, 0], data_X[data_y == 1, 1], color='blue')plt.xlabel('成绩1')plt.ylabel('成绩2')plt.title('两门课程成绩与是否录取的关系')plt.show()# 模型测试print(poly_log_reg.score(X_train, y_train))print(poly_log_reg.score(X_test, y_test)) 输出结果如下： 由图可知，分类结果较好。 120.79545454545454540.9 两份数据ex2data1.txt12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910034.62365962451697,78.0246928153624,030.28671076822607,43.89499752400101,035.84740876993872,72.90219802708364,060.18259938620976,86.30855209546826,179.0327360507101,75.3443764369103,145.08327747668339,56.3163717815305,061.10666453684766,96.51142588489624,175.02474556738889,46.55401354116538,176.09878670226257,87.42056971926803,184.43281996120035,43.53339331072109,195.86155507093572,38.22527805795094,075.01365838958247,30.60326323428011,082.30705337399482,76.48196330235604,169.36458875970939,97.71869196188608,139.53833914367223,76.03681085115882,053.9710521485623,89.20735013750205,169.07014406283025,52.74046973016765,167.94685547711617,46.67857410673128,070.66150955499435,92.92713789364831,176.97878372747498,47.57596364975532,167.37202754570876,42.83843832029179,089.67677575072079,65.79936592745237,150.534788289883,48.85581152764205,034.21206097786789,44.20952859866288,077.9240914545704,68.9723599933059,162.27101367004632,69.95445795447587,180.1901807509566,44.82162893218353,193.114388797442,38.80067033713209,061.83020602312595,50.25610789244621,038.78580379679423,64.99568095539578,061.379289447425,72.80788731317097,185.40451939411645,57.05198397627122,152.10797973193984,63.12762376881715,052.04540476831827,69.43286012045222,140.23689373545111,71.16774802184875,054.63510555424817,52.21388588061123,033.91550010906887,98.86943574220611,064.17698887494485,80.90806058670817,174.78925295941542,41.57341522824434,034.1836400264419,75.2377203360134,083.90239366249155,56.30804621605327,151.54772026906181,46.85629026349976,094.44336776917852,65.56892160559052,182.36875375713919,40.61825515970618,051.04775177128865,45.82270145776001,062.22267576120188,52.06099194836679,077.19303492601364,70.45820000180959,197.77159928000232,86.7278223300282,162.07306379667647,96.76882412413983,191.56497449807442,88.69629254546599,179.94481794066932,74.16311935043758,199.2725269292572,60.99903099844988,190.54671411399852,43.39060180650027,134.52451385320009,60.39634245837173,050.2864961189907,49.80453881323059,049.58667721632031,59.80895099453265,097.64563396007767,68.86157272420604,132.57720016809309,95.59854761387875,074.24869136721598,69.82457122657193,171.79646205863379,78.45356224515052,175.3956114656803,85.75993667331619,135.28611281526193,47.02051394723416,056.25381749711624,39.26147251058019,030.05882244669796,49.59297386723685,044.66826172480893,66.45008614558913,066.56089447242954,41.09209807936973,040.45755098375164,97.53518548909936,149.07256321908844,51.88321182073966,080.27957401466998,92.11606081344084,166.74671856944039,60.99139402740988,132.72283304060323,43.30717306430063,064.0393204150601,78.03168802018232,172.34649422579923,96.22759296761404,160.45788573918959,73.09499809758037,158.84095621726802,75.85844831279042,199.82785779692128,72.36925193383885,147.26426910848174,88.47586499559782,150.45815980285988,75.80985952982456,160.45555629271532,42.50840943572217,082.22666157785568,42.71987853716458,088.9138964166533,69.80378889835472,194.83450672430196,45.69430680250754,167.31925746917527,66.58935317747915,157.23870631569862,59.51428198012956,180.36675600171273,90.96014789746954,168.46852178591112,85.59430710452014,142.0754545384731,78.84478600148043,075.47770200533905,90.42453899753964,178.63542434898018,96.64742716885644,152.34800398794107,60.76950525602592,094.09433112516793,77.15910509073893,190.44855097096364,87.50879176484702,155.48216114069585,35.57070347228866,074.49269241843041,84.84513684930135,189.84580670720979,45.35828361091658,183.48916274498238,48.38028579728175,142.2617008099817,87.10385094025457,199.31500880510394,68.77540947206617,155.34001756003703,64.9319380069486,174.77589300092767,89.52981289513276,1 ex2data2.txt1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171180.051267,0.69956,1-0.092742,0.68494,1-0.21371,0.69225,1-0.375,0.50219,1-0.51325,0.46564,1-0.52477,0.2098,1-0.39804,0.034357,1-0.30588,-0.19225,10.016705,-0.40424,10.13191,-0.51389,10.38537,-0.56506,10.52938,-0.5212,10.63882,-0.24342,10.73675,-0.18494,10.54666,0.48757,10.322,0.5826,10.16647,0.53874,1-0.046659,0.81652,1-0.17339,0.69956,1-0.47869,0.63377,1-0.60541,0.59722,1-0.62846,0.33406,1-0.59389,0.005117,1-0.42108,-0.27266,1-0.11578,-0.39693,10.20104,-0.60161,10.46601,-0.53582,10.67339,-0.53582,1-0.13882,0.54605,1-0.29435,0.77997,1-0.26555,0.96272,1-0.16187,0.8019,1-0.17339,0.64839,1-0.28283,0.47295,1-0.36348,0.31213,1-0.30012,0.027047,1-0.23675,-0.21418,1-0.06394,-0.18494,10.062788,-0.16301,10.22984,-0.41155,10.2932,-0.2288,10.48329,-0.18494,10.64459,-0.14108,10.46025,0.012427,10.6273,0.15863,10.57546,0.26827,10.72523,0.44371,10.22408,0.52412,10.44297,0.67032,10.322,0.69225,10.13767,0.57529,1-0.0063364,0.39985,1-0.092742,0.55336,1-0.20795,0.35599,1-0.20795,0.17325,1-0.43836,0.21711,1-0.21947,-0.016813,1-0.13882,-0.27266,10.18376,0.93348,00.22408,0.77997,00.29896,0.61915,00.50634,0.75804,00.61578,0.7288,00.60426,0.59722,00.76555,0.50219,00.92684,0.3633,00.82316,0.27558,00.96141,0.085526,00.93836,0.012427,00.86348,-0.082602,00.89804,-0.20687,00.85196,-0.36769,00.82892,-0.5212,00.79435,-0.55775,00.59274,-0.7405,00.51786,-0.5943,00.46601,-0.41886,00.35081,-0.57968,00.28744,-0.76974,00.085829,-0.75512,00.14919,-0.57968,0-0.13306,-0.4481,0-0.40956,-0.41155,0-0.39228,-0.25804,0-0.74366,-0.25804,0-0.69758,0.041667,0-0.75518,0.2902,0-0.69758,0.68494,0-0.4038,0.70687,0-0.38076,0.91886,0-0.50749,0.90424,0-0.54781,0.70687,00.10311,0.77997,00.057028,0.91886,0-0.10426,0.99196,0-0.081221,1.1089,00.28744,1.087,00.39689,0.82383,00.63882,0.88962,00.82316,0.66301,00.67339,0.64108,01.0709,0.10015,0-0.046659,-0.57968,0-0.23675,-0.63816,0-0.15035,-0.36769,0-0.49021,-0.3019,0-0.46717,-0.13377,0-0.28859,-0.060673,0-0.61118,-0.067982,0-0.66302,-0.21418,0-0.59965,-0.41886,0-0.72638,-0.082602,0-0.83007,0.31213,0-0.72062,0.53874,0-0.59389,0.49488,0-0.48445,0.99927,0-0.0063364,0.99927,00.63265,-0.030612,0 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>python</tag>
        <tag>机器学习</tag>
        <tag>sklearn</tag>
        <tag>逻辑回归</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sklearn线性回归实现房价预测模型]]></title>
    <url>%2F2019%2F10%2F19%2Fsklearn%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%88%BF%E4%BB%B7%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[题目要求建立房价预测模型：利用ex1data1.txt（单特征）和ex1data2.txt（多特征）中的数据，进行线性回归和预测。 作散点图可知，数据大致符合线性关系，故暂不研究其他形式的回归。 两份数据放在最后。 单特征线性回归ex1data1.txt中的数据是单特征，作一个简单的线性回归即可：$y=ax+b$。 根据是否分割数据，产生两种方案：方案一，所有样本都用来训练和预测；方案二，一部分样本用来训练，一部分用来检验模型。 方案一对ex1data1.txt中的数据进行线性回归，所有样本都用来训练和预测。 代码实现如下： 123456789101112131415161718192021222324252627282930313233343536373839""" 对ex1data1.txt中的数据进行线性回归，所有样本都用来训练和预测"""import numpy as npimport matplotlib.pyplot as pltfrom sklearn.linear_model import LinearRegressionfrom sklearn.metrics import mean_squared_error, r2_scoreplt.rcParams['font.sans-serif'] = ['SimHei'] # 用来正常显示中文标签plt.rcParams['axes.unicode_minus'] = False # 用来正常显示负号# 数据格式：城市人口,食品经销商利润# 读取数据data = np.loadtxt('ex1data1.txt', delimiter=',')data_X = data[:, 0]data_y = data[:, 1]# 训练模型model = LinearRegression()model.fit(data_X.reshape([-1, 1]), data_y)# 利用模型进行预测y_predict = model.predict(data_X.reshape([-1, 1]))# 结果可视化plt.scatter(data_X, data_y, color='red')plt.plot(data_X, y_predict, color='blue', linewidth=3)plt.xlabel('城市人口')plt.ylabel('食品经销商利润')plt.title('线性回归——城市人口与食品经销商利润的关系')plt.show()# 模型参数print(model.coef_)print(model.intercept_)# MSEprint(mean_squared_error(data_y, y_predict))# R^2print(r2_score(data_y, y_predict)) 结果如下： 由下可知函数形式以及$R^2$为0.70 1234[1.19303364]-3.895780878311858.9539427519503580.7020315537841397 方案二对ex1data1.txt中的数据进行线性回归，部分样本用来训练，部分样本用来预测。 实现如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243""" 对ex1data1.txt中的数据进行线性回归，部分样本用来训练，部分样本用来预测"""import numpy as npimport matplotlib.pyplot as pltfrom sklearn.linear_model import LinearRegressionfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import mean_squared_error, r2_scoreplt.rcParams['font.sans-serif'] = ['SimHei'] # 用来正常显示中文标签plt.rcParams['axes.unicode_minus'] = False # 用来正常显示负号# 数据格式：城市人口,食品经销商利润# 读取数据data = np.loadtxt('ex1data1.txt', delimiter=',')data_X = data[:, 0]data_y = data[:, 1]# 数据分割X_train, X_test, y_train, y_test = train_test_split(data_X, data_y)# 训练模型model = LinearRegression()model.fit(X_train.reshape([-1, 1]), y_train)# 利用模型进行预测y_predict = model.predict(X_test.reshape([-1, 1]))# 结果可视化plt.scatter(X_test, y_test, color='red') # 测试样本plt.plot(X_test, y_predict, color='blue', linewidth=3)plt.xlabel('城市人口')plt.ylabel('食品经销商利润')plt.title('线性回归——城市人口与食品经销商利润的关系')plt.show()# 模型参数print(model.coef_)print(model.intercept_)# MSEprint(mean_squared_error(y_test, y_predict))# R^2print(r2_score(y_test, y_predict)) 结果如下： 由下可知函数形式以及$R^2$为0.80 1234[1.21063939]-4.1954819659450555.9943626670476170.8095125123727652 多特征线性回归ex1data2.txt中的数据是二个特征，作一个最简单的多元（在此为二元）线性回归即可：$y=a_1x_1+a_2x_2+b$。 对ex1data2.txt中的数据进行线性回归，所有样本都用来训练和预测。 代码实现如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243""" 对ex1data2.txt中的数据进行线性回归，所有样本都用来训练和预测"""import numpy as npimport matplotlib.pyplot as pltfrom sklearn.linear_model import LinearRegressionfrom mpl_toolkits.mplot3d import Axes3D # 不要去掉这个importfrom sklearn.metrics import mean_squared_error, r2_scoreplt.rcParams['font.sans-serif'] = ['SimHei'] # 用来正常显示中文标签plt.rcParams['axes.unicode_minus'] = False # 用来正常显示负号# 数据格式：城市人口,房间数目,房价# 读取数据data = np.loadtxt('ex1data2.txt', delimiter=',')data_X = data[:, 0:2]data_y = data[:, 2]# 训练模型model = LinearRegression()model.fit(data_X, data_y)# 利用模型进行预测y_predict = model.predict(data_X)# 结果可视化fig = plt.figure()ax = fig.gca(projection='3d')ax.scatter(data_X[:, 0], data_X[:, 1], data_y, color='red')ax.plot(data_X[:, 0], data_X[:, 1], y_predict, color='blue')ax.set_xlabel('城市人口')ax.set_ylabel('房间数目')ax.set_zlabel('房价')plt.title('线性回归——城市人口、房间数目与房价的关系')plt.show()# 模型参数print(model.coef_)print(model.intercept_)# MSEprint(mean_squared_error(data_y, y_predict))# R^2print(r2_score(data_y, y_predict)) 结果如下： 由下可知函数形式以及$R^2$为0.73 1234[ 139.21067402 -8738.01911233]89597.909542797484086560101.2056580.7329450180289141 两份数据ex1data1.txt123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596976.1101,17.5925.5277,9.13028.5186,13.6627.0032,11.8545.8598,6.82338.3829,11.8867.4764,4.34838.5781,126.4862,6.59875.0546,3.81665.7107,3.252214.164,15.5055.734,3.15518.4084,7.22585.6407,0.716185.3794,3.51296.3654,5.30485.1301,0.560776.4296,3.65187.0708,5.38936.1891,3.138620.27,21.7675.4901,4.2636.3261,5.18755.5649,3.082518.945,22.63812.828,13.50110.957,7.046713.176,14.69222.203,24.1475.2524,-1.226.5894,5.99669.2482,12.1345.8918,1.84958.2111,6.54267.9334,4.56238.0959,4.11645.6063,3.392812.836,10.1176.3534,5.49745.4069,0.556576.8825,3.911511.708,5.38545.7737,2.44067.8247,6.73187.0931,1.04635.0702,5.13375.8014,1.84411.7,8.00435.5416,1.01797.5402,6.75045.3077,1.83967.4239,4.28857.6031,4.99816.3328,1.42336.3589,-1.42116.2742,2.47565.6397,4.60429.3102,3.96249.4536,5.41418.8254,5.16945.1793,-0.7427921.279,17.92914.908,12.05418.959,17.0547.2182,4.88528.2951,5.744210.236,7.77545.4994,1.017320.341,20.99210.136,6.67997.3345,4.02596.0062,1.27847.2259,3.34115.0269,-2.68076.5479,0.296787.5386,3.88455.0365,5.701410.274,6.75265.1077,2.05765.7292,0.479535.1884,0.204216.3557,0.678619.7687,7.54356.5159,5.34368.5172,4.24159.1802,6.79816.002,0.926955.5204,0.1525.0594,2.82145.7077,1.84517.6366,4.29595.8707,7.20295.3054,1.98698.2934,0.1445413.394,9.05515.4369,0.61705 ex1data2.txt12345678910111213141516171819202122232425262728293031323334353637383940414243444546472104,3,3999001600,3,3299002400,3,3690001416,2,2320003000,4,5399001985,4,2999001534,3,3149001427,3,1989991380,3,2120001494,3,2425001940,4,2399992000,3,3470001890,3,3299994478,5,6999001268,3,2599002300,4,4499001320,2,2999001236,3,1999002609,4,4999983031,4,5990001767,3,2529001888,2,2550001604,3,2429001962,4,2599003890,3,5739001100,3,2499001458,3,4645002526,3,4690002200,3,4750002637,3,2999001839,2,3499001000,1,1699002040,4,3149003137,3,5799001811,4,2859001437,3,2499001239,3,2299002132,4,3450004215,4,5490002162,4,2870001664,2,3685002238,3,3299002567,4,3140001200,3,299000852,2,1799001852,4,2999001203,3,239500 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>python</tag>
        <tag>机器学习</tag>
        <tag>sklearn</tag>
        <tag>线性回归</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python+mysql:实现一千万条数据插入数据库]]></title>
    <url>%2F2019%2F10%2F18%2Fpython-mysql-%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%8D%83%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[作业要求构建一个关系模式和课本中的关系movies(title,year,length,movietype,studioname,producerC)一样的关系，名称自定，在这个关系中插入1000万条记录。 注：关系movies的主键为(title,year)。 要求如下： 在尽可能短的时间内完成； 只允许使用原生的SQL，不允许将SQL作为嵌入语言，也不允许使用其他语言如C#、Python等来完成； 提交你的详细解决方案和结果。 分析查资料得知 可以将多条insert语句合并为一句，即一条insert语句插入多个元组 可以通过事务，减少每条insert语句都建立新事务带来的时空消耗 可以通过load data infile将文件中的数据导入mysql，似乎很快的样子 虽然第三种似乎很快，但在此我采用了前两种方法，通过合并+事务实现。 我通过python模拟生成（只改变主键中的year，以生成不同元组）1千万条记录，将其组织为$10\times100\times10000$条记录添加进movies，分成10个事务，每个事务里有100条insert语句，每条insert语句插入10000个元组。 实现实现思路如下： 复制原数据库moviedb至newmoviedb 设置max_allowed_packet，以保证一条insert语句可以插入足够多的元组 用python生成一条一次插入10000个元组的insert语句 用python生成一个包含100条insert语句的事务，保存至sql文件 用navicat运行该sql文件 至此就可以实现一百万条记录的插入了（我的电脑耗时327s？好像很慢！？） 之后再套一层循环就可以继续完成1千万条记录的插入了。 下面给出可能用到的步骤（如未说明，代码默认为控制行或者mysql环境下的命令）： 复制数据库创建新数据库newmoviedb登录并创建数据库： 123mysql -u root -pCREATE DATABASE `newmoviedb` DEFAULT CHARACTER SET UTF8 COLLATE UTF8_GENERAL_CI; 复制moviedb至newmoviedb复制数据库 1mysqldump moviedb -u root -pchouxianyu --add-drop-table | mysql newmoviedb -u root -pchouxianyu 上面chouxianyu是我的mysql密码 进入newmoviedb1use newmoviedb; 设置max_allowed_packet设置max_allowed_packet为100M 1set global max_allowed_packet = 100*1024*1024; 删除movies中所有元素（调试用）1delete from movies; 生成一条insert语句下边是insert.py 12345678910111213141516171819202122insertStr = "INSERT INTO movies(title,year,length,movietype,studioname,producerC) VALUES"value1_str = "('mymovietitle',"# jvalue2_str = ",120,'sciFic','MGM',100)"# ,;num_value = 10000f = open(r'C:\Users\Cxy\Documents\Navicat\MySQL\Servers\MySQL\newmoviedb\insertRow.sql', 'w') # 清空文件内容再写f.write(insertStr)for j in range(1, num_value): f.write(value1_str) f.write(str(j)) f.write(value2_str) f.write(',')f.write(value1_str)f.write(str(num_value))f.write(value2_str)f.write(';')f.close() 生成一个事务以下是transaction.py 12345678910111213141516171819202122232425262728293031transaction_begin_str = "START TRANSACTION;\n"transaction_end_str = "COMMIT;\n"insertStr = "INSERT INTO movies(title,year,length,movietype,studioname,producerC) VALUES"value1_str = "('mymovietitle',"# jvalue2_str = ",120,'sciFic','MGM',100)"# ,;num_value = 10000num_sql = 100# 打开文件f = open(r'C:\Users\Cxy\Documents\Navicat\MySQL\Servers\MySQL\newmoviedb\transaction.sql', 'w') # 清空文件内容再写# 将SQL语句写入文件f.write(transaction_begin_str)for i in range(1, num_sql+1): f.write(insertStr) for j in range(1, num_value): f.write(value1_str) f.write(str(i*num_value*10+j)) f.write(value2_str) f.write(',') f.write(value1_str) f.write(str(i*num_value*10+num_value)) f.write(value2_str) f.write(';\n')f.write(transaction_end_str)# 关闭文件f.close() 参考链接https://www.cnblogs.com/freefei/p/7679991.html https://blog.csdn.net/qq_22855325/article/details/76087138 https://blog.csdn.net/weixin_44595372/article/details/88723191 https://zhidao.baidu.com/question/185665472.html https://www.cnblogs.com/zhangjpn/p/6231662.html https://www.cnblogs.com/wangcp-2014/p/8038683.html https://blog.csdn.net/gb4215287/article/details/82669785 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1044]]></title>
    <url>%2F2019%2F10%2F17%2FPAT%E4%B9%99%E7%BA%A71044%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805279328157696 题解需要注意的几个点： 题目有指出给出的数字范围是[0,169)，即0至13*13，所以可知火星文不超两个单词：高位 低位 这点我没注意（只是看了，没有细想） 火星数字低位数字是tret时（即是13的整数倍时），不用输出这个tret。 这一点样例中有暗示，我没完全体会出来，只是看到数字为13时不用输出tret 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126// PAT BasicLevel 1044// https://pintia.cn/problem-sets/994805260223102976/problems/994805279328157696#include &lt;iostream&gt;#include &lt;sstream&gt;#include &lt;string&gt;#include &lt;vector&gt;#define RADIX 13using namespace std;// 地球数字与火星数字的映射string mars0[] = &#123;"tret", "jan", "feb", "mar", "apr", "may", "jun", "jly", "aug", "sep", "oct", "nov", "dec"&#125;;string mars1[] = &#123;"", "tam", "hel", "maa", "huh", "tou", "kes", "hei", "elo", "syy", "lok", "mer", "jou"&#125;;void earthToMars(string line); // 地球数字转火星数字，line是一行输入void marsToEarth(string line); // 火星数字转地球数字，line是一行输入int main()&#123; int n; // n行输入 scanf("%d\n", &amp;n); // scanf默认不读取换行符，加上\n会读取换行符，或者使用getchar()读取换行符 string line; // 保存一行 // 获取n行输入并进行相应处理 while (n--) &#123; // 读取一行 getline(cin, line); // 分别处理并输出结果 if (isdigit(line[0])) &#123; earthToMars(line); &#125; else &#123; marsToEarth(line); &#125; &#125; system("pause"); return 0;&#125;void earthToMars(string line)&#123; int num = stoi(line); if (num &gt;= RADIX) &#123; if (num % RADIX == 0) &#123; cout &lt;&lt; mars1[num / RADIX] &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; mars1[num / RADIX] &lt;&lt; ' ' &lt;&lt; mars0[num % RADIX] &lt;&lt; endl; &#125; &#125; else &#123; cout &lt;&lt; mars0[num] &lt;&lt; endl; &#125;&#125;void marsToEarth(string line)&#123; stringstream ss(line); // 用户输入的一行 string str; // 用户输入的一个字符串 vector&lt;string&gt; strVec; // 保存各位火星数字 int num; // 最终求得的地球数字 // 读取字符串 while (ss &gt;&gt; str) &#123; strVec.push_back(str); &#125; // 一行有两个字符串，可表示[157,158] if (strVec.size() == 2) &#123; str = strVec.front(); // 高位数字 for (int i = 0; i &lt; RADIX; ++i) &#123; if (str == mars1[i]) &#123; num = RADIX * i; break; &#125; &#125; // 低位数字 str = strVec.back(); for (int i = 0; i &lt; RADIX; ++i) &#123; if (str == mars0[i]) &#123; num += i; break; &#125; &#125; &#125; // 一行有一个字符串，可表示[0,156] else if (strVec.size() == 1) &#123; str = strVec.front(); for (int i = 0; i &lt; RADIX; ++i) &#123; // 小于RADIX，即[0,12] if (str == mars0[i]) &#123; num = i; break; &#125; // 大于等于RADIX，即[13,156] if (str == mars1[i]) &#123; num = i * RADIX; break; &#125; &#125; &#125; printf("%d\n", num);&#125; 参考链接https://blog.csdn.net/qq_22194315/article/details/54428678 https://blog.csdn.net/weixin_39345384/article/details/82317205 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1046]]></title>
    <url>%2F2019%2F10%2F16%2FPAT%E4%B9%99%E7%BA%A71046%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805277847568384 题解题目有几个点需要注意： 甲和乙同时赢或者同时输都算平局，甲和乙都不需要喝酒 游戏结束不用我们判断 123456789101112131415161718192021222324252627282930313233343536373839// PAT BasicLevel 1046// https://pintia.cn/problem-sets/994805260223102976/problems/994805277847568384#include &lt;iostream&gt;using namespace std;int main()&#123; // 变量定义 int N; // N次划拳 scanf("%d",&amp;N); int AYell, AOut; // A喊的数字和出的数字 int BYell, BOut; // B喊的数字和出的数字 bool AWin,BWin; // 此次划拳A和B的输赢 int ALose=0,BLose=0; // A和B输的次数 int yellSum; // 此次划拳喊的数字之和 // 统计杯数 for(int i=0;i&lt;N;i++) &#123; scanf("%d %d %d %d",&amp;AYell,&amp;AOut,&amp;BYell,&amp;BOut); yellSum = AYell + BYell; // 此次划拳喊的数字之和 AWin = (AOut == yellSum); // A的输赢 BWin = (BOut == yellSum); // 如果一人赢一人输 if(AWin!=BWin) &#123; ALose += !AWin; BLose += !BWin; &#125; &#125; // 输出结果 printf("%d %d",ALose,BLose); system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1005]]></title>
    <url>%2F2019%2F10%2F16%2FPAT%E4%B9%99%E7%BA%A71005%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776 题解题意很简单，我并没有理解错，但刚开始最后一个测试点过不了。 代码逻辑检查多次后问了室友，说是isKey数组会越界，因为在callatz(n)中使用了isKey[n]，这个n由于n=(3*n+1)/2导致n的范围变化，不再是小于100。 我真的呜了…… 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475// PAT BasicLevel 1005// https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;#define N 310 // 数组大小bool isKey[N]; // N个数字是否为关键数：isKey[i]==true，则i是关键数；否则i不是关键数bool isValid[N]; // N个数字是否被用户输入：isValid[i]==true，则i已被用户输入；否则i未被用户输入void callatz(int n); // 循环处理isKey[n]：n若被覆盖，则不必往下计算，函数结束；若n未被覆盖，则覆盖n并按规则更新n。循环以上过程int main()&#123; // 默认N个数字都未被覆盖，即N个数字是关键数 fill(isKey, isKey + N, true); // 记录k个正整数n；对于每个正整数n，调用callatz()函数（用户输入的正整数n，并不会被自己覆盖，所以传参时直接将n更新） int k, n; scanf("%d", &amp;k); // k个整数 for (int i = 0; i &lt; k; ++i) &#123; scanf("%d", &amp;n); isValid[n] = true; // 记录用户输入的正整数n callatz(n % 2 == 0 ? n / 2 : (3 * n + 1) / 2); &#125; // 输出结果 bool isFirstKey = true; for (int i = N - 1; i &gt;= 0; --i) &#123; if (isValid[i] &amp;&amp; isKey[i]) &#123; if (isFirstKey) &#123; printf("%d", i); isFirstKey = false; // 输出第一个关键数后，之后输出的关键数就不是第一个关键数了 &#125; else &#123; printf(" %d", i); &#125; &#125; &#125; system("pause"); return 0;&#125;void callatz(int n)&#123; while (n != 1) &#123; // n未被覆盖 if (isKey[n]) &#123; // 将n覆盖 isKey[n] = false; // 按照规则更新n if (n % 2 == 0) &#123; n = n / 2; &#125; else &#123; n = (3 * n + 1) / 2; &#125; &#125; // n已被覆盖，不必往下计算 else &#123; break; &#125; &#125;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库-关系代数作业]]></title>
    <url>%2F2019%2F10%2F12%2F%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0%E4%BD%9C%E4%B8%9A%2F</url>
    <content type="text"><![CDATA[题目现有一产品数据库，该数据库模式由四个关系组成，这四个关系的模式如下：$Product(maker,model,type)$$PC(model,speed,ram,hd,price)$$Laptop(model,speed,ram,id,hd,screen,price)$$Printer(model,color,type,price)$试写出下列查询的关系代数表达式，并针对下面数据样例，给出查询的结果。（你的答案应该在任何数据上都能正确工作，而不仅限于图中的数据）a)哪种PC模型具有最少3.00的速度？b)哪个生产厂商的笔记本电脑（笔记本）的硬盘容量至少100GB？c)查询厂商B生产的所有产品的型号和价格。d)查询所有彩色激光打印机的型号。e)查询那些只出售笔记本电脑，不出售PC的厂商。f)查询在一种或者两种PC机中出现过的硬盘的容量。g)查询有同样处理速度和同样内存大小的PC对。每对只被列表一次，即列表给出$(i,j)$但不给出$(j,i)$。h)查询那些至少生产两种处理速度大于2.80的PC或者笔记本电脑的厂商。i)查询平均处理速度（PC或者是笔记本电脑）最高的所有厂商。j)查询至少生产三种不同处理速度电脑的厂商。k)查询恰好出售三种型号的PC厂商。四个关系的数据样例如下图所示： a)哪种PC模型具有最少3.00的速度？1.要操作的表：$PC$2.要进行的操作：选择、投影3.各操作的对象和顺序 选择关系$PC$中$speed\ge3.0$的元组：$R_1:=\sigma_{speed\ge3.0}(PC)$ 将$R_1$投影到属性$model$上：$R_2:=\pi_{model}(R_1)$ 4.关系代数表达式 $\pi_{model}(\sigma_{speed\ge3.0}(PC))$ 5.数据样例查询结果 $model$ 1005 1006 1013 b)哪个生产厂商的笔记本电脑（笔记本）的硬盘容量至少100GB？1.要操作的表：$Laptop$、$Product$2.要进行的操作：选择、自然连接、投影、差3.各操作的对象和顺序 选择关系$Laptop$中$hd&lt;100$的元组$R_1$：$R_1:=\sigma_{hd&lt;100}(Laptop)$ 将关系$Product$和关系$R_1$自然连接：$R_2:=R_1\bowtie Product$ 将$R_2$投影到属性$maker$上：$R_3:=\pi_{maker}(R_2)$ 将关系$Product$和关系$Laptop$自然连接：$R_4:=Product\bowtie Laptop$ 将关系$R_4$投影到属性$maker$上：$R_5:=\pi_{maker}(R_4)$ 求关系$R_5$和关系$R_3$的差：$R_6:=R_5-R_3$ 4.关系代数表达式 $Product\bowtie Laptop-\pi_{maker}(\sigma_{hd&lt;100}(Laptop)\bowtie Product)$ 5.数据样例查询结果 $maker$ B G c)查询厂商B生产的所有产品的型号和价格。1.要操作的表：$Product$、$PC$、$Laptop$、$Printer$2.要进行的操作：选择、投影、自然连接、并3.各操作的对象和顺序 选择关系$Product$中$maker=’B’$的元组：$R_1:=\sigma_{maker=’B’}(Product)$ 将关系$R_1$投影到属性$model$上：$R_2:=\pi_{model}(R_1)$ 将关系$R_2$和关系$PC$自然连接：$R_3:=R_2\bowtie PC$ 将关系$R_2$和关系$Laptop$自然连接：$R_4:=R_2\bowtie Laptop$ 将关系$R_2$和关系$Printer$自然连接：$R_5:=R_2\bowtie Printer$ 将关系$R_3$投影到属性组$\{ model,price \}$上：$R_6:=\pi_{model,price}(R_3)$ 将关系$R_4$投影到属性组$\{ model,price \}$上：$R_7:=\pi_{model,price}(R_4)$ 将关系$R_5$投影到属性组$\{ model,price \}$上：$R_8:=\pi_{model,price}(R_5)$ 将关系$R_6$、$R_7$和$R_8$并起来：$R_9:=R_6\cup R_7\cup R_8$ 4.关系代数表达式 $R_9$，该表达式展开写会太长，因此省略其展开式。 5.数据样例查询结果 $model$ $price$ 1004 649 1005 630 1006 1049 2007 1429 d)查询所有彩色激光打印机的型号。1.要操作的表：$Printer$2.要进行的操作：选择、投影3.各操作的对象和顺序 选择关系$Printer$中$color=true$并且$type=’laser’$的元组：$R_1:=\sigma_{color=true\wedge type=’laser’}(Printer)$ 将关系$R_1$投影到属性$model$上：$R_2:=\pi_{model}(R_1)$ 4.关系代数表达式 $\pi_{model}(\sigma_{color=true\wedge type=’laser’}(Printer))$ 5.数据样例查询结果 $model$ 3003 3007 e)查询那些只出售笔记本电脑，不出售PC的厂商。20200320更新：经网友@我要我觉得提醒，发现下边的$R_1$和$R_2$有点错误，具体可看本文评论和我修改后的答案（想看修改后的答案的话继续往下看就找到了） 1.要操作的表：$Product$、$PC$、$Laptop$2.要进行的操作：自然连接、投影、差3.各操作的对象和顺序 将关系$Product$与关系$Laptop$自然连接：$R_1:=Product\bowtie Laptop$ 将关系$Product$与关系$PC$自然连接：$R_2:=Product\bowtie PC$ 将关系$R_1$投影到属性$maker$上：$R_3:=\pi_{maker}(R_1)$ 将关系$R_2$投影到属性$maker$上：$R_4:=\pi_{maker}(R_2)$ 求关系$R_3$和$R_4$的差：$R_5:=R_3-R_4$ 4.关系代数表达式 $\pi_{maker}(Product\bowtie Laptop)-\pi_{maker}(Product\bowtie PC)$ 5.数据样例查询结果 $maker$ F G 20200320将$R_1$和$R_2$的错误修改后，正确答案应该如下： 1.要操作的表：$Product$2.要进行的操作：选择、投影、差3.各操作的对象和顺序 选择属性$type$的值为$laptop$的$Product$：$R_1:=\sigma_{type=laptop}(Product)$ 选择属性$type$的值为$pc$的$Product$：$R_2:=\sigma_{type=pc}(Product)$ 将关系$R_1$投影到属性$maker$上：$R_3:=\pi_{maker}(R_1)$ 将关系$R_2$投影到属性$maker$上：$R_4:=\pi_{maker}(R_2)$ 求关系$R_3$和$R_4$的差：$R_5:=R_3-R_4$ 4.关系代数表达式 $\pi_{maker}(\sigma_{type=laptop}(Product))-\pi_{maker}(\sigma_{type=pc}(Product))$ 5.数据样例查询结果 $maker$ F G f)查询在一种或者两种PC机中出现过的硬盘的容量。1.要操作的表：$PC$2.要进行的操作：重命名、$\theta$连接、投影、差3.各操作的对象和顺序 将关系$PC$通过重命名复制：$R_1:=\rho_{PC1(model_1,speed,ram,hd,price)}(PC)$ 将关系$PC$通过重命名复制：$R_2:=\rho_{PC2(model_2,speed,ram,hd,price)}(PC)$ 将关系$R_1$和$R_2$进行$\theta$连接：$R_3:=R_1\bowtie_{R_1.hd=R_2.hd\wedge R_1.model_1\neq R_2.model_2}R_2$ 将关系$R_3$和$PC$进行$\theta$连接：$R_4:=PC\bowtie_{PC.hd=R_3.hd\wedge PC.model\neq R_3.model_1\wedge PC.model\neq R_3.model_2}R_3$，由此得到至少出现三次的$hd$值 将关系$R_4$投影到属性$hd$上：$R_5:=\pi_{hd}(R_4)$ 将关系$PC$投影到属性$hd$上：$R_6:=\pi_{hd}(PC)$ 求关系$R_6$和$R_5$的差：$R_7:=R_6-R_5$ 4.关系代数表达式 $R_7$，该关系代数表达式展开长度太长，略 5.数据样例查询结果 $hd$ 80 320 200 300 160 g)查询有同样处理速度和同样内存大小的PC对。1.要操作的表：$PC$2.要进行的操作：重命名、$\theta$连接、投影3.各操作的对象和顺序 将关系$PC$通过重命名复制：$R_1:=\rho_{PC1(model_1,speed,ram,hd,price)}(PC)$ 将关系$PC$通过重命名复制：$R_2:=\rho_{PC2(model_2,speed,ram,hd,price)}(PC)$ 将关系$R_1$和$R_2$进行$\theta$连接：$R_3:=R_1\bowtie_{R_1.speed=R_2.speed\wedge R_1.ram=R_2.ram\wedge R_1.model_1\neq R_2.model_2}R_2$ 将关系$R_3$投影到属性组$\{ model_1,model_2 \}$上：$R_4:=\pi_{model_1,model_2}(R_3)$ 4.关系代数表达式 $R_4$，该关系代数表达式展开长度太长，略 5.数据样例查询结果 $model_1$ $model_2$ 1004 1012 h)查询那些至少生产两种处理速度大于2.80的PC或者笔记本电脑的厂商。1.要操作的表：$PC$2.要进行的操作：选择、并、投影、自然连接、重命名、$\theta$连接3.各操作的对象和顺序 选择关系$PC$中属性$speed&gt;2.80$的元组：$R_1:=\sigma_{speed&gt;2.80}(PC)$ 选择关系$Laptop$中属性$speed&gt;2.80$的元组：$R_2:=\sigma_{speed&gt;2.80}(Laptop)$ 将关系$R_1$和$R_2$并起来，并求其在属性$model$上的投影：$R_3=\pi_{model}(R_1\cup R_2)$ 将关系$R_3$与$Product$自然连接，并求其在属性组$\{ maker,model \}$上的投影：$R_4:=\pi_{maker,model}(R_3\bowtie Product)$ 将关系$R_4$通过重命名复制：$R_5:=\rho_{R_5(maker,model_5)}(R_4)$ 将关系$R_4$通过重命名复制：$R_6:=\rho_{R_6(maker,model_6)}(R_4)$ 将关系$R_5$和$R_6$进行$\theta$连接：$R_7:=R_5\bowtie_{R_5.maker=R_6.maker\wedge R_5.model_5\neq R_6.model_6}R_6$ 将关系$R_7$投影到属性$maker$上：$R_8:=\pi_{maker}(R_7)$ 4.关系代数表达式 $R_8$，该关系代数表达式展开长度太长，略 5.数据样例查询结果 $maker$ B i)查询平均处理速度（PC或者是笔记本电脑）最高的所有厂商。1.要操作的表：$PC$、$Laptop$、$Product$2.要进行的操作：投影、重命名、$\theta$连接、差、自然连接3.各操作的对象和顺序 将关系$PC$和$Laptop$投影到属性组$\{ model,speed \}$上并将两者并起来：$R_1:=\pi_{model,speed}(PC)\cup\pi_{model,speed}(Laptop)$ 通过重命名复制关系$R_1$：$R_2:=\rho_{R_2}(R_1)$ 关系$R_1$和$R_2$进行$\theta$连接：$R_3:=R_1\bowtie_{R_1.speed&lt;R_2.speed} R_2$，求出$speed$小于最大值的元组 求关系$R_1$和$R_3$的差：$R_4:=R_1-R_3$ 关系$R_4$和$Product$自然连接：$R_5:=R_4\bowtie Product$ 4.关系代数表达式 $R_5$，该关系代数表达式展开长度太长，略 5.数据样例查询结果 $maker$ B j)查询至少生产三种不同处理速度电脑的厂商。1.要操作的表：$PC$、$Product$2.要进行的操作：自然连接、投影、重命名、$\theta$连接3.各操作的对象和顺序 关系$Product$和$PC$自然连接并投影到属性组$\{ maker,speed \}$上：$R_1:=\pi_{maker,speed}(Procuct\bowtie PC)$ 复制并重命名关系$R_1$：$R_2:=\rho_{R_2(maker,speed_2)}(R_1)$ 复制并重命名关系$R_1$：$R_3:=\rho_{R_3(marker,speed_3)}(R_1)$ 关系$R_1$和$R_2$进行$\theta$连接：$R_4:=R_1\bowtie_{R_1.maker=R_2.maker\wedge R_1.speed\neq R_2.speed_2}R_2$ 关系$R_3$和$R_4$进行$\theta$连接：$R_5:=R_3\bowtie_{R_3.maker=R_4.maker\wedge R_4.speed\neq R_3.speed_3 /wedge R_4.speed_2\neq R_3.speed_3}R_4$ 将关系$R_5$投影到属性$maker$上：$R_6:=\pi_{maker}(R_5)$ 4.关系代数表达式 $R_5$，该关系代数表达式展开长度太长，略 5.数据样例查询结果 $maker$ A D E k)查询恰好出售三种型号的PC厂商。1.要操作的表：$PC$、$Product$2.要进行的操作：自然连接、投影、重命名、$\theta$连接、差3.各操作的对象和顺序 关系$Product$和$PC$自然连接并投影到属性组$\{ maker,model \}$上：$R_1:=\pi_{maker,model}(Procuct\bowtie PC)$ 复制并重命名关系$R_1$：$R_2:=\rho_{R_2(maker,model_2)}(R_1)$ 复制并重命名关系$R_1$：$R_3:=\rho_{R_3(marker,model_3)}(R_1)$ 复制并重命名关系$R_1$：$R_4:=\rho_{R_4(marker,model_4)}(R_1)$ 关系$R_1$和$R_2$进行$\theta$连接：$R_5:=R_1\bowtie_{R_1.maker=R_2.maker\wedge R_1.model\neq R_2.model_2}R_2$ 关系$R_3$和$R_5$进行$\theta$连接：$R_6:=R_3\bowtie_{R_3.maker=R_5.maker\wedge R_5.model\neq R_3.model_3 /wedge R_5.model_2\neq R_3.model_3}R_5$ 关系$R_4$和$R_6$进行$\theta$连接：$R_7:=R_4\bowtie_{R_4.maker=R_6.maker\wedge R_6.model\ne R_4.model_4 \wedge R_6.model_2\ne R_4.model_4 \wedge R_6.model_3\ne R_4.model_4}R_6$ 求关系$R_6$和$R_7$的差：$R_8:=R_6-R_7$ 将关系$R_8$投影到属性$maker$上：$R_8:=\pi_{maker}(R_8)$ 4.关系代数表达式 $R_8$，该关系代数表达式展开长度太长，略 5.数据样例查询结果 $maker$ A B D E 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习-线性回归与梯度下降]]></title>
    <url>%2F2019%2F09%2F23%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%B8%8E%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%2F</url>
    <content type="text"><![CDATA[线性回归linear regression 符号定义notation，仅为本教程中的符号定义。 $m$ 训练集中样本的数量 $x$ 输入值，features。 $x^{(i)}$，表示第$i$个样本的features $y$ 输出值，target $y^{(i)}$，表示第$i$个样本的label $\theta_i$ parameters，第$i$个模型参数 $h_\theta$ hypothesis（假设），这是一个在早期被用于机器学习的名称算法得到的函数（$x$到$y$） $h_\theta(x)=\theta_0+\theta_1x$ $(x,y)$代表一个样本，$(x^{(i)},y^{(i)})$代表第$i$个样本 代价函数cost function，有很多种。 符号是$J(\theta_1,\theta_2)$。 平方误差函数 square error function，最小二乘法。 对于大多数问题，特别是回归问题，平方误差函数都是一个合理的选择。 梯度下降gradient descent，可以用梯度下降法使各种各样的代价函数$J$最小化 它不仅被用在线性回归上，实际上被广泛地应用于机器学习的众多领域。 符号定义 $:=$ 赋值 $=$ 相等 $\alpha$ 是个数字，叫做学习速率，它控制以多大的幅度更新参数$\theta$ 注意 多个$\theta$需要同时更新（如果不同时，可能也能得到答案，但就并不是人们所指的梯度下降了，而是其他性质的其它算法），所以应该先计算，最后再同时更新$\theta$ 在梯度下降法中，当我们接近局部最低点时，梯度下降法会自动采取更小的幅度。 因为当我们接近局部最低点时，导数会变得越来越小，所以梯度下降将自动采取较小的幅度。 据上，可知实际上没有必要在接近局部最低点的时候减小$\alpha$。 梯度下降法求得的可能是局部最优解 但线性回归的成本函数总是一个凸函数（convex function），凸函数使用梯度下降法求得最小值就是全局最小值。 “Batch” Gradient Descent“Batch”指的是梯度下降的每一步都使用所有的训练样本。 矩阵和向量向量指的是列向量，4维的向量指的就是4行1列的矩阵。 按照惯例，通常用大写字母表示矩阵，用小写字母表示数字、标量或向量。 多元线性回归符号定义 $n$ 特征的数量，形成一个$m$行$n$列的矩阵 特征缩放features scaling 处理不同feature之间的数量级差异，使梯度下降收敛速度更快，否则可能会收敛得很慢 方法有很多种： $\frac{x}{x_{max}}$ $\frac{x-x_{mean}}{x_{max}}$ $\frac{x-x_{mean}}{标准差}$ $\frac{x-x_{mean}}{x_{max}-x_{min}}$ 学习率学习率$\alpha$的选取是十分重要的。 学习率太小，收敛会很慢；学习率太大，代价函数的值可能不会每步都在减小，或者无法收敛。 学习率一般都是试出来的。 可以用自动收敛测试来判断代价函数是否已经收敛；也可以以迭代次数为横轴，代价函数的最小值为纵轴作图，通过观察判断。 自动收敛测试当某步时，代价函数的减小值很小（比如小于$10^{-3}$，这个阈值也是不好确定的）时，则认为代价函数已经收敛。 多项式回归基于已有特征构造新的特征（乘积或次方） 正规方程nomal equation 线性方程组有解的话，使用该方法即可，可以一次性求得最优解，不需使用梯度下降法之类的迭代算法，求得的是解析解。 正规方程法不需要特征缩放。 \theta=(X^TX)^{-1}X^Ty$X^TX$不可逆的情况很少出现，如果不可逆，就用它的伪逆。 梯度下降与正规方程对比 梯度下降 正规方程 不需要选择学习率 需要选择学习率 需要多次迭代 不需要迭代 $n$很大时效果也很好 需要计算矩阵的逆，$n$很大时速度很慢 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习-绪论]]></title>
    <url>%2F2019%2F09%2F23%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%BB%AA%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[简介机器学习是一门多领域交叉学科，涉及概率论、统计学、逼近论等多门学科。它是人工智能的核心。 机器学习暂无一个被广泛认可的定义来准确定义机器学习是什么或不是什么。 机器学习算法的分类按照学习方式来分，主要可以分为两类（这两类算法也是最常使用的）： 监督学习（supervised learning） 会教计算机如何去完成任务 无监督学习（unsupervised learning） 让计算机自己学习如何完成任务 其他学习方法还有强化学习（reinforcement learning）和推荐系统（recommender systems）等。 监督学习监督学习：数据集中的每个样本的正确答案（label）是有给出的。 回归问题regression problem，预测一个连续的输出值 分类问题classification problem，预测一个离散的输出值 （支持向量机可以处理无限多的features） 无监督学习无监督学习：数据集中的每个样本是没有正确答案（label）的。 聚类算法cluster algorithm 将个例分为几类，比如新闻的专题分类、基因分类、组织计算机集群、社交网络分析、市场细分和天文数据分析等。 聚类只是无监督学习的一种。 鸡尾酒会算法cocktail party problem algorithm 两个声源同时发声，两个收音器收音，用算法分离两个声源发出的声音。 利用Octave和Matlab这样的软件，一行代码就可以实现这样的算法。 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1043]]></title>
    <url>%2F2019%2F08%2F11%2FPAT%E4%B9%99%E7%BA%A71043%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805280074743808 题解这次再次体会到题意理解的正确性，理解正确的话其实就是用代码实现自己的想法。 难的是，刚开始想错了，然后再去改，这样完全没有思路，很麻烦的。 这道题的意思是：按照PATest的顺序去字符串里找，找得到就输出，找不到就找下一个，直至字符串里找不到PATest中的任意一个字符。 123456789101112131415161718192021222324252627282930313233// PAT BasicLevel 1043// https://pintia.cn/problem-sets/994805260223102976/problems/994805280074743808#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main()&#123; // 用户输入 string str,PATest="PATest"; cin &gt;&gt;str; int i=0; int notFoundCount=0; while (notFoundCount &lt; 6)&#123; // 找到了想要的字符 if (str.find_first_of(PATest[i]) != string::npos)&#123; cout &lt;&lt; PATest[i]; str.erase(str.begin() + str.find_first_of(PATest[i])); notFoundCount = 0; &#125; // 找不到该字符 else &#123; notFoundCount++; &#125; // 找下一个 i = (i + 1) % 6; &#125; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1042]]></title>
    <url>%2F2019%2F08%2F10%2FPAT%E4%B9%99%E7%BA%A71042%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805280817135616 题解用数组count存储字母出现次数，数组下标代表字母，数组元素是次数。遍历字符串，统计各字母出现次数，最后遍历count寻找出现次数最多的字母。 12345678910111213141516171819202122232425262728293031323334353637383940// PAT BasicLevel 1042// https://pintia.cn/problem-sets/994805260223102976/problems/994805280817135616#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main()&#123; // 26个字母计数 int count[26]; fill(count,count+26,0); // 获取字符串 string str; getline(cin, str); // 字符串可能包含空格 // 统计字符出现次数 for(int i=0;i&lt;str.length();++i)&#123; if(isalpha(str[i]))&#123; count[tolower(str[i])-'a']++; &#125; &#125; // 寻找出现最频繁的英文字母（其实可以在统计的时候进行） int maxCount=-1; int maxIndex=0; for(int i=0;i&lt;26;++i)&#123; if(count[i]&gt;maxCount)&#123; // 用于实现数量并列则输出字母序最小的那个字母 maxCount = count[i]; maxIndex = i; &#125; &#125; // 输出结果 cout &lt;&lt; char('a' + maxIndex)&lt;&lt; ' ' &lt;&lt; maxCount; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1041]]></title>
    <url>%2F2019%2F08%2F10%2FPAT%E4%B9%99%E7%BA%A71041%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805281567916032 题解简单的信息录入和查询而已。 根据需求，使用试机座位号作为学生的标识进行信息录入和查询。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// PAT BasicLevel 1041// https://pintia.cn/problem-sets/994805260223102976/problems/994805281567916032#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;// 学生类class Student&#123;public: string zhunkaozhenghao; int kaoshizuoweihao; Student() &#123;&#125; Student(string zhunkaozhenghao, int kaoshizuoweihao)&#123; this-&gt;zhunkaozhenghao = zhunkaozhenghao; this-&gt;kaoshizuoweihao = kaoshizuoweihao; &#125; void print()&#123;cout &lt;&lt; zhunkaozhenghao &lt;&lt; ' ' &lt;&lt; kaoshizuoweihao &lt;&lt; endl;&#125;&#125;;int main()&#123; // n个学生 int n; Student stuArr[1001]; // 学生信息 string zhunkaozhenghao; // 准考证号 int kaoshizuoweihao; // 考试座位号 int shijizuoweihao; // 试机位号 // 录入学生信息 cin &gt;&gt; n; for(int i=0;i&lt;n;++i)&#123; cin &gt;&gt; zhunkaozhenghao &gt;&gt; shijizuoweihao &gt;&gt; kaoshizuoweihao; stuArr[shijizuoweihao]=Student(zhunkaozhenghao,kaoshizuoweihao); &#125; // 查询m个学生的信息并输出 int m; cin &gt;&gt; m; for(int i=0;i&lt;m;++i)&#123; cin &gt;&gt;shijizuoweihao; stuArr[shijizuoweihao].print(); &#125; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1039]]></title>
    <url>%2F2019%2F08%2F10%2FPAT%E4%B9%99%E7%BA%A71039%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805283241443328 题解用两个字符串表示两个箱子，一个装有的珠子，一个装想要的珠子。 如果发现两个箱子里都有某个珠子，则把这两个珠子都取出来，重复该操作至某个箱子中没有珠子了或者两个箱子里没有相同的珠子。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546// PAT BasicLevel 1039// https://pintia.cn/problem-sets/994805260223102976/problems/994805283241443328#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main()&#123; // 有的珠子和想要的珠子 string have,want; cin &gt;&gt; have &gt;&gt; want; // 有想要的并且还有珠子 while(have.length()&gt;0 &amp;&amp; want.length()&gt;0)&#123; // 遍历想要的珠子在有的珠子里找 int i = 0; while (i &lt; want.length())&#123; char c = want[i]; if (have.find(c) != string::npos)&#123; want.erase(want.begin() +i); have.erase(have.begin()+have.find(c)); break; &#125; i++; &#125; // 没有想要的任意一个珠子 if(i==want.length())&#123; break; &#125; &#125; // 要的珠子都拿到了 if(want.length()==0)&#123; cout &lt;&lt; "Yes " &lt;&lt; have.length(); &#125; // 还有珠子没拿到 else&#123; cout &lt;&lt; "No " &lt;&lt; want.length(); &#125; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1038]]></title>
    <url>%2F2019%2F08%2F10%2FPAT%E4%B9%99%E7%BA%A71038%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040 题解一这份代码最后一个点会超时 123456789101112131415161718192021222324252627282930313233// PAT BasicLevel 1038// https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main()&#123; // n个学生及其分数 int n; cin &gt;&gt; n; int *scores = new int[n]; for(int i=0;i&lt;n;++i)&#123; cin &gt;&gt; scores[i]; &#125; // k个查询的分数 int k,search; cin &gt;&gt; k; while(k--)&#123; cin &gt;&gt; search; cout &lt;&lt; count(scores, scores + n, search); if(k) cout &lt;&lt; ' '; &#125; // 释放内存 delete[] scores; //system("pause"); return 0;&#125; 题解二这个所有点都过了。用数组存储各分数学生数量，下标是分数，数组元素值是数量。 123456789101112131415161718192021222324252627282930313233343536// PAT BasicLevel 1038// https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main()&#123; // n个学生 int n,score; cin &gt;&gt; n; // 各分数人数 int count[101]; fill(count,count+101,0); // 各分数的学生数量统计 while(n--)&#123; cin &gt;&gt; score; count[score]++; &#125; // k个查询的分数 int k,search; cin &gt;&gt; k; while(k--)&#123; cin &gt;&gt; search; cout &lt;&lt; count[search]; if(k) cout &lt;&lt; ' '; &#125; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1037]]></title>
    <url>%2F2019%2F08%2F10%2FPAT%E4%B9%99%E7%BA%A71037%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805284923359232 题解还算简单，就是模拟我们在生活中的计算，但我想应该会有一个通用性较高的方法，下边的代码还是有重复程度较大的代码的。 两个需要注意的点： 负数 借位 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091// PAT BasicLevel 1037// https://pintia.cn/problem-sets/994805260223102976/problems/994805284923359232#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int str2num(string str);int getSum(int* p);int main()&#123; // 获取用户输入 string strP,strA; cin &gt;&gt; strP &gt;&gt; strA; // 应付 int p[3]; p[0] = str2num(strP.substr(0, strP.find_first_of('.') - 0)); p[1] = str2num(strP.substr(strP.find_first_of('.') + 1, strP.find_last_of('.') - strP.find_first_of('.') - 1)); p[2] = str2num(strP.substr(strP.find_last_of('.') + 1, strP.length() - strP.find_last_of('.') - 1)); // 实付 int a[3]; a[0] = str2num(strA.substr(0, strA.find_first_of('.') - 0)); a[1] = str2num(strA.substr(strA.find_first_of('.') + 1, strA.find_last_of('.') - strA.find_first_of('.') - 1)); a[2] = str2num(strA.substr(strA.find_last_of('.') + 1, strA.length() - strA.find_last_of('.') - 1)); // 判断符号 int flag=getSum(a)-getSum(p)&gt;=0?1:-1; // 如果少付了，就交换数组元素 if(flag&lt;0)&#123; for(int i=0,temp;i&lt;3;++i)&#123; temp=a[i]; a[i]=p[i]; p[i]=temp; &#125; &#125; // 被找钱数 int result[3]; int diff,borrow; // 第三个数 diff=a[2]-p[2]; if(diff&gt;=0)&#123; result[2] = diff; borrow=0; &#125;else&#123; result[2] = diff+29; borrow=-1; &#125; // 第二个数 diff=a[1]-p[1]+borrow; if(diff&gt;=0)&#123; result[1] = diff; borrow=0; &#125;else&#123; result[1] = diff+17; borrow = -1; &#125; // 第一个数 result[0]=a[0]-p[0]+borrow; // 结果 if(flag&lt;0)&#123; cout &lt;&lt; '-'; &#125; cout &lt;&lt; result[0] &lt;&lt; '.' &lt;&lt; result[1] &lt;&lt; '.' &lt;&lt; result[2]; //system("pause"); return 0;&#125;int getSum(int *p)&#123; // 以Knut为单位计算总钱数 return (p[0] * 17 + p[1])*29+p[2];&#125;int str2num(string str)&#123; // 不考虑负数，字符串转数字 int num=0; for(int i=0;i&lt;str.length();++i)&#123; num=num*10+(str[i]-'0'); &#125; return num;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1036]]></title>
    <url>%2F2019%2F08%2F10%2FPAT%E4%B9%99%E7%BA%A71036%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805285812551680 题解啊有个难题（1034）不会，自闭了，来刷个简单题。这题可简单了，注意一个四舍五入就行。 123456789101112131415161718192021222324252627282930313233343536373839// PAT BasicLevel 1036// https://pintia.cn/problem-sets/994805260223102976/problems/994805285812551680#include &lt;iostream&gt;using namespace std;int main()&#123; // 边长（列数）和字符 int column; char c; cin &gt;&gt; column &gt;&gt; c; // 行数 int row = column * 1.0 / 2 + 0.5; // 输出第一行 for(int i=0;i&lt;column;++i)&#123; cout &lt;&lt; c; &#125; cout &lt;&lt; endl; // 输出中间的几行 for(int i=0;i&lt;row-2;++i)&#123; cout &lt;&lt; c; for(int j=0;j&lt;column-2;++j)&#123; cout &lt;&lt; ' '; &#125; cout &lt;&lt; c &lt;&lt; endl; &#125; // 输出最后一行 for (int i = 0; i &lt; column; ++i)&#123; cout &lt;&lt; c; &#125; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1033]]></title>
    <url>%2F2019%2F08%2F09%2FPAT%E4%B9%99%E7%BA%A71033%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805288530460672 题解刚开始没有理解到，如果上档键坏的话，所有大写字母都不行（My bad），后来改代码思路就很乱，甚至还考虑过_和+是否输出之类的……所以理解题意很重要吧。这个题弄得我脑袋很累。 考虑到上档键坏的话，所有大写字母都不行之后，还是会有一个测试点不过。 另外有个坑是第一行可能是空行，即所有键都是可以使用的。 123456789101112131415161718192021222324252627282930313233343536// PAT BasicLevel 1033// https://pintia.cn/problem-sets/994805260223102976/problems/994805288530460672#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main()&#123; // 用户输入的字符串、输出的字符串、坏掉的键（字符串形式） string strIn,wrongKeys; getline(cin, wrongKeys); cin &gt;&gt; strIn; // 上档键（大写）是否可用 bool upIsWrong = (wrongKeys.find('+') == string::npos) ? false : true; // 生成输出字符串 for(int i=0;i&lt;strIn.length();++i)&#123; // 处理坏掉的键导致对应键无法输出 if (wrongKeys.find(toupper(strIn[i]))!=string::npos)&#123; continue; &#125; // 处理上档键坏掉导致大写无法输出 if (isupper(strIn[i]) &amp;&amp; upIsWrong)&#123; continue; &#125; // 这个键没有问题 cout &lt;&lt; strIn[i]; &#125; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1032]]></title>
    <url>%2F2019%2F08%2F08%2FPAT%E4%B9%99%E7%BA%A71032%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805289432236032 题解用数组的下标表示学校，数组元素表示分数。统计各校分数后，遍历求最大就好了。 做这道题遇到一个memset初始化数组元素的问题，具体见https://www.cnblogs.com/chouxianyu/p/11322984.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// PAT BasicLevel 1032// https://pintia.cn/problem-sets/994805260223102976/problems/994805289432236032#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;int main()&#123; // n个参赛者 int n; cin &gt;&gt; n; // 最多n个学校 int* scores=new int[n+1]; // 各学校（下标为0的学校是无效的学校）分数初始化为-1，因为是百分制，有可能所以参赛者都是零分且是同一个学校 memset(scores, -1, sizeof(int) * (n + 1)); // 统计n个学校分数 int index,score; for(int i=0;i&lt;n;i++)&#123; cin &gt;&gt; index &gt;&gt; score; scores[index] += score; &#125; // 有效的学校最低分数是0，所以遍历后结果肯定不会是下标为0的那个学校 int maxIndex=0,maxScore=scores[maxIndex]; for(int i=1;i&lt;n+1;++i)&#123; // 处理-1 scores[i]++; // 更新最大值 if (scores[i] &gt; maxScore)&#123; maxScore = scores[i]; maxIndex = i; &#125; &#125; // 输出结果 cout &lt;&lt; maxIndex &lt;&lt; ' ' &lt;&lt; maxScore; // 释放内存 delete[] scores; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[memset初始化数组的坑]]></title>
    <url>%2F2019%2F08%2F08%2Fmemset%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E7%BB%84%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[memset函数常被我们用来初始化数组，然而有个坑可能会被我们踩到。 静态数组初始化一般情形是这样的： 12345678910111213141516#include &lt;cstring&gt;int main()&#123; // 静态数组arr int arr[10]; // 将数组所有元素初始化为0 memset(arr,0,sizeof(arr)); // 遍历输出数组元素 for(int i=0;i&lt;10;++i)&#123; cout &lt;&lt; arr[i] &lt;&lt; endl; &#125; return 0;&#125; 这样做是正确的，通过输出可以看到正确结果。 注意：这份代码中arr是个静态数组。 动态数组初始化12345678910111213141516#include &lt;cstring&gt;int main()&#123; // 动态数组arr int* arr=new int[10]; // 将数组所有元素初始化为0 memset(arr,0,sizeof(arr)); // 遍历输出数组元素 for(int i=0;i&lt;10;++i)&#123; cout &lt;&lt; arr[i] &lt;&lt; endl; &#125; return 0;&#125; 这份代码运行后，我们发现memset并没有把数组元素全部初始化为0。 注意：arr是个动态数组 原因如下： 我们可以在上面两份代码中输出sizeof(arr)，可以发现结果是不一样的。 因为在第一份代码中arr代表一个数组，第二份代码中arr代表一个指针。（关于数组名是什么这个问题可以参考我的另一篇文章：https://www.cnblogs.com/chouxianyu/p/11322951.html，其实这个问题我觉得是编译原理应该会学到的） 解决方案初始化数组（静态动态均可）时，把代码改成memset(arr,0,sizeof(int)*10);，int是数组元素的类型，10是数组元素个数。 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>数组</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1031]]></title>
    <url>%2F2019%2F08%2F07%2FPAT%E4%B9%99%E7%BA%A71031%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805290334011392 题解emmm。对于每个身份证号，判断前17位是否合法，并计算其与对应权重积之和，最后判断校验位是否合法。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768// PAT BasicLevel 1031// https://pintia.cn/problem-sets/994805260223102976/problems/994805290334011392#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main()&#123; // 正确校验码 char M[] = &#123; '1','0','X','9','8','7','6','5','4','3','2'&#125;; // 前17位的比重 int weight[] = &#123;7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2&#125;; // 身份证号个数 int n; cin &gt;&gt; n; // 前17位乘以权重之和 int sum; // 合法身份证号的个数 int legalCount=0; // 当前身份证号是否合法 bool isLegal; // 当前身份证号 string str; // 获取每个身份证号并判断 for(int i=0;i&lt;n;++i)&#123; cin &gt;&gt; str; // 初始化 sum=0; isLegal=true; // 计算前17位乘以权重之和并判断前17位合法性 for(int i=0;i&lt;17;++i)&#123; if (isdigit(str[i]))&#123; sum += (str[i] - '0')*weight[i]; &#125; // 出现非数字，非法，结束sum的计算 else&#123; isLegal=false; break; &#125; &#125; // 如果前17位合法，判断校验码是否合法 if(isLegal)&#123; isLegal = (M[sum % 11]==str[17]); &#125; // 身份证号非法则输出 if(!isLegal)&#123; cout &lt;&lt; str &lt;&lt; endl; &#125; // 合法则计数 else&#123; legalCount++; &#125; &#125; // 全部身份证号合法 if(legalCount==n)&#123; cout &lt;&lt; "All passed"; &#125; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1030]]></title>
    <url>%2F2019%2F08%2F07%2FPAT%E4%B9%99%E7%BA%A71030%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805292322111488 题解emm刚开始思路有点错误，我直接将从小到大排序后的数列首个元素作为数列的最小值，但其实不是，数列第一个元素的不同可能会导致更大的完美数列长度。(参考链接：https://blog.csdn.net/chenyvye/article/details/78701846) 要注意的有三点： 就是上边我错的那个 用long long类型保存这些整数（$10^9$） 移动序列时序列首位直接设为i+maxLen 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// PAT BasicLevel 1030// https://pintia.cn/problem-sets/994805260223102976/problems/994805291311284224#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main()&#123; // 获取n和p int n; long long p; cin &gt;&gt; n &gt;&gt; p; // 获取数列 long long *nums = new long long[n]; for(int i=0;i&lt;n;++i)&#123; cin &gt;&gt; nums[i]; &#125; // 排序 sort(nums + 0, nums + n); // 寻找完美数列最大长度 int j,maxLen=0; for (int i = 0; i &lt; n; ++i)&#123; for(j=i+maxLen;j&lt;n;++j)&#123;// 至少要比之前求出来的最大长度长，所以j初始化为i+maxLen if (nums[j] &lt;= nums[i] * p)&#123; // 更新最长长度 if (j - i + 1&gt;maxLen)&#123; maxLen = j - i + 1; &#125; &#125; // 出现非完美数列，之后也一定都是非完美数列，所以直接跳出循环 else&#123; break; &#125; &#125; &#125; // 输出结果 cout &lt;&lt; maxLen; // 释放内存 delete[] nums; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1029]]></title>
    <url>%2F2019%2F08%2F07%2FPAT%E4%B9%99%E7%BA%A71029%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805292322111488 题解思路： 可以想到，没有坏键的话就是两个字符串是一样的。所以我们按下标进行比较，发现不一样的就是坏掉的，然后在错误字符串的该位置添加一个字符，以确保两字符串下标对应。 1234567891011121314151617181920212223242526272829303132333435363738394041// PAT BasicLevel 1029// https://pintia.cn/problem-sets/994805260223102976/problems/994805292322111488#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main()&#123; // 正确和错误的字符串 string right,wrong; cin &gt;&gt; right &gt;&gt; wrong; // 坏掉的键 string wrongKeys=""; // 寻找坏掉的键 for(int i=0;i&lt;right.length();++i)&#123; if (right[i] != wrong[i])&#123; // 在wrong里占个位子，更新下标 wrong.insert(wrong.begin() + i, '#'); // 处理丢失的字符（小写转大写） if (islower(right[i]))&#123; right[i]-=32; &#125; // 记录新发现的未重复的坏键 if(wrongKeys.find(right[i])==wrongKeys.npos)&#123; wrongKeys+=right[i]; &#125; &#125; &#125; // 输出结果 cout &lt;&lt; wrongKeys; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1028]]></title>
    <url>%2F2019%2F08%2F07%2FPAT%E4%B9%99%E7%BA%A71028%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805293282607104 题解这题跟那个德才论（PAT乙级1015）什么的差不多。 因为我用了string和algorithm，所以整个代码实现比较简单。 值得注意的的是，刚开始第3个测试点没过，报错Segmentation fault。 网上查题解后，发现还是边界情况的问题（当所有输入都非法时就会数组越界，所以特殊处理一下即可，参考链接：https://blog.csdn.net/daniel960601/article/details/55261196） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// PAT BasicLevel 1028// https://pintia.cn/problem-sets/994805260223102976/problems/994805293282607104#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;class Person&#123;public: string name; string birthday; Person(string name, string birthday)&#123; this-&gt;name = name; this-&gt;birthday = birthday; &#125;&#125;;bool personCmp(Person &amp;p1, Person &amp;p2);int main()&#123; // 人数 int n; cin &gt;&gt;n; // 最早日期和最晚日期 string earliest = "1814/09/06"; string latest = "2014/09/06"; // 获取人的信息 vector&lt;Person&gt; personVec; string name,birthday; for(int i=0;i&lt;n;++i)&#123; cin &gt;&gt; name &gt;&gt; birthday; if (birthday &gt;= earliest &amp;&amp; birthday&lt;= latest)&#123; personVec.push_back(Person(name,birthday)); &#125; &#125; // 输出结果 cout &lt;&lt; personVec.size(); if (personVec.size() &gt; 0)&#123; // 对所有人进行排序 sort(personVec.begin(), personVec.end(), personCmp); cout &lt;&lt; ' ' &lt;&lt; personVec.front().name &lt;&lt; ' ' &lt;&lt; personVec.back().name; &#125; //system("pause"); return 0;&#125;bool personCmp(Person &amp;p1, Person &amp;p2)&#123; // 生日 升序（生日从小到大就是年龄从大到小） return p1.birthday &lt; p2.birthday; &#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1027]]></title>
    <url>%2F2019%2F08%2F07%2FPAT%E4%B9%99%E7%BA%A71027%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805294251491328 题解主要有两个内容： 获取第一行（最长行）字符的个数。这个与一般的菱形打印不同，该题的字符不一定用完。 通过循环输出空格与字符（末尾空格就不用输出了） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475// PAT BasicLevel 1027// https://pintia.cn/problem-sets/994805260223102976/problems/994805294251491328#include &lt;iostream&gt;using namespace std;int getLineMaxCount(int maxNum);int main()&#123; // 字符可用数量及字符 int n;char c; cin &gt;&gt; n &gt;&gt; c; // 获取第一行字符的个数 int maxNum = getLineMaxCount(n); // 已输出字符个数 int count=0; // 当前行输出字符个数 int num = maxNum; // 输出上半部分 while(num&gt;1)&#123; // 输出空格 for(int i=0;i&lt;(maxNum-num)/2;++i)&#123; cout &lt;&lt; ' '; &#125; // 输出字符 count+=num; for(int i=0;i&lt;num;++i)&#123; cout &lt;&lt; c; &#125; // 换行 cout &lt;&lt; endl; num-=2; &#125; while(num&lt;=maxNum)&#123; // 输出空格 for (int i = 0; i &lt; (maxNum - num) / 2; ++i)&#123; cout &lt;&lt; ' '; &#125; // 输出字符 count+=num; for (int i = 0; i &lt; num; ++i)&#123; cout &lt;&lt; c; &#125; // 换行 cout &lt;&lt; endl; num += 2; &#125; // 输出剩余字符个数 cout &lt;&lt; n-count; //system("pause"); return 0;&#125;// 根据字符可用数量获取第一行字符个数int getLineMaxCount(int maxNum)&#123; int sum=-1,count=1; while (sum + count * 2 &lt;= maxNum)&#123; sum += count * 2; count += 2; &#125; return count-2;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1026]]></title>
    <url>%2F2019%2F08%2F07%2FPAT%E4%B9%99%E7%BA%A71026%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805295203598336 题解就只有一个四舍五入需要注意一下，其他的没啥难度，都是简单的运算而已…… 123456789101112131415161718192021222324252627// PAT BasicLevel 1026// https://pintia.cn/problem-sets/994805260223102976/problems/994805295203598336#include &lt;iostream&gt;using namespace std;#define CLK_TCK 100int main()&#123; // 获取C1和C2，并计算时间差（不足一秒进行四舍五入） int c1,c2; cin &gt;&gt; c1 &gt;&gt; c2; int time = (c2 - c1)*1.0/CLK_TCK+0.5; // 计算小时、分钟、秒 int hour=time/3600; time%=3600; int min=time/60; int sec=time%60; // 按格式输出结果 printf("%02d:%02d:%02d",hour,min,sec); //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1025]]></title>
    <url>%2F2019%2F08%2F06%2FPAT%E4%B9%99%E7%BA%A71025%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805296180871168 题解第一遍没有全部AC，最后1个测试点没过，原因是题目给的结点中有可能有无效结点，所以需要重新统计节点个数。（参考链接：https://blog.csdn.net/m0_37285185/article/details/68936043） 修改后全部都AC了。 整体的思路是以地址为键形成一个map，根据从第一个结点开始遍历，统计出有效结点的地址顺序（存储在数组中），最后利用reverse函数将顺序反转，最后将反转的链表输出。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687// PAT BasicLevel 1025// https://pintia.cn/problem-sets/994805260223102976/problems/994805296180871168#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;algorithm&gt;using namespace std;class Node&#123;public: int address; int data; int next; // 因为使用map，所以需要提供一个无参构造 Node()&#123;&#125;; Node(int address,int data,int next)&#123; this-&gt;address = address; this-&gt;data = data; this-&gt;next = next; &#125; void print()&#123; printf("%05d", address); cout &lt;&lt; ' ' &lt;&lt; data &lt;&lt; ' '; if(next==-1)&#123; printf("%d\n",next); &#125;else&#123; printf("%05d\n", next); &#125; &#125;&#125;;int main()&#123; // 获取n、k和首结点地址 int n, k, head; cin &gt;&gt; head &gt;&gt; n &gt;&gt; k; // 利用map模拟链表，获取用户输入的结点 int address,data,next; map&lt;int,Node&gt; nodes; for(int i=0;i&lt;n;++i)&#123; cin &gt;&gt; address &gt;&gt; data &gt;&gt; next; nodes[address]=Node(address,data,next); &#125; // 获取结点地址的顺序并重新统计结点个数去除无效顶点 int * addressArr=new int[n]; addressArr[0] = head; address = nodes[head].next; int nodeCount=1; while(address!=-1)&#123; addressArr[nodeCount]=address; nodeCount++; address = nodes[address].next; &#125; n=nodeCount; // 将结点地址的顺序进行反转 if (k &gt; 1)&#123; int *p = addressArr; while ((addressArr + n) - p &gt;= k) &#123; reverse(p, p + k); p += k; &#125; &#125; // 更新各结点的next for(int i=0;i&lt;n-1;++i)&#123; nodes[addressArr[i]].next=addressArr[i+1]; &#125; nodes[addressArr[n - 1]].next=-1; // 输出反转后的链表 for (int i = 0; i &lt; n; ++i)&#123; nodes[addressArr[i]].print(); &#125; // 释放内存 delete[] addressArr; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1024]]></title>
    <url>%2F2019%2F08%2F06%2FPAT%E4%B9%99%E7%BA%A71024%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805297229447168 题解第一遍也是没有全部AC，有3个测试点没过，原因如下： 没有处理指数为0的情况 指数为正时，没有处理不需补充0而需插入小数点的情况。（经过https://blog.csdn.net/whenever5225/article/details/90454014提示才知道的） 修改后全部都AC了。 整体的思路是获取整数和小数数值部分，然后获取指数，最后进行小数点的移动。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273// PAT BasicLevel 1024// https://pintia.cn/problem-sets/994805260223102976/problems/994805297229447168#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int getExponent(string);int main()&#123; // 原始字符串和结果 string str,result; cin &gt;&gt; str; // 获取结果的符号 string flag = (str[0] == '-' ? "-" : ""); // E在原始字符串中的下标 int eIndex = str.find_last_of('E'); // 获得指数的值 int exponent = getExponent(str.substr(eIndex + 1, str.length())); // 从原始字符串获取整数和小数部分的数值，现在小数点在result中的下标为1 result = str[1]+str.substr(3, eIndex-3); // 根据指数进行小数点的移动 if(exponent&gt;0)&#123; // 判断是否需要补充0 int numOfZero = exponent - (result.length() - 1); // 在尾部补充0 if(numOfZero&gt;=0)&#123; for (int i = 0; i &lt; numOfZero; i++)&#123; result += '0'; &#125; &#125; // 不需补充0，而是需要插入小数点 else&#123; result.insert(result.begin()+exponent+1,'.'); &#125; &#125;else if(exponent&lt;0)&#123; // 在首部补充0（for循环少补了一个0，这个少补的0在添加小数点时补上） exponent*=-1; for(int i=0;i&lt;exponent-1;i++)&#123; result.insert(result.begin(),'0'); &#125; // 添加小数点 result="0."+result; &#125;else&#123; // 添加小数点 result.insert(result.begin()+1,'.'); &#125; // 输出结果 cout &lt;&lt; flag+result; //system("pause"); return 0;&#125;int getExponent(string str)&#123; int flag=str[0]=='+'?1:-1; int num=0; for(int i=1;i&lt;str.length();++i)&#123; num=num*10+str[i]-'0'; &#125; return flag*num;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1023]]></title>
    <url>%2F2019%2F08%2F06%2FPAT%E4%B9%99%E7%BA%A71023%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805298269634560 题解主要就是控制首位不能为0，其他的都很简单，就遍历然后往尾部加数字就好了。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556// PAT BasicLevel 1023// https://pintia.cn/problem-sets/994805260223102976/problems/994805298269634560#include &lt;iostream&gt;using namespace std;int main()&#123; // 结果 string res=""; // 获取数字零的数量 int zeroCount; cin &gt;&gt;zeroCount; // 标志是否为第一个数量超过0个的数字 bool isFirst=true; // 非零数字个数 int count; // 获取非零数字的数量并生成最终结果 for(char c='1';c&lt;='9';++c)&#123; // 获取非零数数量 cin &gt;&gt; count; // 该数字的数量超过0个时 if(count&gt;0)&#123; // 如果是第一个数量超过0的非零数字 if (isFirst)&#123; // 先把它加在最前边，因为首位不可以是0 res+=c; count--; // 把零加在前边 for(int i=0;i&lt;zeroCount;++i)&#123; res+='0'; &#125; // 更新标志 isFirst=false; &#125; // 加自己 for (int i = 0; i &lt; count; ++i)&#123; res += c; &#125; &#125; &#125; // 输出形成的最小数 cout &lt;&lt; res; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1022]]></title>
    <url>%2F2019%2F08%2F06%2FPAT%E4%B9%99%E7%BA%A71022%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805299301433344 题解很简单，参考十进制转二进制的方法，除二取余至商为0。 这里要注意：需要处理a+b等于0的情况（参考了https://blog.csdn.net/m0_37285185/article/details/68936069，我又没发现边界……My bad,this is not so me.） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// PAT BasicLevel 1022// https://pintia.cn/problem-sets/994805260223102976/problems/994805299301433344#include &lt;iostream&gt;#include &lt;stack&gt;#include &lt;string&gt;using namespace std;string numBaseConversion(int num,int base);int main()&#123; // 获取a、b和d int a,b,base; cin &gt;&gt; a &gt;&gt; b &gt;&gt; base; // 进制转换，输出结果 cout &lt;&lt; numBaseConversion(a+b,base); //system("pause"); return 0;&#125;// 将一个十进制数转换为base(1,10]进制的字符串string numBaseConversion(int num, int base)&#123; stack&lt;char&gt; charStack; string res=""; // 处理num为0的情况 if(num==0)&#123; return "0"; &#125; // 处理num非0的情况 while(num&gt;0)&#123; charStack.push(num%base+'0'); num/=base; &#125; while (!charStack.empty())&#123; res+=charStack.top(); charStack.pop(); &#125; return res;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1021]]></title>
    <url>%2F2019%2F08%2F06%2FPAT%E4%B9%99%E7%BA%A71021%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805300404535296 题解很简单，用string保存这个数字，用一个数组保存各数字出现的次数，然后遍历字符串统计各数字个数，最后按照格式输出各位数字的个数。 1234567891011121314151617181920212223242526272829// PAT BasicLevel 1021// https://pintia.cn/problem-sets/994805260223102976/problems/994805300404535296#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main()&#123; // 用户输入数字 string str; cin &gt;&gt; str; // 统计各数字个数 int digitCount[]=&#123;0,0,0,0,0,0,0,0,0,0&#125;; for(int i=0;i&lt;str.length();i++)&#123; digitCount[str[i]-'0']++; &#125; // 输出各数字个数 for(int i=0;i&lt;10;i++)&#123; if(digitCount[i]&gt;0)&#123; cout &lt;&lt; i &lt;&lt; ':' &lt;&lt; digitCount[i] &lt;&lt; endl; &#125; &#125; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1020]]></title>
    <url>%2F2019%2F08%2F06%2FPAT%E4%B9%99%E7%BA%A71020%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805301562163200 题解很容易看出这是个背包（非01背包）问题，直接用贪心求解即可。 需要注意的是，这里涉及到单价的计算，要注意整数计算会损失精度的问题，所以月饼的总价、库存量、单价都使用了double进行定义。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667// PAT BasicLevel 1020// https://pintia.cn/problem-sets/994805260223102976/problems/994805301562163200#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;class Mooncake&#123;public: double totalPrice; // 总价 double storage; // 库存量 double unitPrice; // 单价 Mooncake(double storage)&#123;this-&gt;storage=storage;&#125;&#125;;bool mooncakeCmp(Mooncake&amp;,Mooncake&amp;);int main()&#123; // 月饼种类数 市场最大需求量 int n;int demand; cin &gt;&gt; n &gt;&gt; demand; // n种月饼库存量和售价 vector&lt;Mooncake&gt; mooncakeVec; double storage,totalPrice; for(int i=0;i&lt;n;++i)&#123; cin &gt;&gt; storage; mooncakeVec.push_back(Mooncake(storage)); &#125; for (int i = 0; i &lt; n; ++i)&#123; cin &gt;&gt; totalPrice; mooncakeVec[i].totalPrice = totalPrice; mooncakeVec[i].unitPrice = totalPrice/mooncakeVec[i].storage; &#125; // 对商品进行排序 sort(mooncakeVec.begin(),mooncakeVec.end(),mooncakeCmp); // 购买商品 double profit=0.0; for(int i=0;i&lt;n;i++)&#123; // 单种月饼全部购买 if (demand &gt;= mooncakeVec[i].storage)&#123; demand -= mooncakeVec[i].storage; profit += mooncakeVec[i].totalPrice; &#125; // 单种月饼购买一部分库存 else&#123; profit += mooncakeVec[i].unitPrice * demand; break;//直接break了，就不把demand减成0了 &#125; &#125; // 输出最大收益 printf("%.2f",profit); //system("pause"); return 0;&#125;bool mooncakeCmp(Mooncake &amp;m1, Mooncake &amp;m2)&#123; // 单价降序排列 return m1.unitPrice &gt; m2.unitPrice;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
        <tag>背包</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1019]]></title>
    <url>%2F2019%2F08%2F06%2FPAT%E4%B9%99%E7%BA%A71019%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805302786899968 题解根据用户输入或者每次的计算结果，生成大数和小数，然后输出计算过程，一直循环该过程；当结果为0或6174时，循环终止。 刚开始我有一个测试点是没过的，参考了https://blog.csdn.net/qunqunstyle99/article/details/83189284才过了全部测试点。所以写ACM题我们得自己会猜一些边界条件，正确理解题意，然后写代码。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// PAT BasicLevel 1019// https://pintia.cn/problem-sets/994805260223102976/problems/994805302786899968#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;#define ARRSIZE 5#define ARRLEN 4int main()&#123; // 生成的大数和小数 char big[ARRSIZE]; char small[ARRSIZE]; // 大数-小数 int result;char res[ARRSIZE]; // 获取用户输入的数字 scanf("%d", &amp;result); while (true)&#123; // 生成大数和小数 sprintf(small, "%04d\0", result); sort(small, small + ARRLEN); strcpy(big, small); reverse(big, big + ARRLEN); // 计算大数-小数 result = 0; for (int i = 0, diff; i &lt; ARRLEN; i++) &#123; result = result * 10 + big[i] - small[i]; &#125; // 输出结果 printf("%s - %s = %04d\n", big, small, result); // 当结果为0或6174时程序结束 sprintf(res, "%04d\0", result); if (!(strcmp(res, "0000\0") &amp;&amp; strcmp(res, "6174\0"))) break; &#125; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1018]]></title>
    <url>%2F2019%2F08%2F05%2FPAT%E4%B9%99%E7%BA%A71018%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805304020025344 题解刚开始做很懵逼，可能并不难吧，但就是感觉做出来的话代码会很不优雅，所以想了半天。 然后把这个题放了会儿，有了思路。现在第3个测试点没过，我又读了一遍代码，真的不是很懂哪里有错…… 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182// PAT BasicLevel 1018// https://pintia.cn/problem-sets/994805260223102976/problems/994805304020025344#include &lt;iostream&gt;using namespace std;void PK(char ,char);int aWin[3]=&#123;0,0,0&#125;;int bWin[3]=&#123;0,0,0&#125;;int equalCount=0;int main()&#123; // 交锋回合数 int n; cin &gt;&gt;n; // 获取交锋信息 char a,b; for(int i=0;i&lt;n;++i)&#123; cin &gt;&gt; a &gt;&gt; b; PK(a,b); &#125; // 输出结果 int aWinMaxCount=0,bWinMaxCount=0;//甲和乙三种出手方式的最大胜利次数 int aWinMaxIndex=0,bWinMaxIndex=0;//甲和乙胜利最多的出手方式下标 int aWinCount=0; for(int i=0;i&lt;3;i++)&#123; // 更新甲的胜利次数 aWinCount+=aWin[i]; // 更新甲胜利最多的攻击方式 if (aWin[i]&gt;aWinMaxCount)&#123; aWinMaxCount=aWin[i]; aWinMaxIndex=i; &#125; // 更新乙胜利最多的攻击方式 if (bWin[i] &gt; bWinMaxCount)&#123; bWinMaxCount = aWin[i]; bWinMaxIndex = i; &#125; &#125; // 输出结果 char choice[]="BCJ"; cout &lt;&lt; aWinCount &lt;&lt; ' '&lt;&lt; equalCount &lt;&lt; ' ' &lt;&lt; n - aWinCount - equalCount &lt;&lt; endl; cout &lt;&lt; n - aWinCount - equalCount &lt;&lt; ' ' &lt;&lt; equalCount &lt;&lt; ' ' &lt;&lt; aWinCount &lt;&lt; endl; cout &lt;&lt; choice[aWinMaxIndex] &lt;&lt; ' ' &lt;&lt; choice[bWinMaxIndex] &lt;&lt; endl; //system("pause"); return 0;&#125;void PK(char a, char b)&#123; if(a==b)&#123; equalCount++; &#125;else&#123; switch (a)&#123; case 'B': if(b=='C') aWin[0]++; else bWin[2]++; break; case 'C': if (b == 'B') bWin[0]++; else aWin[1]++; break; case 'J': if (b == 'C') bWin[1]++; else aWin[2]++; break; &#125; &#125;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1016]]></title>
    <url>%2F2019%2F08%2F05%2FPAT%E4%B9%99%E7%BA%A71016%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805306310115328 题解很简单，遍历两个字符串，找到da或db，然后不断更新pa和pb即可。 123456789101112131415161718192021222324252627282930313233343536// PAT BasicLevel 1016// https://pintia.cn/problem-sets/994805260223102976/problems/994805306310115328#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main()&#123; // 获取a、da、b和db string a,b; char da,db; cin &gt;&gt; a &gt;&gt;da &gt;&gt; b &gt;&gt; db; // 计算pa int pa=0; for(int i=0;i&lt;a.length();++i)&#123; if(a[i]==da)&#123; pa=pa*10+da-'0'; &#125; &#125; // 计算pb int pb = 0; for (int i = 0; i &lt; b.length(); ++i)&#123; if (b[i] == db)&#123; pb = pb * 10 + db - '0'; &#125; &#125; // 输出结果 cout &lt;&lt; pa+pb; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1015]]></title>
    <url>%2F2019%2F08%2F05%2FPAT%E4%B9%99%E7%BA%A71015%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805307551629312 题解思路比较简单，核心就是定义一个学生的排序规则：将考生分为4类（德和才分数都低于L的直接淘汰），先比较考生的类型，再比较分数或者准考证号，其中分数都是降序、准考证号是升序。 淘汰直接在获取考生信息时进行；分类由Student构造函数实现；考生排序由stuCmp实现。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384// PAT BasicLevel 1015// https://pintia.cn/problem-sets/994805260223102976/problems/994805307551629312#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;int N, L, H, M;class Student&#123;public: string id; int de; int cai; int type; Student(string id,int de,int cai)&#123; this-&gt;id=id;this-&gt;de=de;this-&gt;cai=cai; if (de &gt;= H &amp;&amp; cai &gt;= H)&#123;//才德全尽 this-&gt;type=3; &#125;else if(de&gt;=H&amp;&amp;cai&lt;H)&#123;//德胜才 this-&gt;type = 2; &#125;else if(de&lt;H&amp;&amp;cai&lt;H&amp;&amp;de&gt;=cai)&#123;//“才德兼亡”但尚有“德胜才”者 this-&gt;type = 1; &#125;else&#123;//达到最低线L this-&gt;type = 0; &#125; &#125; void print()&#123; cout &lt;&lt; id &lt;&lt; ' ' &lt;&lt; de &lt;&lt; ' ' &lt;&lt; cai &lt;&lt; endl; &#125;&#125;;bool stuCmp(Student&amp;, Student&amp;);int main()&#123; // 考生数 最低录取线 优先录取线 cin &gt;&gt; N &gt;&gt; L &gt;&gt; H; // 获取考生信息 vector&lt;Student&gt; stuVec; string id;int de;int cai; for(int i=0;i&lt;N;i++)&#123; cin &gt;&gt; id &gt;&gt; de &gt;&gt; cai; // 只存储cai和de不低于L的 if (de &gt;= L &amp;&amp; cai &gt;= L)&#123; stuVec.push_back(Student(id, de, cai)); M++; &#125; &#125; // 学生排序 sort(stuVec.begin(),stuVec.end(),stuCmp); // 输出结果 cout &lt;&lt; M &lt;&lt; endl; for (vector&lt;Student&gt;::iterator it = stuVec.begin(); it != stuVec.end(); ++it)&#123; it-&gt;print(); &#125; //system("pause"); return 0;&#125;bool stuCmp(Student &amp;s1, Student &amp;s2)&#123; if(s1.type==s2.type)&#123;// 同种type，比较总分 if (s1.cai + s1.de == s2.cai + s2.de)&#123; if(s1.de==s2.de)&#123; // id升序输出，其他都是降序输出的 return s1.id &lt; s2.id; &#125;else&#123; return s1.de&gt;s2.de; &#125; &#125;else&#123; return s1.cai + s1.de &gt; s2.cai + s2.de; &#125; &#125;else&#123; return s1.type&gt;s2.type; &#125;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1014]]></title>
    <url>%2F2019%2F08%2F05%2FPAT%E4%B9%99%E7%BA%A71014%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560 题解一（部分正确）这是我的方法，第2个测试点没有过，和正确的代码比较，目前没比较出来错误，可能是我map用错了？ 需要注意的点: 第一对是相同的大写字母A-G 第二对是相同的数字0-9和A-N 小时和分钟输出宽度为2，不足2位用零填充 不用map也行，可以用ASCII码和字符的对应关系 判断大小写字母、数字等函数C++已自带，不用自己写 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697// PAT BasicLevel 1014// https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;map&gt;using namespace std;bool isUpperCase(char);bool isLowerCase(char);bool isAlpha(char);bool isNumber(char);bool isDay(char);bool isHour(char);int main()&#123; // 获取四个字符串 string strs[4]; for(int i=0;i&lt;4;++i)&#123; cin &gt;&gt; strs[i]; &#125; // 字母与周几的映射 map&lt;char,string&gt; dayMap; dayMap['A'] = "MON";dayMap['B'] = "TUE";dayMap['C'] = "WED"; dayMap['D'] = "THU";dayMap['E'] = "FRI";dayMap['F'] = "SAT";dayMap['G'] = "SUN"; // 字母（或数字）与小时的映射 map&lt;int, int&gt; hourMap; hourMap[0] = 0;hourMap[1] = 1;hourMap[2] = 2;hourMap[3] = 3;hourMap[4] = 4; hourMap[5] = 5;hourMap[6] = 6;hourMap[7] = 7;hourMap[8] = 8;hourMap[9] = 9; hourMap['A'] = 10;hourMap['B'] = 11;hourMap['C'] = 12;hourMap['D'] = 13; hourMap['E'] = 14;hourMap['F'] = 15;hourMap['G'] = 16;hourMap['H'] = 17; hourMap['I'] = 18;hourMap['J'] = 19;hourMap['K'] = 20;hourMap['L'] = 21; hourMap['M'] = 22;hourMap['N'] = 23; // 遍历前两个字符串 int index; int minLen1 = strs[0].length() &lt; strs[1].length() ? strs[0].length() : strs[1].length(); for (int i = 0; i &lt; minLen1; ++i)&#123; if (strs[0][i] == strs[1][i] &amp;&amp; isDay(strs[1][i]))&#123; cout &lt;&lt; dayMap[strs[1][i]] &lt;&lt; ' '; index=i; break; &#125; &#125; for(int i=index+1;i&lt;minLen1;i++)&#123; if (strs[0][i] == strs[1][i] &amp;&amp; isHour(strs[1][i]))&#123; printf("%02d:", hourMap[strs[1][i]]); break; &#125; &#125; // 遍历后两个字符串 int minLen2 = strs[2].length() &lt; strs[3].length() ? strs[2].length() : strs[3].length(); for (int i = 0; i &lt; minLen2; ++i)&#123; if (strs[2][i] == strs[3][i] &amp;&amp; isAlpha(strs[3][i]))&#123; printf("%02d", i); break; &#125; &#125; //system("pause"); return 0;&#125;bool isDay(char c)&#123; // A-G return c &gt;= 'A' &amp;&amp; c &lt;= 'G';&#125;bool isHour(char c)&#123; // 0-9 A-N return isNumber(c) || (c &gt;= 'A' &amp;&amp; c &lt;= 'N');&#125;bool isUpperCase(char c)&#123; // A-Z return c &gt;= 'A' &amp;&amp; c &lt;= 'Z';&#125;bool isLowerCase(char c)&#123; // a-z return c &gt;= 'a' &amp;&amp; c &lt;= 'z';&#125;bool isAlpha(char c)&#123; // a-z A-Z return isLowerCase(c)||isUpperCase(c);&#125;bool isNumber(char c)&#123; // 0-9 return c &gt;= '0' &amp;&amp; c &lt;= '9';&#125; 题解二网上找的，和我看起来思路一样啊…… 参考链接：https://blog.csdn.net/supremebuct/article/details/83105861 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;iostream&gt; //9.16#include &lt;stdlib.h&gt;#include &lt;string&gt;#include &lt;cctype&gt;using namespace std;void deal(string ch1, string ch2);void deal1(string ch3, string ch4);int main()&#123; string ch1, ch2, ch3, ch4; cin &gt;&gt; ch1 &gt;&gt; ch2 &gt;&gt; ch3 &gt;&gt; ch4; deal(ch1, ch2); deal1(ch3, ch4); return 0;&#125;void deal(string ch1, string ch2)&#123; string day[] = &#123;"MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"&#125;; int num, num1, i = 0; while (i &lt; ch1.length() &amp;&amp; i &lt; ch2.length()) &#123; if (ch1[i] == ch2[i] &amp;&amp; (ch1[i] &gt;= 'A' &amp;&amp; ch1[i] &lt;= 'G')) //一开始没有设定范围只是判断了其是否是大写，导致有的例子通不过 &#123; num1 = ch1[i] - 'A'; break; &#125; i++; &#125; i++; cout &lt;&lt; day[num1] &lt;&lt; ' '; int num2; while (i &lt; ch1.length() &amp;&amp; i &lt; ch2.length()) &#123; if (ch1[i] == ch2[i]) &#123; if (isdigit(ch1[i])) &#123; num2 = ch1[i] - '0'; break; &#125; else if (ch1[i] &gt;= 'A' &amp;&amp; ch1[i] &lt;= 'N') //一开始没有设定范围只是判断了其是否是大写，导致有的例子通不过 &#123; num2 = 10 + (ch1[i] - 'A'); break; &#125; &#125; i++; &#125; printf("%02d:", num2);&#125;void deal1(string ch3, string ch4)&#123; int i = 0; int num3; while (i &lt; ch3.length() &amp;&amp; i &lt; ch4.length()) &#123; if (ch3[i] == ch4[i] &amp;&amp; isalpha(ch3[i])) &#123; num3 = i; break; &#125; i++; &#125; printf("%02d", num3);&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1013]]></title>
    <url>%2F2019%2F08%2F05%2FPAT%E4%B9%99%E7%BA%A71013%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805309963354112 题解一从第一个素数开始找起，输出$P_M$至$P_N$即可 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960// PAT BasicLevel 1013// https://pintia.cn/problem-sets/994805260223102976/problems/994805309963354112#include &lt;iostream&gt;using namespace std;bool isPrime(int num);int main()&#123; // 获取用户输入 int n,m; cin &gt;&gt; m &gt;&gt; n; // 素数数量 int count = 0; // 遍历判断是否为素数 for (int num = 1;count&lt;n;num+=1)&#123; // 是素数 if(isPrime(num))&#123; // 素数数量更新 count++; // 判断是否输出 if(count&gt;=m)&#123; // 输出素数 cout &lt;&lt; num; if(count&lt;n)&#123; // 输出空格或者换行 if ((count - m + 1) % 10 == 0)&#123; //每行的最后一个数字 cout &lt;&lt; endl; &#125;else&#123; // cout &lt;&lt; ' '; &#125; &#125; &#125; &#125; &#125; //system("pause"); return 0;&#125;// 判断是否为素数bool isPrime(int num)&#123; // 1不是素数 if (num &lt;= 1) return false; // 用这种方法找素数找的比较快，相当于i&lt;sqrt(num)，但这样精度可能损失，导致错误 for (int i = 2; i * i &lt;= num; i++) &#123; if (num % i == 0) return false; &#125; return true;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1012]]></title>
    <url>%2F2019%2F08%2F04%2FPAT%E4%B9%99%E7%BA%A71012%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840 题解就比较简单，判断每个数字是哪种情况，然后进行相应的计算即可。 下面的代码中其实数组是不必要的，每取一个数字就可以直接进行相应计算。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990// PAT BasicLevel 1012// https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840#include &lt;iostream&gt;using namespace std;int main()&#123; // 数字个数 int n; cin &gt;&gt; n; // 获取数字 int* numArr=new int[n]; for(int i=0;i&lt;n;++i)&#123; cin &gt;&gt; numArr[i]; &#125; // 遍历数组，计算A1至A5 int a1=0,a1Count=0; int a2=0,flag=1,a2Count=0; int a3=0,a3Count=0; double a4Sum=0,a4Count=0; int a5=0,a5Count=0; for(int i=0;i&lt;n;++i)&#123; switch(numArr[i]%5)&#123; case 0: if(numArr[i]%2==0)&#123; a1+=numArr[i]; a1Count++; &#125; break; case 1: a2+=flag*numArr[i]; flag=-flag; a2Count++; break; case 2: a3++; a3Count++; break; case 3: a4Sum+=numArr[i]; a4Count++; break; case 4: if(numArr[i]&gt;a5)&#123; a5=numArr[i]; a5Count++; &#125; break; &#125; &#125; // 输出A1至A5 if(a1Count&gt;0)&#123; cout &lt;&lt; a1 &lt;&lt; ' '; &#125;else&#123; cout &lt;&lt;"N "; &#125; if(a2Count&gt;0)&#123; cout &lt;&lt; a2 &lt;&lt; ' '; &#125;else&#123; cout &lt;&lt; "N "; &#125; if(a3Count&gt;0)&#123; cout &lt;&lt; a3 &lt;&lt; ' '; &#125;else&#123; cout &lt;&lt; "N "; &#125; if(a4Count&gt;0)&#123; printf("%.1lf ", a4Sum / a4Count); &#125;else&#123; cout &lt;&lt; "N "; &#125; if (a5Count &gt; 0)&#123; cout &lt;&lt; a5; &#125; else&#123; cout &lt;&lt; 'N'; &#125; delete[] numArr; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1011]]></title>
    <url>%2F2019%2F08%2F04%2FPAT%E4%B9%99%E7%BA%A71011%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805312417021952 题解很明显这题是考数值范围的，int占4个字节，范围正好是$ [−2^{31},2^{31}]$。 两个大的int相加会溢出，而long只保证不比int的位数少，所以使用long long较好。 1234567891011121314151617181920212223242526// PAT BasicLevel 1011// https://pintia.cn/problem-sets/994805260223102976/problems/994805312417021952#include &lt;iostream&gt;using namespace std;int main()&#123; // 获取测试用例个数 int t; cin &gt;&gt;t; // 三个整数 long long a,b,c; for(int i=1;i&lt;=t;i++)&#123; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; cout &lt;&lt; "Case #"&lt;&lt; i &lt;&lt;": " &lt;&lt; (a + b &gt; c ? "true" : "false")&lt;&lt; endl; &#125; system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1010]]></title>
    <url>%2F2019%2F08%2F04%2FPAT%E4%B9%99%E7%BA%A71010%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584 我有点看不懂题目……，在网上找题解后，经测试推导题意发现： 如果输入的式子（一项或多项均可）中的常数是0时，输入是应该有0 0的。 而导数是多项时，如果最后一项是0，是不用输出0 0的；如果导数是一项时.. 反正极其奇怪，反正是5个测试点都过了，主要我不是很懂题目的要求。 我的方法（题解1）和网上的一个方法（题解2）也有可能是错的，因为当输入是1 1时，程序都会继续等待输入，而非终止。或者我没找到正确的题解。 题解一123456789101112131415161718192021222324252627282930313233343536373839404142434445// PAT BasicLevel 1010// https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584#include &lt;iostream&gt;using namespace std;int main()&#123; // 系数 int coefficient; // 指数 int exponent; // 获取第一项 cin &gt;&gt; coefficient &gt;&gt; exponent; // exponent==0说明是最后一项，即只有一项 if (exponent==0)&#123; cout &lt;&lt; "0 0"; &#125; // 多于一项 else&#123; // 输出第一项的导数 cout &lt;&lt; coefficient * exponent &lt;&lt; ' ' &lt;&lt; exponent - 1 ; // 输出后几项的导数 while (cin &gt;&gt; coefficient &gt;&gt; exponent) &#123; // 是最后一项 if (exponent == 0) &#123; break; &#125; // 不是最后一项 else &#123; cout &lt;&lt; ' ' &lt;&lt; coefficient * exponent &lt;&lt; ' ' &lt;&lt; exponent - 1; &#125; &#125; &#125; system("pause"); return 0;&#125; 题解二参考链接：https://blog.csdn.net/song68753/article/details/81710228 123456789101112131415161718192021#include &lt;iostream&gt;using namespace std;int main()&#123; int a, b; int x = 1; while (cin &gt;&gt; a &gt;&gt; b) //输入 &#123; if (b == 0) break; //舍弃 if (!x) cout &lt;&lt; " "; else x = 0; cout &lt;&lt; a * b &lt;&lt; " " &lt;&lt; b - 1; &#125; if (x) cout &lt;&lt; "0 0"; system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://www.cnblogs.com/chouxianyu/ 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1009]]></title>
    <url>%2F2019%2F08%2F04%2FPAT%E4%B9%99%E7%BA%A71009%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808 题解一我的方法如下： 将这一行字符串格式看做：第一个单词( 单词)( 单词)( 单词) 利用循环输出所有( 单词) 输出第一个单词 12345678910111213141516171819202122232425262728// PAT BasicLevel 1009// https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main()&#123; // 获取用户输入的一行 string str; getline(cin,str); // 可读取空格，遇到换行停止，并不读取换行 // 将这一行字符串格式看做：第一个单词( 单词)( 单词)( 单词) // 从右边找空格然后一直输出( 单词) int indexOfSpace; while ((indexOfSpace = str.find_last_of(" ")) != str.npos) //length()和size()是一样的 &#123; cout &lt;&lt; str.substr(indexOfSpace + 1, str.length()) &lt;&lt; ' '; str=str.substr(0,indexOfSpace); &#125; // 输出第一个单词 cout &lt;&lt; str.substr(0,str.length()); //system("pause"); return 0;&#125; 题解二这个方法也挺不错的，我很喜欢。 利用到了栈先进后出的特点，以及cin遇到空格和回车停止，不读取换行的特点。 参考链接：https://www.cnblogs.com/cdp1591652208/p/7138046.html 1234567891011121314151617181920212223242526272829303132333435// PAT BasicLevel 1009// https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;stack&gt;using namespace std;int main()&#123; // 保存所有单词 stack&lt;string&gt; strs; // 保存一个单词 string str; // 读取所有单词 while(cin&gt;&gt; str)&#123; strs.push(str); if(getchar()=='\n') break; &#125; // 输出所有单词 cout &lt;&lt; strs.top(); strs.pop(); while (!strs.empty())&#123; cout &lt;&lt; ' ' &lt;&lt; strs.top(); strs.pop(); &#125; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1008]]></title>
    <url>%2F2019%2F08%2F04%2FPAT%E4%B9%99%E7%BA%A71008%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808 查了查网上的题解，情况如下： 一种方法是和我（题解一）一样的 这个方法真的奇葩，并不交换数组元素位置，只是根据n和m改变输出顺序，我个人觉得不可取 参考链接：https://blog.csdn.net/qq_35283188/article/details/77370798 这种方法应该是最符合题目要求的，三次逆置法（题解二），感觉很像上学期算法设计与分析考试里的一道题。 参考链接：https://www.cnblogs.com/cdp1591652208/p/7161684.html 还有一个方法，看起来挺玄乎的，没看懂就没怎么看 参考链接：https://blog.csdn.net/qq_22194315/article/details/52625679 题解一我这个方法应该是移了n+m次，看起来只用了一个数组，其实也是用了两个数组吧……惭愧惭愧 12345678910111213141516171819202122232425262728293031323334353637383940414243// PAT BasicLevel 1008// https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808#include &lt;iostream&gt;using namespace std;int main()&#123; // 获取用户输入的n和m以及n个整数 int n,m; int arr[200]; cin &gt;&gt; n &gt;&gt; m; for(int i=0;i&lt;n;i++)&#123; cin &gt;&gt; arr[i]; &#125; // m==0则不用移动 if(m&gt;0)&#123; // 假如有10个数，右移13位其实相当于13%10=3位。 // 所以m一定小于n，所以把数组大小定义为200 m = m % n; // 整体右移m位 for(int i=n-1;i&gt;=0;i--)&#123; arr[i+m]=arr[i]; &#125; // 把最右侧的m个数字循环右移到左侧 for (int i = n-1; i &lt; n + m;i++)&#123; arr[i%n]=arr[i]; &#125; &#125; // 输出结果 cout &lt;&lt; arr[0]; for(int i=1;i&lt;n;i++)&#123; cout &lt;&lt; ' ' &lt;&lt; arr[i]; &#125; //system("pause"); return 0;&#125; 题解二这道题的参考链接里说这是链表，讲错了吧，这儿哪有链表……核心在于三次逆置 但时间（3ms）与内存占用（400KB左右）和题解一差不多，可能测试用例输入规模不够大吧。 1234567891011121314151617181920212223242526272829303132333435363738394041// PAT BasicLevel 1008// httarrs://arrintia.cn/arrroblem-sets/994805260223102976/arrroblems/994805316250615808#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main()&#123; // 获取用户输入的n和m以及n个整数 int n,m; cin &gt;&gt; n &gt;&gt; m; int* arr=new int[n]; for(int i=0;i&lt;n;i++)&#123; cin &gt;&gt; arr[i]; &#125; // m==0则不用移动 if(m&gt;0)&#123; // 假如有10个数，右移13位其实相当于13%10=3位。 // 所以m一定小于n，所以把数组大小定义为200 m = m % n; // 三次逆置 reverse(arr, arr + n - m); reverse(arr + n - m, arr + n); reverse(arr, arr + n); &#125; // 输出结果 cout &lt;&lt; arr[0]; for(int i=1;i&lt;n;i++)&#123; cout &lt;&lt; ' ' &lt;&lt; arr[i]; &#125; //system("pause"); delete[] arr; return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1007]]></title>
    <url>%2F2019%2F08%2F04%2FPAT%E4%B9%99%E7%BA%A71007%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805318855278592 题解一根据题意，素数对有两个特点：差为2、相邻，所以我们可以从3开始枚举每一对数字，然后再判断它们两个是不是素数。 这道题刚开始还是有一个点超时（TLE）了，主要原因有三点： 枚举方法太low，没有利用偶数不可能是素数这一性质。（题解一已处理） 我刚开始是枚举的是3,5、4,6、……；后来改成了3,5、5,7、…… 判断素数方法太low，用sqrt较好，当然也有更快的方法。（题解一已处理） for循环中可能重复判断5是不是素数（让我想起来了动态规划..…），增加了时间复杂度（题解一未处理，在题解二中处理） 在网上查题解发现我在判断素数的时候也忘记了处理1不是素数和2是素数的情况。 1234567891011121314151617181920212223242526272829303132333435363738394041424344// PAT BasicLevel 1007// https://pintia.cn/problem-sets/994805260223102976/problems/994805317546655744#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;bool isPrime(int num);int main()&#123; // 获取用户输入的数字 int N=0; cin &gt;&gt; N; // 判断素数对的个数 int count=0; for(int i=3;i+2&lt;=N;i+=2)&#123; // 偶数一定不是素数 if(isPrime(i)&amp;&amp;isPrime(i+2))&#123; count++; &#125; &#125; // 输出结果 cout &lt;&lt; count; //system("pause"); return 0;&#125;// 判断是否为素数bool isPrime(int num)&#123; // 并没有处理num为2的情况 // 用这种方法找素数找的比较快，相当于i&lt;sqrt(num)，但这样精度可能损失，导致错误 for (int i = 2; i*i &lt;= num; i++)&#123; if (num%i==0) return false; &#125; // 边界条件，1不是素数 return num == 1?false:true;&#125; 题解二针对题解一中重复判断5是否为素数的问题，我们至少有两种方法解决： 建一个数组存储所有素数 用一个变量存储上一个素数且不断更新 网上搜到的题解有方法一，也有方法二，这里采用后者。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859// PAT BasicLevel 1007// https://pintia.cn/problem-sets/994805260223102976/problems/994805317546655744#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;bool isPrime(int num);int main()&#123; // 获取用户输入的数字 int N=0; cin &gt;&gt; N; // 素数对的个数 int count=0; // 上一个素数 int lastPrime=2; // 计算素数对个数 for(int i=3;i&lt;=N;i+=2)&#123; // 偶数除了2一定不是素数 // 找到新的素数 if(isPrime(i))&#123; // 判断是否为素数对 if(i-lastPrime==2)&#123; //两个素数之差为2 count++; // 计数 &#125; // 更新上一个素数 lastPrime=i; &#125; &#125; // 输出结果 cout &lt;&lt; count; //system("pause"); return 0;&#125;// 判断是否为素数bool isPrime(int num)&#123; // 1不是素数 if(num&lt;=1) return false; // 用这种方法找素数找的比较快，相当于i&lt;sqrt(num)，但这样精度可能损失，导致错误 for (int i = 2; i*i &lt;= num; i++)&#123; if (num%i==0) return false; &#125; return true; &#125; 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1006]]></title>
    <url>%2F2019%2F08%2F03%2FPAT%E4%B9%99%E7%BA%A71006%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805318855278592 题解一这道题其实很简单，获取用户输入后，判断数字的位数，根据位数的不同，再获取百位、十位、个位的数字，然后据其进行字符串拼接，最后输出。 啧，太久没有写C++代码了，下面代码里的numArr可以用string类型的，而且你看完题解二会觉得我是不是傻了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869// PAT BasicLevel 1006// https://pintia.cn/problem-sets/994805260223102976/problems/994805318855278592#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int getbitnum(int num);int main()&#123; // 获取用户输入的数字 int num=0; cin &gt;&gt;num; // 获取数字位数 int numOfBits=getbitnum(num); // 存储输出内容 string str=""; // 十个数字，C++的字符串不能直接加数字进行拼接 char numArr[9] = &#123;'1', '2', '3', '4', '5', '6', '7', '8', '9'&#125;; // 生成输出内容所用的中间变量 switch (numOfBits) &#123; case 3:&#123; int bai = num / 100; for (int i = 0; i &lt; bai; i++) &#123; str += "B"; &#125; num %= 100; &#125; case 2:&#123; int shi = num / 10; for (int i = 0; i &lt; shi; i++) &#123; str += "S"; &#125; num %= 10; &#125; case 1: for(int i=0;i&lt;num;i++)&#123; str +=numArr[i]; &#125; &#125; // 输出结果 cout &lt;&lt; str; return 0;&#125;// 获取数字的位数int getbitnum(int num)&#123; // 默认一位数 int numOfBits=1; if(num&gt;99)&#123; // 三位数 numOfBits=3; &#125;else if(num&gt;9)&#123; //两位数 numOfBits=2; &#125; return numOfBits;&#125; 题解二这是网上搜到的题解，比题解一好多了。我傻了我傻了。 123456789101112131415161718192021222324252627282930313233343536// PAT BasicLevel 1006// https://pintia.cn/problem-sets/994805260223102976/problems/994805318855278592#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main()&#123; // 获取用户输入的数字 int num=0; cin &gt;&gt;num; // 得到每位数字 int bai = num / 100; int shi = num % 100 / 10; int ge = num % 10; // 输出结果 for (int i = 0; i &lt; bai; i++)&#123; cout &lt;&lt; 'B'; &#125; for (int i = 0; i &lt; shi; i++) &#123; cout &lt;&lt; 'S'; &#125; for(int i=1;i&lt;=ge;i++)&#123; cout &lt;&lt; i; &#125; //system("pause"); return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1004]]></title>
    <url>%2F2019%2F07%2F22%2FPAT%E4%B9%99%E7%BA%A71004%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805321640296448 题解 获取用户输入 排序 输出 代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061// PAT BasicLevel T1004// https://pintia.cn/problem-sets/994805260223102976/problems/994805321640296448#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;/** * 学生类 */struct Student&#123; // 姓名 string name; // 学号 string id; // 分数 int score;&#125;;/** * 比较两个学生 */bool cmp(Student &amp;s1, Student &amp;s2);int main()&#123; // 学生个数 int numOfStu = 0; cin &gt;&gt; numOfStu; // 学生数组 vector&lt;Student&gt; students; students.resize(numOfStu); // 获取学生信息 for (int i = 0; i &lt; numOfStu; i++) &#123; cin &gt;&gt; students[i].name; cin &gt;&gt; students[i].id; cin &gt;&gt; students[i].score; &#125; // 把学生排序 sort(students.begin(), students.end(), cmp); // 输出成绩最好和成绩最差的学生的名字和学号 cout &lt;&lt; students.back().name &lt;&lt; " " &lt;&lt; students.back().id &lt;&lt; endl; cout &lt;&lt; students.front().name &lt;&lt; " " &lt;&lt; students.front().id &lt;&lt; endl; return 0;&#125;/** * 比较两个学生 */bool cmp(Student &amp;s1, Student &amp;s2)&#123; return s1.score &lt; s2.score;&#125; 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mingw控制台中文乱码]]></title>
    <url>%2F2019%2F07%2F22%2Fmingw%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%2F</url>
    <content type="text"><![CDATA[乱码原因直接先用一段话讲乱码原因，看不懂老老实实就往下看吧 其实我用Sublime或者VSCode等编辑器写代码出现的控制台中文乱码问题是编译器mingw输出的数据使用的是UTF-8编码，而控制台用了GBK编码来解析它。 其实编码只要统一用UTF8或者GBK都行，但用了错误的编码去解析文件就会出错。 问题来源如果我们写轻量代码（比如写算法题）也用VS之类的IDE，就太不划算了；虽然也有Codeblocks、Dev C++这样的小一点的IDE，但用起来还是可以发现让人很不爽的缺点。 之前尝试用VS Code写C++代码，挺不错的，好看方便。但问题就是难配置，最大的问题是控制台中文乱码，我搞了好久都没搞好，今天终于解决了。 在网上找到一段话是这么讲的： Windows(中文)默认的字符集是Windows-936(GBK)，mingw的内部是GCC，而GCC编译器默认编译的时候是按照UTF-8解析和输出的，当未指定字符集时一律当作UTF-8进行处理，于是造成乱码。 根据上边这段话，我有点灵感，但还是有疑问，见下。 问题分析我电脑的CMD编码设置的是UTF-8，代码文件的编码也是UTF-8，如果mingw默认按UTF-8处理的话，可以看到这里用的编码全都是UTF-8，那应该不会出现乱码的。 但我们确实看到了乱码啊！？ 当我去看我的注册表（见下图），发现代码链接、编译后生成的可执行文件有一个单独的注册表，这似乎说明我们运行的可执行文件并不是我们口中的那个CMD（按Win+R、cmd打开的那个CMD）。所以@roadwide整理的网上的改CMD编码啊什么的，可能搞错了问题的方向，不过也算一个方法吧，但似乎对我不适用。我之前也是搞错了方向。 如下图所示，我们运行的可执行文件，也就是那个弹出来的控制台，它的编码是GBK。现在我们应该知道乱码的原因了。 整个过程是这样的： 我们代码的编码是UTF-8 把UTF-8编码的代码交给mingw，它也默认当做UTF-8处理（目前为止这是正确的） mingw处理后生成的数据还是UTF-8编码（目前为止还是正确的） 把mingw处理后的数据（UTF-8编码）给cmd（目前为止也是正确的） cmd按GBK编码处理它（UTF-8），这时出现错误，所以出现乱码 解决方案我们可以修改mingw的输出，让它在编译时使用GBK编码输出，然后再让CMD去显示。 处理中文乱码只需要设置两个（核心只有一个）编译参数，即在tasks.json中tasks中的args中添加-fexec-charset=GBK和-finput-charset=UTF-8，下边tasks.json中的第14、15行。 这个解决方案中代码文件的编码是UTF-8，控制台编码是GBK，令mingw实现编码转换。 下面的.vscode配置是我在网上找到的比较新的VS Code配置，可以作为参考，具体不做解释，想了解可以去看文章末的参考网址。 tasks.json1234567891011121314151617181920212223242526272829303132333435// 用来编译&#123; // See https://go.microsoft.com/fwlink/?LinkId=733558 // for the documentation about the tasks.json format "version": "2.0.0", "tasks": [&#123; "label": "Build", // 任务的名字叫Build（编译），注意是大小写区分的，等会在launch中调用这个名字 "type": "shell", // 任务执行的是shell命令 "command": "g++", // 命令是g++ "args": [ //参数 "-g", // 调试 // "-fexec-charset=GBK", // 处理mingw中文编码问题 "-finput-charset=UTF-8",// 处理mingw中文编码问题 // "$&#123;file&#125;", //当前文件路径，包括所在目录绝对路径和文件名 "-o", //对象名，不进行编译优化 "$&#123;fileDirname&#125;/exes/$&#123;fileBasenameNoExtension&#125;.exe", //当前目录下exes文件夹下的exe文件，exe文件名为 当前文件名（去掉扩展名）.exe ], // 所以以上部分，就是在shell中执行下面这行语句（以我E盘中一个main.cpp为例） // g++ -g -fexec-charset=GBK -finput-charset=UTF-8 e:\Study\Programming\Code\Algo\PTABasicLevelCPP\main.cpp -o e:\Study\Programming\Code\Algo\PTABasicLevelCPP/exes/main.exe "group": &#123; "kind": "build", "isDefault": true // 任务分组，tasks是个数组，意味着可以执行多个task // 在build组的任务们，可以通过在Command Palette(F1) 输入run build task来运行 // 当然，如果任务分组是test，你就可以用run test task来运行 &#125;, "problemMatcher": [ "$gcc" // 使用gcc捕获错误 ], &#125;]&#125; -fexec-charset=GBK是令mingw按GBK编码生成exe文件。 -finput-charset=UTF-8是令mingw按UTF-8编码处理。（经测试这个参数可以不设置） launch.json123456789101112131415161718192021222324252627282930313233&#123; "version": "0.2.0", "configurations": [ &#123; "name": "C++ Launch (GDB)", // 调试时程序员看到的名字 "preLaunchTask": "Build", // launch之前会运行的任务，这个名字一定要跟tasks.json中的任务名一致 "type": "cppdbg", // 经测试，不可删除 "request": "launch", // 经测试，不可删除 "program": "$&#123;fileDirname&#125;/exes/$&#123;fileBasenameNoExtension&#125;.exe", //运行当前打开文件的目录下exes文件夹中名字和当前文件相同，但扩展名为exe的程序 "args": [], // 运行程序是默认是没有参数的 "stopAtEntry": false, // 选为true则会在打开控制台后停滞，暂时不执行程序 "cwd": "$&#123;workspaceFolder&#125;",// 当前工作路径：当前文件所在的工作空间 "environment": [], "externalConsole": true, // 是否使用外部控制台， "MIMode": "gdb", "miDebuggerPath": "D:\\WorkingSoftware\\MinGW\\bin\\gdb.exe", //调试器路径 "setupCommands": [&#123; "description": "Enable pretty-printing for gdb", "text": "-enable-pretty-printing", "ignoreFailures": true &#125;] &#125;]&#125;// https://code.visualstudio.com/Docs/editor/debugging#_launch-configurations// author: huihut// Available variables which can be used inside of strings.// $&#123;workspaceRoot&#125;: the root folder of the team // $&#123;file&#125;: the current opened file // $&#123;fileBasename&#125;: the current opened file's basename // $&#123;fileDirname&#125;: the current opened file's dirname // $&#123;fileExtname&#125;: the current opened file's extension // $&#123;cwd&#125;: the current working directory of the spawned process 参考链接中文乱码参考1 中文乱码参考2 VS Code配置参考 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Bug</tag>
        <tag>VSCode</tag>
        <tag>mingw</tag>
        <tag>中文乱码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1003]]></title>
    <url>%2F2019%2F07%2F22%2FPAT%E4%B9%99%E7%BA%A71003%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805323154440192 题解1这个是我自己的方法，..…刚开始做题，还啥都不会啊。 只能过4个Case，Case5过不了，得19分，还不知道哪里错了（让强迫症很难受啊）。 第1个条件很简单，判断无非法字符即可。 第2个条件，是xPATx，易得：当字符串中有PAT时，PAT左右两边字符串应相等。 第3个条件，它依赖于前两个条件，特别是第2个，所以可以采取递归的形式。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101import java.util.Scanner;/** * PTABasicLevel 1003 * https://pintia.cn/problem-sets/994805260223102976/problems/994805323154440192 */public class Main &#123; public static void main(String[] args) &#123; // 打开scanner Scanner scanner=new Scanner(System.in); // 用户输入的字符串 String str=null; // 获取测试组数 int T=scanner.nextInt(); // T组测试 while( T-- &gt; 1)&#123; // 获取用户输入的字符串 str=scanner.next(); // 输出结果 System.out.println(isValid(str)?"YES":"NO"); &#125; // 获取用户输入的字符串 str=scanner.next(); // 输出结果 System.out.print(isValid(str)?"YES":"NO"); // 关闭scanner scanner.close(); &#125; /** * 判断一个字符串是否有效 * @param str 一个字符串 * @return 结果 */ public static boolean isValid(String str)&#123; // 字符串长度 int strLength=str.length(); // 字符串中P和T首次出现的位置 int indexOfP=-1; int indexOfT=-1; // 字符串中P和T的数量 int numOfP=0; int numOfT=0; // 字符串应仅由P、A、T组成，且P和T各有一个，判断过程中记录P和T的位置和个数 for(int i=0;i&lt;strLength;i++)&#123; // 存在PAT以外的字母，字符串就是错误的 if(str.charAt(i)=='P')&#123; indexOfP=i; numOfP++; &#125;else if(str.charAt(i)=='T')&#123; indexOfT=i; numOfT++; &#125;else if(str.charAt(i)!='A')&#123; return false; &#125; &#125; // P或T不是1个，或者是P和T的位置有问题（应该是PxT，x是正整数个A拼成的字符串） if(numOfP!=1||numOfT!=1||indexOfT-indexOfP&lt;2)&#123; return false; &#125; // 在这一行已可以确定字符串只由1个P和一个T和一些A组成，且P和T位置正确 // 条件2 // P和T中间只有1个A if(indexOfT-indexOfP==2)&#123; String x=str.substring(0,indexOfP); // PAT左右是相等的x if(indexOfT+1==str.lastIndexOf(x))&#123; return true; &#125; // PAT左右不相等 else&#123; return false; &#125; &#125; // 条件3 else&#123; String a=str.substring(0,indexOfP); int indexOfRightA=str.lastIndexOf(a); // 剥掉Pb和T中间的A，以及Tc后的a String newStr=str.substring(0,indexOfT-1)+str.substring(indexOfT,indexOfRightA); return isValid(newStr); &#125; &#125;&#125; 题解2在网上找到的，其实和我的一样，都是找规律嘛，不过找到的规律不同。 aPbTc中a和b只能是若干个A或空字符串，且应满足length(a)*length(b)==length(c)&amp;&amp;length(b)&gt;1。 代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273import java.util.Scanner;/** * PTABasicLevel 1003 * https://pintia.cn/problem-sets/994805260223102976/problems/994805323154440192 */public class T1003 &#123; public static void main(String[] args) &#123; // 打开scanner Scanner scanner=new Scanner(System.in); // 用户输入的字符串 String str=null; // 获取测试组数 int T=scanner.nextInt(); // T组测试 while( T-- &gt; 0)&#123; // 获取用户输入的字符串 str=scanner.next(); // 输出结果 System.out.println(isValid(str)?"YES":"NO"); &#125; // 关闭scanner scanner.close(); &#125; /** * 判断一个字符串是否有效 * @param str 一个字符串 * @return 结果 */ public static boolean isValid(String str)&#123; // 字符串长度 int strLength=str.length(); // 字符串中P和T首次出现的位置 int indexOfP=-1; int indexOfT=-1; // 字符串中P和T的数量 int numOfP=0; int numOfT=0; // 字符串应仅由P、A、T组成，且P和T各有一个，判断过程中记录P和T的位置和个数 for(int i=0;i&lt;strLength;i++)&#123; // 存在PAT以外的字母，字符串就是错误的 if(str.charAt(i)=='P')&#123; indexOfP=i; numOfP++; &#125;else if(str.charAt(i)=='T')&#123; indexOfT=i; numOfT++; &#125;else if(str.charAt(i)!='A')&#123; return false; &#125; &#125; //在这一行，已知字符串仅由P、A、T组成 if(numOfP==1&amp;&amp;numOfT==1&amp;&amp;indexOfT-indexOfP&gt;1&amp;&amp;indexOfP*(indexOfT-indexOfP-1)==strLength-indexOfT-1)&#123; return true; &#125; else&#123; return false; &#125; &#125;&#125; 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1002]]></title>
    <url>%2F2019%2F07%2F22%2FPAT%E4%B9%99%E7%BA%A71002%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805324509200384 题解先以字符串形式读取用户输入的数字，然后计算各位之和，再把这个和的每一位以拼音形式输出。 代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import java.util.Scanner;/** * PTABasicLevel 1002 * https://pintia.cn/problem-sets/994805260223102976/problems/994805324509200384 */public class T1002 &#123; public static void main(String[] args) &#123; //保存自然数 String numStr; //用字符串保存用户输入的数字 Scanner scanner=new Scanner(System.in); numStr=scanner.next(); //计算每位之和并输出对应汉语 printSum(calcSum(numStr)); //关闭scanner scanner.close(); &#125; /** * 计算字符串形式的数字的各位之和 * @param str 用户输入的数字的字符串形式 * @return int类型，用户输入的数字各位之和 */ public static int calcSum(String str) &#123; //保存各位数字之和 int sum = 0; //计算各位数字之和 int length = str.length(); for (int i = 0; i &lt; length; ++i) &#123; sum += str.charAt(i) - '0'; &#125; //返回各位数字之和 return sum; &#125; /** * 输出一个数字对应的汉语 * @param sum 用户输入的各位数字之和 * 输出这个和对应的汉语 */ public static void printSum(int sum) &#123; //拼音 String[] chineseArr = &#123;"ling", "yi", "er", "san", "si", "wu", "liu", "qi", "ba", "jiu"&#125;; //int类型的sum转成字符串 String sumStr=Integer.toString(sum); //输出 System.out.print(chineseArr[sumStr.charAt(0)-'0']); int length=sumStr.length(); for(int i=1;i&lt;length;i++)&#123; System.out.print(" "+chineseArr[sumStr.charAt(i)-'0']); &#125; &#125;&#125; 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT乙级1001]]></title>
    <url>%2F2019%2F07%2F22%2FPAT%E4%B9%99%E7%BA%A71001%2F</url>
    <content type="text"><![CDATA[题目链接https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528 题解emm就很简单了，考简单的循环和分支。 代码如下： 123456789101112131415161718192021222324252627282930313233343536//PTABasicLevel 1001//https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528#include&lt;iostream&gt;using namespace std;int main()&#123; //存储正整数n int n=0; //存储步数 int count=0; //获取输入 cin&gt;&gt; n; //计算步数 while(n!=1)&#123; //n是奇数 if(n%2==1)&#123; n=(3*n+1)/2; &#125; //n是偶数 else&#123; n=n/2; &#125; //步数加一 count++; &#125; //输出步数 cout &lt;&lt; count; cout &lt;&lt; "你好"; return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的大学（上）]]></title>
    <url>%2F2019%2F07%2F21%2F%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6%EF%BC%88%E4%B8%8A%EF%BC%89%2F</url>
    <content type="text"><![CDATA[现在已是大二暑假，大学的前两年也快要结束了，在这里稍作总结。 大一上事情印象里是这样的： 工作上，从开学开始，做班长前3个月特别忙，之后好像就没什么事情了吧，已经忘了具体情况，但我还记得个团展。刚去学校的前3天，白天跑路多，水喝得少，上火还是怎么着，一天晚上走着走着就流了鼻血。 学习上，感觉心理还是挺不错的，完全无欲无求，觉得正常地学习就行了，该干嘛干嘛，没想到结果还不错。有种想夸夸自己的感觉，你还不赖嘛你。虽然现在看看也就一般吧。 刚来大学啥都不懂，也没什么坚定的目标，想学就学，想玩就玩，闲了还打打游戏、打打球、练个字、还早起读了几天英语单词，这样的生活其实挺开心的。 大一的日记和我的印象也大概是一致的。 思想当时大一嘛，带着那种对大学的美好憧憬，心理状态还是很年轻的。 现在看我当时的一些想法和写的日记，就觉得自己完全是个小孩儿，喜怒哀乐都挺小孩儿的。 在工作上，自己经常觉得很奇怪，自己怎么和大多人不一样呢？或者说大多人怎么是这样的呢？不过后来在慢慢接受人与人之间的不同了，会觉得每个人都是独立的，成长经历等等会有多么的不同，所以没必要强求。 寒假好像就每天学点PPT、学点摄影、学点C++，现在PPT和摄影全忘光光了哈哈。 大一下事情印象里，这个学期挺闲的，也是没什么目标，然后就快快乐乐地学习和锻炼。虽也做了点错事，但感觉还好，错就错嘛，影响不大。 学习上，挺快乐的。还能预习预习，感觉真有意思，最后成绩也还不错。也从老师那里接触了项目，课外会忙一些这个项目。 学生工作上，没啥事儿吧，都忘了，反正不算忙。 挺好的是，当时闲，希望自己大学能坚持点东西，然后就想着跑步。它不仅对身体好，还减肥。本来想的是按时间跑，跑个四五十分钟。可能当时身体好吧，跑着跑着就变成十公里竞速了。 思想现在回头看的话，我觉得这个学期是我自我内心塑造比较重要的一个阶段，但不知道是怎么塑造起来的。 因为我感觉不是在大二上学期塑造的，那个学期一直忙得要死；更不可能是大一上，那时候只是有内心的碰撞和后来的尝试适应，但还并没有形成最终的答案；也不是现在的大二下学期，因为觉得现在是另外一个心理状态了。 暑假主基调也是学习，另外还烫了个头。 印象里是15天java，15天python，这是大二上的课程，预习一下。 后来班助在班群里说李老师找人做VC，我想着学东西总有好处，就又学了12天左右的MFC，然后回了杭州，开始做项目。 大二上事情因为大一下“作死”提了两门课，导致这学期有37还是38学分的课，想想大一两个学期都是20+学分的课。 因为当时想好好学习，就不做班长了，这样自己大二上学期就没什么事情。课程虽多，但还有课下的时间，感觉还是没问题的。 然而，没料到学院突然通知有个导师制！学生必须参加，莫得办法，只能和李老师商量，他的项目先推掉。后来选了沈老师的导师制项目，感觉这个项目的各种比赛穿插了整个学期吧，忙得要炸。好像也是第一次旷课吧，旷了一节物理课，emmmm…… 最后期末搞得一点复习时间都没有，真是死扛着天天只睡四五个小时，把期末给扛过去了。就这样的情况下，那天考完模电，中午没吃饭就看线代，只记得几个小公式就去考线代了。这学期成绩血亏！可能不只是复习时间短的原因吧，平常也没什么精力好好学，最后复习也不知道怎么安排时间。 因为这个学期我开始对绩点有要求了，不像大一那样佛了。所以没办法，熬也就是这几天，不熬的话这考试可真就炸了。这种情况其实就是自己有了点目标，但又有其它事情和外力让你无法全力甚至无力去做…… 思想大一上的那种矛盾感觉又来了，这学期太忙，很炸，心里两种想法就又开始搏斗了。 寒假留校做沈老师的项目了，学了点React基础，回家后就是做项目，简单地预习一下课程。 大二下事情整体来讲，这个学期大概共4个月、4件事，每月1件。 3月 主要是在做沈老师项目 4月 主要是建模校赛 5月 主要是准备互联网+比赛 6月 主要是复习，其实还搞了几天互联网+ 从头至尾还贯穿着课程知识的学习，其他事情还有建模学习、C++小课、党校培训和党日活动、五四合唱、发展性项目、认知实习等等等等的事情，回头一看感觉真的好多事，怪不得当时整天睡不饱、烦躁。 思想描述不出来。 拜拜，祝你天天开心！ 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法时间复杂度]]></title>
    <url>%2F2019%2F07%2F19%2F%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[函数的渐近的界$O$定义如下： 设$f$和$g$是定义域为自然数集$N$上的函数，若存在正数$c$和$n_0$，使得对一切$n\geq n_0$有 0 \leq f(n)\leq c\,g(n)成立，则称$f(n)$的渐进上界是$g(n)$，记作 f(n)=O(g(n)) $f(n)$的阶不高于$g(n)$的阶 可能存在多个正数$c$，只要指出一个即可 对前面有限个$n$值可以不满足不等式 常函数的渐进上界可以写作$O(1)$ $\Omega$定义如下： 设$f$和$g$是定义域为自然数集$N$上的函数，若存在正数$c$和$n_0$，使得对一切$n\geq n_0$有 0 \leq c\,g(n)\leq f(n)成立，则称$f(n)$的渐进下界是$g(n)$，记作 f(n)=\Omega (g(n)) $f(n)$的阶不低于$g(n)$的阶 可能存在多个正数$c$，只要指出一个即可 对前面有限个$n$值可以不满足不等式 $o$定义如下： 设$f$和$g$是定义域为自然数集$N$上的函数，若对于任意正数$c$都存在$n_0$，使得对一切$n\geq n_0$有 0 \leq f(n)< c\,g(n)成立，则记作 f(n)=o(g(n)) $f(n)$的阶低于$g(n)$的阶 对不同正数$c$，$c$越小$n_0$越大 对前面有限个$n$值可以不满足不等式 $\omega$定义如下： 设$f$和$g$是定义域为自然数集$N$上的函数，若对于任意正数$c$都存在$n_0$，使得对一切$n\geq n_0$有 0\leq c\,g(n)]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法设计与分析基础]]></title>
    <url>%2F2019%2F07%2F17%2F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[算法设计与分析 问题建模 对输入参数和解给出形式化或半形式化的描述 设计算法 选择什么算法？如何描述这个方法？ 这个方法是否对所有实例都得到最优解？如何证明？ 如果不是，能否找到反例？ 分析算法 分析算法的效率 NP难问题 NP-hard问题有数千个，大量存在于各个应用领域。NP-hard问题举例：TSP问题、0-1背包、双机调度 目前还没有找到有效算法，有效算法指的是运行时间是输入规模$n$的指数或更高阶函数，即输入规模$n$的多项式时间。 至今没有人能证明这类问题不存在多项式时间的算法。 从是否存在多项式时间算法的角度来看，这些问题是彼此等价的（如果其中一个问题存在多项式时间的算法，则其它问题也都存在；如果其中一个不存在，则其它问题也不存在多项式时间算法）。这些问题的难度处于可有效计算的边界。 问题定义需要回答的一般性提问，通常含若干参数 问题描述 定义问题参数（可以是集合、变量、函数、序列等等） 说明每个参数的取值范围和参数间的关系 定义问题的解 说明解满足的条件（优化目标或约束条件） 问题实例参数的一组赋值可得到问题的一个实例 算法定义有限条指令的序列，这个指令序列确定了解决某个问题的一系列运算或操作。 要求若算法A解问题P，则应满足： 把问题P的任何实例作为算法A的输入，都可输出该实例的正确解 每步计算是确定性的 A能够在有限步停机 基本运算可以是比较、加法、乘法、置指针、交换等等操作。 基本运算的确定往往和输入规模相关，算法基本运算的次数可表示为输入规模的函数。 排序 元素之间的比较 检索 被检索元素$x$与数组元素的比较 整数乘法 每位数字相乘（位乘）1次，$m$位和$n$位整数相乘要做$mn$次位乘 矩阵相乘 每对元素乘1次 $i\times j$矩阵与$j\times k$矩阵相乘要做$ijk$次乘法 图的遍历 置指针 时间复杂度针对指定的基本运算，算法所做基本运算的次数。 对于相同输入规模的不同实例，算法的基本运算次数也不一样，我们可定义以下两种时间复杂度。 最坏情况下的时间复杂度$W(n)$ 算法求解输入规模为$n$的实例所需要的最长时间 平均情况下的时间复杂度$A(n)$ 在给定同样规模为$n$的输入实例的概率分布下，算法求解这些实例所需要的平均时间 设$S$是规模为$n$的实例集，实例$I\in S$的概率是$P_I$，算法对实例$I$执行的基本运算次数是$t_I$，则$A(n)=\sum_{I\in S}P_It_I$ 输入规模通常用数组元素多少、调度问题的任务个数、图的顶点数和边数等表示 排序 数组中元素个数$n$ 检索 被检索数组的元素个数$n$ 整数乘法 两个整数的位数$m$和$n$ 矩阵相乘 矩阵的行列数$i,j,k$ 图的遍历 图的顶点数$n$，边数$m$ 给定问题和基本运算就决定了一个算法类 比如排序问题，以元素间的比较为基本运算，就确定了一个算法类。 伪码描述 赋值语句 $\leftarrow$ 分支语句 if…then..…[else..…] 循环语句 while，for，repeat，until 转向语句 goto 输出语句 return 调用 直接写过程的名字 注释 //..… 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[优化模型概论]]></title>
    <url>%2F2019%2F07%2F17%2F%E4%BC%98%E5%8C%96%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[最优化问题在一系列主观或客观限制条件下，寻求使所关注的某个或多个指标达到最大（或最小）的决策，这种决策问题通常称为最优化问题或优化问题，研究处理这类问题的数学方法称为最优化方法。 用最优化方法解决决策问题包括两个基本步骤： 优化建模 建立决策问题的优化模型 模型求解 选择、利用优化方法和工具求解模型 优化模型一般形式优化模型是一种特殊的数学模型，优化建模方法是一种特殊的数学建模方法。优化模型一般由以下三个要素： 决策变量 通常是该问题要求解的那些未知量，可用一个$n$行的列向量$x=(x_1,x_2,\ldots,x_n)^T$表示。当对$x$赋值后它通常称为该问题的一个解或一个点。 目标函数 通常是该问题要优化（最小或最大）的那个目标的数学的表达式，它是决策变量的函数，可抽象地记做$f(x)$。 约束条件 由该问题对决策变量的限制条件给出，即$x$允许取值的范围为$x \in \Omega$，$\Omega$称为可行域，常用一组关于$x$的等式和不等式来界定，分别称为等式约束和不等式约束。 优化模型中约束一般没有严格小于、严格大于关系。 一般数学形式如下： opt \ \ \ z=f(x)\\ s.t. \ h_i(x)=0 \ (i=1,2,\ldots,m_e),\\ \quad \ \ \ g_i(x)\leq0\ (j=m_e+1,m_e+2,\ldots,m_e+m)其中，$opt$是最优化（optimize）的意思，可以是$min$或$max$； $s.t.$是“受约束于”（subject to或such that）。 可行解与最优解满足约束条件的解$x$（即$x\in\Omega$）称为可行解，否则称为不可行解。 满足目标函数的可行解$x’$称为最优解。 如果在某个可行解$x^$的附近（$x^$的某个邻域），$x^$使目标函数达到最优，即$x^$是$x^$某个邻域中的最优解，但它不一定是整个可行域上的最优解，则$x^$称为一个局部最优解或相对最优解，它实际上只是极值点。 相对于局部最优解，我们把整个可行域上的最优解称为全局最优解或整体最优解。对于大多数优化问题，求全局最优解是很困难的，所以很多优化软件往往只能求到局部最优解。 基本类型若按模型中决策变量的取值范围以及目标函数和约束函数的特性进行分类，常见类型如下： 连续优化 当所有决策变量$x_i(i=1,2,\ldots,n)$取值均为连续数值（即实数）时，优化模型称为连续优化（continuous optimization），也就是通常所说的数学规划。 线性规划 此时，如果目标函数$f$和约束函数$h_i、g_j$都是线性函数，则优化模型称为线性规划（linear programming，LP）。 非线性规划 此时，如果目标函数$f$和约束函数$h_i、g_j$中至少有一个是非线性函数，则称为非线性规划（nonlinear programming，NLP）。 特别地，如果目标函数$f$是一个二次函数，而约束函数$h_i、g_j$都是线性函数，则称为二次规划（quadratic programming,QP），它是一种相对比较简单的非线性规划。 离散优化 若$x_i$至少有一个只取离散数值，则优化模型称为离散优化（discrete optimization），或称为组合优化（combinatorial optimization）。 这时通常$x$的一个或多个分量只取整数数值，则称为整数规划（integer programming，IP），并可以进一步明确地分为纯整数规划（pure integer programming，PIP，此时$x$的所有分量都只取整数数值）和混合整数规划（mixed integer programming，MIP，此时x的部分分量只取整数数值）。 特别地，若$x$的分量中取整数数值的范围还限定为只取0或1，则称为0-1规划（zero-one programming，ZOP）。 此外，与连续优化分成线性规划和非线性规划类似，整数规划也可以分成整数线性规划（ILP）和整数非线性规划（INLP）。 根据其他标准，优化问题还可以分为无约束优化（unconstrained optimization）和约束优化（constrained optimization）、确定性规划和不确定性规划（如随机规划、模糊规划等）、光滑优化和非光滑优化、单目标规划和多目标规划，此外还有目标规划、动态规划、多层规划等等。 一般来说，离散优化问题比连续优化问题难以求解，非线性规划问题比线性规划问题难以求解，非光滑优化比光滑优化难以求解。 敏感性分析考虑当模型中的参数发生变化时最优解是否变化、变化多少的问题，这种分析称为敏感性分析。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>数学建模</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[和数据库的初次相遇]]></title>
    <url>%2F2019%2F07%2F04%2F%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%9D%E6%AC%A1%E7%9B%B8%E9%81%87%2F</url>
    <content type="text"><![CDATA[以下为一些SQL语句 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960-- 所有sql语句以分号结尾,sql不区分大小写-- 建库语句create database 库名;-- 查询已有库show databases;-- 删除库drop database 库名;-- 使用库use 库名;-- 创建表create table 表名(id int,name varchar(50),age int);-- 查询表结构desc 表名; -- describe-- 查询建表语句show create table user;-- 查询当前库中有哪些表show tables;-- 删除表drop table 表名;-- 显示表show tables;-- 向表中插入数据insert into 表名 (字段名1,字段名2) values(值1,值2); -- 字段与值一一对应，企业要求insert into 表名 values(值1,值2,值3); -- 要求是值的顺序和个数必须和表中字段的顺序和个数一致insert into user(name.age) values(&apos;Tom&apos;,18);insert into user values(&apos;Jerry&apos;,20);-- 从表中查询数据select 字段名 -- from 表名 where 查询限定条件select * from user; -- 查询全部数据select name,age from user; --仅显示表user中name和age字段的值select * from user where age=19; -- 查询表中age字段为19的表项-- 修改表中数据update 表名 set 字段名=值 where 限定条件; -- 如果不加where，就是对表中指定字段所有数据进行修改update user set age=22 where name=&apos;tom&apos;; -- 将name字段为&apos;tom&apos;的表项年龄字段改为22-- 删除表中数据delete from 表名 where 限定条件; -- 如果不加where，则删除所有-- 总结-- 库和表的CRUD，关键字分别是create,show,alter,drop-- 表中数据的CRUD，关键字分别是insert,select,update,delete 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机组成原理-课程设计]]></title>
    <url>%2F2019%2F06%2F29%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[目的与要求​ 深入了解计算机各种指令的执行过程，以及控制器的组成，指令系统微程序设计的具体知识，进一步理解和掌握动态微程序设计的概念；完成微程序控制的特定功能计算机的指令系统设计和调试。 ​ 要进行这项大型实验，必须清楚地懂得： TEC-2机的功能部件及其连接关系； TEC-2机每个功能部件的功能与具体组成； TEC-2机支持的指令格式； TEC-2机的微指令格式，AM2910芯片的用法； 已实现的典型指令的执行实例，即相应的微指令与其执行次序的安排与衔接； 要实现的新指令的格式与功能。 实验环境$TEC-2$模拟机 具体内容请选定指令格式、操作码，按照要求，设计三条指令。 指令一 说明 把用绝对地址表示的内存单元ADDR1中的内容与内存单元ADDR2中的内容相减，结果存于内存单元ADDR1中。 三字指令（控存入口110H）。 格式 D8××,ADDR1,ADDR2 功能 [ADDR1]=[ADDR1]-[ADDR2] 微程序设计与实现 执行顺序 微指令 说明 1 $PC\to AR,PC+1 \to PC$ 为读取第1个操作数的地址做准备 2 $MEM \to R6$ 读取第1个操作数的地址送入$R_6$ 3 $PC \to AR,PC+1 \to PC$ 为读取第2个操作数的地址做准备 4 $MEM \to AR$ 读取第2个操作数的地址送入$AR$ 5 $R6 \to AR,MEM \to R6$ 第1个操作数地址送$AR$，读取第2个操作数送入$R_6$ 6 $MEM-R6\to R6$ 第1个操作数-第2个操作数送入$R_6$ 7 $R6 \to MEM$ $R_6$送第1个操作数所在存储单元 $PC\to AR,PC+1 \to PC$ 10000 0E00 A0B5 5402 七 顺序执行，下址字段任意取值即可 六 $AM2910$命令码为14，即14号指令，顺序执行 五 $SCC、SC$ 顺序执行时不需要条件测试，不需要使用$\bar{CC}$，所以这4位任意取值 $SST$ 此时并非真正的运算，并且第6条微指令才是真正的运算，所以这3位任意即可 四、三 $\bar{MIO}、REQ、\bar{WE}$ 不需要读写存储器或输入输出设备，所以为10X $MI_{8-6}$ 运算结果送$B$口，运算器Y输出$A$口 $MI_{5-3}$ 选择加法运算 $MI_{2-0}$ 运算数选择$B$口和0,（选$A$口和0也可以，因为$A$口和$B$口是同一个寄存器） $A$口 选$PC$，即$R_5$ 二 $B$口 选$PC$，即$R_5$ $SCI$ 最低位进位设置为1 $SSH$ 不移位 一 $SA、SB$ 选微指令中的$A$口、$B$口地址 $DC1$ 因为$AR$只能接收来自运算器的结果输出信号，所以$DC1$可以任意 $DC2$ 运算器输出送$AR$ $MEM \to R6$ 10000 0E00 30F0 6000 七 顺序执行，下址字段任意取值即可 六 $AM2910$命令码为14，即14号指令，顺序执行 五 $SCC、SC$ 顺序执行时不需要条件测试，不需要使用$\bar{CC}$，所以这4位任意取值 $SST$ 此时并非真正的运算，并且第6条微指令才是真正的运算，所以这3位任意即可 四、三 $\bar{MIO}、REQ、\bar{WE}$ 读存储器 $MI_{8-6}$ 运算结果送$B$口，运算器Y输出运算结果（并没有使用） $MI_{5-3}$ 选择加法运算 $MI_{2-0}$ 运算数选择$D$和0 $A$口 任意 二 $B$口 选$R6$ $SCI$ 最低位进位设置为0 $SSH$ 不移位 一 $SA、SB$ $A$口任意，因为不使用$A$口；选择微指令中的$B$口地址 $DC1$ 任意 $DC2$ 不控制 $PC \to AR,PC+1 \to PC$ 10000 0E00 A0B5 5402 这条微指令和本机器指令的第一条微指令完全一样，不再做解释说明 $MEM \to AR$ 10000 0E00 10F0 0002 七 顺序执行，下址字段任意取值即可 六 $AM2910$命令码为14，即14号指令，顺序执行 五 $SCC、SC$ 顺序执行时不需要条件测试，不需要使用$\bar{CC}$，所以这4位任意取值 $SST$ 此时并非真正的运算，并且第6条微指令才是真正的运算，所以这3位任意即可 四、三 $\bar{MIO}、REQ、\bar{WE}$ 读存储器 $MI_{8-6}$ 运算结果不送寄存器，运算器Y输出运算结果送$AR$ $MI_{5-3}$ 选择加法运算 $MI_{2-0}$ 运算数选择$D$和0 $A$口 任意 二 $B$口 任意 $SCI$ 最低位进位设置为0 $SSH$ 不移位 一 $SA、SB$ 都任意，因为不使用$A$口和$B$口 $DC1$ 任意 $DC2$ 运算器输出送$AR$ $R6 \to AR,MEM \to R6$ 10000 0E00 20F6 6002 七 顺序执行，下址字段任意取值即可 六 $AM2910$命令码为14，即14号指令，顺序执行 五 $SCC、SC$ 顺序执行时不需要条件测试，不需要使用$\bar{CC}$，所以这4位任意取值 $SST$ 此时并非真正的运算，并且第6条微指令才是真正的运算，所以这3位任意即可 四、三 $\bar{MIO}、REQ、\bar{WE}$ 读存储器 $MI_{8-6}$ 运算结果送$B$口，运算器Y输出$A$口 $MI_{5-3}$ 选择加法运算 $MI_{2-0}$ 运算数选择$D$和0 $A$口 $R_6$ 二 $B$口 $R_6$ $SCI$ 最低位进位设置为0 $SSH$ 不移位 一 $SA、SB$ 使用微指令中的$A$口和$B$口 $DC1$ 任意 $DC2$ 运算器输出送$AR$ $MEM-R6\to R6$ 10000 0E01 22D6 6000 七 顺序执行，下址字段任意取值即可 六 $AM2910$命令码为14，即14号指令，顺序执行 五 $SCC、SC$ 顺序执行时不需要条件测试，不需要使用$\bar{CC}$，所以这4位任意取值 $SST$ 此时是真正的运算，设置标志位 四、三 $\bar{MIO}、REQ、\bar{WE}$ 读存储器 $MI_{8-6}$ 运算结果送$B$口；运算器Y输出$A$口（并没有使用） $MI_{5-3}$ 选择减法运算 $MI_{2-0}$ 运算数选择$D$和$A$口 $A$口 $R_6$ 二 $B$口 $R_6$ $SCI$ 最低位进位设置为0 $SSH$ 不移位 一 $SA、SB$ 使用微指令中的$A$口和$B$口 $DC1$ 任意 $DC2$ 不控制 $R6 \to MEM$ 10029 0300 1046 0010 七 这是最后一条微指令，下一条微指令是A4H。 六 $AM2910$命令码为3，即3号指令，条件转移 五 $SCC、SC$ $\bar{CC}$设为0，进行转移 $SST$ 此时并不是运算，所以标志位不变 四、三 $\bar{MIO}、REQ、\bar{WE}$ 写存储器 $MI_{8-6}$ 运算结果不送寄存器；运算器Y输出​$A$口 $MI_{5-3}$ 选择加法运算 $MI_{2-0}$ 运算数选择0和$A$口 $A$口 $R_6$ 二 $B$口 任意 $SCI$ 最低位进位设置为0 $SSH$ 不移位 一 $SA、SB$ 使用微指令中的$A$口；$B$口任意 $DC1$ 运算器输出送$IB$ $DC2$ 不控制 指令测试如下图所示，[A00H]存储单元（$ADDR1$）存储了0045H，[A01H]存储单元（$ADDR2$）存储了0023H，最终指令运行后[A00H]为0022H，实现[ADDR1]=[ADDR1]-[ADDR2]。 指令二 说明 将一通用寄存器内容加上某内存单元内容，结果放在另一寄存器中。 双字指令（控存入口130H），$SR$和$DR$分别为源、目的寄存器（各4位）。 格式 E0 DR SR,ADDR 功能 DR=SR+ [ADDR] 微程序设计与实现 执行顺序 微指令 说明 1 $PC\to AR,PC+1 \to PC$ 为读取操作数的地址做准备 2 $MEM \to AR$ 操作数的地址送入$AR$ 3 $SR+MEM \to DR$ 计算$SR$与操作数的和存入$DR$ $PC\to AR,PC+1 \to PC$ 10000 0E00 A0B5 5402 这条微指令和第一条机器指令的第一条微指令完全一样，不再做解释说明 $MEM \to AR$ 10000 0E00 10F0 0002 这条微指令和第一条机器指令的第四条微指令完全一样，不再做解释说明 $SR+MEM \to DR$ 10029 0301 30D0 0088 七 这是最后一条微指令，下一条微指令是A4H。 六 $AM2910$命令码为3，即3号指令，条件转移 五 $SCC、SC$ $\bar{CC}$设为0，进行转移 $SST$ 此时进行了运算，需要对标志位进行设置 四、三 $\bar{MIO}、REQ、\bar{WE}$ 读存储器 $MI_{8-6}$ 运算结果送$B$口；运算器Y输出​运算结果（并没有使用） $MI_{5-3}$ 选择加法运算 $MI_{2-0}$ 运算数选择$D$和$A$口 $A$口 使用机器指令中设置的$SR$，微指令中不需要给$A$口地址 二 $B$口 使用机器指令中设置的$DR$，微指令中不需要给$B$口地址 $SCI$ 最低位进位设置为0 $SSH$ 不移位 一 $SA、SB$ 使用机器指令中的$SR、DR$ $DC1$ 任意 $DC2$ 不控制 指令测试如图示，$R_0$（$SR$）为0023H，A00H（$ADDR$）存储0023H，程序运行后$R_1$（$DR$）为0046H，实现DR=SR+ [ADDR] 。 指令三 说明 转移指令 判断两个通用寄存器内容是否相等，若相等则转移到指定绝对地址，否则顺序执行。 双字指令（控存入口140H），SR和DR分别为源、目的寄存器（各4位），ADDR为绝对地址。 提示 利用指令的CND字段，即$IR_{10-8}$，令$IR_{10-8}=101$，即$\bar{CC}=Z$。 当DR==SR​时Z=1，微程序不跳转，接着执行$MEM \to PC$（即$ADDR\to PC$）； 而当DR!=SR​时Z=0​，微程序跳转至A4H。 格式 E5 DR SR,ADDR 功能 if DR==SR goto ADDR else 顺序执行 微程序设计与实现 执行顺序 微指令 说明 1 $SR-DR$ 测试$SR$与$DR$是否相等 2 $PC \to AR,PC+1 \to PC，\ $如果$Z=0，$则微程序跳转到$A4H$ 为读取转移地址做准备 3 $MEM \to PC$ 程序转移到指定地址 $SR-DR$ 10000 0E01 9210 0088 七 顺序执行，下址字段任意 六 $AM2910$命令码为14，即14号指令，顺序执行 五 $SCC、SC$ 顺序执行，不需要条件测试 $SST$ 此时进行了运算，需要对标志位进行设置，来判断$SR$和$DR$是否相等 四、三 $\bar{MIO}、REQ、\bar{WE}$ 不进行存储器或IO操作 $MI_{8-6}$ 运算结果不送寄存器；运算器Y输出​运算结果（并没有使用） $MI_{5-3}$ 选择减法运算 $MI_{2-0}$ 运算数选择$A$口和$B$口 $A$口 使用机器指令中设置的$SR$，微指令中不需要给$A$口地址 二 $B$口 使用机器指令中设置的$DR$，微指令中不需要给$B$口地址 $SCI$ 最低位进位设置为0 $SSH$ 不移位 一 $SA、SB$ 使用机器指令中的$SR、DR$ $DC1$ 任意 $DC2$ 不控制 $PC \to AR,PC+1 \to PC$，如果$Z=0$，则微程序跳转到$A4H$ 10029 03E0 A045 5412 七 微程序转移，下址字段为A4H 六 $AM2910$命令码为3，即3号指令，条件转移 五 $SCC、SC$ 测试条件设置为$IR_{10-8}$，指令中将$IR_{10-8}$设为5，即$\bar{CC}=Z$ $SST$ 此时并不是计算，状态位保持即可 四、三 $\bar{MIO}、REQ、\bar{WE}$ 不进行存储器或IO操作 $MI_{8-6}$ 运算结果送$B$口；运算器Y输出$A$口 $MI_{5-3}$ 选择加法运算 $MI_{2-0}$ 运算数选择$A$口和0 $A$口 $A$口设置为$PC$，即$R_5$。 二 $B$口 $B$口设置为$PC$，即$R_5$。 $SCI$ 最低位进位设置为1 $SSH$ 不移位 一 $SA、SB$ 使用微指令中的$A$口和$B$口地址 $DC1$ 由于是写$AR$，这里把运算器输出送$IB$。经过前两条机器指令的试验，实际上$DC1$可以任意。 $DC2$ 写$AR$ $MEM \to PC$ 10029 0300 30F0 5000 七 微程序转移，下址字段为A4H 六 $AM2910$命令码为3，即3号指令，条件转移 五 $SCC、SC$ 测试条件设置为0，一定转移 $SST$ 此时并不是计算，状态位保持即可 四、三 $\bar{MIO}、REQ、\bar{WE}$ 读存储器 $MI_{8-6}$ 运算结果送$B$口；运算器Y输出运算结果（并没有使用） $MI_{5-3}$ 选择加法运算 $MI_{2-0}$ 运算数选择$D$和0 $A$口 $A$口任意，并不使用。 二 $B$口 $B$口设置为$PC$，即$R_5$。 $SCI$ 最低位进位设置为0 $SSH$ 不移位 一 $SA、SB$ 使用微指令中的$B$口地址，$A$口任意（因为不使用$A$口）。 $DC1$ 任意 $DC2$ 不控制 指令测试当$R_1$（$SR$）存储0023H、$R_2$（$DR$）存储0026H时，即$DR \neq SR$时，程序顺序执行，运行了MOV R1,0026，所以程序运行后$R_1$为0026H。 当$R_1$（$SR$）存储0023H、$R_2$（$DR$）存储0023H时，即$DR = SR$时，程序跳转至828H（$ADDR$），所以未运行MOV R1,0026，所以程序运行后$R_1$仍为0023H。 $DR \neq SR$时 $DR = SR$时 实验心得 磨刀不误砍柴工。在设计微程序前，我把实验书看了一遍，有些地方不是很懂；之后着手去设计微程序，然后再去看书，理解到的更多了；最终微程序设计完之后，我又把书看了一遍，又发现了很多之前理解不到位的地方，正所谓温故而知新。我想这最能说明实践和理论的关系吧，多动手多动脑，才能巩固对知识的理解。 通过本次对微指令码一位位的设计，我对于计算机的底层实现有了更深的理解，更进一步地了解了计算机的工作原理，特别是运算器、控制器、内存、寄存器等部件之间的协作。本学期也学了汇编语言，它几乎是最靠近计算机硬件的编程语言了，在本次课程设计中，自主设计硬件间的协作，又算是直接接触了硬件，巩固了汇编和计组两门学科的知识与其联系。 通过本次课程设计，我巩固了微程序设计的方法与思想，比如微指令、微操作、微命令、水平型微指令、微控存等基本概念，了解了微程序层次上程序员所看到的的计算机系统结构，加深了对程序员一词的理解。不同层次的程序员由于工作的“机器”不同，所以面对的问题以及其实现往往也是极为不同的。 附加材料以下为$TEC-2$部分知识点总结。 字长$TEC-2$机字长为16位，运算器、主存、数据与地址总线均为16位。 指令$TEC-2$机指令有6位操作码，故支持64条指令，其中53条已实现，用于写出该机的监控程序。 $IR$：指令寄存器，存储当前正在执行的指令。 指令最高6位（$IR_{15-10}$）是操作码，之后两位$IR_{9-8}$是条件码，把它用作条件转移指令的判断条件，因此可以认为这两位是指令的扩展操作码。除条件转移指令之外，其余指令不使用这两位。 主存主存支持$64K$字，$4K\times8$的$ROM(2732)$存放监控程序，$2K\times8$的$RAM(2716)$存放用户数据及数据。 运算器运算器主要由4片$AM2901$级联而成，可实现8种运算功能，16个双端口（$A$、$B$）读出、单端口（$B$）写入的通用寄存器（$R_{0-15}$，其中$R_{4-6}$作为$SP$、$PC$、$IP$），另配有1片$AM2902$实现快速进位。 $IP$ 保存当前正在运行的指令的地址，用于转移变址的目的。 所以在课设第一条指令中可以使用$R_6$暂存数据，因为此时不需要转移变址，用不到$IP$。 $I_{8-6}$ 进行寄存器结果选择和Y输出选择 $I_{5-3}$ 进行运算功能选择 $I_{2-0}$ 进行数据来源选择 引脚信号 $D_{3-0}$ 外部送给$AM2901$的数据信号，比如从内存读出来的数据 $Y_{3-0}$ $AM2901$向外送出的数据，受​$\bar{OE}$控制。但在​$TEC-2$中，​$\bar{OE}$已接地 $A、B$ 选择寄存器组中的源与目的寄存器。 当$A$、$B$同值时，被选中的同一个寄存器的内容将被同时送到$A$、$B$两个数据输出端口 控制器 控制器主要由一片$AM2910$、7片$6116(RAM,2K\times8)$（微控存）、16位的指令寄存器$IR$和2片$2716$（存储用于实现53条机器指令的微程序，加电后读取送入微控存）等组成。 程序计数器$PC$用运算器中的通用寄存器$R_5$代替，保存下一条指令的地址。 指令地址寄存器$IP$由运算器中的$R_6$代替。 控存字长56位，已实现的53条指令的微程序存放在2片单独的8位$ROM$中，加电的过程自动调入控存（装入微码）。 地址总线的输入信号仅有一组，即地址寄存器（$AR$），而AR只能接收来自运算器的结果输出信号。 $AM2910$$AM2910$，微程序定序器，作用：形成下一条微指令的地址。 三个输出使能信号作用：决定直接输入D的来源 $\bar{MAP}$ 当其有效时，$D$来源于$MAPROM$，用于实现从机器指令到相应的微程序段的转移。 $\bar{VECT}$ 当其有效时，原意为$D$来源于中断向量，现用于接收手拨微地址。 $\bar{PL}$ 当其有效时，$D$来源于微指令的下地址字段，用于实现微程序转移。 引脚定义 $\bar{CC}$ 条件测试，当其为低电平时，测试成功，转移（使用下址字段）；否则，顺序执行。 $\bar{OE}$ Y输出允许信号，低电平有效，已接地 $\bar{CCEN}$ $\bar{CC}$允许信号，已接地 16条命令 2号命令 指令功能分支，无条件转$MAP$ 3号命令 条件转移，条件测试$\bar{CC}$为1时顺序执行，否则按下地址$D$转移。 14号命令 顺序执行下一条微指令 微程序微指令格式每位的用处已在EXCEL表格中说明。 $DC1$和$DC2$ 关于这两个控制位我还有两个问题 $DC2$为​$2$时 写$AR$时应把$DC2$设为2，即$AR$接收来自$IB$的数据；但$DC1$课本上都是设为0，即微型开关送$IB$。 这样不就是把微型开关送到了$AR$嘛？这不太对啊！？以下是我的猜测： 我猜在这里$DC1$应该是任意的。因为$AR$只能接收运算器的输出，所以当$DC2$设置为写$AR$时，就忽略$DC1$的设置，硬件应该可以实现。 $DC2$为​$0$时 此时代表$NC$，即无寄存器接收$IB$的数据，所以此时$DC1$应该也是任意，书上写的是0。 $SSH$ 常用微指令 19H 取指令，$PC$增量。 该条微指令公用于所有指令。 1AH 按新取来的指令的操作码找到该条指令本身的微程序段的入口地址。 19H之后一定是1AH。 A4H 根据有无中断请求，决定是进入中断处理过程，还是顺序执行。 任何一条机器指令执行完都要去A4H检测中断 程序调试以第一条指令为例 前期准备 $S_2S_1S_0$ 设为100 $FS_1FS_2FS_3FS_4$ 设为1010 $STEP/CONT$ 设为CONT 输入并查看微码 E900 将微码输入到900H开始的内存单元中 D900 查看内存 将微码加载到微控存 A800 输入加载微码的程序 123450800: MOV R1,900 ; 900是微码在内存中地址0802: MOV R2,7 ; 共7条微指令0804: MOV R3,110 ; 微码在微控存中的首地址0806: LDMC ;加载微码0807: RET G800 运行上边的代码，把微码装入微控存110H开始的单元中 测试指令 A820 输入测试指令的程序到820H开始的内存单元中 123456780820: MOV R0,0045 0822: MOV [A00],R0 ; [A00]单元存储45H0824: MOV R1,00230826: MOV [A01],R1 ; [A01]单元存储23H0828: NOP ; 占一个字0829: NOP082A: NOP082B: RET E826 把新指令写到826H开始的内存单元 10828 0000:D800 0000:0A00 0000:0A01 U820 反汇编，查看我们输入的测试指令的程序 123456780820: 2C00 0045 MOV R0, 00450822: 3400 0A00 MOV [0A00], R00824: 2C10 0023 MOV R1, 00230826: 3401 0A01 MOV [0A01], R10828: D800 DW D8000829: 0A00 ADC R0, R0 ; 高8位为000010XX，对应指令为ADC，实际上是我们自己设计的指令082A: 0A01 ADC R0, R1082B: AC00 RET G820 运行从820H开始的程序 观察运算结果DA00 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机组成原理-第七章复习]]></title>
    <url>%2F2019%2F06%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[三层次存储系统三层次存储系统指CACHE-主存-辅存存储系统。 目的：解决高速度、大容量和低成本间的矛盾。 主存-辅存层次解决容量和成本间的矛盾。 CACHE-主存层次解决速度和成本间的矛盾。 CACHE工作原理工作原理也就是层次存储系统能发挥效用的原因，如下： 根据程序访问的局部性，如果当前正在执行的程序和数据存放在CACHE中，当程序运行时，不必从主存储器取指令和数据，访问CACHE即可。 程序访问的局部性： 在一个较短的时间间隔内，程序访问的地址（程序、指令的地址和数据的地址）往往集中制存储器逻辑地址空间的很小范围内。 三种地址映像方式地址映像：主存地址映像到Cache 直接映像 优点 实现简单，只需利用主存地址按某些字段直接判断，即可确定所需字块是否已在cache中 缺点 不够灵活，不能用替换算法 全相联映像 优点 最灵活，可以使用任何替换算法，理论上命中率高 缺点 成本最高，每个Cache块都要用一个运算器 组相联映像组间直接映像，组内全相联映像。 优缺点 是直接映像和全相联映像的折衷方案，性能处于前两种之间。 替换算法FIFO把最先调入cache的字块替换出去 LRU把近期最少使用的字块替换出去。 这需要一张表来记录cache中各字块的使用情况，把最近使用的字块放到表的最上边，其他的向下顺移。 虚拟存储器虚拟存储器拥有辅存的容量，接近主存的速度和辅存的单位成本。 存储管理段式管理利用程序的模块化形状，把主存按段分配 优点 段的分界和程序的自然分界相对应 段的逻辑独立性使它易于编译、管理、修改和保护，也易于重复调用。 缺点 容易在段间留下许多零碎的存储空间，造成空间浪费。 页式管理主存物理空间被划分为等长的页 优点 与段式管理相比，空间浪费要小得多 缺点 处理、保护和共享都不如段式来得方便 段页式管理程序按模块分段，段内再分页，出入内存仍以页为单位，用段表和页表进行两级管理（每段一个页表） 页式存储器虚地址高位字段为虚页号，低位字段为页内字地址。 假设页表保存在内存中，那么访问存储器时首先要查页表（需要访问主存），得到实地址后，再次访问主存才能完成读写操作，这样相当于主存速度降低了一半。 解决办法：使用快慢表，快表是慢表（主存中的页表）的小小的副本。 查表时，用虚页号同时去查快表和慢表，如果在快表中找到，就将对应的实页号送入实主存地址寄存器，并使慢表的查找作废；找不到时，就要花费一个访问主存时间查慢表，从中查到实页号送入实存地址寄存器，并将此虚页号和对应的实页号送入快表，替换快表中某一行内容（这也使用替换算法）。 段页式虚拟存储器 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机组成原理-第六章复习]]></title>
    <url>%2F2019%2F06%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[控制器作用 控制程序的执行 即协调并控制计算机各部件执行程序的指令序列。 控制器功能 取指令 分析指令 又叫指令译码。 执行指令 控制程序和数据的输入与结果输出 对异常情况和某些请求的处理 控制器组成PC程序计数器/指令地址寄存器，存放当前指令或下一条指令的地址（TEC-2中PC存储下一条指令的地址）。 在一条无条件跳转指令的指令周期内，PC的值被修改2次。 取指令周期结束后，PC值自动加1；执行周期中，PC值修改为要跳转到的地址，故在这个指令周期内，PC值被修改两次。 程序计数器（PC）的位数取决于主存的容量。 程序计数器的内容为指令在主存中的地址，所以程序计数器的位数与主存地址的位数相等，而主存地址位数取决于主存的容量。 指令周期、间址周期 IR指令寄存器，存放当前正在执行的指令 指令寄存器（IR）的位数取决于指令字长 指令寄存器的内容为正在执行的指令，所以位数取决于指令字长。 CPU中的通用寄存器不能替代指令寄存器（IR） 指令寄存器是专门用于存放指令的专用寄存器，不能由通用寄存器替代。 指令译码器又叫操作码译码器，对指令寄存器中的操作码进行分析解释。 脉冲源及启停电路 脉冲源 产生一定频率的脉冲作为整个机器的时钟脉冲，是机器周期和工作脉冲的基准信号； 另外在开机时产生reset信号 启停电路 保证可靠地送出或封锁完整的时钟脉冲，控制时序信号的发生和停止 时序控制信号形成部件形成并调整时序。 产生控制信号一般有两种方法： 微程序控制方式硬布线控制方式几个周期指令周期从取指令开始到其执行完成所经过的时间。 一个指令周期包含若干个时钟周期。 时钟周期通常称为节拍脉冲或T周期。 时钟周期是计算机中最基本的、最小的时间单位。 数据通路结合课后习题6.1食用。 MAR主存地址寄存器；MDR主存数据寄存器；AC累加寄存器，简称累加器。 主存与CPU之间的连线有地址总线和数据总线。 地址总线的信息仅从CPU传送到主存MAR，数据总线则允许双向传送（CPU和MDR）。 指令从主存取出到产生控制信号的数据通路 指令地址从PC经地址总线送到MAR，数据从主存经数据总线送到IR。 数据在运算器和主存直接进行读/写的数据通路 读写地址由IR中指令的地址字段经地址总线送主存MAR；读时数据从主存经数据总线送到MDR，然后送ALU，然后送AC；写时数据从AC送MDR，再送主存。 微程序控制的基本概念把机器指令拆分成微指令，再把微指令拆分成微操作。 微指令把机器指令拆分成微指令。 机器指令与微指令的关系：用微指令解释机器指令 微指令长度一般要比机器指令长得多。 微操作一个微指令中，由同时发出的控制信号所执行的各个操作称为微操作。 微命令微命令和微操作一一对应。 微命令是微操作的控制信号，微操作是微命令的执行过程。 微程序微指令序列。 控制存储器用来存放微程序，其容量取决于实现指令系统所需的微程序长度（或者说其容量取决于微指令的条数）。 $AM2910$微程序定序器 作用形成下一条微指令的地址 三个输出使能信号作用：决定直接输入D的来源 $\bar{MAP}$ 当其有效时，$D$来源于$MAPROM$，用于实现从机器指令到相应的微程序段的转移。 $\bar{VECT}$ 当其有效时，原意为$D$来源于中断向量，现用于接收手拨微地址。 $\bar{PL}$ 当其有效时，$D$来源于微指令的下地址字段，用于实现微程序转移。 16条命令 2号命令 指令功能分支，无条件转$MAP$，此时$\bar{MAP}为0$，根据指令的操作码形成用来解释执行该机器指令的微程序的入口地址 3号命令 条件转移，条件测试$\bar{CC}$为1时顺序执行，否则按下地址$D$转移。 14号命令 顺序执行下一条微指令 CPU如何区分指令和数据可以从时间和空间上来区分 取指令周期中从内存中读出的信息流是指令流，它流向控制器； 执行指令周期中从内存读出或送入内存的信息流是数据流，它由内存流向运算器或由运算器流向内存。 微程序控制的基本工作原理机器指令取入IR后，对操作码进行译码，得到相应指令的第一条微指令的地址。 MAPROM 指令译码器可用只读存储器组成，将操作码作为MAPROM的地址输入，该单元的内容即相应指令第一条微指令的地址，之后由微指令的下址字段指出下一条微指令的地址。 根据微指令地址从控制存储器中取出微指令，并将它存放在微指令寄存器中。控制字段各位直接与受控门相连，由此生成控制信号。 微指令格式水平型微指令在一条微指令中定义并执行多个并行微命令，所以速度比垂直型微指令快。 直接控制法、字段编译法经常应用在同一条水平型微指令中。 垂直型微指令在微指令中设置有微操作码字段，由其规定微指令的功能。 不强调微指令的并行控制功能 两者比较从实现原理和性能两个方面比较。 水平型微指令并行操作能力强，效率高，灵活性强 水平型微指令实现一条机器指令的执行时间短 水平型微指令字长较长，但微程序短 水平型微指令用户难以掌握 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机组成原理-第四章复习]]></title>
    <url>%2F2019%2F06%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[存储器分类按在计算机中的作用（层次）分类主存储器简称主存，又称内存储器（内存）。 CPU可直接随机对其进行访问，也可以和Cache交换数据。 特点：容量较小、存取速度较快、单位价格较高。 辅助存储器简称辅存，又称外存储器（外存）。 不能与CPU直接交换信息。 特点：容量极大、存取速度较慢、单位成本低。 高速缓冲存储器简称Cache，位于主存和CPU之间。 特点：存储容量小、价格高。 按存储介质分类磁表面存储器比如磁盘、磁带。 磁心存储器半导体存储器TTL集成度低，功耗高，速度快 MOS集成度高，功耗低，速度慢。 所以现在内存主要用的MOS型存储器。 光存储器比如光盘。 按存取方式分类RAM随机读写存储器。存取时间与存储单元物理地址无关。 优点：读写方便、使用灵活，断电后内容丢失。 主要用作主存或Cache。 静态RAM以触发器原理寄存信息。 动态RAM以电容充电原理寄存信息。 ROM只读存储器。（Read Only） 只能随机读出而不能写入，断电后内容不会丢失。 可与RAM共同作为主存的一部分。 串行访问存储器读写时，需按其物理位置的先后顺序寻址。 顺序存取存储器如磁带。 特点：只能按某种顺序存取，存取速度慢。 直接存取存储器如磁盘。 存取方式介于RAM和顺序存取存储器，通常先寻找整个存储器中的某个区域（如磁盘上的磁道），再在小区域内顺序查找。 按信息可保存性分类易失性存储器断电内容丢失，如RAM。 非易失性存储器断电内容不丢失，如ROM、磁表面存储器和光存储器。 又可分为 E代表可擦写（Erase），P代表可编程（Programming） $ROM$ $PROM$ $EPROM$ $E^2PROM$，多出来的这个E代表电（Electric） $Flash\ Memory$ 补充 CD-ROM是只读型光盘存储器。 磁盘是直接存取存储器。 相联存储器是按内容指定方式和地址指定方式相结合进行寻址的寄存器。 相联存储器的基本原理：把存储单元的一部分内容作为检索项去检索存储器，并将存储器中与该检索项符合的存储单元内容进行读或写。 若OS在硬盘上，则内存储器应用RAM和ROM。 需将外存中的OS（部分）引导进内存，而引导程序通常用ROM存放。 另外ROM还经常存放操作系统等需要频繁使用，尤其是停电后不允许丢失的程序或数据。 RAMSRAM6管结构。TTL 读出时，根据两条位线中哪一条有负脉冲来判断触发器的状态。 写入时，根据两条位线电平来写入1或0。 DRAMMOS电容 DRAM采用地址复用策略（地址时分复用）。 目的：使DRAM芯片的地址管脚减少一半，从而减小器件尺寸。 刷新（再生）DRAM通过读出方式实现再生，读出放大器作为一个再生放大器。 DRAM刷新的单位是行，每列都有自己的读放。 原因 破坏性读出：某个存储单元被读出时，原存储信息被破坏。 破坏性读出的存储器，每次读出后，必须紧接一个再生的操作，以恢复被破坏的信息。 另外由于电容漏电阻的存在，也需要进行再生。 常见方式 集中刷新 在一个刷新周期内，利用一段固定时，依次对存储器所有行进行刷新，在此期间停止对存储器的读写操作，成为访存“死区”。 分散刷新 把对每行的刷新分散到各个工作周期内，增加了存储周期，但没有死区。 分布式刷新（异步刷新） 介于集中刷新和分散刷新。 对比六个方面：集成度、速度、功耗、价格、容量、原理、刷新 DRAM价格便宜（因此一般容量大，用作内存；而SRAM则用作Cache），集成度高，功耗低；但速度慢，还需要时间和电路进行再生（刷新）。 SRAM利用触发器保存信息，DRAM利用电容存储电荷保存信息。 DRAM需要刷新，SRAM不用刷新。 DRAM采用地址复用策略，SRAM不采用。 存储器的性能指标主要有3个性能指标，三者相互制约。 目标：大容量、低成本和高速度。 存储容量存储字数$\times$字长，如1M$\times$8位。 单位成本总成本/总容量。 存储速度存取时间完成一次存储器操作的时间，分为读取时间和写入时间。 存取周期又称读写周期或访问周期。连续两次操作存储器之间的最小时间间隔。 通常存取周期大于存取时间，因为它多了个复原时间。 复原时间： SRAM 存取信息的稳定时间。 DRAM 刷新的又一次存取时间，刷新是通过读出实现的。 对于破坏性读出的存储器，存取周期往往比存取时间大得多。 主存带宽又称数据传输率，每秒从主存进出信息的最大数量。 存储器容量扩展读写控制线可以是一根（$\bar{WE}$），也可以是两根（$\bar{WE}$和$\bar{RD}$）。 字扩展、位扩展和字位扩展是重点（两种操作，如何画图），看PPT上作业及答案。 方法 顺序 位扩展 字扩展 1 地址线与各芯片并联，CPU$\bar{WE}$与各芯片$\bar{WE}$并联 低位地址线与各芯片并联，CPU$\bar{WE}$与各芯片$\bar{WE}$并联 2 各芯片$\bar{CS}$并联接地 高位地址经译码器各输出分别连接各芯片$\bar{CS}$ 3 各芯片数据引到数据线（算是串行） 各芯片数据引到数据线（算是并行） 四个要素：$\bar{WE}$、$\bar{CS}$、地址线、数据线 多体交叉存储器 解决的主要问题是提高主存储器的数据传输率 采用低位交叉编址方式 低位地址选择不同的存储模块，高位地址指向相应的模块内部的存储字。因此，连续的地址分部在相邻的不同模块中。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机组成原理-第三章复习]]></title>
    <url>%2F2019%2F06%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[进制转换2进制转8进制从小数点开始向左向右，3个一组换算成8进制，缺位补0。 如例3.4 8进制转2进制将一位8进制数换算成3位2进制数。 如例3.6 2进制转16进制从小数点开始向左向右，4个一组换算成16进制，缺位补0。 16进制转2进制将一位16进制数换算成4位2进制数。 8进制转16进制(拓展)从小数点开始向左向右，2个一组换算成16进制，缺位补0。可以先变成2进制，再变成16进制。 如表3.1 2进制转10进制每位2进制数乘以它的权重，再求和。8421 如例3.1 10进制转2进制整数部分除2取余至商为0，先求出来的余数靠近小数点（低位）。 如例3.7 小数部分小数部分 乘2取整至小数部分为0或满足精度要求，先求出来的整数靠近小数点（高位）。 如例3.8 机器数的表示 机器数有三种表示方式：原码、反码和补码。 我们先假设机器数为小数，符号为放在最左边，小数点置于符号位和数值之间。 真值 即±绝对值，用$X$表示，正号有时可省略。 原码 最高位为符号位，0表示正数，1表示负数，绝对值跟随其后。 小数点的位置默认在符号位之后，书写时可以将小数点保留或省略。 0的原码有两种表示形式： $[+0]_原=00000=0.0000$ $[-0]_原=10000=1.0000$ 补码 正数的补码与其原码一样 补码零的表示形式唯一：$[+0]_补=[-0]_补=00000=0.0000$ 负数原码补码互求 符号位不变 数据位按位取反 末位+1 加法若加法运算不超过机器范围时： 加法结果仍为补码 $[X+Y]_补=[X]_补+[Y]_补$ $[X-Y]_补=[X]_补+[-Y]_补$ 符号位也参与运算 由$[Y]_补$求$[-Y]_补$ $[Y]_补$所有位取反 末位+1 证明$[X+Y]_补=[X]_补+[Y]_补$补码定义： [X]_补=\begin{cases} X,0\leq X]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机组成原理-第二章复习]]></title>
    <url>%2F2019%2F06%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[两种电路组合逻辑电路输出只和当前输入有关 时序逻辑电路输出不仅和当前输入有关，还和原来状态有关。 译码器$n$位输入，最多$2^n$个输出。 给定$n$位输入后，输出中仅有对应的那一个为1（或0），其他都为0（或1）。 数据选择器从多个输入中选择某一个作为输出。 181和182 181实现了位间快速进位。（4位，AM2901也是） 182实现了组间快速进位。（4组，AM2902也是） 例题： 如果实现64位快速运算，需要多少个181和多少个182？ 181 $\frac{64}{4}=16$ 182 $\frac{16}{4}=4，\frac{4}{4}=1$ $4+1=5$ 如果是128位呢 181 $\frac{128}{4}=32$ 182 $\frac{32}{4}=8，\frac{8}{4}=2，\frac{2}{4}=1$ $8+2+1=11$ 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机组成原理-第一章复习]]></title>
    <url>%2F2019%2F06%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[冯诺依曼型计算机特点存储程序(核心特点) 采用存储程序方式，程序和数据放在同一个存储器中，以二进制表示。 五部分组成各部分通过数据总线、地址总线、控制总线传递信息，进行联系。 运算器 对数据进行运算 控制器 实现程序的自动执行 存储器 存放程序和数据 输入设备 输入原始数据和处理这些数据的程序 输出设备 输出计算机的处理结果 指令的组成 由操作码和地址码组成 运算器为中心 输入输出设备与存储器间的数据传送都通过运算器 指令的存放和执行 指令在存储器中按执行顺序存放 电子计算机的发展 电子管计算机 晶体管计算机 集成电路计算机 大规模集成电路计算机 超大规模集成电路计算机 计算机组成软件系统硬件系统计算机性能指标==字长== ==容量== ==CIP== 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络-域名系统DNS]]></title>
    <url>%2F2019%2F06%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9FDNS%2F</url>
    <content type="text"><![CDATA[功能把互连网上的主机名转换为IP地址 要点当某一个应用进程需要把主机名解析为IP地址时，该应用进程就调用解析程序，并成为DNS的一个客户。 把待解析的域名放在DNS请求报文中，以UDP用户数据报方式发给本地域名服务器。 本地域名服务器在查找域名后，把对应的IP地址放在回答报文中返回，应用进程获得目的主机的IP地址。 若本地域名服务器不能回答该请求，则此域名服务器暂时成为DNS的另一个客户（递归查询），并向其他域名服务器发出查询请求（一般迭代查询），直至找到能够回答该请求的域名服务器。 域名结构采用层次树状结构的命名方法。 域：名字空间中一个可被管理的划分，域还可以划分为子域，子域还可以划分为子域，形成顶级域、二级域、三级域等等。 DNS不规定一个域名需要包含多少个下级域名，也不规定每一级的域名代表什么意思。 域名是从右往左看的，越往右等级越高。 域名服务器DNS服务器的管辖范围是以区为单位，区可能等于或小于域，但一定不能大于域，即区是域的子集。 一个服务器所负责管辖（或有权限的）的范围叫做区。 一个区中的所有节点必须是能够连通的。 每个区设置响应的权限域名服务器，用来保存该区中的所有主机的域名到IP地址的映射。 根域名服务器根域名服务器是最高层次的域名服务器。 所有的根域名服务器都知道所有的顶级域名服务器的域名和IP地址。 顶级域名服务器负责管理在该顶级域名下注册的所有二级域名。 权限域名服务器负责一个区的域名服务器。 本地域名服务器当一台主机发出DNS查询请求时，这个查询请求报文就发送给本地域名服务器。 不管哪一个本地域名服务器，若要对一个域名进行解析，只要自己无法解析，就首先要求助于根域名服务器。 域名解析过程主机向本地域名服务器查询一般采用递归查询。 如果本地域名服务器不知道被查询域名的IP地址，那么本地域名服务器会以DNS客户的身份，向其他根域名服务器继续发出查询请求报文（即替主机继续查询）。 递归查询的结果： 查到的IP地址 报错，表示无法查询到所需的IP地址 本地域名服务器向根域名服务器查询一般采用迭代查询。 根域名服务器收到本地域名服务器发出的迭代查询请求报文时，本地域名服务器收到的查询结果有两种： 查到的IP地址 下一步向哪个域名服务器查询 顶级域名服务器在收到本机域名服务器的查询请求后，收到的结果有两种： 查到的IP地址 下一步向哪个权限域名服务器查询 就这样，本地域名服务器就这样进行迭代查询，最终把得到的结果返回给发起查询的主机。 高速缓存域名服务器功能：用来存放最近查询过的域名以及从何处获得域名映射信息的记录。 好处：提高DNS查询效率，减轻根域名服务器的负荷和减少互联网上的DNS查询报文数量。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络-运输层复习]]></title>
    <url>%2F2019%2F06%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%BF%90%E8%BE%93%E5%B1%82%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[解决的问题实现两台主机中进程之间的通信。 复用和分用 复用 多个应用层进程可使用同一运输层服务 分用 运输层把收到的信息分别交付上面应用层的相应进程 提供可靠性 TCP 面向连接 面向字节流 提供可靠性 不提供广播或多播服务 协议数据单元是TCP报文段 有拥塞控制 每一条TCP连接唯一地被通信两端的两个端点（即两个套接字）所确定。 套接字：IP地址+端口号 UDP 无连接 面向报文（给什么数据，传什么数据） 尽最大努力交付 可以一对多、多对一、多对多 协议数据单元是UDP用户数据报 没有拥塞控制 停止等待协议 无差错情况：停止等待 每发送完一个分组就停止发送，等待对方的确认，在收到确认后再发送下一个分组。 出现差错：超时重传 每发送完一个分组时设置一个超时计数器。 如果超时还未收到确认，就重传分组；在超时前收到确认则撤销该超时计数器。 A发送完一个分组后必须暂时保留已发送到分组的副本，在收到响应确认后才能清除这个副本。 分组和确认分组必须进行编号，这样才能明确发送出去的分组是哪一个收到了确认，哪一个没有收到确认。 可以处理确认迟到的情况。 超时计数器设置的重传时间应当比数据在分组传输的平均往返时间长一些。如果设定得很长，通信效率就会降低；如果设定得太短，会导致不必要的重传，浪费了网络资源。 确认丢失 确认丢失时，发送方进行超时重传，而接收方丢弃这个重复的分组，向发送方发送确认。 确认迟到 确认迟到了，发送方进行超时重传，而接收方丢弃这个重复的分组，向发送方发送确认。 发送方收到迟到的确认什么也不做。 慢开始TCP进行拥塞控制的一种算法。 拥塞是运输层的概念。 发送方维持一个变量：拥塞窗口，让自己的发送窗口等于拥塞窗口，拥塞窗口的大小取决于网络的拥塞程度。 判断网络拥塞的依据就是出现了超时。网络拥塞时就把拥塞窗口减小一些。 慢开始：由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。 发送方每收到一个对新报文段的确认就使发送方的拥塞窗口+1。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络-网络层复习]]></title>
    <url>%2F2019%2F06%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[主要解决的问题网络层讨论的问题是多个网络互连的问题，即分组如何从一个网络传送到另一个网络。 协议数据单元网络层协议数据单元就是IP数据报，又称为数据报、分组或包。 网络层的两种服务网络层的两种服务指的是向运输层提供无连接或面向连接的服务。 选用哪一种服务的实质是：在计算机通信中，可靠交付应当由谁来负责。是网络（网络层）还是端系统（网络层的上几层）？ 可靠：分组无差错按序到达终点，不丢失，不重复 互联网的设计思路：网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。分组不进行编号。 虚电路和数据报网络对比7个方面 对比的方面 虚电路服务 数据报服务 可靠性由谁保证 可靠由网络来保证 可靠由用户主机来保证 是否面向连接 面向连接 无连接 是否有终点地址 仅在连接建立阶段使用，每个分组使用短的虚电路号 每个分组都有终点的完整地址 分组转发方式 属于同一虚电路的分组按同一路由转发 每个分组独立选择路由进行转发 结点故障对网络的影响 所有通过故障结点的虚电路均不能工作 出故障的结点可能会丢失分组，一些路由可能发生变化 分组到达终点顺序 按发送顺序到达 不一定按发送顺序到达 端到端的差错处理和流量控制 可以由网络负责，也可以由用户主机负责 用户主机负责 互联网的IP协议提供不可靠的无连接的服务。 中间设备 工作层次 中间设备 物理层 转发器 数据链路层 网桥/桥接器 网络层 路由器 网络层以上 网关 IP地址以32位IP地址为例，A、B、C类地址都是单播地址，都由两个固定长度的字段组成，第一个字段是网络号，第二个字段是主机号。一个网络号在整个互联网范围内是唯一的，一个主机号在其网络内必须是唯一的。 一个IP只能对应一个主机；一个主机可以有多个IP，比如路由器。 IP地址分类A、B、C类地址的网络号字段分别是1个、2个和3个字节长，其网络号字段前几位是类别号。 IP地址类型 类别号 可指派网络号 A类 0 1-126 B类 10 128.1-191.255 C类 110 192.0.1-233.255.255 网络号127被保留作为本地环回测试，全0被保留表示本网络。 既然有了MAC地址，为什么要用IP地址？全世界存在各式各样的网络，它们使用不同的硬件地址。要使这些异构网络能够互相通信就必须进行非常复杂的硬件地址转换工作，因此由用户主机来完成这项工作几乎是不可能的事。但IP编址把这个复杂问题解决了。 分组转发路由表指出到某个网络应该如何转发，每行对应于一个网络。 在互联网上转发分组时，是从一个路由器转发到下一个路由器。 每条路由主要信息：（目的网络地址，下一跳地址）。下一跳地址是路由器端口的IP地址。 使用子网时分组的转发 使用子网划分后，每条路由主要信息：（目的网络地址，子网掩码，下一跳地址）。 主机 要发数据包时先判断是直接交付还是间接交付：即发送的这个分组是在本子网上进行直接交付还是要通过本子网的路由器进行间接交付：将与本子网的子网掩码和目的IP地址相与求得目的网络地址与该子网地址比较，得出是否直接交付。 路由器 拿到目的IP地址后对路由器直接相连的网络逐个进行检查（直接相连的网络可以直接写在路由表的最前边），将各网络的子网掩码和目的IP地址相与求得目的网络地址，判断该网络地址是否和对应的目的网络地址匹配。若匹配则直接交付，转发任务结束；否则就是间接交付，进行下一步。 若有特定主机路由，则把数据传送给路由表中指明的下一跳，否则执行下一步。 用路由表每一行中的子网掩码和目的IP地址相与，若结果与该行目的网络地址匹配，则把数据传送给该行指明的下一跳路由器；否则执行下一步 若路由表中有一个默认路由，则把数据报传送给路由表指定的默认路由器；否则，执行下一步 报告转发分组出错。 ARP功能：从网络层使用的IP地址，解析出在数据链路层使用的硬件地址。 操作：去ARP高速缓存里找，找不到就广播ARP请求分组获得目的硬件地址（可以是路由器或主机的）并记录在ARP高速缓存中。 ARP消息类型 ARP request ARP请求分组（1），用于请求某IP主机的硬件地址。 广播。 主要内容：我的IP是xxx，我的硬件地址是xxx，我想知道IP地址是xxx的地址。 ARP response ARP响应分组（2），用于指出某IP主机的硬件地址。 单播。 主要内容：我的IP是xxx，我的硬件地址是xxx 假设主机A发送ARP请求分组请求主机B的物理地址，不久之后很有可能B也要向A发送数据报。所以ARP请求分组包含了源IP，B收到ARP请求分组时会把A的IP地址和物理地址记录在其ARP高速缓存中。 ARP高速缓存如果没有ARP高速缓存，任何一台主机每次进行通信时都必须在网络上广播ARP请求分组，使网络上的通信量大大增加。 生存时间 ARP对保存在ARP高速缓存中的每一个映射地址项目都设置生存时间，凡超过生存时间的项目就从高速缓存中删除掉。这样可以及时更新各主机与其物理地址的映射关系，处理主机网络适配器故障或更新等情况。 生存时间设置得太长会使映射关系发生变化的主机迟迟无法通信，设置得太短会使ARP请求和响应分组的通信太频繁。 ARP属于网络层不能说“ARP向网络层提供了服务”，因为ARP本身是网络层的一部分。数据链路层使用硬件地址而不使用IP地址，因此ARP不在数据链路层。 不需要发送ARP请求分组的情况 源主机的ARP高速缓存中已有目的IP地址的项目 源主机发送广播分组 源主机和目的主机使用点对点链路 IP子网IP地址与子网掩码相与 同样的IP地址和不同的子网掩码可以得出相同的网络地址。但是不同的掩码效果是不同的：可划分的子网数和每一个子网中的最大主机数都是不一样的。 知道A和B的IP，想让他们在一个子网内，应如何给它们分配子网掩码？ 计算子网号个数时要去除全0和全1的情况，即减2。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络-数据链路层复习]]></title>
    <url>%2F2019%2F06%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[网桥在数据链路层进行互连。 数据链路层研究的问题在同一个局域网中，分组怎么从一台主机传送到另一台主机上（不经过路由器转发）。 分组是网络层的协议数据单元，数据链路层的协议数据单元是帧。 链路和数据链路链路也叫物理链路。 一个结点到相邻结点的一段物理线路，而没有其他的交换结点。 数据链路也叫逻辑链路。 链路加上实现协议的硬件和软件形成数据链路。 常用方法： 网络适配器，即网卡，既有软件，又包括硬件，其一般包括物理层和数据链路层两层的功能。 链路和数据链路有什么区别？“电路接通了”和“数据链路接通了”的区别在哪？所谓链路就是从一个结点到相邻结点的一段物理线路，而中间没有任何其他的交换结点。在进行数据通信时，两个计算机之间的通信路径往往要经过许多段这样的链路。可见链路只是一条路径的组成部分。 数据链路则是另外一个概念。这是因为当需要在一条线路上传输数据时，除了必须有一条物理线路外，还必须有一些必要的通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。现在最常用的方法是使用网络适配器（如拨号上网使用拨号适配器，以及通过以太网上网使用局域网适配器）来实现这些协议的硬件和软件。一般的适配器都包括了数据链路层和物理层这两层的功能。 也可以把链路分为物理链路和逻辑链路。物理链路就是上面说的链路，而逻辑链路就是上面的数据链路，是物理链路加上必要的通信协议。 “电路接通了”表明物理连接已经能够传输比特流了。 而“数据链路接通了”是指在物理连通的基础上，建立数据链路，实现封装成帧、透明传输、差错检测等功能。 帧数据链路层的协议数据单元。 数据链路层三个基本问题封装成帧数据链路层在网络层交下来的IP数据报（即分组）前后分别添加首部和尾部形成帧。（OSI的数据链路层把传输的比特流划分成帧。） 只有数据链路层会添加尾部，除物理层外，即应用层、传输层、网络层、数据链路层都会为上边传下来的数据添加首部。 首部和尾部包括许多必要的控制信息（如同步信息、地址信息、差错控制等）， 问题来源为使接收端能从收到的比特流中准确地找到帧的开始和结束位置。 解决问题首部和尾部的一个重要作用就是帧定界（即确定帧的界限）： SOH（Start Of Header），放在帧的最前边，表示帧的开始。 EOT（End Of Transmission），放在帧的最后边，表示帧的结束。 透明传输问题来源由于帧开始和结束的标记使用专门指明的控制字符，所传输的数据中不能出现8比特的组合和用作帧定界的控制字符的比特编码一样，否则会出现帧定界错误。 解决问题 解决方法：字节填充 发送端的数据链路层在数据中控制字符和转义字符的前边插入一个转义字符ESC； 接收端的数据链路层在把数据送往网络层之前删除这个插入的转义字符ESC。 简单来说，（要注意：添加和删除ESC是对于数据中的ESC、SOH、EOT来说的） 发送端的数据链路层在数据中的ESC、SOH、EOT前添加ESC， 接收端的数据链路层把数据中ESC、SOH、EOT前的ESC去掉 差错检测问题来源 比特差错 现实的通信链路不是理想的，传输过程中可能出现比特差错（1变成0，或0变成1）。 比特差错并不是传输差错。 为保证数据传输的可靠性，必须进行差错检测。 CRC数据链路层广泛使用了循环冗余校验码CRC的检错技术。 若数据链路层仅仅使用CRC，则只能实现无差错接受、无比特差错的传输，这并不是可靠传输。 ==CRC可参考计组复习笔记，超链接== CRC和FCS不同 帧检验序列FCS，是数据后边的冗余码；而CRC是一种检错方法。 编码方法 数据左移几位（P的位数-1）后模2除以生成多项式P，则得应在数据后添加的余数 检错方法 拿到的数据加冗余码，模2除生成多项式P，求得余数 若余数为0，则无误，接受； 若不为0，则有误，就丢弃。 为什么三个问题必须加以解决封装成帧就是在一段数据的前后分别添加首部和尾部（在首部和尾部里面有许多必要的控制信息），这样就构成了一个帧。接收端在收到物理层上交的比特流，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。首部和尾部的一个重要作用就是帧定界，如果不进行封装成帧，那么数据链路层在收到一些数据时，就无法知道对方传输的数据中哪些是数据，哪些是控制信息，甚至数据中有没有差错也不知道，也无法知道数据传送结束了没有，因此不知道应该在什么时候把收到的数据给上一层。 上层交下来的数据，不管是什么形式的比特组合，都必须能够正确传送。由于帧的开始和结束的标记是使用专门指明的控制字符，因此，所传输的数据中的任何比特组合一定不允许和用作帧定界的控制字符的比特编码一样，否则就会出现帧定界的错误。数据链路层不应对传送的数据提出限制，即不应当规定某种形式的比特组合不能够传送。如果没有透明传输，就可能会出现帧定界错误。 如果数据链路层没有差错检测，那么当目的主机收到其他主机发送来的数据时，在交给高层后，如果应用程序要求收到的数据必须正确无误，那么目的主机的高层软件可以对收到的数据进行差错检测。如果发现数据中有差错，就可以请求源主机重传这些数据。这样做就可以达到正确接收数据的目的。但这种工作方式有一个很大的缺点，就是一些在传输过程中出现了错误的数据（这些已经是没有用处的数据）还会继续在网络中传送，这样就浪费了网络的资源。 点对点协议PPPPPP协议面向连接。 PPP控制字符：0x7E 主要特点简单 字节填充PPP使用异步传输时，转义符定义为0x7D，使用字节填充 处理情况 填充前 填充后 控制字符 0x7E (0x7D,0x5E) 转义字符 0x7D (0x7D,0x5D) ASCII码控制字符(小于0x20) 0x03 (0x7D,0x23) 零比特填充PPP使用同步传输时 保证信息字段中不会出现连续6个1，方法如下 发送端 扫描信息字段，发现连续5个1，在其后边添1个0 接收端 扫描信息字段，发现连续5个1，则删除其后边的1个0 局域网的数据链路层局域网的协议结构一般不包括网络层。 以太网以太网是典型的局域网，几乎成了局域网的同义词。 为了通信的简便，以太网采取了以下两种措施： 无连接、不可靠 以太网发送的数据都使用曼彻斯特编码 截断二进制指数退避算法以太网使用截断二进制指数退避算法来确定碰撞后重传的时机。 设碰撞次数为$k$，则$k=Min[重传次数，10]$，重传时间为$0$到$2^k-1$个时间片 局域网主要特点 网络为一个单位所拥有 地理范围和站点数目均有限 网络拓扑星形网现在主要用这个， 集线器星型拓扑： 易维护，物理上是星形，逻辑上是总线型 集线器工作在物理层 环形网一个电脑出问题，会影响整个局域网。 总线网所有的主机都连在一根总线上。 广播 一台计算机发送数据，总线上所有计算机都能检测到这个数据 一对一 给每个适配器一个独一无二的MAC地址，在发送数据帧时，在帧的首部写明接收站的地址。 当数据帧中的目的地址与适配器ROM中存放的MAC地址一致时，该适配器才接受这个数据帧，否则丢弃。 CSMA/CD协议载波监听多路访问/碰撞检测，协议的实质是载波监听和碰撞检测。 以太网扩展 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络-物理层复习]]></title>
    <url>%2F2019%2F06%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%89%A9%E7%90%86%E5%B1%82%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[物理层主要解决的问题进行信号和比特流的转换，实现透明传输比特流，尽量使数据链路层感觉不到传输媒体之间的差异。 物理层的主要任务机械特性接插件的形状、尺寸、引脚数目和排列等规格 电气特性电压范围 功能特性某电平电压的意义 过程特性不同功能的各种可能事件的出现顺序。 协议数据单元物理层上所传数据的单位是比特。 数据通信系统的模型源系统源点又称信源，源站。 产生要传输的数据（比特流）。 发送器对源点生成的比特流进行编码，然后在传输系统中进行传输。 传输系统可以是简单的传输线，也可以是复杂的网络系统。 目的系统接收器接收信号，转换为终点可以处理的信息。 比如解调器，把模拟信号还原为比特流。 终点又称目的站、信宿。 获取接收器传来的比特流。 通信常用术语通信的目的是传送消息。 消息消息是本质。 数据数据是运送消息的实体。 信号信号是数据的电气或电磁表现。 信号的分类根据信号中代表消息的参数的取值方式分类 模拟信号代表消息的参数取值是连续的。 数字信号代表消息的参数取值是离散的。 码元：承载信息的基本信号单位。 有两个要素：码元的取值个数$M$（$M$进制码元）和码元携带的信息量（即码元的位数）$n$。 $n\geq log_2^M$ https://zhidao.baidu.com/question/680218902599074452.html 调制 基带信号 带通信号 频率 低，甚至有直流成分 高 传播距离 短 远 许多信道并不能传输低频分量或直流分量。为解决这个问题，必须对基带信号进行调制。 基带调制作用又称编码。 仅对基带信号的波形进行变换，使其与信道特性相适应。 变换后的信号仍为基带信号。 方法 不归零制 归零制 曼彻斯特编码 差分曼彻斯特编码 载波调制作用使用载波，把基带信号的频率范围搬移到较高的频段，并转换为模拟信号。 经过载波调制后的信号称为带通信号，带通指仅在一段频率范围内能够通过信道。 方法 调幅 调频 调相 信道信道指向某一个方向传送信息的媒体。 一条通信线路往往包含一条发送信道和一条接收信道。 三种通信基本方式从通信的双方信息交换的方式来看 单工通信 半双工通信 全双工通信 通信方向 通信只能有一个方向 双向交替通信 双向同时通信 信道数 一条 两条 两条 信道的极限容量信号在信道上传输会失真。 从概念上讲，限制码元在信道上的传输速率的因素有两个： 信道能够通过的频率范围码间串扰：接收端收到的信号波形失去了码元之间的清晰界限。 奈氏准则：指出在假定的理想条件下，为避免码间串扰，码元的传输速率的上限值。 在任何信道中，码元的传输速率是有上限的，超过上限，就会出现严重的码间串扰问题。 波特：Baud，码元传输速率的单位。1 Baud即每秒传送1个码元。 信噪比信噪比就是信号平均功率$S$和噪声平均功率$N$之比，常记为$S/N$，并用分贝$dB$作为度量单位。 信噪比(dB)=10log_{10}^{S/N}(dB)香农公式指出，信道的极限信息传输速率$C$是： C=W\ log_2^{1+S/N}(bit/s)式中，$W$为信道的带宽，单位为$Hz$。 香农公式表明：信道的带宽或信噪比越大，信道的极限传输速率就越大。 其他因素对于频带宽度、信噪比和码元传输速率已确定的信道，我们可以通过让每一个码元携带更多的信息量提高信息的传输速率。 码元个数不是越多越好。 如果每个码元携带的信息量$n$越大，即码元取值的数量越多，则在接收端进行调解时要正确识别每一个码元就越困难，导致出错率增加。 奈氏准则和香农公式的主要区别 奈氏准则指出了，码元传输速率是受限的，不能任意提高，否则在接收端就无法正确判定码元是1还是0（因为有码元之间的相互干扰）。 奈氏准则是在理想条件下推导出的。在实际条件下，最高码元传输速率要比理想条件下得出的数值还要小些。电信工程技术人员的任务就是要在实际条件下，寻找出较好的传输码元波形，将比特转换为较为合适的传输信号。 需要注意的是，奈氏准则并没有对信息传输速率给出限制。要提高信息传输速率就必须使每一个传输的码元能够代表许多个比特的信息。这就需要很好的编码技术。 香农公式给出了信息传输速率的极限，即对于一定的传输带宽（以赫兹为单位）和一定的信噪比，信息传输速率的上限就确定了。这个极限是不能够突破的。要想提高信息的传输速率，或者必须设法提高传输线路的带宽，或者必须设法提高所传信号的信噪比，此外没有其他任何办法。 香农公式告诉我们，若要得到无限大的信息传输速率，只有两个办法：要么使用无限大的传输带宽，要么使信号的信噪比无限大（即采用没有噪声的传输信道或使用无限大的发送功率）。当然这都是不可能的。 物理层下面的传输媒体物理层的“连接”不一定是使用导线的“连接”，比如无线连接就不是使用导线的“连接”。 导引型传输媒体非导引型传输媒体信道复用技术复用：允许用户使用一个共享信道进行通信，降低成本，提高利用率。 频分复用所有用户在同一时间占用不同的带宽资源。 用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。 波分复用 就是光的频分复用。 时分复用又称同步时分复用。考过图2-15。 所用用户在不同时间内用同样的频度带宽。 由于计算机数据的突发性质，时分复用时一个用户对已经分配到的子信道的利用率一般是不高的。 统计时分复用 与同步时分复用相比，它按需动态分配时间。 频分复用和时分复用的优缺点 优点 技术比较成熟 缺点 不够灵活 码分复用又称码分多址。 各用户使用经过特殊挑选的不同码型，因此各用户之间不会造成干扰。 每个用户可以在同样的时间使用同样的频带进行通信。 码片定义每一个比特用m个比特表示，这m个比特称为码片。 每个用户发送的是码片（代表1）、码片反码（代表0）或不发送。 接收方用想接收的发送方的码片与收到的信号进行规格化內积。 若规格化內积为1，则发送方发送了码片，即1；若为-1，则发送方发送了码片反码，即0。 码片特点內积：同位相乘之和 规格化內积：內积除以位数 正交：內积为0 分配给每个用户的码片必须各不相同，并且相互正交。 某用户码片与其他用户码片（或码片的反码）內积为0。 码片与自身规格化內积为1。 码片与自身反码规格化內积为-1。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络-第一章复习]]></title>
    <url>%2F2019%2F06%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Internet如何翻译有两种翻译方式： 因特网国家推荐 互联网现实中大多使用这个词。 互联网的重要特点连通性世界各地的用户都可以交换信息，好像彼此之间直接连通一样。 共享即资源共享，如信息、软件、硬件共享等。 两个认识互联网的角度应用工作原理课本是从这个角度来讲解的，我们从这个角度来学习。 计算机网络的组成定义：计算机网络由若干结点（node）和连接这些结点的链路（link）组成。 结点可以是计算机、集线器、路由器、交换机等。 链路互连网与互联网互连网internet 定义 通用名词，泛指通过路由器将网络连起来形成的网络。 其中网络间的通信协议可以是任意的。 互连不仅是物理上，还要通过软件连接。 互联网Internet 定义 互联网是全球最大的、开放的、由众多网络相互连接而成的特定互连网。 采用TCP/IP协议族作为通信规则。 前身是美国的ARPANET。 三层ISP结构ISP，互联网服务提供者。 互联网现在采用三层ISP结构。 本地ISP地区ISP主干ISPIXP允许两个网络直接相连并交换信息。 互联网的组成边缘部分与网络相连的计算机常称为主机。 定义 连接在互联网上的所有主机。 由用户（个人、公司）控制。 进行通信和资源共享。 主机通信方式 对象 计算机通信的对象是应用层中的进程。 客户/服务器方式即C/S方式。 客户和服务器指通信中所涉及的两个应用进程。 客户/服务器模式描述的是进程之间服务和被服务的关系。 客户是服务请求方，服务器是服务提供方。 客户和服务器都要使用互联网核心部分提供的服务。 客户必须知道服务器程序的地址，服务器不需要知道客户程序的地址。 对等连接方式对等连接（peer to peer），P2P。 定义 两台主机在通信时并不区分谁是客户或服务器。 本质上还是C/S方式。 核心部分 定义 由大量网络和连接这些网络的路由器组成。 由ISP控制。 为边缘部分提供服务。 工作方式核心部分的工作方式就是路由器的工作方式。 存储转发 路由器间不断交换路由信息 三种交换方式 严格来讲，分组交换也是可以面向连接的 现在用的是分组交换 电路交换 并不是真正意义上的交换 主要特点：面向连接 建立连接、通信、释放连接 在通信的全部时间内，通信的两个用户始终占用端到端的通信资源。 优点 静态分配传输带宽，只要建立了连接，网络发生拥塞也不会影响通信质量。 缺点 计算机通信时，数据具有突发性，线路上真正用来传送数据的时间往往不到10%，造成通信线路资源的浪费。 如果通信链路是由多段链路组成的，只要有一段链路出现故障，就不能通信。 分组交换 主要特点：采用存储转发技术 将报文拆分成多个分组，加上头部 通过路由器以分组为单位进行存储转发 在接收端将分组组装成报文 优点 高效 动态分配传输带宽，逐段占用通信链路。 灵活 为每一个分组独立地选择最合适的转发路由。 迅速 不需要建立连接就可以向其他主机发送分组。 可靠 保证可靠性的网络协议、分布式多路由的分组交换网使网络有很好的生存性。 某个结点或者链路出现故障时，分组传送的路由可以自适应地动态改变。 缺点 存储转发时需排队，造成一定时延。当网络拥塞非常严重时，整个网络也可能会瘫痪。 分组的首部造成一定开销。 报文交换 主要特点： 采用存储转发技术，但报文不分组 适用于间歇式轻负载 与分组交换相比： 优点 省去了划分分组的步骤 省去了接收端组装分组的步骤 缺点 灵活性不如分组交换 哪个交换方式最好？不能说哪个方式一定好或坏 若需连续传送大量数据，且其发送时间远大于连接建立时间，则电路交换的传输速率较快。 报文交换和分组交换不需要预先分配传输带宽，在传送突发数据时可提高整个网络的信道利用率。 由于一个分组的长度远远小于整个报文的长度，因此分组交换比报文交换的时延小；同时也具有更好的灵活性。 计算机网络性能指标速率 也称为数据率（data rate）或比特率（bit rate）。 定义 连接在计算机网络上的主机在数字信道上传输数据的速率。 单位是b/s，kb/s，Mb/s，Gb/s ==信道：一个发送端，一个接收端== 带宽 定义 数字信道所能传输的最高速率。 毫无疑问，带宽单位和速率一样。 吞吐量 定义 单位时间内通过某个网络（或信道、接口）的实际的数据量。 单位是b，Mb等。 时延$总时延=发送时延+传播时延+处理时延+排队时延$ 一般来说，小时延的网络优于大时延的网络 一个低速率、小时延的网络可以优于一个高速率、大时延的网络。 在总时延中，哪一种时延占主导地位，必须具体分析。 发送时延又叫传输时延，发送速率又叫传输速率。 $发送时延=\frac{数据帧长度(bit)}{发送速率(bit/s)}$ 可见发送时延并非固定不变。 对于高速网络链路，我们提高的仅仅是数据的发送速率，而不是比特在链路上的传播速率。 传播时延$传播时延=\frac{信道长度(m)}{电磁波在信道上的传播速率(m/s)}$ 光纤与铜线相比降低了发送时延，光纤的传播速度反而不如铜线传播速度快。 处理时延主机或路由器在收到分组时要花费一定时间进行处理。 排队时延分组在路由器中可能要排队。 时延带宽积时延带宽积又称为以比特为单位的链路长度。 $时延带宽积=传播时延\times带宽$ 时延带宽积反映传输时线路上数据的多少，即线路上的比特数。 传播时延决定线路的长度 带宽决定每位的长度 往返时间RTT定义：双向交互一次所需的时间。 从发送方发送数据开始，到发送方收到接收方的确认。 ping www.baidu.com 利用率 信道利用率并非越高越好 信道或网络的利用率过高会产生非常大的时延。 令$D_0$表示网络空闲时的时延，$D$表示网络当前的时延，$U$为网络利用率， 则$D=\frac{D_0}{1-U}$。 信道利用率$信道利用率=\frac{有数据通过时间}{总时间}$ 网络利用率定义：信道利用率加权平均值 分层分层思想 相互通信的两个计算机系统必须高度协调，而这种协调是十分复杂的。 分层可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较易于研究和处理。 三种分层方法OSI是法律上的国际标准，TCP/IP是事实上的国际标准。 七层协议：OSI 概念清楚，理论较为完整。 但既复杂又不实用。 四层协议：TCP/IP 简洁，得到广泛应用。 实质内容只有上三层，网络接口层并没有什么具体内容。 五层协议 综合七层协议和四层协议的优点：既简洁又能将概念阐述清楚。 好处5个 各层间是独立的 每一层只实现一种相对独立的功能，上层仅知道下层的接口，而不需知道其如何实现。 灵活性好 只要层间接口关系保持不变，可以对各层进行修改。 结构上可分割开 各层都可以采用最合适的技术实现 易于实现和维护 整个系统被分解为若干个相对独立的子系统，每个子系统都易于实现和维护 能促进标准化工作 每一层的功能及其所提供的服务都已有了精确的说明 坏处分层应使每一层的功能非常明确，所以层次的划分并不容易。 层数太少，会使每一层的协议太复杂； 层数太多，会使各层在功能上有重叠，造成额外开销。 对等层在OSI参考模型中，位于同一水平行（同一层）上的系统构成了OSI的对等层。 协议定义：在ISO/OSI参考模型中，同层对等实体间信息交换时必须遵守的规则。 每层都有协议，有的层只能有一个协议，有的层可以有多个协议。 网络协议主要由以下三个要素构成： 语法数据与控制信息的结构和格式 语义需要发出何种控制信息，完成何种动作以及做出何种响应 同步事件实现顺序的详细说明 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络概述]]></title>
    <url>%2F2019%2F06%2F25%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[之前看韩利辉计网视频的笔记。 网络局域网覆盖范围小 自己花钱买设备 带宽固定 自己维护 比如学院的局域网： 机房的汇聚层交换机连接各教室的交换机，教室的接入层交换机连接各电脑。 两两之间的网线不超过100米，10M 100M 1000M 接入层交换机带宽为百兆，每个口都是百兆。汇聚层交换机带宽要比接入层交换机大。 规范的局域网应该是分层的 广域网超过100米，比如电话线拨号上网，带宽不固定，花钱买带宽、维护等服务 Internet由众多ISP组成，ISP是Internet Service Provider，因特网服务提供商。 各提供商都有自己的机房，对网民提供Internet连接。 各提供商之间最多有一根线相连，所以我用移动的网访问电信的服务器可能会很慢。 有的网站会在各运营商的机房都买一个服务器，或者双线机房（机房里有两种运营商）。 IP和MAC计算机有一个IP地址。 网段。 子网掩码，告诉计算机哪儿是网络部分，哪儿是主机部分。 路由器作用：负责在不同网段转发数据 路由器的端口也有MAC地址 路由器的端口相当于计算机的一个网卡，也有地址 网关：告诉计算机去哪个网段，==指向路由器==。 网卡：MAC地址（物理地址，唯一），出厂已经固定在网卡里，48位二进制。 MAC和IP分别是物理和逻辑上的概念 计算机上发数据包给DNS服务器（计算机配的有），DNS将域名解析成IP，返给计算机 数据包数据、源IP、目标IP 就像一封信 计算机数据包最大1500字节。 数据一次传不完的话，数据帧是有编号的。 数据帧数据包加上源MAC、目标MAC，就是数据帧。 想把数据包传给目标IP，需要路由器，用MAC找到路由器。 然后路由器根据目标IP更新源MAC和目标MAC，最短路径。 数据帧传给交换机，交换机传给路由器，路由器给路由器，最后给交换机，交换机给计算机。 客户机：给我数据 服务器：好的，给你 客户机：已接收，给我下一个数据 服务器：好的，给你 服务器不知道客户机的MAC地址，可以知道客户机的IP。 为什么不能只用MAC标识电脑？ 如果全球计算机都是用交换机连接的，不需要路由器，就可以只用MAC标识电脑。但这不可能。 网卡有缓存，发送缓存，接收缓存。 OSI参考模型7层，国际标准化组织分析计算机通讯得出的。 好处： 不同厂商生产设备可以一起用 各层较为独立，每一个模块有变化，不会影响另一个模块。这并不代表各层之间没有关系。 k层为k+1层提供服务。 分层的思想是使用网络的指导原则。 应用层所有能产生网络流量的程序，记事本就不是，QQ就是。 表示层在传输之前进行的东西。 比如在切割成数据包传输之前是否进行压缩、加密处理、编码 会话层session，规定哪个服务器和客户机哪个窗口交互。 cmd中输入netstat -n 可以查看会话。 只要和其他计算机有数据传输，就会建立会话。我们就可以查到它。 通过查看会话 可以查木马。木马和病毒不一样。 输入netstat -nb可以会话是谁建立的。 传输层实现可靠传输、流量控制、不可靠传输。 可靠传输：超时重传 流量控制：客户机给服务器一个数据包说慢点 不可靠传输：比如向DNS通过域名查IP，双方一个数据包就可以解决问题，这种通讯不需要建立会话，不需要给数据包编号。就不用超时重传，再来一次就好了。 网络层选择最佳路径、规划IP地址。 人工指定路径：通过静态路由 数据链路层定义帧的开始和结束、透明传输、差错校验。 用特殊位表示开始和结束，看到开始标志就接收 看到结束标志就结束 启动密码子 终止密码子 透明传输：一部分数据和结束位一样，会在数据那里插入一个特殊的位，表明这不是真正的结束。接收端接收以后再把插入的位去掉。 差错检验：查出错误，但不会纠正错误，纠正是传输层做的 物理层定义网络设备接口标准、电气标准、如何在物理链路上传输得更快 接口标准：不同公司生产的网线、网卡都能使用 电气标准：比如用几伏电压代表1。 OSI和网络排错应该从最底层开始查找。 物理层查看连接状态、查看发送和接受到的数据包大小。 数据链路层MAC地址冲突、ADSL欠费、网速没办法协商、计算机连接到错误的VLAN 网络层配置了错误的IP地址、子网掩码、网关 路由器上没有到达目标网络的路由 应用层应用层在这儿指网络层之上的 应用程序配置错误 OSI和网络安全物理层交换机不用的口 把网线拔掉 数据链路层ADSL账号密码、无线AP、VLAN、交换机端口绑定MAC地址 网络层在路由器上使用ACL控制数据包流量、Windows高级防火墙 应用层应用层在这儿指网络层之上的。 开发的应用程序没漏洞 SQL注入 OSI和TCP/IP协议 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[相对论基础]]></title>
    <url>%2F2019%2F06%2F22%2F%E7%9B%B8%E5%AF%B9%E8%AE%BA%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[狭义相对论两条基本原理狭义相对论基于惯性参考系 相对性原理物理定律在一切惯性参考系中都具有相同的数学表达形式，也就是所有惯性系对于描述物理现象都是等价的。 狭义相对论原理是伽利略力学相对性原理的推广 光的传播不需要介质 光速不变原理在彼此相对做匀速直线运动的任一惯性参考系中，所测得的光在真空中的传播速度都是相等的。 真空中的光速是个恒量 物体的速度不能超过真空中的光速 相对论速度变换公式 v=\frac{v'+u}{1+\frac{v'u}{c^2}} $v’$：$K’$系中的速度 $v$：$K$系中的速度 $u$：两坐标系的速度差 $\beta=\frac{u}{c}$ 狭义相对论的时空观“同时”的相对性在某个惯性系中同时发生的两个事件，在另一相对它运动的惯性系中，并不一定同时发生，这一结论叫做同时的相对性。 t_2'-t_1'=\frac{\frac{u}{c^2}(x_1-x_2)}{\sqrt{1-\beta^2}}只有当两个事件发生在同一地点时，“同时”才有绝对意义。 时间延缓又叫时间膨胀或时钟变慢 t=\frac{t_0}{\sqrt{1-\beta^2}} $t_0$：固有时，相对于过程发生的地点为静止的参考系中测得的时间间隔。 $t$：运动时，大于固有时。 长度收缩 l=l_0\sqrt{1-\beta^2} $l_0$：固有长度，观察者相对于物体静止时测得的物体长度。 $l$：运动长度，小于固有长度 相对性和绝对性在相对论时空中，运动的描述、时空的量度都是相对的，但因果关系是绝对的。 狭义相对论动力学基础质速关系式 m=\frac{m_0}{\sqrt{1-(\frac{v}{c})^2}} $m_0$：静质量 $m$：动质量 光子的静质量为$0$，速度为$c$ 质速关系式反映了物体与运动的不可分割性 质能关系式 E_0=m_0c^2 E=mc^2 E_k=E-E_0 $E_0$：静能 $E$：运动时的总能量（静能和动能之和） $E_k$：相对论动能 动量能量关系式 E^2=c^2p^2+{E_0}^2光速 3\times10^8\ m/s 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>物理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇编语言-标志位设置]]></title>
    <url>%2F2019%2F06%2F22%2F%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E6%A0%87%E5%BF%97%E4%BD%8D%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[所有标志位MOV、PUSH、POP、NOT、条件转移指令、非条件转移指令、类型转换指令不影响标志位 CF INC、DEC不影响CF ADD 若最高有效位向高位有进位，CF=1；否则CF=0 SUB 作为无符号数运算时，若减数大于被减数，有借位，CF=1；否则CF=0 移位指令 根据各指令移位特性，设置CF NEG 操作数为0，则CF=0；否则CF=1 NOT以外的逻辑运算指令 使CF=0 OF ADD 若两数同号，而结果与操作数符号相反，则OF=1；否则OF=0 SUB 若两数符号相反，结果与减数符号相同，则OF=1；否则OF=0 NOT以外的逻辑运算指令 使OF=0 SF 在指令影响SF的情况下，结果（二进制）最高位为0，则SF=0；否则SF=1 移位指令可影响SF ZF 移位指令可影响ZF 结果是0，ZF=1；否则，ZF=0 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇编语言-中断]]></title>
    <url>%2F2019%2F06%2F22%2F%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E4%B8%AD%E6%96%AD%2F</url>
    <content type="text"><![CDATA[数据传送方式程序控制方式中断方式DMA方式中断传送方式避免因反复查询外部设备的状态而浪费时间，从而提高CPU的效率。 非屏蔽中断非屏蔽中断不受中断允许标志IF的屏蔽，系统中只能有一个非屏蔽中断，其中断类型号为2。 中断过程 PUSH (FLAGS) IF&lt;-0 TF&lt;-0 AC&lt;-0 PUSH (CS) PUSH (IP) (IP)&lt;-(N*4) (CS)&lt;-(N*4+2) 中断指令INT，不给中断号的话，默认是3号中断 STI，设置中断允许位（IF=1） CLI，清除中断允许位（IF=0） 中断向量表各类型中断处理程序的入口地址表，其存放在内存低位处，每项占用4个字节，低位是(IP)，高位是(CS)。 每类中断向量的偏移地址可由中断类型号N乘以4计算出来。 子程序与中断的区别两者实现机制不同 中断程序是固定的(如果操作系统允许，程序员可以修改)； 而子程序是程序员动态编写的。 call func，根据func直接找到子程序入口，根据需求修改(IP)和(CS)； 而int 21h需要计算地址，通过中断向量表找到中断处理程序入口地址。 BIOS、DOS中断BIOS中断和DOS中断是两种特殊的中断。 BIOS比DOS更靠近硬件。 在某些情况下，既可选择DOS中断又可选择BIOS中断实现相应功能；某些情况下，必须使用BIOS才能实现相应的功能。 基本步骤 将调用参数装入指定寄存器中 如需功能号，将其装入AH 如需子功能号，将其装入AL 按中断号调用DOS或BIOS中断，INT 21H DOS常用功能1号功能 功能号 (AH)=1 功能 从键盘输入一个字符并回显在屏幕上 返回参数 (AL)=字符 2号功能 功能号 (AH)=2 功能 显示一个字符（检验Ctrl_Break），光标随字符移动 调用参数 (DL)=字符 9号功能 功能号 (AH)=9 功能 显示字符串，光标跟随字符移动 调用参数 (DS):(DX)为串地址，串必须以$结束 0A号功能 功能号 (AH)=0AH 功能 输入字符到缓冲区，缓冲区第一个字节保存最大字符数，第二个字节保存实际输入的字符数 返回参数 (DS):(DX)为缓冲区首址 常用ASCII码 字符 十六进制ASCII码 空格 20H 0 30H A 41H a 61H 换行 0AH 回车(归位) 0DH 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇编语言-汇编语言程序格式]]></title>
    <url>%2F2019%2F06%2F22%2F%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[上机过程 编辑汇编源程序：test.asm 编译：masm test 链接：link test 调试：debug test.exe 运行：test 汇编源程序组成 指令 伪操作 宏指令 段定义、assume、字符串定义123456789101112131415161718192021data segment buffer dw &quot;HELLO&quot; buffer db &quot;HELLO&quot;data endscode segmentmain proc farassume ds:data,cs:code push ds mov ax,0 push ax mov ax,data mov ds,ax ... retmain endpcode endsend main LABEL、DUP同一块内存可以具有不同的类型属性。 12BYTE_ARRAY LABEL BYTEWORD_ARRAY DW 50 DUP(?) EQU、=表达式赋值伪操作，给表达式赋一个名字，这个名字不占用内存，不允许重复定义 =也是赋值，但允许重复定义。 地址计数器$当前正在汇编指令的偏移地址 ORG设置当前地址计数器的值 数值回送操作符TYPE以字节数表示的类型 表达式是变量时 DB：1 DW：2 DD：4 DF：6 表达式是标号时 NEAR：-1 FAR：-2 表达式为常数时 0 LENGTH使用DUP时，回送该变量的单元数 其他情况，回送1 SIZE回送分配给该变量的字节数，SIZE=LENGTH*TYPE OFFSET回送变量或标号的偏移地址 SEG回送变量或标号的段地址 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇编语言-宏汇编]]></title>
    <url>%2F2019%2F06%2F22%2F%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E5%AE%8F%E6%B1%87%E7%BC%96%2F</url>
    <content type="text"><![CDATA[与子程序比较 优点 缺点 子程序 模块化，省内存，程序只占用一份存储空间 保存及恢复寄存器、参数传递增加额外开销 宏汇编 参数传送简单 每调用一次就展开一次，内存消耗大 宏定义123macroname macro [dummy parameter list] ... endm &amp;宏展开时，合并前后两个符号形成一个符号 123LEAP MACRO COND,LAB J&amp;COND LAB ENDM %把跟在%之后的表达式的值转换成当前基数下的数。 LOCAL伪操作宏定义体内使用标号需要使用LOCAL伪操作，其必须是MACRO伪操作后的第一个语句，两者之间不允许有注释和分号标志。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇编语言-80x86指令系统]]></title>
    <url>%2F2019%2F06%2F22%2F%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-80x86%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[数据传送指令通用数据传输指令MOV 格式 mov dst,src 执行操作 (dst)&lt;-(src) 注意 DST、SRC不能同时为段寄存器 立即数不能送段寄存器 DST不能是CS DST、SRC不能同时是存储器寻址 不影响标志位 相关指令 movsx 带符号扩展传送 movzx 带零扩展传送 PUSH 格式 push src 执行操作（16位指令） (sp)&lt;-(sp)-2，说明栈顶地址低 ((sp+1),(sp))&lt;-(src) 注意 堆栈操作必须以字为单位 push和pop不能用立即寻址方式 pop的dst不能是CS SP在任何时候都指向栈顶 push和pop不影响标志位 相关指令 pusha 16位通用寄存器依次进栈 popa 16位通用寄存器依次出栈 POP 格式 pop dst 执行操作（16位指令） (dst)&lt;-((sp+1),(sp)) (sp)&lt;-(sp)+2 累加器专用传送指令该组指令仅限于使用累加器EAX，AX或AL传送信息。 IN输入，即I/O传给CPU信息。 长格式 in al,port in ax,port 执行操作 (al)&lt;-(port)，字节 (ax)&lt;-(port)，字 短格式 in al,dx，字节 in ax,dx，字 执行操作 (al)&lt;-((dx))，字节 (ax)&lt;-((dx))，字 OUT输出，即CPU传给IO信息。 长格式 out port,al，字节 out port,ax，字 执行操作 (port)&lt;-(al)，字节 (port+1,port)&lt;-(ax)，字 短格式 out dx,al，字节 out dx,ax，字 执行操作 ((dx))&lt;-(al)，字节 ((dx)+1,(dx))&lt;-(ax)，字 s 当$端口号\geq256$时，只能使用短格式。 IN和OUT指令不影响标志位。 地址传送指令LEA源操作数的偏移地址送寄存器 格式 lea reg,src 执行操作 (reg)&lt;-src 注意 dst不能使用段寄存器 源操作数可以是除立即数和寄存器以外的任一种存储器寻址方式。 不影响标志位 标志寄存器传送指令LAHFFLAGS低字节送AH，load AH with FLAGS 格式 LAHF 执行操作 (AH)&lt;-(FLAGS的低字节) SAHFAH送FLAGS低字节，store AH into FLAGS 格式 SAHF 执行操作 (FLAGS的低字节)&lt;-(AH) PUSHF标志进栈指令 格式 PUSHF 执行操作 (SP)&lt;-(SP)-2 ((SP)+1,(SP))&lt;-(FLAGS) POPF标志出栈指令 格式 POPF 执行操作 (FLAGS)&lt;-((SP)+1,(SP)) (SP)&lt;-(SP)+2 类型转换指令不影响标志位 CBW字节转换为字，AL的内容符号扩展到AH，形成AX中的字 CWD字转换为双字，同理，AX扩展为DX:AX CDQ双字转换为4字，同理，EAX扩展为EDX:EAX 算术指令加法指令ADD加法 格式 ADD DST,SRC 执行操作 (DST)&lt;-(SRC)+(DST) ADC带进位加法 格式 ADC DST,SRC 执行操作 (DST)&lt;-(DST)+(SRC)+CF INC加1 格式 INC OPR 执行操作 (OPR)&lt;-(OPR)+1 注意 以上三条指令除INC不影响CF外，它们都影响条件标志位。 XADD交换并相加 格式 XADD DST,SRC 执行操作 TEMP&lt;-(SRC)+(DST) (SRC)&lt;-DST (DST)&lt;-TEMP 减法指令除DEC不影响CF标志外，它们都影响条件标志位。 SUB减法 格式 SUB DST,SRC 执行操作 (DST)&lt;-(DST)-(SRC) SBB带借位减法 格式 SBB DST,SRC 执行操作 (DST)&lt;-(DST)-(SRC)-CF DEC减1 格式 DEC OPR 执行操作 (OPR)&lt;-(OPR)-1 NEG求补指令 格式 NEG OPR 执行操作 (OPR)&lt;-(OPR)，操作数按位求反后+1 CMP 格式 CMP OPR1,OPR2 执行操作 (OPR1)-(OPR2) 乘法指令乘法指令对CF和OF以外的条件码无定义。 AX、DX,AX为隐含的乘数寄存器。 SRC不能是立即数。 MUL无符号数乘法 格式 MUL SRC 执行指令 (AX)&lt;-(AL)*(SRC) (DX,AX)&lt;-(AX)*(SRC) IMUL带符号数乘法 格式 IMUL SRC 执行操作 与MUL指令相同，但必须是带符号数，而MUL是无符号数 除法指令除法指令对所有条件码均无定义。 SRC不能是立即数。 目的操作数必须存放在AX或DX,AX中。 DIV无符号数除法指令 格式 DIV SRC 执行操作 (AL)&lt;-(AX)/(SRC)的商、(AH)&lt;-(AX)/(SRC)的余数 (AX)&lt;-(DX,AX)/(SRC)的商、(DX)&lt;-(DX,AX)/(SRC)的余数 IDIV带符号数除法指令 格式 IDIV SRC 执行操作 与DIV指令相同，但必须是带符号数 逻辑指令逻辑运算指令除了NOT外，其他4条逻辑运算指令使CF、OF为0，对AF无定义，对SF、ZF、PF根据运算结果设置。 AND逻辑与 格式 AND DST,SRC 执行操作 (DST)&lt;-(DST)∧(SRC) OR 格式 OR DST,SRC 执行操作 (DST)&lt;-(DST)∨(SRC) NOT按位取反 格式 NOT OPR 执行操作 略 注意 不允许使用立即数，不影响标志位 XOR异或 格式 XOR DST,SRC 执行操作 略 TEST两个操作数进行逻辑与，不保存结果 格式 TEST OPR1,OPR2 执行操作 (OPR1)∧(OPR2) 移位指令当CNT为1时，OF位才有效，否则无定义 指令格式：指令 OPR,CNT 非循环移位指令SA：Shift Arithmetic SH：Shift 根据移位后的结果设置SF、ZF和PF位，AF则无定义。 算术移位指令适用于带符号数运算，逻辑移位指令适用于无符号数运算。 SHL 逻辑左移指令，低位补0，CF存放移出去的最后一位 SAL 算术左移指令，和SHL相同 SHR 逻辑右移指令，高位补0，CF存放移出去的最后一位 SAR 算术右移指令，高位补符号位，CF存放移出去的最后一位 循环移位指令RC：Rotate Carry RO：Rotate 不影响除CF和OF外的其他条件标志。 ROL 循环左移指令，移出去的最后一位存入CF ROR 循环右移指令，移出去的最后一位存入CF RCL 带进位循环左移指令，CF参与循环移位 RCR 带进位循环右移指令，CF参与循环移位 串处理指令步骤 设置ES、DS 设置DI、SI 串长度存入CX 建立方向标志 CLD：正向，DF=0，Clear Direction STD：反向，DF=1，Set Direction 串处理，REP MOVSB REP格式：REP MOVS 如果CX为0，则结束；否则(CX)&lt;(CX)-1，执行串指令。LOOP也是先判断CX是不是0。 MOVS与REP、REPZ、REPNZ这三个前缀配合使用。 格式：MOVS DST,SRC 不影响条件码 控制转移指令无条件转移指令不影响标志位 条件转移指令不影响标志位 JL 测试条件 SF异或OF=1 JGE 测试条件 SF异或OF=0 条件设置指令STD CLD 等等 循环指令不影响条件码。 执行操作： (CX)&lt;-(CX)-1 检查是否满足测试条件 LOOP当计数器不为0时循环指令 格式 LOOP OPR 测试条件 (CX)!=0 LOOPZ当计数器不为0且结果为0（即ZF=1）时循环指令 格式 LOOPZ OPR 测试条件 ZF=1且(CX)!=0 LOOPNZ当计数器不为0且结果不为0（即ZF=0）时循环指令 格式 LOOPNZ OPR 测试条件 ZF=0且(CX)!=0 子程序均不影响条件码。 写IP和CS都是先写IP，再写CS。中断也是这样。所以压栈也应先压CS，再压IP。 CALL格式：CALL DST 段内：只需要PUSH(IP) 段间：先PUSH (CS)再PUSH (IP) 直接：偏移量D或DST指定的段地址和偏移地址 间接：根据(EA)去取(IP)和(CS) 段内直接近调用 执行操作 PUSH (IP) (IP)&lt;-(IP)+D，D为位移量。 段内间接近调用 由指定的寄存器或存储单元的内容给出转向地址 执行操作 PUSH (IP) (IP)&lt;-(EA) 段间直接远调用 执行操作 PUSH (CS) PUSH (IP) (IP)&lt;-DST指定的偏移地址 (CS)&lt;-DST指定的段地址 段间间接远调用 执行操作 PUSH (CS) PUSH (IP) (IP)&lt;-(EA) (CS)&lt;-(EA+2) RET段内：只需要(IP)&lt;-POP() 段间：先(IP)&lt;-POP()再(CS)&lt;-POP() 带立即数：最后(SP)&lt;-(SP)+D，D为位移量 段内近返回 格式 RET 执行操作 (IP)&lt;-POP() 段内带立即数近返回 格式 RET EXP 执行操作 (IP)&lt;-POP() (SP)&lt;-(SP)+D，D为位移量 段间远返回 格式 RET 执行操作 (IP)&lt;-POP() (CS)&lt;-POP() 段间带立即数返回 格式 RET EXP 执行操作 (IP)&lt;-POP() (CS)&lt;-POP() (SP)&lt;-(SP)+D，D为位移量 中断INT 格式 INT TYPE INT 执行操作 PUSH (FLAGS) IF&lt;-0 TF&lt;-0 AC&lt;-0 PUSH (CS) PUSH (IP) (IP)&lt;-(TYPE*4) (CS)&lt;-(TYPE*4+2) IRET 格式 IRET 执行操作 (IP)&lt;-POP() (CS)&lt;-POP() (FLAGS)&lt;-POP() 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇编语言-80x86寻址方式]]></title>
    <url>%2F2019%2F06%2F22%2F%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-80x86%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[物理地址 存储器以字节为单位存储信息。 每一个字节单元有一个惟一的存储器地址，称为物理地址。 一个字存入存储器要占有相继的两个字节，存放时低位字节存入低地址，高位字节存入高地址。 字单元的地址采用它的低地址表示。 画内存时下边是高地址，上边是高地址。栈底是高地址。 每个存储单元有惟一的物理地址，但它却可由不同的段地址和不同的偏移地址组成。 逻辑地址=段地址：偏移地址 物理地址=段地址左移四位+偏移地址与数据有关的寻址方式立即寻址方式操作数直接存放在指令中，这样的操作数称为立即数。 操作数=立即数 mov ax,3 注意： 立即寻址方式只能用于源操作数字段。 源操作数长度应与目的操作数长度一致。 寄存器寻址方式操作数存放在寄存器中，指令指定寄存器号。 mov ax,bx 操作数=指定寄存器中的内容 以上两种寻址方式都不涉及存储器。 以下各种寻址方式的操作数都存放在存储区中。 在80x86中，把操作数的偏移地址称为有效地址，EA(Effective Address)。 以下各种寻址方式通过不同途径求得操作数的有效地址，进而获得操作数。 有效地址=基址+变址\times比例因子+位移量有效地址可以有以下四种成分组成： 位移量 （displacement），是存放在指令中的数字，但它不是立即数，而是一个地址。 基址 （base），是存放在基址寄存器（BP、BX）中的内容，通常用来指向数据段中数组或字符串的首地址。 变址 （index），是存放在变址寄存器（SI、DI）中的内容，通常用来访问数组中的某个元素或字符串中的某个字符。 比例因子 （scale factor），其值可为1,2,4,8。（386及后继机型才有比例因子） &lt;center&gt;表1 16位寻址时有效地址三种成分的组成&lt;/center&gt; 成分 16位寻址 位移量 0,8,16位 基址寄存器 BX,BP 变址寄存器 SI,DI 表2 默认段选择规则 访存类型 所用段及段寄存器 缺省规则 指令 代码段 CS 用于取指令 堆栈 堆栈段 SS 进出栈，ESP、BP或ESP作为基址寄存器 局部数据 数据段 DS 除堆栈和串指令的目的串之外 目的串 附加数据段 ES 串处理指令的目的串 禁止使用段跨越前缀的三种情况： 串处理指令的目的串必须使用ES段 PUSH和POP指令的源必须使用SS段 指令必须存放在CS段 直接寻址方式 有效地址=位移量 mov ax,[0] 位移量可以用符号地址（变量）表示。 mov ax,table mov ax,[table] 默认段寄存器为DS。 该寻址方式适用于处理单个变量。 寄存器间接寻址方式 有效地址=基址寄存器或变址寄存器的内容 mov ax,[bp] mov ax,[bx] 有效地址就在某个寄存器（BX,BP,SI,DI）中。（不允许使用AX,CX,DX） BP的默认段寄存器为SS，其他三个寄存器的默认段为DS。 寄存器相对寻址方式又称直接变址寻址方式。 有效地址=一个基址寄存器或变址寄存器的内容+位移量默认段情况与寄存器间接寻址方式相同。 mov ax,count[si] mov ax,[count+si] 基址变址寻址方式 有效地址=一个基址寄存器的内容+一个变址寄存器的内容默认段情况参看表1和表2。 mov ax,[bx][di] mov ax,[bp][si] mov ax,[bx+di] 相对基址变址寻址方式 有效地址=一个基址寄存器的内容+一个变址寄存器的内容+位移量 mov ax,mask[bx][si] 与转移地址有关的寻址方式这种寻址方式用来确定转移指令与CALL指令的转向地址。 段内直接寻址有效地址=(IP)+位移量 平常用的jmp next等，都是这种寻址方式。 近转移： 位移量大小为16bit，如jmp near ptr next。 短转移： 位移量为8bit，如jmp short next，看看其他与转移地址有关的寻址方式会发现只有short没有ptr。 段内间接寻址有效地址=寄存器或存储单元内容。 该内容可以用除立即寻址方式以外的与数据有关的所有寻址方式。 jmp bx jmp word ptr[bp+table] word ptr说明是一个字，所以是段内转移。 段间直接寻址指令中直接提供了转向段地址和偏移地址。 jmp far ptr next 段间间接寻址取存储器中的两个相继字取代IP和CS中的原始内容，以达到段间转移的目的。 存储单元地址除立即数方式和寄存器方式外均可。 jmp dowrd ptr[table+bx]。 dword说明是双字，所以是段间转移。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇编基础（二）]]></title>
    <url>%2F2019%2F06%2F22%2F%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[寒假看B站小甲鱼视频的笔记二 CPU概述一个典型的CPU由运算器、控制器、寄存器等器件组成，这些器件靠内部总线相连。 内部总线和外部总线内部总线实现CPU内部各个器件之间的联系。 外部总线实现CPU和主板上其他器件的联系。 寄存器概述8086CPU有14个寄存器，其中有8个通用寄存器。 通用寄存器8086CPU有14个寄存器，都是16位的，每个寄存器可以存放两个字节，即一个字。 什么是通用寄存器AX、BX、CX、DX通常用来存放一般性数据，称为通用寄存器。 8086上一代CPU中的寄存器都是8位的，所以为保证兼容性，这四个寄存器都可以分为两个独立的8位寄存器使用。 AX可以分为AH和AL，分别是高位和低位。其他三个通用寄存器同理。 如何兼容：AH都为0，单独拿个AL来用。 ==兼容应该是指编写的在8位寄存器上运行的汇编代码可以在16位寄存器上运行吧？== 通用寄存器的结构以AX为例 16位：从低地址到高地址分别是0-15。 16位数据在寄存器中的存放情况 数据 二进制表示 在寄存器AX中的存储 18 10010 0000000000010010 20000 100111000100000 0100111000100000 一个16位寄存器所能存储的数据的最大值：2^16-1 字在寄存器中的存储一个字是两个字节。 字的高位字节和低位字节自然就存在这个寄存器的高8位寄存器和低8位寄存器中。 几条汇编指令汇编指令不区分大小写！ 汇编指令 高级语言描述 mov ax,18 ax=18 add ax,bx ax=ax+bx 在进行数据传送或运算时，要注意指令的两个操作对象的位数应该是一致的。 如果加法结果超出最大值，会存储低位，但多出来的位也没有扔掉。 AL也遵循上边的规则，多出来的位不会在AH里。 物理地址所有的内存单元构成的存储空间是一个一维的线性空间。 CPU访问内存单元时要给出内存单元的地址。 这个唯一的地址就是物理地址。 16位结构的CPU特征运算器一次最多可以处理16位的数据。寄存器的最大宽度为16位寄存器和运算器之间的通路是16位的8086地址加法器工作原理物理地址=段地址*16+偏移地址 段地址*16 二进制表示的话 ：段地址左移四位 十六进制表示的话 段地址左移一位 一个数的X进制左移n位，相当于乘以$X^n$。 段的概念看P9吧，没看呢 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇编基础（一）]]></title>
    <url>%2F2019%2F06%2F22%2F%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[寒假看B站小甲鱼视频的笔记一 前言汇编语言特点机器语言以外最底层的语言所有语言中效率最高学习目标了解CPU、内存和其他硬件如何配合用计算机的思维操作计算机。研究重点：计算机思维如何利用硬件系统的编程结构和指令集有效灵活地控制系统进行工作，重在思维。 机器语言机器语言是机器指令的集合机器语言是机器指令的集合。 机器指令是01串机器指令是计算机（CPU）唯一懂的指令，由0和1组成。 指令的三种表示方法机器指令01010000 汇编语言PUSH AX 电平脉冲按次序的8个脉冲 汇编语言的产生汇编指令和机器指令的差别在于指令的表示方法汇编指令和机器指令的差别在于指令的表示方法。 汇编语言是符号语言，和机器语言之间的对应关系基本上是一一对应的。 一条机器语言的指令对应一条汇编语言的指令。 ollydbg 汇编语言作用过程汇编指令，经过编译器处理（类似于替换作用，不完全是替换），变成机器码，交给计算机。 汇编语言的组成汇编语言的核心是汇编指令，它决定了汇编语言的特性。 伪指令和其他符号可以归为一类。 汇编指令机器指令的助记符。 伪指令由编译器执行。 其他符号由编译器识别。 存储器CPU的作用：控制整个计算机并进行运算CPU是计算机的核心部件，它控制整个计算机的运作并进行运算。 CPU工作的信息要求：指令+数据要想让一个CPU工作，就必须向它提供指令和数据。 提供指令提供数据CPU对存储器进行读写的信息要求CPU要进行数据的读写，必须和外部器件（标准说法是芯片）进行三类信息的交互： 地址信息存储单元的序号（地址）。 控制信息器件的选择，读或写命令。 数据信息读或写的数据。 存储器的分类按读写属性分类：RAM和ROM随机存储器RAM只读存储器ROMRAM和ROM的区别断电后，RAM中的数据将会遗失，而ROM中的数据不会。 按功能和连接分类：随机存储器RAM装有BIOS的ROM接口卡上的RAMBIOSBIOS是基本IO系统Basic Input/Output System，基本输入输出系统。 BIOS是由主板和各类接口卡（显卡、网卡等）厂商提供的软件系统。 主板和接口卡的知识在后边。 BIOS在主板和某些接口卡的ROM中不止主板才有BIOS，在主板和某些接口卡上插有存储相应BIOS的ROM。 BIOS的作用可以通过BIOS利用对应硬件设备进行最基本的输入输出。 开机时看到的界面就是BIOS在发生作用，它在检测CPU、内存、硬盘、键盘等等有没有插好。 如果病毒进入BIOS，杀毒软件也杀不掉的。 内部存储器内部存储器是内存，一个大的RAM平常所说的内存条、内存就是内部存储器，一个大的RAM。 内部存储器的作用PC机中内存的作用仅次于CPU，离开内存，再好的CPU也无法工作。 磁盘不同于内存，磁盘上的数据或程序如果不读到内存中，就无法被CPU使用。 显卡、网卡、BIOS等都是有它的（存储器）内存的。 CPU和内存读写很快，内存和磁盘读写的速度比较慢。 存储器存储的内容及其作用存储器存储了指令和数据。 指令指令告诉CPU怎么操作。 数据数据告诉CPU什么操作什么。 指令和数据的关系 指令和数据是应用上的概念。 在内存或磁盘中，指令和数据没有任何区别，都是二进制信息。 根据程序员如何应用，CPU处理的二进制信息 可以是汇编代码（指令），也可以是数据，如下： 1000100111011000 89D8H 数据，末尾的H表示Hex，十六进制。B表示二进制，十进制没有后缀。 MOV AX,BX 程序，将寄存器BX的内容粘贴到寄存器AX中。 寄存器寄存器是CPU中可以存储数据的器件，一个CPU中有多个寄存器。 寄存器是一种比内存和二级缓存更低一层，更接近CPU的存储器。 存储单元存储单元是存储器的一个个部分存储器被划分为若干个存储单元。 每个存储单元存储一个字节每个存储单元存储一个字节。 1字节（Byte）= 8位（bit） 1B=8b 存储单元从0开始编号存储单元从0开始顺序编号。计算机都从0开始计数。 例如： 一个存储器有128个存储单元。编号0-127。 显卡里面有个内存，叫显存，数据存在显存里面，显卡里的GPU把显存中的数据映射到屏幕上。GPU的速度比CPU快多了。3D游戏对于显卡的要求是很高的。 总线计算机传输、处理的信息都是电信号，电信号要用导线传送。 计算机中专门有连接CPU和其他芯片的导线，称作总线。 总线分类在物理层次上，总线是一根根导线的集合。 逻辑上的分类： 地址总线CPU是通过地址总线来指定存储器单元的。所以地址总线能传送多少个不同的信息，CPU就可以对多少个存储单元进行寻址。 一个CPU有$N$根地址总线，则其地址总线宽度为$N$，它可以寻找$2^N$个内存单元。 寻址能力寻址能力为8KB，即能寻找到8*1024个字节，总线宽度为13。 数据总线有几根数据总线就最多可以传几位。 控制总线控制总线是一些不同控制线的集合。CPU通过控制总线控制外部器件。 有多少根控制总线就意味着CPU提供了对外部器件的多少种控制。 内存不只是内存条，还有显存，网卡内存等，它们线性排列。 主板每个PC机，都有一个主板。 主板上有核心器件（CPU、内存）和一些主要器件，这些器件通过总线（地址总线、数据总线、控制总线）相连。 接口卡计算机系统中，所有可用程序控制其工作的设备，必须受到CPU的控制。 CPU对外部设备不能直接控制，如显示器、音箱、打印机等。 直接控制这些设备进行工作的是插在扩展插槽上的接口卡。 内存地址空间不同的计算机系统的内存地址空间分配情况是不同的。 各类存储器逻辑相同点各类存储器在物理上是独立的器件： 但它们在逻辑上有两点相同： 都和CPU总线相连CPU对它们进行读或写的时候都通过控制总线发出内存读写命令什么是内存地址空间一个CPU的地址总线宽度为10，那个可以寻址1024个内存单元，这1024个可寻到的内存单元就构成这个CPU的内存地址空间。 将各类存储器在逻辑上合并成一个存储器： 对CPU来讲，系统中各类存储器中的存储单元都处于一个统一的逻辑存储器中，它的容量受CPU寻址能力的限制。这个逻辑上统一的存储器就是我们说的内存地址空间。 每个物理上的存储器在逻辑上占有一段地址段，CPU对其段进行操作，就是对物理存储进行操作。 最终运行程序的是CPU，我们用汇编语言编程时，必须要从CPU角度考虑问题。 小结 汇编指令是机器指令的助记符，同机器指令一一对应。 每一种CPU都有自己的汇编指令集。 CPU可以直接使用的信息在存储器中存放。 在存储器中指令和数据没有任何区别，都是二进制信息。 存储单元从0开始顺序编号。 一个存储单元可以存储一个字节，即8个bit（8b）、8位二进制。 1GB = 1024MB 1MB = 1024KB 1KB = 1024Byte 1Byte = 8bit 每个CPU芯片都有许多管脚，这些管脚和总线相连。也可以说这些管脚引出总线。一个CPU可以引出三种总线的宽度标志了CPU的不同方面的性能。 地址总线宽度决定CPU寻址能力 数据总线宽度决定CPU与其他器件进行一次数据传输时的数据传输量 控制总线宽度决定CPU对系统中其他器件的控制能力 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[双缝干涉]]></title>
    <url>%2F2019%2F06%2F19%2F%E5%8F%8C%E7%BC%9D%E5%B9%B2%E6%B6%89%2F</url>
    <content type="text"><![CDATA[普通光源发光机理普通光源发光机理：激发态原子的自发辐射。 光波列：原子发射的光波是一段频率一定、振动方向一定、有限长的光波。 特点：间歇性、随机性 不同原子在同一时刻发出的波列各自独立。 波列越长，单色性越强。 相干光相干条件： 振动频率相同 振动方向相同 相位差恒定 相干光的获得方法获得相干光的基本原理： 根据普通光源的发光机理可知，我们只能通过某些装置将同一光源的同一部分发出的光，获得符合相干条件的相干光。 分波阵面法同一波阵面上各点的振动具有相同相位。 如杨氏双缝实验。 分振幅法一束光投射到两种介质分界面上时，一部分反射、一部分透射，光能就被分为两份或若干份，振幅同时被分成几份。 薄膜干涉实验，其中包括等倾干涉和等厚干涉，等厚干涉包括劈尖膜和牛顿环。 双缝干涉 \delta=r_2-r_1\approx dsin\theta \approx dtan \theta=\frac{xd}{D} 明纹 即相位差为$\pm2k\pi$，光程差$\delta$为$\pm k\lambda$。 \delta=\frac{xd}{D}=\pm k\lambda,\qquad k=0,1,2,... \Downarrow x=\pm k\frac{D\lambda}{d},\qquad k=0,1,2,... 暗纹 即相位差为$\pm(2k+1)\pi$，光程差$\delta$为$\pm (2k+1)\frac{\lambda}{2}$。 \delta=\frac{xd}{D}=\pm (2k+1)\frac{\lambda}{2},\qquad k=0,1,2,... \Downarrow x=\pm (2k+1)\frac{D\lambda}{d},\qquad k=0,1,2,...特点： 两明条纹或暗条纹的间距为$\Delta x=\frac{D\lambda}{d}$，所以干涉条纹等间距分布。 条纹平行，相邻明纹的间距是暗条纹的宽度。 中间级次低。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>物理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机系统结构作业]]></title>
    <url>%2F2019%2F06%2F16%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E4%BD%9C%E4%B8%9A%2F</url>
    <content type="text"><![CDATA[说明： 大二下学期计算机系统结构课程课后作业，题目来源：课后题 1.1题目解释下列术语 层次结构；计算机系统结构；计算机组成；计算机实现；透明性；由上往下设计；由下往上设计；系列机；软件兼容；兼容机；模拟；仿真；虚拟机；宿主机；指令流；数据流；Amdahl定律；CPI；MIPS；MFLOPS 答层次结构 定义 层次结构在这里指计算机系统层次结构。计算机系统系统由硬件和软件组成，按功能划分为7级层次结构。 每一级对应一种机器（虚拟机器由软件实现，实际机器由硬件实现），从第0级到第6级，级数越低越靠近硬件，级数越高越靠近软件。 在某层次的观察者视角中，他只是通过该层次的语言了解和使用计算机，不必关心低层次的那些机器的工作原理，也就是对于高层来说低层是透明的。 个人理解 计算机系统层次结构是计算机领域分层思想的一种应用，计算机网络的体系结构（OSI七层协议等）也是。在层次结构中，每层负责解决一定的问题，即具有一定的功能。一般来说，底层为高层提供一定的服务。 示意图 计算机系统结构 定义 “计算机系统结构”这个名词来源于英文computer architecture，目前并无统一定义，现以Amdahl定义举例。 Amdahl等人在1964年提出计算机系统结构这个名词，他们将其定义为程序设计者所看到的一个计算机系统（也就是上边提到的机器）的属性，即概念性结构和功能特性，这是程序员为了使其编写的程序能在机器上正确运行，需要了解和遵循的计算机属性。 计算机系统结构主要研究软件、硬件功能分配和对软件、硬件界面的确定，即哪些功能由软件完成、哪些功能由硬件完成。 Amdahl等人对计算机系统结构定义的主要内容是指令系统及其执行模型，然而随着新器件的出现，计算机系统结构的定义还应包括功能模块的设计。 个人理解 如果把计算机这门科学涉及的知识进行分层，计算机系统结构则是软件和硬件的交界处，硬件是计算机组成原理的主要内容，软件则是操作系统等。 分类方法 Flynn分类法 按照指令流和数据流的不同组织方式进行分类，分为以下四类： 单指令流单数据流SISD 单指令流多数据流SIMD 多指令流单数据流MISD 多指令流多数据流MIMD 冯氏分类法 冯泽云提出用最大并行度对计算机系统结构进行分类，分为以下四类： 字串位串WSBS 字并位串WPBS 字串位并WSBP 字并位并WPBP Handler分类法 Wolfgan Handler在1977年根据并行度和流水线提出了一种分类法，其将计算机的硬件结构分为三个层次，并分别考虑它们的可并行-流水处理程度，以下为三个层次： 程序控制部件的个数 算术逻辑部件或处理部件的个数 每个算术逻辑部件包含基本逻辑线路的套数 计算机组成计算机组成是计算机系统结构的逻辑实现，包括机器内部的数据流和控制流的组成以及逻辑设计等。 其任务是在计算机系统结构确定分配给硬件子系统的功能及其概念结构之后，研究各组成部分的内部构造和相互联系，以实现机器指令级的各种功能和特性。 计算机实现计算机实现是指计算机组成的物理实现。 透明性透明指的是本来存在的事物和属性，从某种角度来看，它是不存在的。 个人理解： 计算机网络中物理层的实现对于网络层来说就是透明的，网络层并不知道物理层的内部实现，仅知道物理层的外部接口而已。 就像课堂上老师要收作业，他不知道课代表是怎么收的，课代表怎么收作业对于老师来说就是透明的。 由上往下设计与由下往上设计对应，根据计算机系统结构的分成，从最高层开始设计每层的功能与实现。 由下往上设计根据计算机系统结构的分层，从最低层开始设计每层的功能与实现。 这种方法以前较为适宜，因为那时硬件成本昂贵，硬件技术水平低，软件技术和硬件技术相比往往处于被动地位。 系列机系列机是指在一个厂家内生产的具有相同的系统结构，但具有不同组成和实现的一系列不同型号的机器。 软件兼容同一个软件可以不加修改地运行于系统结构相同的各档机器，可获得相同的结果，差别只在于不同的运行时间。 系列机的软件兼容分为向上兼容、向下兼容、向左兼容、向右兼容。 兼容机不同厂家生产的具有相同系统结构的计算机称为兼容机。它的思想与系列机的思想是一致的。 模拟模拟指用软件方法在一台现有的计算机上实现另一台计算机的指令系统。 通过解释方法把B机器的每一条指令用A机器的指令进行解释执行。 A机器称为宿主机，B机器称为虚拟机。 仿真用微程序直接解释另一种机器指令系统的方法称为仿真。 虚拟机模拟中已介绍。 宿主机模拟中已介绍。 指令流机器执行的指令序列。 数据流由指令流调用的数据序列，包括输入数据和中间结果。 Amdahl定律系统中某一部件由于采用某种更快的执行方式后整个系统性能的提高与这种执行方式的使用频率或占总执行时间的比例有关。 CPI每条指令的平均时钟周期。 CPI=CPU时钟周期数目/ICMIPS每秒百万条指令数。 MIPS=\frac{指令条数}{执行时间\times10^6}=\frac{时钟频率}{CPI\times10^6}MFLOPS每秒百万次浮点操作次数。 MFLOPS=\frac{程序中的浮点操作次数}{执行时间\times10^6}1.5题目硬件和软件在什么意义上是等效的？在什么意义上又是不等效的？试举例说明 答 个人理解 计算机系统结构的设计主要在功能这一层次上考虑问题。 在功能这个层次上考虑，软件和硬件是等效的，即软件和硬件都实现了同样的功能。 从功能实现的原理这个层次上考虑，软件和硬件是不等效的，两者的实现方式是不同的，成本、效率等指标也会有不同。 举例 比如存储器管理，不管用硬件还是软件，都可以实现相同的存储器管理功能，但两者的实现方法和性能都是不同的。 1.6题目试以实例说明计算机系统结构、计算机组成与计算机实现之间的相互关系和相互影响。 答 相互关系 一种系统结构可以有多种组成 比如系列机系统结构相同，指令的执行顺序既可以是顺序执行，又可以是重叠、流水线等执行顺序。 一种组成可以有多种物理实现 比如同样的组成，主存既可以使用双极型，又可以使用MOS型。 相互影响 系统结构不同，采用的计算机组成也不同，同样计算机组成也会影响系统结构。 1.12题目如果某一计算任务用向量方式求解比用标量方式求解快20倍，称可用向量方式求解部分所花时间占总的时间的百分比为可向量化百分比。 画出加速比与向量化比例两者关系的曲线。 答该题考察Amdahl定律， S_n=\frac{T_0}{T_n}=\frac{1}{(1-Fe)+\frac{Fe}{Se}}上式中$Sn$为加速比； $Fe$为$\frac{可改进部分占用时间}{改进前整个任务的执行时间}$； $Se$为$\frac{改进前改进部分的执行时间}{改进后改进部分的执行时间}$。 可知可向量化百分比即为$Fe$，且$Se=\frac{20}{1}=20$。（虽说快20倍，这里应该是21的，为简化计算，就这样吧..…） 由上，可得下式： S_n=\frac{1}{1-0.95Fe}MATLAB代码： 123456Fe=0:0.02:1;Sn=1./(1-0.95*Fe);plot(Fe,Sn);grid minor;xlabel('加速比Sn');ylabel('向量化比例Fe'); 作图如下： 1.13题目题1.12中为达到加速比2，可向量化的百分比应是多少？ 答解下式： 2=\frac{1}{1-0.95Fe}得$Fe\approx0.526$。 2.14问题一台模型机共有7条指令，各指令的使用频度分别为35%，25%，20%，10%，5%，3%，2%，有8个通用数据寄存器，2个变址寄存器。问题如下： 要求操作码的平均长度最短，请设计操作码的编码，并设计所设计操作码的平均长度。 设计8位字长的寄存器-寄存器型指令3条，16位字长的寄存器-存储器型变址寻址方式指令4条，变址范围不小于正、负127。请设计指令格式，并给出各字段的长度和操作码的编码。 答第1问由题可知，要求操作码平均长度最短，所以应使用哈夫曼编码，指令使用频度越高，其操作码长度应越短。 指令操作码设计如下 指令序号 使用频度 Huffman编码 操作码长度 1 0.35 0 1 2 0.25 10 2 3 0.20 110 3 4 0.10 1110 4 5 0.05 11110 5 6 0.03 111110 6 7 0.02 111111 6 指令操作码平均长度为： H=0.35\times1+0.25\times2+0.20\times3+0.10\times4+0.05\times5+0.03\times6+0.02\times6=2.4第2问 寄存器-寄存器型指令 指令序号 编码（2位） 通用寄存器（3位） 通用寄存器（3位） 1 00 R R 2 01 R R 3 10 R R 寄存器-存储器型变址寻址方式指令 指令序号 编码（4位） 通用寄存器（3位） 变址寄存器（1位） 地址偏移量（8位） 1 1100 R X A 2 1101 R X A 3 1110 R X A 4 1111 R X A 2.17问题在一般通用计算机中，按照指令所完成的功能来划分，应该有哪几类指令？各类指令的主要任务是什么？ 答一般来说，要有5类基本指令：数据传输类指令、运算类指令、程序控制类指令、输入输出指令、处理机控制和调试指令。 数据传送类指令 主要任务 在相同或不同的数据存储设备之间传送数据。 数据传输指令的种类有如下三个主要因素决定： 数据存储设备的种类 数据传送的单位 采用的寻址方式 运算类指令 主要任务 承担计算机的主要任务：运算（包括数据计算和符号处理） 设计运算类指令时主要考虑如下四个因素的组合 操作种类 数据表示 数据长度 数据存储设备 程序控制指令 主要任务 实现流程控制 程序控制指令主要包括三类 转移指令（包括无条件转移和有条件转移） 程序调用和返回指令 循环控制指令 输入输出指令 主要任务 启动、停止、测试设备 数据输入、输出 对设备进行控制 等等 处理机控制和调试指令一般计算机系统中，处理机有两个状态：管态和用户态，或称主态和从态。这两个状态需要相互切换，而且这两个状态下所能使用的指令应该有所区别 主要任务 对不同状态的处理机进行控制 3.9问题一个页式虚拟存储器的虚存空间大小为4GB，页面大小为4KB，每个页表存储字要占用4个字节。 计算这个页式虚拟存储器需要采用几级页表？ 如果要求页表所占的主存页面数最少，请分配每一级页表的实际存储容量各为多少字节？ 页表的哪些部分必须存放在主存中？哪些可以存放在辅存中？ 答第1问由题可知 $N_v=4GB$，$N_p=4KB$，$N_d=4B$ 可得页表级数： g=\lceil\frac{log_2N_v-log_2N_p}{log_2N_p-log_2N_d}\rceil=\lceil\frac{32-12}{12-2}\rceil=2所以需要采用2级页表 第2问一个页可存储的页表存储字的个数为：$\frac{N_p}{N_d}=1K=2^{10}$ 虚拟空间的总页数为：$\frac{N_v}{N_p}=1M=2^{20}$ 设第一级页表要用N个页表存储字 由第1问可得，使用2级页表，则$N\times\frac{N_p}{N_d}=\frac{N_v}{N_p}$，得$N=2^{10}$， 由上可得 第一级页表占用一个页面的大小，即$N_d\times\frac{N_p}{N_d}=4KB$。 第二级页表占用1K个页面的大小，即$N_d\times\frac{N_v}{N_p}=4MB$。 第3问为节省内存空间，第一级页表必须存放在主存中，第二级页表只需要把正在运行的程序的相关页表放在主存中，其他的可以放在外存中。 3.11问题一个页式虚拟存储器按字节编址，页面大小为1K个字节，每个数据的字长为4个字节。现有一个程序的页表如下： 虚页号 装入标志 主存（实）页号 修改标志 访问方式 0 1 2 0 RW 1 1 3 0 R 2 0 0 0 R 3 1 1 0 X 4 0 0 0 RW 5 1 0 0 R 6 0 0 0 X 表中的装入标志为‘1’表示该虚页已经装入主存，为‘0’则表示还未装入主存。修改标志为‘0’表示该页还没有被修改过，为‘1’则表示该页已经被修改过。访问方式‘RW’表示该页可以读可以写，但不能作为指令来执行；‘R’表该页只能读，不能写和执行；‘X’表示该页只能作为指令来执行，不能读和写。 虚地址经变址寻址和基址寻址（B）+（X）+D形成。现有一个程序，出现下列访问主存的操作： 序号 操作 （B） （X） D 1 取数 124 30 50 2 取数 2000 1000 60 3 存数 4000 2000 600 4 存数 1200 4600 60 5 取数 3000 640 100 6 取数 4096 500 20 7 加并存数 400 1200 80 8 加并存数 36 360 64 9 转移 2500 600 100 10 转移 3600 1200 56 列出产生主存页面失效的操作序号 如果不发生主存页面失效的话，计算访问主存的物理地址 列出被修改过的主存页面号 列出非法操作的序号 答由题可知，该页式虚拟存储器按字节编址，页面大小为1K个字节，每个数据的字长为4个字节。 地址0-999是0号虚/实页，地址1000~1999是1号虚/实页，以此类推 实页内的偏移地址和虚页内的偏移地址相同 操作序号 虚地址 虚页号 实页号 页内偏移 实（物理）地址 操作 合法性 1 204 0 2 50 2098 未改 合法 2 3060 3 1 60 1084 未改 非法 3 6600 6 未装入 600 无 失效 无 4 5860 5 0 60 0060 未改 非法 5 3740 3 1 100 1124 未改 非法 6 4616 4 未装入 20 无 失效 无 7 1680 1 3 80 3116 未改 非法 8 460 0 2 64 2128 修改 合法 9 3200 3 1 100 1124 未改 合法 10 4856 4 未装入 56 无 失效 无 第1问3、6、10 第2问表中已计算 第3问2 第4问2、4、5、7 3.14问题在页式虚拟存储器中，一个程序由P1~P5共5个页面组成。在程序执行过程中依次访问到的页面如下： P2，P3，P2，P1，P5，P2，P4，P5，P3，P2，P5，P2 假设系统分配给这个程序的主存有3个页面，分别采用FIFO、LFU、OPT三种页面替换算法对这3页主存进行调度。 画出主存页面调入、替换和命中的情况表。 统计三种页面替换算法的页命中率。 答 FIFO 把最先进来的替换走。 方法：向每行回看，出现次数最多的指令待换出 LFU 把最久没有使用的替换掉。 方法：向页地址流回看，最后出现的指令待换出 OPT 把最晚要使用的替换掉。 方法：向页地址流后看，最后访问的指令待换出 4.4问题有5个中断源D1、D2、D3、D4和D5，它们的中断优先级从高到低分别是1级、2级、3级、4级和5级。这些中断源的中断优先级、正常情况下的中断屏蔽码和改变后的中断屏蔽码见下表。每个中断源有5位中断屏蔽码，其中，‘1’表示该中断源被屏蔽，‘0’表示该中断源开放。 中断源名称 中断优先级 正常的中断屏蔽码D1 D2 D3 D4 D5 改变后的中断屏蔽码 D1 1 1 1 1 1 1 1 0 0 0 0 D2 2 0 1 1 1 1 0 1 0 0 0 D3 3 0 0 1 1 1 1 0 1 0 0 D4 4 0 0 0 1 1 1 1 0 1 1 D5 5 0 0 0 0 1 1 1 1 0 1 当使用正常的中断屏蔽码时，处理机响应各中断源的中断服务请求的先后次序是什么？实际的中断处理次序是什么？ 当使用改变后的中断屏蔽码时，处理机响应各中断源的中断服务请求的先后次序是什么？实际上中断处理的次序是什么？ 如果采用改变后的中断屏蔽码，当D1、D2、D3、D4和D5这5个中断源同时请求中断服务时，画出处理机响应中断源的中断服务请求和实际运行中断服务程序过程的示意图。 假设从处理机响应中断源的中断服务请求开始，到运行中断服务程序中第一次开中断所用的时间为1个单位时间，处理机运行中断服务程序的其他部分所用的时间为4个单位时间。当处理机在执行主程序时，中断源D3、D4和D5同时发出中断服务请求，过3个单位时间之后，中断源D1和D2同时发出中断服务请求。采用改变后的中断屏蔽码，画出处理机响应各中断源的中断服务请求和实际运行中断服务程序过程的示意图。 答第1问使用正常的中断屏蔽码，处理机的中断服务顺序将严格按照中断源的中断优先级进行。 中断服务请求的响应顺序是D1、D2、D3、D4、D5。 实际的中断处理次序是D1、D2、D3、D4、D5。 第2问中断服务请求的响应顺序是D1、D2、D3、D4、D5。 实际的中断处理次序是D4、D5、D3、D2、D1。 第3问 第4问 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机系统结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络-实验（四）TCP抓包分析]]></title>
    <url>%2F2019%2F06%2F12%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%AE%9E%E9%AA%8C%EF%BC%88%E5%9B%9B%EF%BC%89TCP%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[实验内容 学会安装使用自由软件SNORT 截获以太网数据包，并描述以太网数据包的各层的帧结构。 截获ARP，TCP协议数据包并进行分析 实验步骤实验需要两个主机A(192.168.1.104)和B(192.168.1.105)，A访问B，B进行TCP和ARP抓包，本实验报告为抓包主机B视角。 环境配置主机B需要进行环境配置：设置账户密码、打开FTP站点 设置账户密码控制面板——用户账户——设置密码 打开FTP站点控制面板——管理工具——Internet信息服务——FTP站点——属性——用户名——浏览——查找账户——选择ligong——应用——确认 A访问B ftp open 192.168.1.105 输入用户名(ligong)和密码(123，也就是刚才设置的密码) 一些操作，如dir quit，退出，断开连接 B进行抓包使用Snort软件进行抓包，进入D:/snort/bin目录。 输入snort -dev -l /snort/log，开始抓包，按下Ctrl+C停止抓包。 如果主机B抓到了A发出的FTP请求，在D:/snort/log目录下可以找到文件夹192.168.104，在其中可以看到名如TCP_1980-21.ids的文件，21为端口号。 数据包分析ARP抓包失败，原因未知，其他同学似乎也未抓到，抓到的都是3号机器广播的ARP包。下边进队TCP数据包进行分析。 TCP数据包分析 TCP是面向连接的协议，所以TCP运输连接的建立和释放时每一次通信中必不可少的过程。 运输连接分为三个阶段：连接建立、数据传送、连接释放。 每一次握手大概包括以下内容： 第一行数据包括了时间戳、源物理地址、目的物理地址、类型、长度； 第二行数据包括了源IP、目的IP、TCP、TTL、TOS、ID、IP长度、Dgm长度； 第三行数据包括SYN位、ACK位、序号、确认号、窗口大小、TCP长度； 第四行信息包括TCP选项等。 以下主要选取TCP数据包中连接建立（三次握手）和连接释放（四次握手）的相关内容进行分析。 连接建立12345601/01-01:40:15.948470 0:16:EC:D2:50:7D -&gt; 0:19:21:57:7:85 type:0x800 len:0x3E192.168.1.104:1980 -&gt; 192.168.1.105:21 TCP TTL:128 TOS:0x0 ID:11743 IpLen:20 DgmLen:48 DF******S* Seq: 0x75C7623D Ack: 0x0 Win: 0xFFFF TcpLen: 28TCP Options (4) =&gt; MSS: 1460 NOP NOP SackOK =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ 上边为连接建立的第一次握手，可以看到数据包从主机A（104）发往主机B（105）的21号端口； SYN位设置为1； 序号为0x75C7623D。 12345601/01-01:40:15.948524 0:19:21:57:7:85 -&gt; 0:16:EC:D2:50:7D type:0x800 len:0x3E192.168.1.105:21 -&gt; 192.168.1.104:1980 TCP TTL:128 TOS:0x0 ID:11647 IpLen:20 DgmLen:48 DF***A**S* Seq: 0xF085016 Ack: 0x75C7623E Win: 0xFFFF TcpLen: 28TCP Options (4) =&gt; MSS: 1460 NOP NOP SackOK =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ 上边为连接建立的第二次握手，可以看到数据包从105发往104， SYN位设置为1； ACK位设为1； 序号为0xF085016； 确认号为0x75C7623E，即确认号为上一次握手序号+1的值。 1234501/01-01:40:15.948661 0:16:EC:D2:50:7D -&gt; 0:19:21:57:7:85 type:0x800 len:0x3C192.168.1.104:1980 -&gt; 192.168.1.105:21 TCP TTL:128 TOS:0x0 ID:11744 IpLen:20 DgmLen:40 DF***A**** Seq: 0x75C7623E Ack: 0xF085017 Win: 0xFFFF TcpLen: 20=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ 上边为连接建立的第三次握手，可以看到数据包从104发往105， ACK位设为1； 序号为0x75C7623E，即序号为上一次握手的确认号，本质是A上一次向B发出的请求的序号+1； 确认号为0xF085017，即确认号为上一次握手序号+1的值。 数据传送 连接释放注意：这里是服务器主动释放连接，与教材上写的客户机主动释放情况不同。 12301/01-01:40:25.769622 0:19:21:57:7:85 -&gt; 0:16:EC:D2:50:7D type:0x800 len:0x36192.168.1.105:21 -&gt; 192.168.1.104:1980 TCP TTL:128 TOS:0x0 ID:11666 IpLen:20 DgmLen:40 DF***A***F Seq: 0xF085092 Ack: 0x75C7625B Win: 0xFFE2 TcpLen: 20 上边为连接释放的第一次握手，可以看到数据包从105发往104， ACK位设为1； FIN位设为1； 序号为0xF085092； 确认号为0x75C7625B。 12301/01-01:40:25.769759 0:16:EC:D2:50:7D -&gt; 0:19:21:57:7:85 type:0x800 len:0x3C192.168.1.104:1980 -&gt; 192.168.1.105:21 TCP TTL:128 TOS:0x0 ID:11763 IpLen:20 DgmLen:40 DF***A**** Seq: 0x75C7625B Ack: 0xF085093 Win: 0xFF84 TcpLen: 20 上边为连接释放的第二次握手，可以看到数据包从104发往105， ACK位设为1； 序号为0x75C7625B，即序号等于上次握手确认号； 确认号为0xF085093，即确认号等于上次握手序号+1。 12301/01-01:40:25.771844 0:16:EC:D2:50:7D -&gt; 0:19:21:57:7:85 type:0x800 len:0x3C192.168.1.104:1980 -&gt; 192.168.1.105:21 TCP TTL:128 TOS:0x0 ID:11764 IpLen:20 DgmLen:40 DF***A***F Seq: 0x75C7625B Ack: 0xF085093 Win: 0xFF84 TcpLen: 20 上边为连接释放的第三次握手，可以看到数据包从104发往105， ACK位设为1； FIN位设置为1； 序号为0x75C7625B，即序号等于上次握手序号； 确认号为0xF085093，即确认号等于上次握手确认号。 12301/01-01:40:25.771894 0:19:21:57:7:85 -&gt; 0:16:EC:D2:50:7D type:0x800 len:0x36192.168.1.105:21 -&gt; 192.168.1.104:1980 TCP TTL:128 TOS:0x0 ID:11667 IpLen:20 DgmLen:40 DF***A**** Seq: 0xF085093 Ack: 0x75C7625C Win: 0xFFE2 TcpLen: 20 上边为连接释放的第四次握手，可以看到数据包从105发往104， ACK位设为1； 序号为0xF085093，即序号等于上次握手确认号； 确认号为0x75C7625C，即确认号等于上次握手序号+1。 心得体会本次实验前在计算机网络课堂上还并没有学过TCP的连接过程如何建立与释放，仅仅听说过三次握手和四次握手。 通过这次实验，更加直观、具体地看到了TCP建立和释放连接的过程。在实验之后，又通过学习，对三次握手和四次握手的原理有了进一步的了解。 问：为什么建立连接是三次握手，释放连接是四次握手？ 答： 建立连接时，服务器收到客户的SYN连接请求报文，可以直接发送SYN+ACK报文，其中ACK报文是用来应答的，SYN报文是用来同步的。 当释放连接时，当服务器收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端：“你发的FIN报文我收到了”。只有等到服务器所有的报文都发送完了，它才能发送FIN报文，因此ACK报文和FIN报文不能一起发送，故需要四步握手。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络-实验（三）ARP欺骗]]></title>
    <url>%2F2019%2F06%2F05%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%B8%89%EF%BC%89ARP%E6%AC%BA%E9%AA%97%2F</url>
    <content type="text"><![CDATA[实验目的 掌握常见ARP欺骗类型和手段 掌握ARP协议工作原理和格式 掌握防范ARP地址欺骗的方法和措施 掌握Sniffer Pro软件的使用 实验环境 硬件 交换机1 台、路由器1台、计算机数台 软件 Sinffer pro 实验原理ARP协议简介ARP(Address Resolve Protocol)，地址解析协议。 用途：用于寻找和IP 地址相对应的MAC地址。 ARP消息类型： ARP request 即ARP请求分组，用于请求某IP主机的硬件地址。 广播。 ARP response 即ARP响应分组，用于指出某IP主机的硬件地址。 单播。 ARP报文中各字段的意义 硬件类型 以太网接口类型为1。 协议类型 IP协议类型为080016。 操作 ARP请求分组为1，ARP响应分组为2。 硬件地址长度 MAC地址长度为6BH。 协议地址长度 IP地址长度为4BH。 源MAC地址 发送方的MAC地址。 源IP地址 发送方的IP地址。 目的MAC 地址 ARP 请求分组中该字段没有意义；ARP 响应分组中为接收方的MAC地址。 目的IP 地址 ARP 请求分组中为请求解析的IP 地址；ARP 响应分组中为接收方的IP地址。 ARP欺骗原理ARP请求分组以广播形式发送，网络上的主机可以自主发送ARP应答消息； 当其他主机收到ARP响应分组时，不会检测该报文的真实性，直接将其记录在本地的MAC地址转换表。 就可以发送伪ARP响应分组，从而篡改本地的MAC地址表。 举例： 攻击者甲通过冒充某IP主机丙，给出错误的物理地址，并向另一主机乙单播一个ARP响应分组，这样乙接收到这个错误的IP与物理地址的映射，更新了ARP缓存表。 之后，主机乙使用ARP缓存表中该项时，则会出现错误。 实验步骤设置账户控制面板——用户账户——设置用户名为ligong，并设置密码。 设置FTP站点控制面板——Internet信息服务——FTP站点——硬件——安全账户——浏览——高级——选中ligong——允许匿名——应用、确定。 禁止网络保护右击屏幕右下角盾牌，取消Enable Auto Protection。 所用主机说明我们需要三台主机，分别为甲、乙、丙。 甲为监听并攻击者，乙为Ping命令/FTP命令操作者，丙为IP地址提供者。 甲实现ARP欺骗后，乙无法Ping或无法通过FTP连接丙。 进行ARP欺骗在甲主机上进行操作。 打开Sniffer Pro，选中本机的网卡，并选中Log Off，点击确定。 点击菜单栏中File中的Log On，登录网卡。 打开菜单栏中display中的Define Filter； 选中Address选项卡，将Station1和Station2设置为Any（这样将监听网络上的所有消息，个人觉得可以只监听乙和丙）； 选中Advanced选项卡，选中ARP、IP、IP ARP、TCP、UDP和FTP。 打开菜单栏中Capture中的Start，开始监听。 点击左侧Connection，点击下侧的Objects选项。 在右侧找到乙对丙的ARP信息包，双击，再选择Decode选项，可以看到ARP分组的结构，我们对丙的MAC地址进行修改（右击——Edit）。 打开菜单栏中Tools中的Trace Route，实现ARP欺骗。 结果检验甲实现ARP欺骗后，乙Ping或通过ftp连接丙则会失败。 因为甲通过广播发出了错误的丙的物理地址，而乙接收到了这个错误的信息，在连接丙时则会使用这个错误的物理地址，造成无法连接。 实验心得ARP是建立在网络中各个主机互相信任的基础上的。 ARP欺骗可以导致计算机通信失败，更严重的是可以导致通信重定向，攻击者可以窃取被攻击者通信的数据，存在极大的安全隐患。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇编语言-80x86寄存器组]]></title>
    <url>%2F2019%2F05%2F31%2F%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-80x86%E5%AF%84%E5%AD%98%E5%99%A8%E7%BB%84%2F</url>
    <content type="text"><![CDATA[寄存器可以分为程序可见的寄存器和程序不可见的寄存器两大类。 程序可见的寄存器可以分为以下三类： 通用寄存器 专用寄存器 段寄存器 通用寄存器数据寄存器AX、BX、CX、DX可称为数据寄存器，用来暂时存放计算过程中所用到的操作数。它们是16位，但也可以按字节访问，比如AH（高位字节）和AL（低位字节）。 AX（accumulator），作为累加器用，所以是算术运算的主要寄存器。 BX（base），在计算存储器地址时，常用作基址寄存器。 CX（count），常用来保存计数值，如在移位指令、循环指令和串处理指令中用作隐含的计数器。 DX（data），一般在作双字长运算时把DX和AX组合在一起存放一个双字长数，DX用来存放高位字。 指针寄存器可以存放操作数，但只能以字为单位使用。 SP（stack pointer），堆栈指针寄存器。 BP（base pointer），基址指针寄存器。可以和堆栈段寄存器SS联用来确定堆栈段中的某一存储单元的地址。 SI（source index），源变址寄存器，一般与数据段寄存器DS联用，用来确定数据段中某一存储单元的地址。 DI（destination index），目的变址寄存器，一般与数据段寄存器DS联用，用来确定数据段中某一存储单元的地址。 ※SI和DI有自动增量和自动减量的功能。 在串处理指令中，SI和DI作为隐含的源变址和目的变址寄存器，此时SI和DS联用，DI和附加段寄存器ES联用，分别达到在数据段和附加段中寻址的目的。 专用寄存器IP（instruction pointer），指令指针寄存器，它用来存放代码段中的偏移地址。 在程序运行的过程中，它始终指向下一条指令的首地址，它与段寄存器CS联用确定下一条指令的物理地址。 SP（stack pointer），堆栈指针寄存器，存放栈顶的偏移地址，与堆栈段寄存器SS联用来确定堆栈段中栈顶的地址。 FLAGS标志寄存器，又称为程序状态寄存器（program status word，PSW）。 条件标志 溢出标志 （overflow flag，OF），运算溢出时为1，否则为0。 符号标志 （sign flag，SF），运算结果为负时为1，否则为0。 零标志 （zero flag，ZF），运算结果为0时为1，否则为0。 进位标志 （carry flag，CF），记录运算时从最高有效位产生的进位值。有进位时为1，否则为0。 辅助进位标志 （auxiliary carry flag，AF），..… 奇偶标志 （parity flag，PF），结果操作数中1的个数为偶数时为1，否则置0。 控制标志方向标志（direction flag），在串处理指令中控制处理信息的方向用。 DF为1时，高地址到低地址，即倒着来。 DF为0时，低地址到高地址，即正着来。 系统标志 陷阱标志 （trap flag，TF），用于调试时的单步方式操作。 TF为1时，产生陷阱；否则不产生。 中断标志 （interrupt flag，IF），当其为1时，允许CPU响应中断；否则不允许。 段寄存器段寄存器也是一种专用寄存器，专用于存储器寻址，用来直接或间接存放段地址。 代码段 （code segment，CS），存放当前正在运行的程序。 数据段 （data segment，DS），存放当前运行程序所用的数据。 如果程序使用了串处理指令，则其源操作数也存放在数据段里。 堆栈段 （stack segment，SS） 附加段 （extra segment，ES），附加的数据段，作为辅助的数据区，也是串处理指令的目的操作数存放区。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[请不要到处糊弄]]></title>
    <url>%2F2019%2F05%2F31%2F%E8%AF%B7%E4%B8%8D%E8%A6%81%E5%88%B0%E5%A4%84%E7%B3%8A%E5%BC%84%2F</url>
    <content type="text"><![CDATA[现在是凌晨三点，我并不想熬夜的，但我真的睡不着。 提交成果后，我觉得在这道题的参赛者中我是很有希望拿第一的。因为我花了很大的精力，从正确性、效率和适用性这三个层面上来看，做得很不错了，几乎完美。这并不是傲慢，仅仅是基于现实情况对自己能力和成果的肯定。 后来成绩出了，结果和想象中有点差距，我有些失望，第一反应是想知道各组的成绩，这样可以看到差距有多大和自己是差在哪里，问了问，无果。 今天，知道了另外一件事，更加失望，想象中是第一，然而现实却是这样。 我做得这么差吗？那以后好好努力吧。加油..… 凌晨一点左右，结合老师的评价，我看了名次好的同学的成果，嗯..….，结果稍微不太一样哈，嗯，再看看，看看结果的图片吧，这不是一样吗？ 奥奥，他算出来某神秘物体S的个数是3，我算的是6啊（这个数字是少一点比较好的）。诶，我验证过3是不可能的啊，嗯，再看看..… emm？那几个怎么没算上？他也是6啊。而且用他自己的理论都能把他说倒，这几个是S，另外几个怎么就不是S呢？ 我再去查查资料吧。嗯嗯，果然是当时我遇到的一个问题：是否使用L距离。这个问题只是表象，计算方法而已，并非实质，但它影响了S的定义，进而影响了3或6这个数字。如果按资料里的假设，这篇论文还可以，就是没明确写出来假设，S的定义也没有明确指出，所以刚才那个问题还是存在的。 在我的假设下，使用欧式距离，S也有明确定义，结果也是正确的，跟他们相比差别就在L距离了，书上都是说假设用L距离，而非一定是L距离，L距离并不是该类问题的固定假设，严格来讲，我这个并不是个所谓的问题。 看下来，好像评委也没认真研究这个题目吧？都没看出来两种方法的区别吧？ 这就让我很震惊、很气愤了。（或许是我真的菜吧，没真的懂这个问题？） 作为学习、研究学问的人，老师和学生都糊弄？这样糊弄哪来学问。 以下才算是正文。我就想这么写，写一堆一堆的废话。 这个比赛糊弄，其他的比赛也有糊弄的，昨天得知我刚树立好的目标也在糊弄，emmm真的多..… 我知道比赛是有评委的嘛，评委没有多少时间看，你得知道他想看什么，你要做得让他舒服。 这我当然不否认，各种各样的合作是需要让别人舒服，但我想讨论的是糊弄。 比赛之外，再算上其他时候遇见的糊弄..…..…啊，wsl，这也是我为什么睡不着了。 我们都懒，偶尔懒一懒、跑跑神还是可以的啊，但也别啥都糊弄 上课不听，玩游戏刷微博看小说，上课下课了自豪地说：我啥都没听懂，这老师讲得真烂；他讲的我听不懂，所以我才玩儿的；我书跟新买的一样干净哈哈哈。 上课你去得早，上课前你在玩游戏等着上课，上课你又不听，反正还是打游戏，那你刚才等啥呢？ 上实验课前边10分钟老师在讲，你坐那儿玩手机，到做实验了你就开始活跃了，我们要干嘛？怎么做？带带我？ 作业什么的有个问题问你，你是做出来了，但是问你你就不知道，在背答案呢还是做作业打工呢..…..… 让给你讲东西，给你讲了你说别扯了，你听不懂，不想听。 遇到的那些问题，随便想想办法都可以自己解决的。上边说的都是糊弄学习什么的，我是比较喜欢思考和科学的，有人说他不喜欢学习，当然可以啊。 emm那你问过你自己喜欢什么吗？你真的喜欢它吗？你了解它吗？为什么？这样可以吗？不喜欢学是不是你不想学的借口啊？自己现在过得充实有意义吗？ 要是你说，人生的每一次选择都是最好的，人生怎么样过都可以，那也行，你有这样的乐观、自信和准备就好。 如果你能跟自己说说话，多上一层思考，多想想自己的内核逻辑，换点思考内容，事情多问几个真的吗？是吗？为什么？怎么弄的？我的原因？他的原因？谁的原因？我做得还可以吗？他说的对嘛？他为什么这样想？我为什么这样想？我应该怎么想？这样做是否符合社会主义核心价值观？这样是最有效的方式吗？我在想什么？哈哈哈哈哈哈 以上内容个人觉得口吻过于讽刺，不要对号入座，看看就好，别天天糊弄着过就好了。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇编语言-实验（三）]]></title>
    <url>%2F2019%2F05%2F27%2F%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[实验目的 掌握程序设计中的3种基本结构(顺序结构、选择程序、循环程序)。 熟练使用汇编语言的指令：数据传送类指令、数据运算类指令、逻辑判断类指令与转移指令、循环指令等。 初步了解系统功能调用的使用方法，尝试使用01H号功能调用进行字符输入的方法及使用02H号功能调用进行字符输出（显示）的方法。 程序说明 编写十进制到十六进制转换程序。要求从键盘取得一个十进制数，然后把该数以十六进制形式在屏幕上显示出来 已知从BUF开始存放了10个16进制字数据，编程求出这10个数中的最大数，（将最大数存入MAX字节单元），并将其以10进制数的形式在屏幕上显示出来。（提示：以上两题都要求采用子程序的方法） 从键盘上输入一行字符，如果这行字符比前一次输入的一行字符长度长，则保存该行字符，然后继续输入另一行字符;如果它比前一次输入的行短，则不保存这行字符。按下‘$’输入结束，最后将最长的一行字符显示出来。（选作） 设计思想题目一如下图所示，首先调用子程序getinput获取用户输入的十进制数字，然后调用子程序htoa以十六进制显示用户输入的数据。 题目二如下图所示，首先调用子程序getmax获取buf中的最大值，同时存储进max和(ax)，最后调用子程序display显示(ax)。 题目三​ 首先子程序getstr获取用户输入的字符串，每收到一个字符串之后，根据长度判断是否更新string，然后用户输入一个字符判断输入是否结束； ​ 然后子程序display显示字符串string。 程序代码题目一1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889stack segment ; 数据段 dw 128 dup(?) ; 堆栈大小为128个字 tos label word ; 栈底地址为tosstack endscode segment ; 代码段 assume ss:stack,cs:codemain proc far; 初始化ss、sp寄存器 mov ax,stack mov ss,ax ; (ss)&lt;-stack lea sp,tos ; (sp)&lt;-tos，sp存储栈顶地址，当前栈顶即为栈底 ; 为返回DOS作准备 push ds mov ax,0 push ax ; 获取用户输入的十进制数 call getinput ; 调用子程序，在DOS中以十六进制输出(ax) call htoa retmain endpgetinput proc near mov bx,0 ; bx存储用户输入 mov cl,10 ; 乘法用 input:; 判断用户输入是否合法 mov ah,1 ; 调用1号功能，获取用户输入，保存至(al) int 21h ; 调用DOS sub al,30h ; ASCII码转二进制 cmp al,0 ; jl exit ; (al)&lt;0，则说明输入结束 cmp al,9 jg exit ; (al)&gt;9，则说明输入结束 ; (bx)&lt;-(bx)*10+(al) push ax ; 暂存(ax) mov al,bl ; (al)&lt;-(bl) mul cl ; (ax)&lt;-(al)*(cl) mov bx,ax ; (bx)&lt;-(ax)==(bx)*10 pop ax ; 恢复(ax)，(al)为用户输入的数字 and ax,00ffh ; (ax)高位设为0 add bx,ax ; (bx)&lt;-(bx)+(al) jmp input ; 继续获取用户输入exit: mov ax,bx ; (ax)&lt;-用户输入 ret ; 返回getinput endphtoa proc near cmp ax,15 ; 和15比较 jle blow ; 若(ax)小于等于15，则跳转至blow ; (ax)低4位（大小是一个字）进栈后，右移4位 push ax ; (ax)大于15，暂存ax push bp ; 暂存bp mov bp,sp mov bx,[bp+2] ; (bx)&lt;-(ax)，(bp)、(ax)都占一个字，栈底与栈顶相比为高地址 and bx,000fh ; 只保留低4位 mov [bp+2],bx ; 存入栈中 pop bp ; 恢复bp mov cl,4 shr ax,cl ; 逻辑右移4位 call htoa ; 递归调用子程序htoa pop ax ; 获取之前存入栈中的低4位blow: add al,30h ; (al)转换为ASCII码 cmp al,3ah ; jl printit ; 若(ax)小于10，则跳转至printit add al,7h ; (al)大于等于10，加7进位到高位printit: mov dl,al ; mov ah,2 ; 调用2号功能，DOS输出(dl) int 21h ; 调用DOS rethtoa endp code endsend main 题目二123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110data segment buf dw 5,9,6,8,7,0,4,3,2,1 ; 定义10个字数据 max dw ? ; 存储最大值data endscode segment assume ds:data,cs:codemain proc far; 为返回DOS作准备 push ds mov ax,0 push ax ; 将(ds)设为data mov ax,data ; (ax) &lt;- data mov ds,ax ; (ds) &lt;- (ax) ; max记录buf中的最大值 call getmax ; (ax)&lt;-max mov ax,max ; 十进制输出(ax) call display ; 返回DOS retmain endpgetmax proc near; 保存寄存器 push ax push cx push si ; 数据初始化 mov ax,[buf] mov max,ax ; 假设第0个元素为最大值 mov cx,9 ; buf还剩9个元素 mov si,2 ; 下标指向第一个元素，因为是字数据，所以为2compare: mov ax,buf[si] cmp max,ax jge loop1 mov ax,buf[si] mov max,ax ; 更新最大值loop1: add si,2 ; 下标+1 loop compare ; 继续比较 ; 恢复寄存器 pop si pop cx pop ax ; 返回 retgetmax endpdisplay proc near ; 将(ax)以十进制形式输出; 保存寄存器 push ax push bx push cx push dx push si ; 初始化 mov si,0 ; 数字的位数 mov bl,10 ; 数字之后除以bx,即10 ; 数字每位倒序压栈prepare: div bl ; 被除数默认为(ax)，除以10。 add ah,30h ; (ah)为默认的余数寄存器，转换为ASCII码，字符0的ASCII码为48，即30h push ax ; 存储最后一位 and ax,00ffh; (ah)&lt;-0 mov cx,ax ; al为默认的商寄存器。ax=ah+al。当商为0时则跳出循环 inc si ; 更新数字位数 inc cx ; 如果为0，加一之后为1。loop判断前会将cx减一。 loop prepare; ; 弹栈，并用十进制显示 mov cx,si ; si为数字位数，即循环运行次数show: pop ax ; 获取要显示的数据 mov dl,ah ; 要显示的数据放在dl里 mov ah,2 ; 2号功能 int 21h ; 调用DOS loop show; 恢复寄存器 pop si pop dx pop cx pop bx pop ax ; 返回 ret display endp ; display子程序结束code endsend main 题目三123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110data segment string db 0 ; 存放字符的个数 db 80 dup(0),0dh,0ah,&apos;$&apos; ; 存放前一次输入的字符串，兼作显示缓冲区。0ah换行、0dh回车（归位） buffer db 80 ; 输入字符串的缓冲区，最多输入80个字符 db 0 ; 存放字符的个数 db 80 dup(0) ; 存放当前输入的字符串，20h为空格data endscode segment assume cs:code,ds:data,es:datamain proc far; 为返回dos作准备 push ds mov ax,0 push ax; (ds)&lt;-(ax) (es)&lt;-(ax) mov ax,data mov ds,ax mov es,ax; 调用子程序，获取用户输入的串，判断是否更新，最终输出 call getstr ; 显示最终串 call display ; 程序返回 retmain endpgetstr proc near; 保存寄存器 push ax push cx push dx push di push si; 获取用户输入的字符串存入bufferinput: lea dx,buffer ; dx存缓冲区首址 mov ah,0ah ; DOS调用0A号功能，输入字符到缓冲区DS:DX int 21h ; DOS调用; DOS光标换行（处理多组输入，因为按下Enter仅能使光标回车） mov ah,2 mov dl,0ah int 21h; 比较字符串长度 lea si,buffer+1 ; buffer+1是当前串长度的地址 lea di,string ; (string)存入di，(string+2)存入es，源操作数只能用存储器寻址方式，目的寄存器不允许使用段寄存器 mov al,[si] ; 当前串长度存入al cmp al,[di] ; 与之前的串长度进行比较 jbe next ; 如果当前串更短，跳转到next，接收下一个字符串; 更新之前串string mov cx,80+1 ; 当前串比之前串长，更新串 cld ; 正向处理字符串 rep movsb ; 重复串操作，di为目的串，si为源串; 处理$失效问题 mov ah,0 mov si,ax mov [string+si+1],&apos;$&apos;; 获取下一个串next: mov ah,1 ; 获取用户输入 int 21h ; DOS调用 cmp al,&apos;$&apos; ; 是结束符吗？ jne input ; 不是则继续输入; 恢复寄存器 pop si pop di pop dx pop cx pop ax; 子程序返回 retgetstr endpdisplay proc near; 保护寄存器 push dx push ax; DOS光标换行，处理用$结束输入后没有换行的问题 mov ah,2 mov dl,0ah int 21h; 显示最终串 lea dx,string+1 ; 串地址存入dx mov ah, 9 ; dos调用9号功能，显示串 int 21h ; 调用DOS; 恢复寄存器 pop ax pop dx retdisplay endpcode endsend main 结果分析前两题略 题目三遇到的问题及解决方法如下： 获取用户输入的字符串时，按下Enter之后，光标回车，由于题目是多个输入（用户只输入一个字符串时，也要用$作为一次输入，所以也算多个输入），所以要增加换行操作。 输出结果时string后边的`并没有起到作用，只能自己在更新string之后手动存储`。 出现吞字问题：除了第一次输入，之后的输入第一个字符都会被当做判断输入结束的字符而不是字符串的内容…所以会吞字。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇编语言-实验（二）]]></title>
    <url>%2F2019%2F05%2F05%2F%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[实验目的 掌握程序设计中的3种基本结构(顺序结构、选择程序、循环程序)。 熟练使用汇编语言的指令：数据传送类指令、数据运算类指令、逻辑判断类指令与转移指令、循环指令等。 初步了解系统功能调用的使用方法，尝试使用01H号功能调用进行字符输入的方法及使用02H号功能调用进行字符输出（显示）的方法。 程序说明 计算1+2+3+…+10，将结果显示在屏幕上。 利用01H号功能调用输入10个一位数字，并将其由ASCII码转换为二进制数，依此保存到变量BUF的10个字节中，变量BUF的形式为BUF DB 10 DUP（？）。编程求出这10个数中的最大数和最小数，将最大数存入MAX单元、最小数存入MIN单元，并将其在屏幕上显示出来。 设计思想题目一如下图所示，首先通过循环求出1+2+…+10，然后调用子程序display显示sum。 题目二如下图所示，首先调用子程序getinput获取用户输入，同时存储进数组，并更新max和min，最后调用两次子程序display显示max和min。 程序代码题目一12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788;*********************************************************************data segment ; 定义数据段 sum dw 0 ; 存储和data ends;*********************************************************************code segment ; 定义代码段 assume cs:code,ds:data ;--------------------------------------------------------------------- main proc far ; 程序的主部分start:; 为返回DOS做准备 push ds ; ds压栈 xor ax,ax ; (ax) &lt;- 0 push ax ; ax压栈; ds设为data mov ax,data ; (ax) &lt;- data mov ds,ax ; (ds) &lt;- (ax) mov cx,10 ; 从10加到1 next: add sum,cx ; sum &lt;- sum+(cx) loop next ; (cx) &lt;- (cx)-1 mov ax,sum ; (ax) &lt;- sum call display ; 调用子程序以十进制显示(ax); 返回DOS环境 ret ; 返回DOS环境main endp;---------------------------------------------------------------------display proc near ; 将(ax)以十进制形式输出; 保存寄存器 push ax push bx push cx push dx push si ; 初始化 mov si,0 ; 数字的位数 mov bl,10 ; 数字之后除以bx,即10 ; 数字每位倒序压栈prepare: div bl ; 被除数默认为(ax)，除以10。 add ah,30h ; (ah)为默认的余数寄存器，转换为ASCII码，字符0的ASCII码为48，即30h push ax ; 存储最后一位 and ax,00ffh; (ah)&lt;-0 mov cx,ax ; al为默认的商寄存器。ax=ah+al。当商为0时则跳出循环 inc si ; 更新数字位数 inc cx ; 如果为0，加一之后为1。loop判断前会将cx减一。 loop prepare; ; 弹栈，并用十进制显示 mov cx,si ; si为数字位数，即循环运行次数show: pop ax ; 获取要显示的数据 mov dl,ah ; 要显示的数据放在dl里 mov ah,2 ; 2号功能 int 21h ; 调用DOS loop show; 恢复寄存器 pop si pop dx pop cx pop bx pop ax ; 返回 ret display endp ; display子程序结束code ends;********************************************************************* end start 题目二123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143;*********************************************************************data segment ; 定义数据段 buf db 10 dup(-1) ; 存储10个输进来的数字 max db 0 ; 最大值，输入的数字一定大于等于0 min db 9 ; 最小值，输入的数字一定小于等于9data ends;*********************************************************************code segment ; 定义代码段 assume cs:code,ds:data;--------------------------------------------------------------------- main proc far ; 程序的主部分start:; 为返回DOS做准备 push ds ; ds压栈 xor ax,ax ; (ax) &lt;- 0 push ax ; ax压栈; ds设为data mov ax,data ; (ax) &lt;- data mov ds,ax ; (ds) &lt;- (ax) ; 获取用户输入并进行存储，记录最大值最小值 call getinput ; 数字存入al，显示一下; 显示最大值 mov al,max ; 显示最大值 and ax,00ffh ; (ah)&lt;-0 call display ; 调用子程序以十进制显示(ax); 显示最小值 mov al,min ; 显示最小值 and ax,00ffh ; (ah)&lt;-0 call display ; 调用子程序 ; 返回DOS环境 ret ; 返回DOS环境main endp;---------------------------------------------------------------------getinput proc near ; 获取用户输入并进行存储，记录最大值最小值; 保存寄存器 push ax push bx push cx; 初始化 mov cx,10 ; 10个输入 lea bx,buf ; 存储数组地址，用来遍历数组; 获取用户输入savetoarray: mov ah,1 ; 1号功能，获取用户输入，保存至al int 21h ; 调用DOS; 存入数组 sub al,30h ; (al)减去30h由ASCII码转为十进制数，在计算机内自动用二进制表示 mov [bx],al ; 存入数组，相对寻址方式 inc bx ; 数组地址加一 ; 判断是否更新最大值updatemax: cmp al,max ; (ax)&lt;-max jl updatemin ; (ax)&lt;max，则不用更新 mov max,al ; 更新最大值 ; 判断是否更新最小值updatemin: cmp al,min ; (ax)&lt;-min jg loopp ; (ax)&gt;min，则不用更新 mov min,al ; 更新最小值 ; 循环savetoarrayloopp: loop savetoarray ; cx减一，循环至cx为0 ; 恢复寄存器 pop cx pop bx pop ax ; 返回 ret getinput endp ; getinput子程序结束;---------------------------------------------------------------------display proc near ; 将(ax)以十进制形式输出; 保存寄存器 push ax push bx push cx push dx push si ; 初始化 mov si,0 ; 数字的位数 mov bl,10 ; 数字之后除以bx,即10 ; 数字每位倒序压栈prepare: div bl ; 被除数默认为(ax)，除以10。 add ah,30h ; (ah)为默认的余数寄存器，转换为ASCII码，字符0的ASCII码为48，即30h push ax ; 存储最后一位 and ax,00ffh; (ah)&lt;-0 mov cx,ax ; al为默认的商寄存器。ax=ah+al。当商为0时则跳出循环 inc si ; 更新数字位数 inc cx ; 如果为0，加一之后为1。loop判断前会将cx减一。 loop prepare; ; 弹栈，并用十进制显示 mov cx,si ; si为数字位数，即循环运行次数show: pop ax ; 获取要显示的数据 mov dl,ah ; 要显示的数据放在dl里 mov ah,2 ; 2号功能 int 21h ; 调用DOS loop show; 恢复寄存器 pop si pop dx pop cx pop bx pop ax ; 返回 ret display endp ; display子程序结束code ends;********************************************************************* end start 问题回答设计的程序包含了几个段题目一和题目二的程序各设计了两个段：数据段和代码段。 你的代码经过编译和链接之后，总共占用多少个字节题目一和题目二程序编译链接后大小均为1KB。 调用DEBUG进行反汇编，查看程序的第一条指令的地址码是多少？最后一条指令的地址码是多少？ 题目一第一条指令的地址码为076B:0000，最后一条指令的地址码为076B:0018。因为使用了一个子程序，所以主程序较短。 题目二第一条指令的地址码为076B:0000，最后一条指令的地址码为076B:001E。因为使用了两个子程序，所以主程序较短。 对于第2题，怎样修改程序可以同时实现将10个数字的累加功能 首先在数据段中定义变量，代码如：sum db 0； 然后在getinput子程序中savetoarray中sub al,30h后添加代码add sum,al。 对于第2题，若要求输入的是两位数，又该怎么办？ 首先(cx)改为20； 然后每两个数字一组：其中先得到的数字转换为十进制数字A暂存，后得到的数字转换成十进制数字B暂存； 可知我们要操作的数字为A*10+B（可以通过乘法和加法实现）； 其他程序不变。 结果分析题目一运行程序，可见输出了1+2+…+10=55。 题目二运行程序，输入9876543210共10个数字，可见输出了最大值9和最小值0。 查看数据段dds:0，结果如下，可知数字均已存入buf数组。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机组成原理课程介绍]]></title>
    <url>%2F2019%2F05%2F02%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[之前看哈工大计组视频时的笔记。 课程名称解释计算机：数字电子计算机组成：计算机硬件系统的逻辑实现organization：组成 用数字电路知识实现计算机硬件系统。 原理：一般原理数字电子计算机硬件系统逻辑实现的。 特色 不以具体机型为依托 自顶向下、层层细化 课程讲授内容基本部件的结构和组织方式用数电知识对计算机基本部件进行逻辑实现。 基本运算的操作原理如何用数电知识实现计算机的基本功能：加减乘除等运算的硬件电路。 基本部件和单元的设计思想基本部件和基本单元的设计思想以及如何将部件连接起来。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机系统概论]]></title>
    <url>%2F2019%2F05%2F02%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[之前看哈工大计组视频时的笔记。 计算机系统概论现代计算机由哪两部分组成？硬件计算机的实体，如主机、外设等。 软件由具有各类特殊功能的信息（程序）组成。 硬件通过每条指令的有序执行发挥作用。 系统软件管理整个计算机系统。 语言处理程序编译环境 操作系统管理软硬件资源、提供人机交互等。 服务性程序比如数学库。 数据库管理系统网络软件应用软件按照某个任务的需要编制成的各种程序。 硬件和软件逻辑关系硬件进行了相对的封装，为软件提供接口，比如指令集。 应用软件使用系统软件提供的接口，系统软件使用硬件提供的接口。 计算机系统的层次结构https://www.bilibili.com/video/av15123338/?p=3 11分55秒 物理抽象 程序员角度抽象 机器语言-实际机器M1- 操作系统-虚拟机器M2- 汇编语言-虚拟机器M3- 高级语言-虚拟机器M4-用编译程序翻译成汇编语言程序 微指令系统-微程序机器M0- 一条机器语言指令也是很复杂的，将机器指令进行细化。 计算机组成和计算机系统结构的区别从研究内容上来说 计算机系统结构计算机系统结构定义了计算机系统软硬件的交界面，定义了哪些功能由软件来实现吗，哪些功能由硬件来实现，提供上层软件进行编写的时候和硬件进行交互的接口。 计算机系统结构指程序员（机器语言程序员）所见到的计算机系统的属性、概念性结构和功能特性。 计算机系统属性：编写成能在计算机硬件系统上正确执行的程序他所必须了解的计算机系统的属性，比如指令集、寄存器文件的组织等等。 计算机组成计算机组成设计人员的任务是实现计算机系统结构所体现的属性，即具体指令的实现。 计算机的基本组成冯诺依曼计算机的特点冯诺依曼计算机是存储程序型的计算机。 问题是运算器是瓶颈和各部分的组成不具有层次化特征。 由五大部分组成运算器算数运算和逻辑运算。 计算机的功能主要是运算，比如加减乘除。 控制器指挥程序的运行。 控制器控制做什么运算。 存储器存放数据和程序。 指令和数据放在存储器中。（存储程序型的计算机） 输入设备将信息转换成机器能识别的形式。 程序和数据输入到计算机中。 输出设备将结果转换成人们熟悉的形式。 计算结果的输出。 指令和数据以同等地位存于存储器，可按地址访问指令和数据用二进制表示指令由操作码和地址码组成操作码：做什么操作，指出寻址方式、指出操作数类型等等 地址码：操作数在哪里 存储程序这是核心特征。程序存储在存储器中，具有存储程序的计算机都称为冯诺依曼计算机。 以运算器为中心运算器非常地繁忙，成为计算机系统的瓶颈。 改进：以存储器为中心现代计算机硬件框图计算机的解题过程存储器的基本组成存储体存储体由若干个存储单元组成。 存储单元存储单元由多个存储元件（0/1）组成。 指令存储在存储单元中。 每个存储单元有个地址，存储单元按地址寻访。 存储字：一个存储单元中二进制代码的组合。 MAR存储器地址寄存器：反映存储单元的个数，保存存储单元的地址（编号）。 MDR存储器数据寄存器：反映存储字长。 存储字长存储单元中二进制代码的位数。 运算器的基本组成及操作过程视频P8。 计算机硬件的主要技术指标作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C/C++小课之继承（二）]]></title>
    <url>%2F2019%2F05%2F01%2FC-C-%E5%B0%8F%E8%AF%BE%E4%B9%8B%E7%BB%A7%E6%89%BF%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[构造函数与析构函数 派生类只能在构造函数初始化列表中为基类或对象成员进行初始化。 当基类没有默认构造函数的情况下，派生类必须定义构造函数，并通过它为基类构造函数提供初始化值。（编译器合成的构造函数也算默认构造函数） 子类构造函数只负责直接基类的初始化。 当存在虚基类时，所有虚基类都由最后的派生类负责初始化。如果没有，则报错。 子类继承基类的构造函数C++11允许子类继承基类的构造函数，带来的方便是： 当基类构造函数有较多参数，而派生类没有数据成员需要初始化，但它必须提供构造函数，且唯一目的是为基类构造函数提供初始化值。在这种情况下，它只需要继承直接基类的构造函数就可以了。 12345class Derived:public Base&#123; ... using Base::Base; //继承基类构造函数 ...&#125;; 这个using不受访问权限的控制，放在public、private和protected区域中没有区别。 但这个using与另外两种用法（见继承第一讲）有不同之处：这个会使编译器在子类中生成代码，而用using声明基类成员时，并不生成代码。 构造函数和析构函数的调用次序基类构造函数$\rightarrow$对象成员构造函数$\rightarrow$子类构造函数（体） 多继承时，基类构造函数调用次序为继承方式中声明次序。 有多个对象成员时，按它们在子类中的声明次序调用其构造函数。 析构函数与构造函数次序相反。 这个次序要和之后出现虚拟继承后构造函数的次序进行结合，例题可看课本P173。 基类与继承类的使用根据继承的定义，我们可知任何一个派生类对象的内部都包含一个基类子对象，所以可以通过截取的方法从派生类对象中复制其基类子对象并将之赋值给基类对象。 子类对象对基类对象的赋值和初始化有两种情况：赋值和初始化。如下： 赋值123Derived d1;Base b1;b1=d1; 在把子类对象赋值给基类对象时调用基类的赋值运算符函数。 初始化12Derived d1;Base b1(d1); 1234void func(Base b);//main中Derived d1;func(d1); 以上两种情况，在用子类对象初始化基类对象时，会调用基类的拷贝构造函数。 子类指针和基类指针在这里，在逻辑上引用与指针等价。 基类指针可以指向子类对象12Derived d1;Base* pb=&amp;d1; 子类指针不能指向基类对象12Base b1;Derived* pd=&amp;b1; //错误的 若想实现类似子类指针指向基类对象的功能，需要用强制类型转换，但也只能在逻辑上正确时才能使用，否则后续使用中绝对会出错的。如下： 123Derived d1;Base* pb=&amp;d1;Derived* pd=static_cast&lt;Derived*&gt;(pb); //这里是个模板函数 多继承定义多继承即一个类继承了多个类。 123class D:public A, B,protected C&#123; ... &#125;; 成员二义性多继承情况下，当多个（1个以上）基类拥有同名成员时，会产生成员二义性。 可以通过类域限定符解决该问题，明确指出成员所属的基类。 虚拟继承虚拟继承引入的原因解决多继承引出的二义性问题。 如Student、Employee继承Person，StuEmployee继承了Student、Employee，这样StuEmployee的对象中就有两份不同的Person的数据成员。 123class Student: public Person&#123;...&#125;class Employee: public Person&#123;...&#125;class StuEmployee: public Student,public Employee,&#123;...&#125; 语法123class Student:virtual public Person&#123;...&#125;class Employee:virtual public Person&#123;...&#125;class StuEmployee: public Student,public Employee,&#123;...&#125; 构造函数调用次序 先调用虚基类的构造函数，再调用非虚基类的构造函数。 同一继承层次中有多个虚基类时，就按照它们声明次序进行构造。 若某个虚基类的构造函数已被调用，就不再调用。 若虚基类有非虚基类派生而来，则先调用该虚基类的构造函数，再调用该非虚基类的构造函数。 成员函数优先级继承层次中越靠下优先级越高。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>继承</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浙江理工大学2019数学建模校赛B题记录]]></title>
    <url>%2F2019%2F04%2F29%2F%E6%B5%99%E6%B1%9F%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E6%A0%A1%E8%B5%9BB%E9%A2%98%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[第一题数据1234567891011121314w=[... 0, 80, 150, 90, 140, 100, 120; 120, 0, 180, 100, 60, 70, 110; 100, 160, 0, 80, 90, 50, 70; inf, inf, inf, 0, 40, 70, 180; inf, inf, inf, 30, 0, 80, 150; inf, inf, inf, 80, 90, 0, 50; inf, inf, inf, 130, 140, 60, 0; ];% 设甲、乙、丙三个矿区为顶点v1，v2，v3，% A、B、C、D 三个冶炼厂为v4、v5、v6、v7。% 该矩阵表示7个顶点间的距离% 由于不是对称矩阵，第一行第二行的元素表示甲到乙还是乙到甲是有区别的。题目不严谨，而老师PPT里是前者。有待区分(TODO)% TODO:graphallshortestpaths函数中的图参数 inf用0表示也可以？% 该矩阵与题给数据是否完全一样，有待比较(TODO) 建立模型构造有向图，G=(V,E, W)，顶点、边、权重。甲、乙、丙三个矿区为顶点v1，v2，v3，% A、B、C、D 三个冶炼厂为v4、v5、v6、v7。TODO:这部分可以参考骆桦PPT或者相关书籍与论文。 xij&gt;0，肯定大于0。即负数用表示同样含义的正数表示（TODO：怎么说呢） 由于可以转运： IMPORTANT：为什么不是用该矩阵中的值作为顶点之间的距离，而是根据此矩阵计算最短路径？（因为题中说可以转运，而最短路径即包括了转运的含义） 问题中最优的定义： 矿区的矿物产量刚好达到（即等于）冶炼厂矿物需求量（TODO：矿物产量和矿物需求量这两个词是否合适，应参照题目或统一规定用词），这是两个约束条件。 IMPORTANT：因为题目是求矿区到各冶炼厂间矿石的最优调运方案，所以从最短路径中提取出两个矿区（甲乙）到四个冶炼厂（ABCD）的最短距离 分别用i =1, 2表示甲乙两个矿区，j =1，2，3，4表示A、B、C、D三个电厂， cij表示第i个矿区到第j个冶炼厂的最短距离，xij表示第i个矿区到第j个冶炼厂的调运量，ai表示第i个矿区的产量，bj表示第j个冶炼厂的需求量。 这里是产量和需求平衡的运输问题 一些假设 花费与路径长度和运送量相关，所以假设花费=路径长度*运送量。在这一点可以尝试讨论，优化？ 假设调运方案中从矿区到各冶炼厂间调运吨数为整数，试试改成小数？ matlab程序计算出的最短路径矩阵，前三行后四列是我们的结果，如下。 12390 130 100 12090 60 70 11080 90 50 70 1234567891011121314151617181920212223242526272829clc;clear;w=[... 0, 80, 150, 90, 140, 100, 120; 120, 0, 180, 100, 60, 70, 110; 100, 160, 0, 80, 90, 50, 70; 0, 0, 0, 0, 40, 70, 180; 0, 0, 0, 30, 0, 80, 150; 0, 0, 0, 80, 90, 0, 50; 0, 0, 0, 130, 140, 60, 0; ];W = sparse(w);d = graphallshortestpaths(W)NodeIDs = &#123;'甲', '乙','丙', 'A', 'B', 'C', 'D'&#125;; % 节点标签，也就是h.Nodes(i).ID属性值h = view(biograph(w, NodeIDs, 'ShowWeights', 'on'))set(h.Nodes, 'shape', 'circle'); % 顶点画成圆形h.EdgeType = 'segmented'; % 边的连接为线段h.LayoutType = 'radial';trydolayout(h) % 刷新图形 会报错，故放在try块中，不影响结果，待深究catch exceptionendh2 = view(biograph(d, NodeIDs, 'ShowWeights', 'on'));h2.EdgeType = 'segmented'; % 边的连接为线段h2.LayoutType = 'equilibrium';trydolayout(h2) % 刷新图形 会报错，故放在try块中，不影响结果，待深究catch exceptionend TODO:matlab的图不怎么样。修改matlab参数、图论工具箱、网络分析工具箱、NetworkX lingo程序矩阵x和Objective Value是我们的最终结果：各矿区到各冶炼厂最优调度方案。 1234567891011121314151617model:sets:kuang/1..3 /:a; !甲乙丙矿区的产量;chang/1..4 /:b; !ABCD四个冶炼厂的矿石用量;link(kuang,chang):c,x;endsetsdata:a = 700 500 500;b = 400 300 400 600;c = 90 130 100 120 90 60 70 110 80 90 50 70;enddatamin = @sum(link: c * x);@for(kuang(i):@sum(chang(j):x(i, j)) = a(i));@for(chang(j):@sum(kuang(i):x(i, j)) = b(j));end TODO：检验答案正确性 135000.0 1234结果：三个矿区到四个冶炼厂的调度方案400 0 200 1000 300 200 00 0 0 500 待解决主要问题图画的不行、论文（建立模型部分、假设部分），可能这只是第一题，不需要花太大精力。 第二题几乎不用假设和建模，而且老师也给了两个lingo程序。但现在问题是老师给的第二个lingo程序看不太懂，不知道怎么把B题里的数据套进去。 我借的matlab书上都有直接给代码，但很长。 最大流 12345678910111213141516171819202122model:sets:nodes/s,1,2,3,t/;arcs(nodes,nodes):c,f;endsetsdata:c=0;@text(&apos;fdata.txt&apos;)=f;enddatacalc:c(1,2)=20;c(1,3)=16;c(2,4)=4;c(2,5)=14;c(3,2)=10;c(3,4)=20;c(4,5)=8;endcalcn=@size(nodes);max=flow;@for(nodes(i)|i #ne# 1 #and# i #ne#n:@sum(nodes(j):f(i,j))=@sum(nodes(j):f(j,i))); @sum(nodes(i):f(1,i))=flow;@sum(nodes(i):f(i,n))=flow;@for(arcs:@bnd(0,f,c));end 最小费用最大流 1234567891011121314151617181920212223model:sets:nodes/s,1,2,3,t/:d;arcs(nodes,nodes):b,c,f;endsetsdata:d=22 0 0 0 -22;b=0;c=0;enddatacalc:b(1,2)=12;b(1,3)=3;b(2,4)=18;b(2,5)=3;b(3,2)=6;b(3,4)=9;b(4,5)=6;c(1,2)=20;c(1,3)=16;c(2,4)=4;c(2,5)=14;c(3,2)=10;c(3,4)=20;c(4,5)=8;endcalcmin=@sum(arcs:b*f);@for(nodes(i):@sum(nodes(j):f(i,j))-@sum(nodes(j):f(j,i))=d(i)); @for(arcs:@bnd(0,f,c));End 第三题可选方法数学实验13-树算法08PPT里的后三种方法： 改进的贪心 模拟退火 修改过的prim 英文论文阅读s commentary the outstanding Steiner tree papers准确解 暴力法 直接暴力，890+个可能位置。 Hanan的一个理论，被三个队伍引用，说只需要考虑和一个已知站x坐标相同并且和另外一个已知站y坐标相同的steiner点。可能的steiner点位置减少到63个。 在此基础上可以，删除角落里的点，可能的位置减少到31个。 动态规划 虽然它还是要计算已知点的所有子集，但它避免测试所有steiner点的子集。 通过该这样的方法，几个小时可以找到50个可能位置，但似乎没有人这样做。 电脑芯片设计者通常喜欢近似解，因为网络的长度并不总是操作速度的限制条件。 近似解一个近似算法是不用虚设点，直接使用最小生成树，Hwang证明这个长度不超过steiner树的150%，但这当然不满足题目的要求。 某队找到一个最好的steiner点，然后把它加进已知站，之后重复这个策略直到加了7个点或者不可能优化了。这个方法找到了一个可能解，但并不是每次都可以这样。 某队用了多种不同的启发式算法，并且用另外四个样例对他们的方法进行了测试。另外，他们在评估他们的算法时做了一个好的决定。关于最小生成树他们还给了一个优化方案，因为他们通常不能计算准确的steiner树。他们的启发式算法都用了贪心策略。他们想出了一种改进的克鲁斯卡尔算法，模仿克鲁斯卡尔但如果有利的话会使用steiner点。这个启发式算法找到了一种可能解。虽然这个算法在速度上优于上一队，但面对更大规模的问题时它不一定能找到相当好的解。 某队(也就是下边的这个论文)用了模拟退火，模拟退火根据当地重新排列规则随机从某种解移向某种解。移向一个解的概率取决于这两个解的花费和一个叫做温度的控制变量。通过一个合适的冷却速率，这个启发式算法最终停在一个几乎最优解。他们模拟了100次这个程序都得到了最优解。 总结最后简单总结一下，有两种方法： exact solution 求确切的最优解，有两种方法。 暴力枚举法 通过减少steiner点可能的位置来节约时间，仍然是在用这种方法。 动态规划 似乎没有人用这个。 近似解 通过启发式算法，求近似最优解，有几种方法。 单点贪心 每次先找到一个最好的steiner点，将其加入已知站，直至N-2或不可能有更好的解了。 改进克鲁斯卡尔算法 模仿克鲁斯卡尔，但考虑了steiner点。 模拟退火，这是最好的一个方法 还未具体去看那篇论文(1991 B Finding optimal Steiner trees) 1991 B Finding optimal Steiner trees模拟退火过程这是一种更有效的寻找所有可行的虚设点和已知点组合的方式。 我们从一个已给的虚设点和已知点组成的树开始，并且允许模拟退火程序创造一个新的配置。对每一个新配置来说，程序决定了最小生成树并且计算其长度。然后模拟退火程序在冷却计划的基础上决定是使用还是拒绝新配置。修改一个配置和评价这个修改方案都很简单。 这个方法很有普适性：任何初始配置都可能被使用，并且算法并不直接取决于固定的站点设置。 和暴力相反，模拟退火并不一定能产生绝对的最优解。然而，我们可以按照我们的希望控制其停在当前最小值（和绝对的最优解不同），同时与暴力相比，计算时间可得到很大的缩减。 虚设点有31个可能位置作为初始条件。该模拟退火程序的输入是已知点位置、steiner点的可能位置，还有一个初始路径。（我们手动找了一个最优解，并将其作为程序的输入。我们把已知网络按照三点一组的规则进行分组，每组添加一个虚设点使该组最优，然后使各组最优，得到的配置作为模拟退火的最小路径出现了几次。） 现在配置改变的方式随机从下边选择： 随机在可能位置添加一个steiner点 移除一个已加入的虚设点 将一个已加入的steiner点随机移到一个新的位置 （通过这三种方式，我们可以尝试所有可能的网络配置。如果是为了这样做，第三种方式并没有必要；但是为了给模拟退火步骤更大的自由性，我们包含了这种方法。） 使用存储起来的新配置，为了建立最小生成树和评价网络的花费，一个计算程序会被调用。这个花费然后会被程序的模拟退火部分（routine METROP from Press et al.）使用，以决定新的配置是否被保存或拒绝（根据一个意见一致的冷却计划）。 刚开始的前几次表明一个趋势：增加度为2的虚设点是没用的。虽然虚设点并不花费什么，我们决定在程序中排除这个多余，通过引入较小的虚设点花费，这个花费足够小，并不会影响在必要时加入虚设点，反而最终会处理没有必要的虚设点。 我们同时也添加了一个模拟退火中不经常出现的特点，借此这个程序可以存储测试出的最优解。（模拟退火一般只返回最终使用的配置） 结果平均迭代9800次退火，1.5min（在25-MHz 386-based PC） 用不同的种子形成不同的随机数生成器，给了5种不同的最优解，长度为94。 超过100个回合时，模拟退火总是收敛到5种中的1种，证明它适用于更大范围的steiner树的问题（当暴力是不可能的时候）。 扩展如果所有站点是有花费的 如果想用模拟退火，我们可以： 用一些暴力方法 模拟退火数量、位置、虚设点的度（嵌套退火） 修改最小生成树算法，找到花费最小（而不是路径长度最短）的树，并且用前边的模拟退火 似乎前两种方法太费时间而且效率不高，我们选择第三种。 虽然模拟退火不一定能给出最优解，但它在100次试验之后，确实给了最优解（暴力检查过）。 工作记录 2019.4.4 工作 尝试做第一题，写了一些假设，思路和需要注意的点等等。 感想 平常还是要做好充足的准备，不要等着题发下来了才去详细了解某些知识和算法。比如这次校赛，昨天出的题，B题就是课上讲过的东西，如果当时抽时间具体研究了，现在不是就已经会了吗？（虽然现在刚学习建模不久，而且当时好像没时间……当然是选择原谅自己） 2019.4.5 工作 实现第一题matlab程序，发现作的图好丑，不够清晰。寻求解决办法，了解到网络分析工具箱、NetWorkX等。 感想 擒贼先擒王。最终目的是写一篇好的论文。现在应该把整个思路给定下来，大体上进行实现。不是能因为这个图花费太多时间，应该在后期优化。 2019.4.6 工作 实现第一题lingo程序，得到答案。重新回顾第一题，整理思路、材料和之后需要做的相关工作。 看第二题，最小费用最小流，好像得出答案比较简单。了解steiner树，查阅文献。 感想 道阻且长，我应该对lingo、matlab极其熟悉吗？ 2019.4.7 工作 阅读英文论文点评并总结，着手查看比较好的一篇论文。 感想 类似的问题，可以直接去看论文。另一方面，更好的是去看论文点评，能够站在顶层往下学习还是很不错的一种体验。 问题让求steiner树，我们可能是要先证明每个图中steiner树是一定存在的？ 2019.4.8 工作 阅读英文论文模拟退火部分并总结，解决第二题最小费用最大流。 2019.4.9 工作 上完建模课和队友讨论，知道了凸包..…突然发现题目要求很变态的一点，管道必须是平行于x轴或y轴的。这个是求出结果后不证自明，还是过程中就要求判断呢。 2019.4.10 工作 知道凸包是什么了，知道了美赛91为什么用L距离，又了解了几种求近似解的方法。着手模拟退火算法 感想 啊..……不会………..…..…不想说话 2019.4.11 工作 学习模拟退火，学了一半吧 2019.4.12 工作 继续学习模拟退火，学完了，知道是什么，大概知道怎么用。 着手将题目与模拟退火结合，设计代码。 2019.4.13 工作 敲代码，整体结构敲出来了，差一个扰动函数 感想 matlab的基础还是不足，很多东西都需要搜着做 2019.4.14 工作 写扰动函数，尝试调参。难呐..… 2019.4.17 工作 通过暴力，发现这个题和普通的steiner树不一样，按普通的steiner树求解的话，是不符合题目要求的。 核心呐：它要求边水平或竖直，这样目标函数就应该改成合法性了。 设想了目标函数为合法性的算法如何实现。 2019.4.20 工作 实现目标函数为合法性的程序，最终可以求得合法的steiner树。但无用的steiner点太多了，需要优化。 2019.4.21 工作 在合法树的基础上进行长度和steiner点个数的优化。 遗留了一个问题：自己写的一个函数总是出问题，不符预期。 2019.4.22 工作 解决昨天遗留的问题，写函数优化无用的steiner点。（原因是在for循环中数组变小了，然后就越界了，python中也有这样的东西嘛我记得 求得最终答案（不知道强迫症还是什么，总感觉有隐患..…，不过本来的思路就是求近似最优解..） 整理代码，完善注释。 那个无用的steiner点即使写了优化函数之后还是有，原因是去掉无用点之后，调用最小生成树算法，这个算法导致有多余的steiner点的产生。 2019.4.23 工作 讨论结果和论文思路，分工 2019.4.24 工作 中午下课吃完饭回来就写论文，晚上剪头，吃麻辣烫看了两集BigBang，回来继续写，写到现在11点半了，写了2500+字。主体部分已经写了有四分之三了，一些细节写在了注释里。耶 2019.4.25 工作 上下午第四节都在写论文，算法设计与分析课上也在写论文..…整体上是写完了，剩下的工作是补充细节。 2019.4.26 工作 快中午的时候开始补充论文细节，一直到晚上，效率挺低的，可能是分工问题，另外是还有一些讨论的工作。 2019.4.27 工作 流程图、公式、标题、字体、程序代码等等都搞定了，差不多结束了，第一题代码太烂就先算了吧，那个不重要。 2019.4.28 工作 搞细节咯，还修改了个流程图。检查了几遍，结束咯~ 整个过程想来还是挺艰辛的，大多都是在尝试，不断地试错然后改进，可能建模都这样吧。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>数学建模</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇编语言-第五章作业]]></title>
    <url>%2F2019%2F04%2F25%2F%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC%E4%BA%94%E7%AB%A0%E4%BD%9C%E4%B8%9A%2F</url>
    <content type="text"><![CDATA[5.6题目编写程序，将一个包含有20个数据的数组M分成两个数组：正数数组P和负数数组N，并分别把这两个数组中的数据个数显示出来。 流程图123456789101112131415161718flowstart=&gt;start: 开始getNum=&gt;operation: 取数组下个元素whetherNegative=&gt;condition: 是负数？isPositive=&gt;operation: 存入正数数组isNegative=&gt;operation: 存入负数数组whetherEnd=&gt;condition: 数组最后一个元素？showNegative=&gt;operation: 显示偶数个数showPositive=&gt;operation: 显示奇数个数end=&gt;end: 结束start-&gt;getNum-&gt;whetherNegativewhetherNegative(yes)-&gt;isNegativewhetherNegative(no)-&gt;isPositiveisNegative-&gt;whetherEndisPositive-&gt;whetherEndwhetherEnd(no)-&gt;getNumwhetherEnd(yes)-&gt;showPositive-&gt;showNegative-&gt;end 程序初始数组中存放20个数字：1,-1,2,-2,3,-3,4,-4,5,-5,6,-6,7,-7,8,-8,9,-9,10,-10 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495data segment separator0 dw &apos;A&apos; ; 间隔符，方便查看内存内容 array dw 1,-1,2,-2,3,-3,4,-4,5,-5,6,-6,7,-7,8,-8,9,-9,10,-10 ; 存放数组 separator1 dw &apos;A&apos; ; 间隔符，方便查看内存内容 P dw 20 dup (?) ; 存放正数 separator2 dw &apos;A&apos; ; 间隔符，方便查看内存内容 N dw 20 dup (?) ; 存放负数 separator3 dw &apos;A&apos; ; 间隔符，方便查看内存内容 lenOfArray equ 20 ; 数组长度 lenOfP db 0 ; 存放正数的个数 lenOfN db 0 ; 存放负数的个数 positive db 0dh, 0ah, &apos;the positive number is：&apos;, &apos;$&apos; ; 正数的个数是： negative db 0dh, 0ah, &apos;the negative number is：&apos;, &apos;$&apos; ; 负数的个数是： crlf db 0dh, 0ah, &apos;$&apos; ;回车换行data ends; --------------------------------------------------------------------------code segment main proc far assume cs: code, ds: datastart: ; 为返回DOS做准备 push ds ; ds入栈 sub ax, ax ; ax置0 push ax ; 0入栈 ; ds存储数据段地址 mov ax, data mov ds, ax ; 给ds赋值 begin: mov cx, lenOfArray ; 遍历array，cx置为array的长度 lea bx, array ; 将array存入bx lea si, P ; 将P存入si lea di, N ; 将N存入di begin1: mov ax, [bx] ; ax指向array数组 cmp ax, 0 ; 判断是否为负数 js isnegative ; 结果为负则转移至isnegative mov [si], ax ; 是正数，存入正数数组 inc lenOfP ; 正数个数+1 add si, 2 ; si后移 jmp short next ; 判断array数组的下一个元素 isnegative: mov [di], ax ; 是负数，存入负数数组 inc lenOfN ; 负数个数+1 add di, 2 ; di后移next: add bx, 2 ; bx后移 loop begin1 ; cx为0是跳出循环，运行后边的代码 lea dx, positive ; 显示正数个数 mov al, lenOfP call display ; 调显示子程序 lea dx, negative ; 显示负数个数 mov al, lenOfN call display ; 调显示子程序 ret main endp ; -------------------------------------------------------------------------- display proc near ; 显示子程序 mov ah, 9 ; 调用9号DOS功能，显示一个字符串 int 21h ; DOS系统功能调用 aam ; 将(al)中的二进制数转换为二个非压缩bcd码 add ah, ‘0’ ; 变为 0～9 的 ASCII 码 mov dl, ah mov ah, 2 ; 调用2号DOS功能，显示一个字符 int 21h add al, ‘0’ ; 变为 0～9 的ASCII码 mov dl, al mov ah, 2 ; 调用2号DOS功能，显示一个字符 int 21h lea dx, crlf ; 显示回车换行 mov ah, 9 ; 调用9号DOS功能，显示一个字符串 int 21h ret display endp ; 显示子程序结束code ends ; 以上定义代码段; --------------------------------------------------------------------------end start 结果 5.7题目试编写一个汇编语言程序，求出首地址为array的100D字数组中的最小偶数，并把它存放在AX中。 程序1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253data segment array dw 100 dup(?)data ends; --------------------------------------------------------------------------code segment main proc far assume cs: code, ds: datastart: ; 为返回DOS做准备 push ds ; ds入栈 sub ax, ax ; ax置0 push ax ; 0入栈 ; ds存储数据段地址 mov ax, data mov ds, ax ; 给ds赋值 begin: mov bx, 0 mov cx, 100 compare: mov ax, data[bx]; 取数组的第一个数 add bx, 2 test ax, 01h ; 是偶数吗？ loopnz compare ; 不是，则比较下一个数 jnz stop ; 没有偶数，退出 jcxz stop ; 最后一个数是偶数，即为最小偶数，退出 compare1: mov dx, data[bx]; 取数组的下一个数 add bx, 2 test dx, 01h ; 是偶数吗？ jnz next ; 不是，比较下一个数 cmp ax, dx ; (ax)&lt;(dx)吗？ jle next mov ax, dx ; (ax)&lt;(dx)，则置换(ax)为最小偶数 next: loop compare1stop: retmain endpcode ends ; 以上定义代码段; --------------------------------------------------------------------------end start 5.12题目有一个首地址为MEM的100D字数组，试编制程序删除数组中所有为0的项，并将后续项向前压缩，最后将数组的剩余部分补上0。 程序12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849data segment mem dw 100 dup (?)data ends; --------------------------------------------------------------------------code segment main proc far assume cs: code, ds: datastart: ; 为返回DOS做准备 push ds ; 设置返回 dos sub ax, ax push ax ; ds指向代码段 mov ax, data mov ds, ax ; 给ds赋值 begin: mov si, (100-1)*2 ; (si)指向 mem 的末元素的首地址 mov bx, -2 ; 地址指针的初值 mov cx, 100 comp: add bx, 2 cmp mem [bx], 0 jz cons loop comp jmp finish ; 比较结束，已无0，则结束 cons: mov di, bx cons1: cmp di, si ; 到了最后单元吗？ jae nomov mov ax, mem [di+2] ; 后面的元素向前移位 mov mem [di], ax add di, 2 jmp cons1 nomov: mov word ptr [si], 0 ; 最后单元补 0 loop comp finish: retmain endpcode ends ; 以上定义代码段; --------------------------------------------------------------------------end start 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[模拟退火学习]]></title>
    <url>%2F2019%2F04%2F25%2F%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[与贪心的区别出现较好的解就使用，发现不了就形成解。缺点：跳不出局部最优解 模拟退火：与贪心类似，但可以以一定的概率跳出局部最优解，通过两个式子实现，Metropolis准则。玻尔兹曼分布 模拟退火算法和物理退火过程的对应 模拟退火算法 物理退火过程 解 粒子状态 目标函数 能量 最优解 能量最低态 设定初温 设置加温到几度 扰动 热涨落 metropolis采样过程 热平衡，粒子状态满足玻尔兹曼分布 控制参数的下降 冷却 伪代码缩进代表层级嵌套关系。 构造一个初始解，令当前解为该解。 设置初始温度，初始温度要设得比较高。 主要算法，while循环： 循环条件可以是温度的阈值或者是解不怎么变化了 for循环，设置一个步长 平衡过程，在该温度下，使达到平衡（metropolis），恒温下1到$T_L$步 根据当前解随机生成一个邻解，跟当前解非常接近（扰动，for循环就是多次扰动） 计算邻解的目标函数（花费、路程、大小、钱数等等），减去当前解的目标函数，求得目标函数变化量 如果变化量小于0（即优化了），使用该邻近解；如果没有优化，则用metropolis准则，看是不是要跳出坑，跳出则使用该邻解。（温度越高越容易跳出坑） 平衡后设置新温度，即降温。 模拟退火算法设计要素初始解的生成如果初始解比较好的话，收敛得就很快。 通常以一个随机解作为初始解，并保证理论上能生成解空间中任意的解。（一般要多做几次模拟退火，即试用不同的初始解，再取最优的） 也可以是一个挑出来的比较好的解。这种情况下，初始温度应当设置得较低（降低它扰动到其他不好的解的概率）。 初始解不宜“太好”，否则很难从这个解的邻域中跳出。 邻解生成函数应尽可能保证产生的候选解能遍布整个解空间。 邻域应尽可能的小，能够在少量循环内充分探测，但每次的改变不应该引起太大的变化。 初始温度如何设定初始温度应该尽可能的高，以确保最终解不受初始解影响，但过高又会增加计算时间。 均匀抽样一组状态，以各状态目标值的方差为初温。（随机生成一组解） 等等 ※ 正式开始退火算法前，可进行一个升温过程确定初始温度：逐渐增加温度，直到所有尝试运动都被接受，将此时的温度设置为初始温度。 等等 等温步数如何确定等温步数即同一个温度下，跑几个循环。 等温步数也称Metropolis抽样稳定准则，用于决定在各温度下产生候选解的数目，通常取决于解空间和邻域的大小。如果解空间小，步数可以小一点。 等温过程是为了让系统达到平衡，因此可通过检验目标函数的均值是否稳定（或连续若干步的目标值变化较小，这个可以写一个函数来检测）来确定等温步数。等温步数可以长，也就是多平衡一会而已。 等温步数受温度的影响。高温时，等温步数可以较小；温度较小时，等温步数要大。随着温度降低，增加等温步数。（因为高温的时候比较混乱， 温度小的时候就在不停地收敛了），可以将等温步数设置成一个温度的函数。 有时为了考虑方便，也可以直接按一定的步数抽样。不区分高温和低温时的等温步数，大一点就好啦。 如何降温一般要慢慢地降 经典模拟退火算法降温方式 快速模拟退火算法降温方式 常用的其他降温方式 后边两种比较常用 花费函数不要太复杂，应该能被快速的计算，花费函数的计算是程序的可能瓶颈。 一般用目标函数构造花费函数即可。目标函数、目标函数的倒数/相反数经常直接作为花费函数 终止条件理论上温度降为0才终止退火算法，因为此时没有概率跳出坑了。但实际温度较低时，尝试的接受概率就几乎为0了。 设置终止温度的阈值，或设置外循环循环迭代次数。 算法搜索到的最优值连续若干步保持不变。 其他有人说这就是遗传算法+梯度下降。老师说这个算法属于一种蒙特卡洛算法，和蒙特卡洛算法类似。国赛和美赛几乎不会考TSP，太简单了，小比赛才有可能让选手练手。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>数学建模</tag>
        <tag>模拟退火</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C/C++小课之继承（一）]]></title>
    <url>%2F2019%2F04%2F16%2FC-C-%E5%B0%8F%E8%AF%BE%E4%B9%8B%E7%BB%A7%E6%89%BF%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[继承的概念继承源于生物界，指后代能够传承前代的特征和行为。 基类和子类继承使我们可以通过一个已有的类创建一个新类，新类自然获得已有类的全部功能。在某个继承关系中，已有的类在这个继承关系中作为基类、超类或父类，新类称为派生类或子类。 具体来讲，子类复制了基类的全体数据成员和成员函数。此外，子类还可以进行扩充、修改和重定义。 同一个类可以作为多个类的基类，一个子类也可以作为另一个类的基类。 基类和子类是继承关系中的概念，并不是本质的概念，而是关系上的概念。 继承与派生A作为基类，B作为子类时，我们称： B继承A A派生B 单继承和多继承只能从一个基类派生的继承称为单继承，即一个类一次最多继承一个基类。 可以从多个基类派生的继承称为多继承。 C++支持单继承和多继承。 Java只支持单继承，需要“多继承”时使用接口实现。（接口是什么，学了Java就知道了） 类成员访问权限C++类成员访问权限默认为private。 public语法正确的条件下，访问不受控制，在哪里都可以访问。 private只能在类内、友元函数访问。 protected只能在类内、子类内、友元函数访问。 继承方式注意：继承方式决定的是子类如何继承基类成员的访问权限。 不同继承方式会不同程度地改变基类成员在派生类中的访问权限。（个人觉得这句话不好，易让人误解） C++中继承方式默认为private。 public基类成员的访问权限在派生类中保持不变。 基类的private成员、public成员、protected成员在子类中保持他们在基类中相同的访问权限。 private基类成员的访问权限在派生类中全部变为private。 protected基类的public成员的访问权限在派生类中变为protected。 private成员和protected成员的访问权限不变。 派生类对基类的扩展派生类可以： 增加新的数据成员和成员函数 重载从基类继承到的成员函数 覆盖（重定义）从基类集成到的成员函数 改变基类成员在派生类中的访问属性（通过继承方式实现） 派生类不能继承基类的以下内容： 析构函数 基类的友元函数 静态成员 静态数据成员 静态成员函数 注意： 静态成员为整个继承体系公有。 C++11之前，派生类不能继承基类的构造函数，C++11之后可以，通过using实现。 成员函数的重定义、重载及隐藏派生类对继承到的基类成员函数的重定义或重载都会影响它们在派生类中的可见性。 派生类对基类函数进行重定义或重载时，由于继承和类作用域的原因，导致了隐藏，解决隐藏有三种方法。 影响可见性： 如果派生类重定义或者重载了基类中某个函数名为func的函数，则基类中的所有名字为func的函数都会被隐藏。（其中隐藏指的是在派生类中不能直接看到这个函数。） 解决： 通过基类名称访问被派生类重定义或重载隐藏的函数， 如基类::函数名(...)。 重载基类的所有同名函数，这些重载函数的代码与基类完全相同。 使用using。 前两种方法都很繁琐。 而C++11提供了using使基类中被隐藏的函数在派生类中可见，具体使用在后边的using部分讲解。 重定义是什么覆盖也称为重定义、重写。 重定义是指派生类定义与基类具有相同参数列表的同名成员函数。 （关于重定义的定义，我个人认为书上P147的说法是错的。） 隐藏及解决代码如下： 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt;using namespace std;class Base &#123;public: void print() &#123; cout &lt;&lt; "Base::print()" &lt;&lt; endl; &#125; void print(int i) &#123; cout &lt;&lt; "Base::print()......" &lt;&lt; i &lt;&lt; endl; &#125;&#125;;class Derived :public Base &#123;public: int print() //重定义Base类的void print() &#123; cout &lt;&lt; "Derived::print()" &lt;&lt; endl; return 0; &#125;&#125;;int main()&#123; Base b1; Derived d1; b1.print(); //Base类调用函数正常 b1.print(1);//Base类调用函数正常 d1.print(); //Base类中的print()被隐藏，调用Derived类的print() d1.print(1);//该行报错，编译不通过。原因是Derived类的int print()重定义了Base类的void print()，导致Base中所有同名函数被隐藏，即print(int)和print()被隐藏。 d1.Base::print(); //调用Base类的print() d1.Base::print(1); //调用Base类的print(int) return 0;&#125; 将第34行注释后，输出结果如下： 12345Base::print()Base::print()......1Derived::print()Base::print()Base::print()......1 重载是什么重载与重定义不同，重载要求成员函数名称相同，但具有不同的参数列表。 （关于重载的定义，我个人认为书上P147的说法是错的） 隐藏及解决123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt;using namespace std;class Base &#123;public: void print() &#123; cout &lt;&lt; "Base::print()" &lt;&lt; endl; &#125; void print(int i) &#123; cout &lt;&lt; "Base::print()......" &lt;&lt; i &lt;&lt; endl; &#125;&#125;;class Derived :public Base &#123;public: void print(char i) //重载Base类的两个print函数，即print()、print(int i) &#123; cout &lt;&lt; "Derived::print()......" &lt;&lt; i &lt;&lt; endl; &#125; //int print(int i);//这个是重定义Base的void print(int i)，而非重载&#125;;int main()&#123; Base b1; Derived d1; b1.print(); //Base类调用函数正常 b1.print(1);//Base类调用函数正常 d1.print(); //该行报错，因为Derived的print(char i)重载了Base类的两个print函数，它们在Derived类中被隐藏了 d1.print('A');//调用Derived类的print(char i) d1.Base::print(); //调用Base类的print() d1.Base::print(1); //调用Base类的print(int) return 0;&#125; 将第33行注释后，输出结果如下： 12345Base::print()Base::print()......1Derived::print()......ABase::print()Base::print()......1 usingusing有三个用途： 使隐藏的函数重现 改变基类成员在派生类中的访问权限 使子类继承基类构造函数（在继承第二讲中讲解如何使用） 使隐藏函数重现方法：在派生类中用using 基类::函数名;声明基类的函数名，不需提供函数参数。 一条using可以把指定函数名的所有版本添加到派生类作用域中，它们的访问权限与using语句所在区域的访问权限相同。 12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt;using namespace std;class Base &#123;public: void print() &#123; cout &lt;&lt; "Base::print()" &lt;&lt; endl; &#125; void print(int i) &#123; cout &lt;&lt; "Base::print()......" &lt;&lt; i &lt;&lt; endl; &#125;&#125;;class Derived :public Base &#123;public: void print(char i) //重载Base类的两个print函数，即print()、print(int i) &#123; cout &lt;&lt; "Derived::print()......" &lt;&lt; i &lt;&lt; endl; &#125; using Base::print;&#125;;int main()&#123; Derived d1; d1.print(); //不加using的话该行报错 d1.print('A');//调用Derived类的print(char i) return 0;&#125; 改变基类成员在派生类中的访问权限在派生类的public、protected或private权限区域内，使用using再次声明基类的非private成员，就可以重新设置它们在派生类中的权限为using语句所在区域的权限。 继承和类作用域在存在继承关系时，派生类的作用域嵌套在基类作用域的内层。 因此，在解析类成员名称时，如果在本类的作用域内没有找到，编译器会接着在外层的基类作用域内继续寻找该成员名称的定义。 在这个寻找的过程中，一旦在某个作用域找到了，就停止查找，即使外层作用域内还有同名成员，也不找了。 形式如下： 12345678Base &#123; int print(int)&#123;&#125; ... Derived &#123; void print() ... &#125;&#125; 代码验证： 12345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;using namespace std;class Base &#123;public: void print(int i) &#123; cout &lt;&lt; "Base::print()......" &lt;&lt; i &lt;&lt; endl; &#125;&#125;;class Derived1 :public Base &#123;public: void print() &#123; cout &lt;&lt; "Derived::print()......" &lt;&lt; endl; &#125; &#125;;class Derived2 :public Derived1 &#123;&#125;;int main()&#123; Derived2 d; d.print(1); //该行代码报错，因为在Derived1中找到同名函数void print()，不会再向外层找，又因为参数列表不匹配，所以报错 return 0;&#125; 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>继承</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[项目开发记录]]></title>
    <url>%2F2019%2F04%2F12%2F%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[一段旅程算是结尾了吧，以下为本学期开发记录： 2.26 晚上 整理项目里的代码和注释 2.27 中午至下午 解决先登录问题 2.28 下午 解决先登录问题 3.1 中午至下午 解决先登录后续问题：控制台warning，路由重复 尝试数据持久化，redux-persist 3.2 下午 数据持久化 redux-persist。combineReducer？ persistCombineReducer? 3.3 循环injectedReducers，发现有个root，还有动态的数据持久化配置不好实现，改用localStoreage 3.11 晚上 给后端分任务：规定用户名和密码格式要求，并检测其合法性，新的页面要显示什么内容，前后端交互 3.19 下午 总结项目，明确各自的任务 3.23 下午 和hyk讨论前后端合作。 3.25 下午 开发编辑/显示标准基本信息界面，定义与后端交互的接口内容 3.27 早上、晚上 开发修改密码页面，补充标准基本信息界面提交功能 3.30 上午 前后端交互测试成功。向老师汇报情况 3.31 项目上传至coding]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络-实验（二）常用网络指令]]></title>
    <url>%2F2019%2F04%2F10%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[实验目的 学会并掌握常用网络命令。 学会分析在不同参数下显示的数据。 实验仪器PC机、局域网 常用命令arp知识点扫盲：地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。 功能：显示和修改IP地址与物理地址之间的转换表 -a功能：（Windows下）显示当前的ARP信息，可以指定网络地址。 Linux系统中，使用-g。 代码： 1arp -a # 显示当前所有的ARP信息 结果： Internet Address Physical Address Type 192.168.1.178 00-16-ec-a0-42-fa dynamic ..… ..… ..… 代码： 1arp -a 192.168.1.178 # 显示指定IP(即192.168.1.178)的ARP信息 结果： Internet Address Physical Address Type 192.168.1.178 00-16-ec-a0-42-fa dynamic -s功能：添加主机，并将网络地址跟物理地址相对应，这一项是永久生效的。 代码： 12arp -s 157.55.85.212 00-aa-00-62-c6-09 # 在IP和物理地址转换表中添加一项arp -a 157.55.85.212 # 显示指定IP(即157.55.85.212)的ARP信息 结果： Internet Address Physical Address Type 157.55.85.212 00-aa-00-62-c6-09 static 注意：这里添加的一个Type为static的。 -d功能：删除指定的主机，可以使用* 来删除所有主机。 代码： 12arp -d 157.55.85.212 # 删除指定IP(即157.55.85.212)arp -a 157.55.85.212 # 显示指定IP(即157.55.85.212)的ARP信息 结果： 1NO ARP Entries Found ftp知识点扫盲：文件传输协议，即FTP(File Transfer Protocol)。是用于在网络上进行文件传输的一套标准协议，使用客户/服务器模式。它属于网络传输协议。 ftp也是一种服务。一旦启动，将创建在其中可以使用ftp命令的子环境，通过键入 quit子命令可以从子环境返回到Windows命令提示符。当 ftp 子环境运行时，它由ftp命令提示符代表。 下边的指令除了ftp是在Windows命令提示符，其他都是在ftp的子环境里。 功能：控制文件的双向传输（老师说的..…）。 ftp功能：启动ftp服务。 在命令提示符下，直接输入ftp即可。 open代码： 1open 192.168.1.171 # 连接指定的ftp服务器（这里是老师的电脑） 结果： 12345678Connected to 192.168.1.171.220-Microsoft FTP Service220 张芳之家User (192.168.1.171:(none)): zf331 Password required for zf.Password:230-欢迎进入“张芳之家”230 User zf logged in. 注意：上边的第6行需要输入密码。我们输的时候，屏幕上并不会显示出来。 dir功能：查看本目录下的内容，目录可以理解成文件夹的意思。 代码： 1dir # 查看当前目录内容 结果： 12345200 PORT command successful. # 请求成功150 Opening ASCII mode data connection for /bin/ls. # ASCII传输方式连接/bin/ls04-26-13 08:22AM &lt;DIR&gt; 654 # 有个文件夹，名字是654226 Transfer complete.ftp: 收到 44 字节，用时 0.00 Seconds 44000.00Kbyte/sec. cd功能：更换远程目录。 12cd 654 # 进入文件夹654dir # 查看当前目录内容 结果： 12345200 PORT command successful. # 请求成功150 Opening ASCII mode data connection for /bin/ls. # ASCII传输方式连接/bin/ls04-26-13 08:22AM 70 qqq.txt # 有个文件，名字是qqq.txt226 Transfer complete.ftp: 收到 48 字节，用时 0.00 Seconds 44000.00Kbyte/sec. lcd功能：更换本地目录，若无参数，将显示当前目录。 代码： 1lcd e:\ 结果： 1Local directory now E:\. get功能：将远程文件复制到本地计算机。 代码： 1get qqq.txt 结果： 1234200 PORT command successful. # 请求成功150 Opening ASCII mode data connection for qqq.txt(70 bytes) # ASCII传输方式连接/bin/ls226 Transfer complete.ftp: 收到 70 字节，用时 0.00 Seconds 70000.00Kbyte/sec. quit功能：退出ftp服务。ftp子环境下输入quit即可。 结果： 1221 再见！欢迎下次“张芳之家” ipconfig功能：显示当前的TCP/IP配置的设置值。 代码： 1ipconfig 结果： 1234567Windows IP ConfigurationEthernet adapter 本地连接: Connection-specific DNS Suffix . : IP Address. . . . . . . . . . . . : 192.168.1.95 # IP地址 Subnet Mask . . . . . . . . . . . : 255.255.255.0 # 子网掩码 Default Gateway . . . . . . . . . : 192.168.1.3 # 缺省网关 telnet知识点扫盲：Telnet协议是TCP/IP协议族中的一员，是Internet远程登录服务的标准协议和主要方式。 功能：远程连接另一台计算机 telnet功能：启动telnet。 在命令提示符下，直接输入telnet即可。 open功能：连接指定计算机。 代码： 1open 192.168.1.94 # 连接我同桌.. 结果： 12345正在连接到192.168.1.94... 您将要发送密码信息到 Internet 区域中的远程计算机。这可能不安全。是否还要发送(y/n): nlogin:ligongpassword: 注意：第四行和第五行输入账号和密码，密码并不会显示出来。 copy功能：复制文件到自己电脑上 代码： 1copy qqq.txt c:\ # 复制其e盘qqq.txt到其c盘，前提是此时已在E盘，使用cd e:\实现 quit退出，直接输入quit即可。 net知识点扫盲：它包含了管理网络环境、服务、用户、登陆等Windows 98/NT/2000 中大部分重要的管理功能。 send功能：将消息发送到网络上的其他用户、计算机或消息名。必须运行信使服务以接收邮件。 代码： 1net send * 123 # 给所有人发123 结果： 1消息已经送到域 2HJF 代码： 1net send s14 hello # 给s14机器发hello 结果： 1消息已经送到 S14 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇编语言-实验（一）]]></title>
    <url>%2F2019%2F04%2F08%2F%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[题目一问题在数据段DATA中有两个字数据X和Y, 假设X=1122H, Y=3344H, 编程求两个字的和,结果存放到Z单元中。 代码123456789101112131415161718192021222324252627282930313233;*********************************************************************data segment ; 定义数据段 x dw 1122h ; 字 X y dw 3344h ; 字 Y z dw ? ; 字 Zdata ends;*********************************************************************code segment ; 定义代码段 assume cs:code,ds:data;--------------------------------------------------------------------- main proc far ; 程序的主部分start:; 为返回DOS做准备 push ds ; ds压栈 xor ax,ax ; (ax) &lt;- 0 push ax ; ax压栈; ds设为data mov ax,data ; (ax) &lt;- data mov ds,ax ; (ds) &lt;- (ax); z=x+y mov ax,x ; (ax) &lt;- x add ax,y ; (ax) &lt;- (ax)+y mov z,ax ; (z) &lt;- (ax) ; 返回DOS环境 ret ; 返回DOS环境main endp;---------------------------------------------------------------------code ends;********************************************************************* end start 题目二问题从SOURCE_BUFFER单元开始存放了20个字母A, 编程将这20个字母A的字符串传送到DEST_BUFFER开始的单元中。 代码123456789101112131415161718192021222324252627282930313233343536373839404142;*********************************************************************data segment ; 定义数据段 source_buffer db 20 dup(&apos;A&apos;); 串source_buffer，占20个字节，内容是20个字母Adata ends;*********************************************************************extra segment ; 定义附加段 dest_buffer db 20 dup(?) ; 串dest_buffer，占20个字节，内容未确定extra ends;*********************************************************************code segment ; 定义代码段 assume cs:code,ds:data,es:extra;---------------------------------------------------------------------main proc far ; 程序的主部分start: ; 为返回DOS做准备 push ds ; ds压栈 xor ax,ax ; (ax) &lt;- 0 push ax ; ax压栈 ; ds设为data mov ax,data ; (ax) &lt;- data mov ds,ax ; (ds) &lt;- (ax) ; es设为extra mov ax,extra ; (ax) &lt;- extra mov es,ax ; (es) &lt;- (ax); 准备工作 lea si,source_buffer ; 存储源串首地址 lea di,dest_buffer ; 存储目的串首地址 cld ; 建立方向标志 mov cx,20 ; 20个字符; 移动串 rep movsb ; 移动串至CX为0，即移动整个串 ; 返回DOS环境 ret ; 返回DOS环境main endp;---------------------------------------------------------------------code ends;********************************************************************* end start 题目三问题从SOURCE_BUFFER单元开始存放了20个字母A, 编程将这20个字母A的字符串向下移10个单元。 代码1234567891011121314151617181920212223242526272829303132333435;*********************************************************************extra segment ; 定义附加段 source_buffer db 20 dup(&apos;A&apos;) ; 串source_buffer，占20个字节，内容是20个字母A dest_buffer EQU source_buffer+10; 串dest_buffer，结果串的首地址extra ends;*********************************************************************code segment ; 定义代码段 assume cs:code,es:extra;---------------------------------------------------------------------main proc far ; 程序的主部分start: ; 为返回DOS做准备 push ds ; ds压栈 xor ax,ax ; (ax) &lt;- 0 push ax ; ax压栈 ; es设为extra mov ax,extra ; (ax) &lt;- extra mov es,ax ; (es) &lt;- (ax) ; 准备工作 lea si,source_buffer+19 ; 存储源串末地址 lea di,dest_buffer+19 ; 存储目的串末地址 std ; 建立方向标志 mov cx,20 ; 20个字符; 移动串 rep movs es:byte ptr[di],es:[di] ; 移动串至CX为0，即移动整个串 ; 返回DOS环境 ret ; 返回DOS环境main endp;---------------------------------------------------------------------code ends;********************************************************************* end start BUG不小心，上边代码写错了,rep movs ds:byte ptr[di],ds:[di]，源地址和目标地址不小心都用了di。 按说这样不能进行后移，但却得到了正确的结果。 经过调试，发现可能是编译环境自行将我的错误代码改成了正确代码，进行了优化。 同时也发现：rep movs ds:byte ptr[si],ds:[di]，这个代码也是错的，但也得到了正确的结果。 正确的代码应该是这样：rep movs ds:byte ptr[di],ds:[si]。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Bug</tag>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C/C++小课之指针悬挂]]></title>
    <url>%2F2019%2F03%2F28%2FC-C-%E5%B0%8F%E8%AF%BE%E4%B9%8B%E6%8C%87%E9%92%88%E6%82%AC%E6%8C%82%2F</url>
    <content type="text"><![CDATA[什么是指针悬挂指针悬挂是一种现象，出现了悬挂指针的现象。 悬挂指针即指向非法内存的指针，也叫野指针。 非法内存指的是我们不能使用的内存，比如我们没有申请过的内存。 123int* p = (int*)12345; //让p存一个随便的地址，这里以12345为例//int* p; //p未初始化，p的值随机，一般都会指向非法内存cout &lt;&lt; *p; //运行这行代码会出错 随便让p指向一块内存（一般都会指向非法内存）。 运行这段代码时我们使用了非法内存，所以会报错。 一些指针悬挂的情况课本中有两处提到指针悬挂，分别是：合成拷贝构造函数和合成赋值运算符函数。 如果类中有指针，这两个函数可能造成指针悬挂。（看完之后想想为什么只是可能？） 代码下面给出这两种函数造成指针悬挂的代码及注释： 12345678910111213141516171819202122232425#include &lt;iostream&gt;using namespace std;class MyClass&#123;public: int * p; MyClass()&#123; p = new int;&#125; ~MyClass()&#123; delete p;&#125; void print()&#123; cout &lt;&lt; p &lt;&lt; endl;&#125;&#125;;int main()&#123; MyClass a; MyClass b(a); //调用合成拷贝函数 //MyClass b = a; //调用合成赋值运算符 a.print(); b.print(); //据两行输出可知，两个指针指向同一块内存 return 0;&#125;//最后，B会先析构，然后A析构。//B析构会释放p指向的内存，同时这块内存变为非法内存，//此时A的指针p指向非法内存，造成指针悬挂。//A析构时delete p,使用了非法内存，这时出错 解决如果这两个系统合成的函数造成指针悬挂，我们应显式定义（自己定义）这两个函数，并使用深拷贝而非像合成的两个函数一样使用浅拷贝。 作者：@臭咸鱼 转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>指针</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[插值和线性回归]]></title>
    <url>%2F2019%2F03%2F28%2F%E6%8F%92%E5%80%BC%E5%92%8C%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%2F</url>
    <content type="text"><![CDATA[插值根据现有数据，插的值一定在曲线上。 interpl，一维插值函数。 线性回归regress $Y=b_0+b_1x_1+b_2x_2+\cdots+b_kx_k$ 拟合$x_1\ x_2\ \cdots\ x_k$与$Y$的关系 [B, Bint, R, Rint, Status]=regress(Y, X) B：回归得到的自变量系数 Bint：B的95%的置信区间矩阵 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Matlab</tag>
        <tag>数学建模</tag>
        <tag>线性回归</tag>
        <tag>插值</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[传染病模型]]></title>
    <url>%2F2019%2F03%2F28%2F%E4%BC%A0%E6%9F%93%E7%97%85%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[简介该模型在数学建模中可以解决很多问题。 该模型由三个微分方程构成。 建立模型定义变量假设系统中有三种人： 易感染的人 数量用$S$表示，刚开始所有人都是易感染的人 感染的人 数量用$I$表示 康复的人 数量用$R$表示（假设该传染病不致命） 微分方程$\begin{equation} \left\{ \begin{array}{r1} \frac{dS}{dt}=-\beta SI\\ \frac{dI}{dt}=\beta SI-\gamma I\\ \frac{dR}{dt}=\gamma I\\ \end{array} \right.\end{equation}$ 其中$\beta$是接触率，$\gamma$是康复率。 代码函数odesir123456789function dy = odesir(t, y, beta, gamma)% 根据传染病模型者中的y和t求出dy/dt% y=[S; I; R]dy =[ -beta*y(1)*y(2); % dS/dt beta*y(1)*y(2) - gamma*y(2); % dS/dt gamma*y(2); % dR/dt] 计算12345678910N = 100;beta = 0.01;gamma = 0.1;tspan = [0,50];y0 = [99,1,0];[t y] = ode45(@odesir, tspan, y0, [], bata, gamma);plot(t,y);xlabel('time');ylabel('population');legend('S', 'I', 'R'); ode23和ode45的区别：精度不一样，ode45精度高。 结果 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Matlab</tag>
        <tag>数学建模</tag>
        <tag>微分方程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Runge-Kutta法解微分方程]]></title>
    <url>%2F2019%2F03%2F28%2FRunge-Kutta%E6%B3%95%E8%A7%A3%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[连续问题，微分方程或偏微分方程一定能表示。比如疾病传染、新闻传播等。 离散问题，可以用差分方程或者类似于差分的算法。 一阶微分方程求解方程$y’=cos\ t$ 代码123456789clear,clc;f = @(t,y) cos(t); % 定义函数 f(t,y) = cos(t) 表示的就是dy/dt=cos(t)tspan = [0,2*pi]; % 时间t范围y0 = 2; % y的初值，用来处理积分得到的C[t,y] = ode23(f,tspan,y0); % 注意调用格式plot(t,y);xlabel('t');ylabel('y'); @表示句柄，当把一个函数作为参数传给另外一个函数，这时候必须要用句柄。这里是把函数f传给函数ode23。 结果 高阶微分方程求解方程$\begin{equation} \left\{ \begin{array}{r1} y’’=-sin\ y+sin\ 5t\\ y(0)=1\\ y’(0)=0\\ \end{array} \right.\end{equation}$ 可以将该高阶微分方程转化为两个一阶的微分方程：$\begin{equation} \left\{ \begin{array}{r1} y_1=y\\ y_2=y’\\ y’_1=y_2\\ y’_2=-sin\ y_1+sin\ 5t\\ y_1(0)=1\\ y_2(0)=0\\ \end{array} \right.\end{equation}$ 代码12345678910clear,clc;f = @(t, y) [ y(2); -sin( y(1) ) + sin( 5*t ) ]; % 两个参数分别是y1和y2的导数tspan = [ 0, 20 ]; % 时间t范围y0 = [ 1; 0 ]; % 初值，分别对应y1，y2的初值[t, y] = ode23(f, tspan, y0); % 注意调用格式plot(t,y);xlabel('t');ylabel('y');legend('y1','y2'); 结果​ 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Matlab</tag>
        <tag>数学建模</tag>
        <tag>微分方程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C/C++小课之类和对象]]></title>
    <url>%2F2019%2F03%2F27%2FC-C-%E5%B0%8F%E8%AF%BE%E4%B9%8B%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[简介如何理解类和对象？ 类是一种自定义数据类型，用类定义出来的变量就是对象。 格式： 数据类型 数据; int a; A a(); 这一章的主要问题就是如何设计、实现和使用类。 设计和实现分别对应类的抽象和封装；使用即最后一步，用类实现功能。 简单地说：面向对象就是将事物定义（包括抽象和封装）成类并使用。 类的抽象和封装抽象计算机软件开发采用的抽象方法主要有两种： 过程抽象 结果给出了函数的名称、接收的参数和能够提供的功能。 数据抽象 数据抽象是面向对象程序设计方法，以数据为中心。 结果形成某事物的类，其中包括成员变量和成员函数。 简单来说，就是找出一个类有哪些变量和功能，但不用封装。 比如这是一个点餐系统。 封装分为两部分： 接口 使用者看到的东西 实现 实现抽象出的类，写.cpp代码 简单地说，就是写代码。 比如：对老师来说，课代表就是接口，课代表怎么收作业就是实现。 提问12345678910111213141516class Cxy&#123;public: double height; void growTaller() &#123; cout &lt;&lt; "drinkMilk" &lt;&lt; endl; height+=2; &#125;;&#125;;int main()&#123; Cxy cbh; cbh.growtaller(); return 0;&#125; 请找出代码里的类、对象、抽象、封装。 成员函数常量成员函数C++中，为了禁止成员函数修改数据成员的值，可以使用常量成员函数。 语法： 123class X&#123; T f(T1, T1, ...) const;&#125;; 注意： 只有类的成员函数才能定义为常量函数，普通函数不能。 常量成员函数与const参数没有关系 对象 每个对象的数据成员都有自己独立的存储空间。就像int变量一样。 注意：一个类的成员函数只有一份，所有对象共用。 注意：类的static成员只有一份，它并不算对象的数据成员。 构造函数设计默认构造函数定义书上P97下边给的定义是最准确的。 想想之前讲的默认的含义。 简单来说：如果用类定义对象时，我们没有给参数的话，调用的就是默认构造函数。 分类默认构造函数有两种： 不带参数的构造函数 1A(); 可以是我们自己定义的，也可以是编译器合成的。 所有形参都提供了默认值的构造函数 这个当然是我们自己定义的。 构造函数与初始化列表初始化列表次序初始化列表中的成员初始化次序与他们在类中的声明次序相同，与初始化列表中的次序无关。 123456789class A&#123;public: int a; int b; int c; A(int aa,int bb,int cc):b(aa),a(bb),c(cc)&#123; cout &lt;&lt; "I am a handsome constructor yo" &lt;&lt; endl; &#125;&#125;; 提问：初始化次序是什么？ 初始化列表执行时间类内初始值$\rightarrow$构造函数初始化列表$\rightarrow$构造函数体 what必须采用初始化列表？C++11之前一个类的 常量成员 引用成员 类对象成员 子类构造函数对基类构造函数的调用 等等 必须通过初始化列表进行初始化。 C++11之后除了初始化列表，可以用类内初始值yo。 析构函数若有几个对象同时结束生存期，析构函数调用顺序与构造函数顺序相反。 静态成员关键字：static。 静态成员可以是变量，也可以是函数。 注意：静态成员函数不可以访问非静态成员。think why？ 意义表示这个成员是属于整个类的。 声明和定义示例： 123456class Boy&#123;public: static int boyNum; //男孩的数量&#125;;static int Boy::boyNum； //未初始化//static int Boy::boyNum = 0；//初始化 在类内static int number；，仅仅是声明， 原则上，定义必须写在类外：static int Boy::boyNum;，值默认为0，也可以进行初始化。 访问两种方式： 通过类名访问（非静态成员不能以这种这样访问） 1cout &lt;&lt; Boy::boyNum &lt;&lt; endl; 通过对象访问 12Boy cbh();cout &lt;&lt; cbhboyNum &lt;&lt; endl; 看看下边讲的this指针？ this指针含义this用来标识一个对象，是该对象的地址，类型是Boy* const，隐含在非静态成员函数的参数里。 应用静态成员函数没有this指针，所以不可以访问非静态成员。 常量成员函数的this，类型是const Boy *。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[美国人口指数增长模型拟合]]></title>
    <url>%2F2019%2F03%2F27%2F%E7%BE%8E%E5%9B%BD%E4%BA%BA%E5%8F%A3%E6%8C%87%E6%95%B0%E5%A2%9E%E9%95%BF%E6%A8%A1%E5%9E%8B%E6%8B%9F%E5%90%88%2F</url>
    <content type="text"><![CDATA[假设美国人口数满足指数增长模型$x(t)=x_0e^{rt}$，其中$x(t)$表示第$t$年的人口数，$x_0$表示第0年的人口数，即人口数初值。 思路$ x(t) = x_0e^{rt} \ \Rightarrow \ ln \,x(t)=rt+ln\,x_0 \,\Rightarrow Y=ln \,x(t)a_1t+a_2$ ， 其中$Y=ln\,x(t)$，$a_1=r$，$a_2=ln\,x_0$。 如上，将指数函数转化为线性函数，利用线性函数进行拟合，再将线性函数转化为指数函数。 代码123456789101112131415t = 1790 : 10 : 1900; % 时间p = [3.9 5.3 7.2 9.6 ... 12.9 17.1 23.2 31.4 ... 38.6 50.2 62.9 76.0]; % 人口数 Y = log(p); % 转换为线性 X = t; % 不用X直接用t也可以 a = polyfit(X, Y, 1); % X,Y线性拟合 x0 = exp(a(2)); % r = a(1); ti = 1790:1900; % 曲线的横坐标 pti = x0*exp(r*ti); % 曲线纵坐标，即拟合结果 plot(t, p, 'o', ti, pti, 'm'); % 原数据与拟合结果对比 xlabel('Year'); ylabel('Population'); 结果 可以看到，前期拟合结果较好，但是1890年到1900年曲线与原数据相比偏高。 原因是人口数并不完全符合指数增长模型，人口并不能完全地按照“J”型曲线增长，而应该是“S”型曲线。物种竞争嘛，所以刚开始的假设是不合理的，可以再进行优化。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Matlab</tag>
        <tag>数学建模</tag>
        <tag>拟合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线性方程组求解]]></title>
    <url>%2F2019%2F03%2F26%2F%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E6%B1%82%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[定解方程组有一组解。 $\begin{equation} \left\{ \begin{array}{r1} 2x+3y+1z = 4\\ 4x+2y+3z=17\\ 7x+1y-1z=1\\ \end{array} \right.\end{equation}$ 1234% A*X=BA = [2 3 1; 4 2 3; 7 1 -1];B = [4 17 1]';X= A\B % 求得X 不定方程组有无数组解。 $\begin{equation} \left\{ \begin{array}{r1} 4x+5y+1z=3\\ 1x+2y+4z=15\\ \end{array} \right.\end{equation}$ 1234% A*X=BA = [4 5 1; 1 2 4];B = [3 15]';X= A\B % 得无数解中的一种 超定方程组无解。 $\begin{equation} \left\{ \begin{array}{r1} 4x+5y = 3\\ 1x+2y = 15\\ 3x+1y = 12\\ \end{array} \right.\end{equation}$ 1234% A*X=BA = [4 5; 1 2; 3 1];B = [3 15 12]';X= A\B % 本来是无解的，按最小二乘法得到最接近的解 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Matlab</tag>
        <tag>数学建模</tag>
        <tag>线性方程组求解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线性和非线性拟合]]></title>
    <url>%2F2019%2F03%2F25%2F%E7%BA%BF%E6%80%A7%E5%92%8C%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%8B%9F%E5%90%88%2F</url>
    <content type="text"><![CDATA[线性拟合一阶拟合：$y=a_1x+a_2$，这就是线性拟合了。 二阶拟合：$y=a_1x^2+a_2x+a_3​$，这就不是线性拟合了。 polyfita=polyfit(x,y,n) 最小二乘法计算拟合多项式系数 x,y为拟合数据向量 n为拟合多项式次数 通过a保存多项式系数，从最高次向最低次排列 polyvaly=polyval(a,x) 计算多项式的函数值 返回在x处多项式的值 a为多项式系数，元素按多项式降幂排序 代码12345678% 求拟合多项式系数，即ax = [1.0 1.5 2.0 2.5 3.0]';y = [0.9 1.7 2.2 2.6 3.0]';a = polyfit(x,y,1) % 1指一阶拟合，也就是指多项式次数% 求拟合结果xi = 1 : 0.1 : 3;yi = polyval(a, xi); % 求多项式的函数值plot(x,y,'o',xi,yi); % 作图对比原数据和拟合结果 结果 图中点是原始数据，线是拟合结果，线有点点弯。 指定形式拟合fittype定义拟合形式 fit根据数据向量，按照某种拟合形式拟合。 代码12345x = [1.0 1.5 2.0 2.5 3.0]';y = [0.9 1.7 2.2 2.6 3.0]';p = fittype('a*x+b*sin(x)+c'); % 定义拟合形式f = fit(x,y,p) % 向量x,y按照p的形式拟合plot(f,x,y); % 作图对比拟合结果 结果 图中代码没有定义x,y也可以运行，是因为工作区中已经有这两个变量了。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Matlab</tag>
        <tag>数学建模</tag>
        <tag>拟合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Matlab作图]]></title>
    <url>%2F2019%2F03%2F24%2FMatlab%E4%BD%9C%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[二维作图plot 简单控制语句 sin(x) &amp; cos(x)12345678910x = -2 * pi : 0.1 : 2*pi; % 切片y1 = sin(x);y2 = cos(x);plot(x, y1,'-b'); % - 实线 b 蓝色hold on % 保持当前画的图形不被覆盖掉plot(x, y2, '-r'); % - 实线 r 红色xlabel('x'); % x轴上加标签ylabel('y'); % y轴上加标签text(0, 0, '(0,0)'); % 在(0,0)加文本legend('sin x', 'cos x'); % 图例 two hearts12345678910t = 0 : pi/180 : 4*pi; % 切片x = 16*sin(t).^3; % x,y用参数为t的方程表示y = 13*cos(t) - 5*cos(2*t)... % 本行未结束 -2*cos(3*t) - cos(4*t);plot(x-3, y, '-r', x+3, y, '-b');xlabel('x'); % x轴上加标签ylabel('y'); % y轴上加标签axis([-20, 20, -20, 15]); % 坐标范围：x [-20,20] y [-20,15]title('Two Hearts'); % 标题legend('U', 'I'); % 图例 对数坐标loglog，双对数坐标。 semilogx，只有x是对数。 12345678x = 10*2.^[0:6];y = [100 150 225 340 ... 510 765 1150];loglog(x, y, '.-r'); % 点实线 红色xlim([0.5e1, 0.8e3]); % x坐标范围ylim([0.8e2, 1.4e3]); % y坐标范围xlabel('x'); ylabel('y'); 极坐标polar 123theta = 0 : pi/180 : 4*pi; % 角度r = 1- sin(theta); % 长度polar(theta, r, '-r'); % 实线 红色 三维作图plot312345678910t = 0 : pi/50 : 10*pi; % 2pi是一圈 10pi转5圈 x = sin(t);y = cos(t);z = t;plot3(x, y, z); % 3维title('Helix');xlabel('sin t');ylabel('cos t');zlabel('t');grid on % 打开网格 三维曲面meshgrid，生成绘制3D图形所需的网格数据。 [x, y]=meshgrid(1:3, 1:3) mesh，surf 12345678[x, y] = meshgrid(-pi:0.1:pi); % 生成数据z = sin(x) .* cos(y);mesh(x, y, z); % 作图surf(x, y, z); % 使有颜色xlabel('x'); ylabel('y');zlabel('z');title('sin x sin y'); 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Matlab</tag>
        <tag>可视化</tag>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Matlab基础]]></title>
    <url>%2F2019%2F03%2F24%2FMatlab%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[基本命令和语句clear clear y 删除y变量 clear 删除所有变量 clc清空屏幕输出 文件命名规则matlab文件命名规则和C语言变量命名规则类似。 help帮助文档，help functionname。 lookfor寻找含关键字的函数，lookfor keyword。 向量一行中的元素可以用逗号或者空格隔开。 分号表示一行向量的结束。 切片起点：步长：终点，步长可以省略，默认为1 转置A&#39; linespace类似切片，均匀生成几个数字，得到行向量。 常用矩阵zeros零矩阵，参数是行数和列数或者方阵行数。 ones1矩阵，参数同zeros。 eye单位矩阵 固定变量piπ i或者j虚数，$\sqrt{-1}$。 Inf无穷大 NaN不是一个数字，not a number。 矩阵运算矩阵指2维向量，向量指1维向量。 矩阵加法同型矩阵同位置元素相加。 若矩阵+向量，每行/列都会加该向量。 矩阵减法类似于矩阵加法。 矩阵乘法/除法点乘点除A.*B，对应位相乘。 次方A^2 点次方A.^2，每一位都次方。 矩阵取值双索引A(1,3)`，第一行第三列元素。 单索引matlab是竖着数的。 若A是三行三列的矩阵，则A(1,2)==A(4)。 取行/列向量A(2,:)，取A的第二行所有列，即第二行。 比较和逻辑运算同位置元素进行比较，&gt;、&lt;、&amp;、|、==、异或xor(x&gt;5,y&lt;7)。比如A==B。 x(x&lt;0)=0，将x中小于0的赋值为0 y(y(:,1)&lt;0,:)=0，如果某行第一列小于0，整行赋值为0 矩阵操作函数设A是矩阵，B是行向量，C是列向量。 flipud上下旋转 fliplr左右旋转 rot90沿副对角线旋转，与转置不同。 sum求和。 sum(B) 求该行的和 sum(A) 每列求和，得到一个行向量 sum(A，1) 等价于sum(A)，1代表维度，列是第一个维度。 sum(A，2) 每行求和，得到一个列向量。 sum(A(:)) 整个矩阵求和。A(:)将矩阵A拉成一个列向量。 max max(B) 求一行的最大值。 max(B,2) 每个元素与2比较，得最大值；若小于2，则结果为2；若大于2，则结果为该元素。 max(A) 与sum类似，每列求最大值，等价于max(A,[],1)。 max(A,[],2) 每行求最大值。 常用数学函数ceil向上取整 fix靠近0取整 floor向下取整 round四舍五入取整 modmod(i,2)，取i/2的余数。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>Matlab</tag>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C/C++小课之引用]]></title>
    <url>%2F2019%2F03%2F24%2FC-C-%E5%B0%8F%E8%AF%BE%E4%B9%8B%E5%BC%95%E7%94%A8%2F</url>
    <content type="text"><![CDATA[关于引用，讲一个同学问的题目。 代码123456789101112131415161718192021222324252627#include &lt;iostream&gt;using std::endl; //域限定符using std::cout; //域限定符int &amp;f(int&amp; a, int b = 20)//定义函数，为了规范，应该在main前边写函数声明，main后定义函数&#123; //a是main函数中j的引用 a = a * b; //j = j * b return a;&#125;int main()&#123; int j = 10; int &amp;m = f(j); //函数f返回引用a，即j的引用，所以m是j的引用 int *p = &amp;m; //p指向j cout &lt;&lt; j &lt;&lt; endl; //200 m = 20; //m是j的引用，j = 20 cout &lt;&lt; j &lt;&lt; endl; //20 f(j, 5); cout &lt;&lt; j &lt;&lt; endl; //100 *p = 300; cout &lt;&lt; j &lt;&lt; endl; //300&#125; 知识点引用引用分为左值引用和右值引用。 左值引用是某个变量的别名，作用类似于指针，提高效率。 右值引用是绑定到右值上的引用，只能绑定到即将销毁的对象上。 域限定符命名空间是为了解决全局命名空间污染问题。 通过限定符可以使用对应命名空间内的对象（变量、函数、类型、类等）。 函数默认参数默认参数又叫做缺省参数。如何理解？ 默认 小明：小红，你在干嘛? 小明：小红，你刚才在干嘛？ 缺省 可以缺少、省略。 所有默认参数都必须出现在无默认参数的最右边。 也就是说实参从左向右给形参赋值，默认参数从右向左给形参赋值。 函数位置函数应该写在代码的哪里？ 如果使用C语言，比较好的方式是将函数声明和函数定义分开放，即在main函数前声明函数，在main函数后定义函数。 如果使用C++，最好面向对象，使用头文件和源文件。 栈相关名词谈到这个，相关的名词有两个： 堆 new出来的内存空间是在堆中的 （堆）栈 如果在main函数中定义一个int变量，这个变量就存储在栈里。 在学数据结构时，会学到栈和堆，它们是两种数据结构。 栈和函数栈有一个应用就是处理函数的嵌套，比较典型的函数嵌套就是递归。 比如上边代码中的main运行到f函数时，先要保存现在main函数的状态（变量、代码执行到的位置等），将其压栈（PUSH）；然后再进入f函数，栈顶即为f函数的内容，f函数执行完后，出栈（POP）；然后继续执行main函数。 在调试时就可以看到函数调用栈。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>引用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C/C++小课之课程介绍]]></title>
    <url>%2F2019%2F03%2F24%2FC-C-%E5%B0%8F%E8%AF%BE%E4%B9%8B%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[应要求，周六晚上开了一个课，教C/C++，之后会把课件都放在博客里。 课程简介 关于我 班级，性别，年龄。 第一次教课，希望大家及时对课堂给予一定建议与反馈。 上课时间 周六晚上六点半，时长根据上课内容的多少和难度确定。 需求 大家的需求是什么？C/C++?（我需要讲得广一点吗？） 具体希望了解哪个方面呢？ 这可能跟你的年级、所上课程有关，也有可能你们也不知道。 课程定位 该课程主要起辅助作用 学习的主要战场应在个人课下的学习和学院老师的课堂上，这个课并不是冲刺课。 由于能力和精力有限，我不能保证谁上了这个课就一定可以考高分或者不挂科。 如果合作愉快，大家一定会有收获。 我的作用是帮助大家 毕竟大二了，与大部分大一的同学相比，写代码的经验和知识面会足一些，我会尽可能把我的知识、思路和方法讲给大家。 课程要求 课堂纪律 合乎公共礼仪即可，好好听课，该请假的要跟我请假。每次课要点名的。 希望大家能做到不懂就问。 每周作业：每人提一个问题给我 这个是为了更好地了解大家的学习上遇到的困难，大家给出问题后，我可以在课堂上有针对性地进行讲解。大家的问题可能会是课堂的主要内容。 课程目标 大家解决编程中遇到的问题的能力有一定提升，能够多思考为什么 更了解C/C++，扩展知识面 课堂之外给大家帮助 课余也可以 课程内容 C/C++课程重难点 面向正在上C++、C语言课程的同学，讲解一些重点。 大家的作业：提出的问题 可以是找到的题，可以是写作业遇到的问题，都可以。 这是使这门课最大程度地为大家服务的一个方式，可以提高这门课的效用。 我遇到的有意思的问题 大概想想有数组名，指针（包括指针赋值），面向对象，抽象，C++类的互相引用等等吧。 大家有什么问题吗？ 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C/C++小课之数组名]]></title>
    <url>%2F2019%2F03%2F24%2FC-C-%E5%B0%8F%E8%AF%BE%E4%B9%8B%E6%95%B0%E7%BB%84%E5%90%8D%2F</url>
    <content type="text"><![CDATA[我们今天讨论数组名是什么东西，理解它有助于我们进一步理解和使用指针。 因为它涉及到了内存地址。 问题数组名是什么？含义是什么？ 思路前提一个值+1之后的变化可以反映出它的意义/含义。 前提的证明其实不证自明，计算机中就是这样的。 生活中 一个苹果+1，结果是两个，增加了一个苹果。 一箱苹果+1，结果是两箱，个数是2*每箱苹果数，增加了一箱苹果。 计算机中 int型变量的地址+1，增加了一个int的大小。 double型变量的地址+1，增加了一个double的大小。 思路根据前提，通过将数组名或数组名相关的值+1来判断它的含义。 验证编程中要了解一个东西，大多时候我们可以通过输出它来了解它。 代码123456789101112131415#include &lt;iostream&gt;using namespace std;int main()&#123; //注释指出array代表什么 int array[5] = &#123; 1,2,3,4,5 &#125;; printf(" &amp;array[0] = %p\n", &amp;array[0]); //首元素 printf(" array = %p\n", array); //数组 printf(" array+1 = %p\n", array + 1); //数组 printf(" &amp;array[0]+1 = %p\n", &amp;array[0] + 1); //首元素 printf(" &amp;array = %p\n", &amp;array); //数组 printf(" &amp;array+1 = %p\n", &amp;array + 1); //数组 printf("sizeof(array) = %zd\n", sizeof(array));//数组&#125; 为什么用printf不是cout？用cout其实也行，printf可能更方便，而且我忘了cout怎么控制位数了。 结果1234567 &amp;array[0] = 0000002A433FF628 array = 0000002A433FF628 array+1 = 0000002A433FF62C &amp;array[0]+1 = 0000002A433FF62C &amp;array = 0000002A433FF628 &amp;array+1 = 0000002A433FF63Csizeof(array) = 20 结论数组名是什么，有什么含义数组名是一个常量（所以不能被赋值），是一个地址。（&amp;array中array并不是地址，因为地址是一个值，我们并不能取一个值的地址吧） 在不同情况下，有着不同的含义。 代表整个数组 碰到&amp;、sizeof时，数组名代表整个数组，作用像是一个变量。 代表数组首元素 数组名单独出现或碰到[]、*时，数组名代表数组第一个元素，是一个地址。（这个下次会讲） 知识点IDE、编译器、编辑器 编辑器 文本编辑器，比如notepad++，sublime。 编译器 处理我们写的代码。 C/C++的比如有：gcc，mingw。 计算机语言可以分为两种：编译语言和解释语言。 IDE Integrated Development Environment，集成开发环境。 集合了编辑器和编译器的功能，还有一些辅助开发的功能。 Visual Studio 解决方案 项目 调试 查看源码 比如看sizeof、iostream，Ctrl+左键 查看类图 右击(项目)-查看-查看类图 十六进制https://tool.lu/hexconvert/ 地址+1核心在于单位。==见下篇== sizeof占用的字节数。基本数据类型、结构体（会字节对齐）。 不同环境下（32位、64位等）某种类型的变量占用字节数可能是不同的 比如指针，32位下是4个字节，64位下是8个字节， 正好是对应计算机的字长。（后边有讲计算机字长是什么） %zd、size_t ==后边还有一篇== %p %x两者有细微差别。 重视warningVS的warning还是比较全的，其他IDE的waring不一定全。 如果写代码出了问题却找不到原因，有可能是warning给出的潜在问题没有处理。 写代码时遇到waring一定要处理，不然很容易出问题。 混合编程C和C++还是不一样的。特别是函数的使用，如果要动态申请一个类对象的内存，可别用malloc，它和new还是不一样的。 一些重要名词值生活、编程中出现的数字、字符串、字符等等，都是值。 比如1,2,3，我爱你等等。 变量变量算是对值的一个替代（或者说抽象）吧，提高复用性。 地址地址是个值。 计算机有存储空间。我们将其一个个地编号，也就是给了它一个地址。 指针指针是个变量。 跟普通变量其实没什么本质区别，只不过它被用来存储地址而已。 运算符优先级* [] &amp;的优先级？ 计算机字长字长：字的长度（位数）。 计算机中有字节这个单位。1个字节等于8位。 多个字节组成字。 我们平常说的电脑32位，64位指的就是字长。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python批量下载邮件附件]]></title>
    <url>%2F2019%2F03%2F23%2Fpython%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E9%82%AE%E4%BB%B6%E9%99%84%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[背景由于同学每周要通过邮箱收数学建模作业，100多人给她发附件，她要一个个地点着下载。 太麻烦了，所以想用程序实现下载附件的功能。 在网上查资料后，最终实现了稍为简单的下载附件功能，代码有些细节还不是很了解。 2019.4.16更新： 过几天我也要用邮箱收文件，有了这份代码刚好能用！这再次印证知识不会没用处的，不学才会觉得知识没用呢。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081import poplibimport emailimport timefrom email.parser import Parserfrom email.header import decode_headerdef decode_str(s):#字符编码转换 value, charset = decode_header(s)[0] if charset: value = value.decode(charset) return valuedef get_att(msg): attachment_files = [] for part in msg.walk(): file_name = part.get_filename() # 获取附件名称类型 contType = part.get_content_type() if file_name: h = email.header.Header(file_name) dh = email.header.decode_header(h) # 对附件名称进行解码 filename = dh[0][0] if dh[0][1]: filename = decode_str(str(filename, dh[0][1])) # 将附件名称可读化 print(filename) # filename = filename.encode("utf-8") data = part.get_payload(decode=True) # 下载附件 att_file = open('D:\\数模作业\\' + filename, 'wb') # 在指定目录下创建文件，注意二进制文件需要用wb模式打开 attachment_files.append(filename) att_file.write(data) # 保存附件 att_file.close() return attachment_fileswith open('D:\\config.txt', 'r') as f1: config = f1.readlines()for i in range(0, len(config)): config[i] = config[i].rstrip('\n')# print(config)# POP3服务器、用户名、密码host = config[0] # pop.163.comusername = config[1] # 用户名 password = config[2] # 密码# 连接到POP3服务器server = poplib.POP3(host)# 身份验证server.user(username)server.pass_(password)# stat()返回邮件数量和占用空间:# print('Messages: %s. Size: %s' % server.stat())# 可以查看返回的列表类似[b'1 82923', b'2 2184', ...]resp, mails, octets = server.list()# print(mails)# 倒序遍历邮件index = len(mails)for i in range(index, 0, -1): # lines存储了邮件的原始文本的每一行 resp, lines, octets = server.retr(i) # 邮件的原始文本: msg_content = b'\r\n'.join(lines).decode('utf-8') # 解析邮件: msg = Parser().parsestr(msg_content) # 获取附件 f_list = get_att(msg)print("文件已下载完成，10秒后关闭程序！")time.sleep(10) 打包使用pyinstaller，将该.py文件打包成.exe文件。 1pyinstaller -F xuer.py 这样她就不需要安装python，方便她使用。 为了保护她的密码隐私，程序通过她自己的文件获得她的用户名和密码，之后文件会自动下载到D盘中数学建模文件夹下。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>python</tag>
        <tag>下载邮件附件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PageRank]]></title>
    <url>%2F2019%2F02%2F18%2FPageRank%2F</url>
    <content type="text"><![CDATA[用Matlab实现一个PageRank算法。 介绍PageRank是一种对网页进行排名的算法，通过引用来判断网页的排名。 具体介绍自寻，可以看一下https://baike.baidu.com/item/google%20pagerank#2 题目图中有六个明星，他们之间的箭头表示关注，比如Kim和Ryan互相关注，图片中间的数字是最终计算出的他们的PageRank。 Matlab实现12345678910111213141516171819202122232425262728293031323334353637383940% Find PageRank of network by finding dominant evec%% _ _ _ _% | (1-d)/N | | l11, ..., l1n |% R = | ... | + d | ..., ..., ... | R % |_(1-d)/N_| |_ln1, ..., lnn_| %% R = c + d * L*D * R% R = (I - d * L*D )\c% clc; %清屏d = 0.85; % damping factorname = &#123;'bill', 'ellen', 'jimmy', 'kim', 'paula', 'ryan'&#125;; % celebrities'name[bil, ell, jim, kim, pau, rya] = deal(1,2,3,4,5,6); % celebrities'id，bil=1,ell=2...n = length(name); % number of celebrities,n=6L = zeros(n); % 明星关注关系矩阵,一行是一个人，元素值表示他是否关注他人;一列也是一个人，元素值表示是否被他人关注% if user j follows user i, then L(i,j) = 1L(bil, [rya, ell]) = 1; % bil关注rya ell，下五行同理L(ell, [jim, rya]) = 1; L(jim, [rya, pau, ell]) = 1;L(kim, [jim, rya, ell]) = 1;L(pau, [rya, ell])=1;L(rya, [bil, jim, kim, pau, ell]) = 1;% ot = out-degree, in = in-degreeot = sum(L,1); % 对每1列求和，得行向量，每一列是一个人，元素值为被关注次数in = sum(L,2); % 对每1行求和，得列向量，每一行是一个人，元素值为他关注了多少人k = find(ot~=0); % 找到ot中不等于0的元素的下标,在此都不为0，返回行向量[1,2,3,..,6]D = full(sparse(k,k,1./ot(k),n,n)); %对角矩阵，对角元素表示每个人对其他人的关注的分成% L*D 是 6*6矩阵，一行、一列都是一个人，一行表示得到每个人的关注的分成，列表示对其他人关注的分成c = (1-d)/n*ones(n,1); % 值为(1-d)/n 的 n行列向量I = eye(n); % n*n单位矩阵R = (I - d*L*D)\c % 注意是左除,得到6个人的PageRank 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论和交流!]]></content>
      <tags>
        <tag>算法</tag>
        <tag>Matlab</tag>
        <tag>数学建模</tag>
        <tag>PageRank</tag>
        <tag>线性方程组求解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多体问题]]></title>
    <url>%2F2019%2F02%2F16%2F%E5%A4%9A%E4%BD%93%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题及分析 Matlab代码给出了核心逻辑的注释，作图暂时还不太了解。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667function SunEarthMoon % M函数文件load planets; % 将planets.mat中的变量mass、position、velocity加载过来[sun, earth, moon] = deal(18, 3, 25); % sun、earth、moon分别是18、3、25行list = [sun, earth, moon]; % 1行3列矩阵G = 6.67e-11; % gravitational constantdt = 24*3600; % 作图的时间间隔为一天，每天有24*3600秒N = length(list); % N=3，三个天体mass = mass(list); % N行1列矩阵，N个天体的质量position = position(list,:); % N行3列矩阵，N个天体的坐标，坐标是1行3列的行向量，三个方向的分量velocity = velocity(list,:); % N行3列矩阵，N个天体的速度，速度是1行3列的行向量，三个方向的分量h = plotplanets(position); %作图函数for t = 1:365 % 图中总时间为一年，一年365天 plotplanets(position,h); % force = zeros(N,3); % N行3列零矩阵，一行表示某个天体在三个方向上的受力 for i = 1 : N % 遍历计算各天体间的万有引力。组合数C（3，2） Pi = position(i,:); % 某天体坐标 Mi = mass(i); % 某天体质量 for j = (i+1):N %the i+1 is to create diagonal Mj = mass(j); % 另一天体质量 Pj = position(j,:); % 另一天体坐标 dr = Pj - Pi; % 两天体的相对，1行3列矩阵 forceij = G*Mi*Mj./(norm(dr).^3).*dr; % 两天体之间的力，1行3列的向量 force(i,:) = force(i,:) + forceij; % 规定正方向，将力计算进矩阵 force(j,:) = force(j,:) - forceij; % 反作用力与作用力方向相反，将力计算进矩阵 % 上两行可替换为force([i,j],:) = force([i,j],:)+[forceij; -forceij]; end end velocity = velocity + force ./ repmat(mass,1,3)*dt; % v=v+a*dt a=F/m position = position + velocity*dt; % r=r+v*dtend % -------------------------------------------------------------------------function h = plotplanets(pos,h) % scale = 50;total_planets = size(pos,1);[sun, earth, moon] = deal(1, 2, 3);radius = [50, 30, 20];marker = &#123;'.r', 'b.','m.'&#125;;pos(moon,:) = pos(earth,:) + scale*(pos(moon,:)-pos(earth,:));if nargin==1 hold on; axis image axis( [-2 2 -2 2]*1e11 ); for i = 1:total_planets if any(i == [sun, earth, moon]) h(i) = plot(pos(i,1),pos(i,2),marker&#123;i&#125;,'markersize',radius(i)); plot(pos(i,1), pos(i,2), marker&#123;i&#125;, 'markersize',5); else h(i) = plot(pos(i,1), pos(i,2), 'k.', 'markersize', 20); plot(pos(i,1), pos(i,2), 'k.', 'markersize',5); end endelse for i = 1:total_planets set(h(i), 'Xdata', pos(i,1) , 'Ydata', pos(i,2) ) if any(i == [sun, earth, moon]) plot(pos(i,1), pos(i,2), marker&#123;i&#125;, 'markersize',5); else plot(pos(i,1), pos(i,2), 'k.', 'markersize',5); end end drawnowend 结果 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎讨论交流!]]></content>
      <tags>
        <tag>Matlab</tag>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[椅子能在不平的地面上放稳吗]]></title>
    <url>%2F2019%2F02%2F16%2F%E6%A4%85%E5%AD%90%E8%83%BD%E5%9C%A8%E4%B8%8D%E5%B9%B3%E7%9A%84%E5%9C%B0%E9%9D%A2%E4%B8%8A%E6%94%BE%E7%A8%B3%E5%90%97%2F</url>
    <content type="text"><![CDATA[问题把椅子放在不平的地面上，通常只有三只脚着地，放不稳，然而只需稍挪动几次，就可以使四只脚同时着地而放稳。这个看来似乎与数学无关的现象能用数学语言表述，并用数学工具来证实吗？让我们来试试看！ 再次读题把椅子 放在 不平的地面上，通常只有三只脚着地，放不稳，然而只需稍挪动几次，就可以使四只脚同时着地而放稳。这个看来似乎与数学无关的现象能用数学语言表述，并用数学工具来证实吗？让我们来试试看！ 对象分析 椅子$\Longrightarrow$四个椅脚$\Longrightarrow$与地面有四个接触点$\Longrightarrow​$正方形（本质应该是长方形） 不平的地面$\Longrightarrow​$光滑曲面（光滑是根据讨论范围确定的，不连续的很陡的地面不在讨论范围之内） 条件分析 通常只有三只脚着地，放不稳$\Longrightarrow$假设至少三只脚着地$\Longrightarrow$$F(\theta)*G(\theta)=0$ 稍挪动几次$\Longrightarrow$位置的变化$\Longrightarrow$角度$\theta$的变化 结论分析 能不能$\Longrightarrow​$存在问题，0和1 放稳$\Longrightarrow$四个脚到地面距离都为0$\Longrightarrow$两对 对角椅脚 离地面的高度之和$F(\theta)=G(\theta)=0$ 2019.3.27补充： 昨天上课学得，在某些问题中，结果为离散的0或1的问题可以转化为结果为连续值的问题。 比如目标是得到最大产值，问题是A、B、C哪里需要建厂，这涉及到原料的生产、加工、运输，成品的销售等等。 如果直接根据问题进行离散的计算，会有$2^3=8\,$种情况。 如果进行连续的计算，将某地是否建厂转化为某地的原料产量。如果产量是0，则表示该地不建厂；如果产量大于0，则表示该地建厂。 数学模型已知F($\theta​$)、G($\theta​$)是$\theta​$的连续函数，对任意$\theta​$，$F(\theta){\times}G(\theta)=0​$，且$G(0)=F(\frac{\pi}{2})=0​$，$F(0)=G(\frac{\pi}{2})&gt;0​$，证明存在$\theta_0​$，使$F(\theta_0)=G(\theta_0)=0​$。 方法总结好好读题，根据题中所给信息，找到研究对象、条件、结论等现实元素转化为一个个数学元素。 讨论关于旋转的变量除了$\theta$，转轴也可以算一个，另外还可以把正方形改为长方形进行讨论。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎交流讨论!]]></content>
      <tags>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React学习（十一）之兄弟组件间传值]]></title>
    <url>%2F2019%2F01%2F22%2FReact%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%B9%8B%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E5%80%BC%2F</url>
    <content type="text"><![CDATA[原理React传递数据是单向数据流，两个组件必须有关系才可以传值。 而兄弟组件间并无直接关系，所以需要借助父组件。 兄弟组件传值原理： 简单的逻辑是这样：子组件1传值给父组件，父组件再传给子组件2。 子组件1通过函数参数传值给父组件。 父组件利用子组件1传来的值改变自身state中的某个值。 由于父组件将自身state的那个值传给子组件2，而现在state发生改变 ，子组件2会重新渲染，实现子组件1传值到 这里用到了state和更新dom的知识，不知道的可以看看。前边的文章或百度。 代码实现现有三个组件，父组件App,子组件1Header，子组件2Home，Home比Header小2岁。 实现功能：改变Header的年龄，且同步更新Home的年龄。 App.js1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import React, &#123; Component &#125; from 'react'; //固定写法import Header from './components/Header';import Home from './components/Home';class App extends Component &#123; //ES6写法 constructor()&#123; super(); this.state=&#123; homeAge:10 &#125; &#125; onGreet(headerAge)&#123; //父组件定义回调函数 alert("App:Header is"+headerAge+"years old!"); this.setState(&#123; homeAge: headerAge-2 &#125;) &#125; render() &#123; const user=&#123; //定义一个对象，传给子组件Header name: "Anna", hobbies: ["Sports", "Reading"] &#125; return ( &lt;div&gt; &lt;div&gt; &lt;Header greet=&#123;this.onGreet.bind(this)&#125; name=&#123;"Max"&#125; age=&#123;12&#125; user=&#123;user&#125;&gt; &lt;p&gt;I am Header's children&lt;/p&gt; &lt;/Header&gt; &lt;/div&gt; &lt;div&gt; &lt;h1&gt;I am App&lt;/h1&gt; &lt;/div&gt; &lt;div&gt; &lt;Home homeAge=&#123;this.state.homeAge&#125;/&gt; &lt;/div&gt; &lt;/div&gt; ); &#125;&#125;export default App; Header.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869import React, &#123; Component &#125; from 'react'; //固定写法import PropTypes from 'prop-types';class Header extends Component &#123; //ES6写法 constructor(props)&#123; super(props); //执行父类构造方法 this.state=&#123; age:props.age &#125; //this.age=this.props.age; &#125; onMakeOrder()&#123; this.setState(&#123; age:this.state.age+3 &#125;) //this.age+=3; console.log(this); //显示当前Header类的对象 &#125; handleGreet()&#123; this.props.greet(this.state.age); &#125; render() &#123; //console.log(this.props); //显示父组件传来的参数 return ( &lt;div&gt; &lt;h1&gt;I am Header&lt;/h1&gt; &lt;div&gt; props'name is &#123;this.props.name&#125;,my age is &#123;this.state.age&#125; &lt;/div&gt; &#123;/*&lt;button onClick=&#123;() =&gt; this.onMakeOrder()&#125; className="btn btn-primary"&gt;make me older&lt;/button&gt;*/&#125; &lt;button onClick=&#123;this.onMakeOrder.bind(this)&#125; className="btn btn-primary"&gt; make me older &lt;/button&gt; &lt;br /&gt; &lt;button onClick=&#123;this.handleGreet.bind(this)&#125; className="btn btn-primary"&gt; 告诉App我几岁 &lt;/button&gt; &lt;div&gt; &lt;h4&gt;props'hobbies如下：&lt;/h4&gt; &lt;ul&gt; &#123;this.props.user.hobbies.map((hobby,i) =&gt; &lt;li key=&#123;i&#125;&gt;&#123;hobby&#125;&lt;/li&gt;)&#125; &lt;/ul&gt; &lt;/div&gt; &lt;div&gt;props's children如下：&#123;this.props.children&#125;&lt;/div&gt; &lt;/div&gt; ); &#125;&#125;Header.propTypes=&#123; name: PropTypes.string, age: PropTypes.number, user: PropTypes.object, greet: PropTypes.function, children: PropTypes.element.isRequired&#125;export default Header; Home.js123456789101112131415161718192021222324import React, &#123; Component &#125; from 'react'; //固定写法class Home extends Component &#123; //ES6写法 render() &#123; let content=""; let flag=false; if(flag)&#123; content="cbh"; &#125; else&#123; content="cxy"; &#125; return ( &lt;div&gt; &lt;h1&gt;I am Home&lt;/h1&gt; 动态数据：&#123;content&#125; &lt;h1&gt;I am &#123;this.props.homeAge&#125; year's old&lt;/h1&gt; &lt;/div&gt; ); &#125;&#125;export default Home; 具体过程两个子组件本来就是12岁和10岁，无法查看传值效果。 所以先点击makeolder按钮，可以看到Header年龄变为15。 再点击告诉App我几岁按钮。 子组件1Header通过一个回调函数将自己的年龄传给父组件App，父组件再用Header传来的年龄更新自己的state； 由于父组件App给子组件2Home传的参数是state中的一个值，所以子组件2变化的部分会重新渲染，实现子组件1传值给子组件2。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎转发和评论!]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阮一峰React入门教程学习笔记]]></title>
    <url>%2F2019%2F01%2F22%2F%E9%98%AE%E4%B8%80%E5%B3%B0React%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[虽然已经看视频学了一些React基础，看完阮一峰的教程还是对React有了更多的理解。 他的教程感觉还是很简洁明了的，误区、重点都有讲到。 以下为阮一峰React入门教程学习笔记，记录了一些学到的新的或重要的知识点。 文中标题与阮一峰教程中章节标题对应。 安装React 可以在浏览器运行，也可以在服务器运行。 HTML模板模板1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;script src="../build/react.js"&gt;&lt;/script&gt; //react核心库 &lt;script src="../build/react-dom.js"&gt;&lt;/script&gt; //提供dom相关功能 &lt;script src="../build/browser.min.js"&gt;&lt;/script&gt; //将JSX转为JS，很耗时间，应用上线时应将这一步放在服务器完成 &lt;/head&gt; &lt;body&gt; &lt;div id="example"&gt;&lt;/div&gt; &lt;script type="text/babel"&gt; // ** Our code goes here! ** &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 注意JSX语法为React独有，与JS并不兼容，因此使用JSX语法的时候要加上type=&quot;text/babel&quot;。 ReactDOM.render()12345ReactDOM.render( &lt;h1&gt;Hello, world!&lt;/h1&gt;, document.getElementById('example') //h1可看作一个组件，插入id为example的DOM结点。); ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点，即挂载组件。 JSX语法介绍可以看React官网。 JSX是JS的语法扩展，它为React提供了元素。 为何使用JSXReact认为页面的渲染逻辑和UI设计的逻辑是耦合的：事件如何处理，状态如何随时间变化，以及数据如何准备显示。 React通过包含标记和逻辑的组件实现 separation of concerns。 React不是必须使用JSX，但JSX使包含UI的JS代码更加容易处理，同时也可以暴露出更多有用的报错和警告信息。 基本语法遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析。 它允许HTML和JavaScript的混写。 JSX 允许直接在模板插入 JavaScript 变量，JSX中的大括号内可以放置任何有效的JavaScript表达式。 组件render所有组件类都必须有自己的 render 方法，用于输出组件。 组件名组件类的第一个字母必须大写，否则会报错。 一个顶层标签组件类只能包含一个顶层标签，否则也会报错。 传参组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 &lt;HelloMessage name=&quot;John&quot;&gt; ，就是 HelloMessage 组件加入一个 name 属性，值为 John。组件的属性可以在组件类的 this.props 对象上获取，比如 name 属性就可以通过 this.props.name 读取。 保留字问题添加组件属性，有一个地方需要注意，就是 class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。 this.props.childrenthis.props 对象的属性与组件的属性一一对应，但是有一个例外，就是 this.props.children 属性。它表示组件的所有子节点。 PropTypes组件类的PropTypes属性，用来验证组件实例的属性是否符合要求。 getDefaultProps 方法可以用来设置组件属性的默认值。 获取真实DOM结点组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。 有时需要从组件获取真实 DOM 的节点，这时就要用到 ref 属性。 this.refs.[refName] 属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。 this.stateReact 的一大创新，就是将组件看成是一个状态机。 每次修改this.setState以后，自动调用 this.render 方法，再次渲染组件。 表单要获取用户输入，需要定义一个 onChange 事件的回调函数，通过 event.target.value 读取用户输入的值。 组件的生命周期组件的三种状态组件的生命周期分成三个状态： Mounting：已插入真实 DOM Updating：正在被重新渲染 Unmounting：已移出真实 DOM 状态的处理函数will 函数在进入状态之前调用，did函数在进入状态之后调用，三种状态共计五种处理函数。 componentWillMount() componentDidMount() componentWillUpdate(object nextProps, object nextState) componentDidUpdate(object prevProps, object prevState) componentWillUnmount() 特殊状态的处理函数 componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用 shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用 React 组件样式是一个对象。 Ajax==还没学== 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎转发和评论!]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React学习（十）之子组件向父组件传值]]></title>
    <url>%2F2019%2F01%2F20%2FReact%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%8D%81%EF%BC%89%E4%B9%8B%E5%AD%90%E7%BB%84%E4%BB%B6%E5%90%91%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%2F</url>
    <content type="text"><![CDATA[子组件向父组件传值，一般要通过回调函数的参数。这也是 父组件定义一个回调函数，并将其传递给子组件，然后子组件调用该函数，并将值通过回调函数的参数传给父组件。 这说明了React数据传递的单向性，虽然实现了子组件传值给父组件，但本质还是父组件传给了子组件一个函数。 父组件定义回调函数App.js中定义回调函数： 123onGreet(age)&#123; //父组件定义回调函数 alert("Son is"+age+"years old!");&#125; 父组件传回调函数给子组件App.js中将定义的回调函数传给子组件： 1234&lt;Header greet=&#123;this.onGreet&#125; name=&#123;"Max"&#125; age=&#123;12&#125; user=&#123;user&#125;&gt; &lt;p&gt;I am header's children&lt;/p&gt; &lt;p&gt;I am header's children&lt;/p&gt;&lt;/Header&gt; 子组件调用回调函数子组件定义处理回函的函数Header.js中定义： 123handleGreet()&#123; this.props.greet(this.state.age);&#125; 子组件调用处理回函的函数Header.js中定义： 123&lt;button onClick=&#123;this.handleGreet.bind(this)&#125; className="btn btn-primary"&gt; Greet&lt;/button&gt; 效果展示 点击Greet按钮 点击Older按钮 点击Greet按钮 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎转发和评论!]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React学习（九）之React如何更新DOM]]></title>
    <url>%2F2019%2F01%2F19%2FReact%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B9%9D%EF%BC%89%E4%B9%8BReact%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0DOM%2F</url>
    <content type="text"><![CDATA[React只重新渲染HTML页面中改变的部分。 基本原理React有一个概念：虚拟DOM。 每次操作都会生成一个虚拟DOM，然后通过diff算法和上一次的虚拟DOM进行比较，通过比较可以找到需要重新渲染的组件，然后只重新渲染这些组件，其他不变。 验证使用chrome浏览器，检查元素，按下图操作 然后页面渲染的地方会被高亮（我这里是绿色）。 每次点击按钮，会发现your name is Max,your age is XX被高亮，而其他不变。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎转发和评论!]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React学习（八）之组件的state属性]]></title>
    <url>%2F2019%2F01%2F19%2FReact%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AB%EF%BC%89%E4%B9%8B%E7%BB%84%E4%BB%B6%E7%9A%84state%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[上次讲到state更新，DOM树才会更新，原理是React会监听组件的state。 现在来试一下。 Header代码变动修改Header.js,有如下三处变动,其中注释掉的代码是上一节的代码。 1234567constructor(props)&#123; super(props); //执行父类构造方法 this.state=&#123; age:props.age &#125; //this.age=this.props.age; &#125; 1234567onMakeOrder()&#123; this.setState(&#123; age:this.state.age+3 &#125;) //this.age+=3; console.log(this); //显示当前Header类的对象 &#125; 12&lt;div&gt;your name is &#123;this.props.name&#125;,your age is &#123;this.state.age&#125;&lt;/div&gt; //表达式中上次是this.props.age Header.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import React, &#123; Component &#125; from 'react'; //固定写法import PropTypes from 'prop-types';class Header extends Component &#123; //ES6写法 constructor(props)&#123; super(props); //执行父类构造方法 this.state=&#123; age:props.age &#125; //this.age=this.props.age; &#125; onMakeOrder()&#123; this.setState(&#123; age:this.state.age+3 &#125;) //this.age+=3; console.log(this); //显示当前Header类的对象 &#125; render() &#123; //console.log(this.props); //显示父组件传来的参数 return ( &lt;div&gt; &lt;h1&gt;Header&lt;/h1&gt; &lt;div&gt;your name is &#123;this.props.name&#125;,your age is &#123;this.state.age&#125;&lt;/div&gt; &#123;/*&lt;button onClick=&#123;() =&gt; this.onMakeOrder()&#125; className="btn btn-primary"&gt;make me older&lt;/button&gt;*/&#125; &lt;button onClick=&#123;this.onMakeOrder.bind(this)&#125; className="btn btn-primary"&gt;make me older &lt;/button&gt; &lt;div&gt; &lt;h4&gt;hobbies&lt;/h4&gt; &lt;ul&gt; &#123;this.props.user.hobbies.map((hobby,i) =&gt; &lt;li key=&#123;i&#125;&gt;&#123;hobby&#125;&lt;/li&gt;)&#125; &lt;/ul&gt; &lt;/div&gt; &lt;div&gt;&#123;this.props.children&#125;&lt;/div&gt; &lt;/div&gt; ); &#125;&#125;Header.propTypes=&#123; name: PropTypes.string, age: PropTypes.number, user: PropTypes.object, children: PropTypes.element.isRequired&#125;export default Header; 效果页面中的age会更改哟。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎转发和评论!]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React学习（七）之事件]]></title>
    <url>%2F2019%2F01%2F19%2FReact%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89%E4%B9%8B%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[之前组件的功能都是显示字样，现在来加个按钮试试处理事件。 这里用bootstrap写一个好看点的按钮，修改html文件是为了使用bootstrap，如果不使用则不需要修改index.html。 修改html文件百度找到bootstrap的cdn。 1&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous"&gt; 将其加入index.html的&lt;head&gt;&lt;/head&gt;里边。 处理事件添加按钮及其响应函数在组件Header中添加按钮，向Header.js中加入以下代码，二选一即可 1&lt;button onClick=&#123;this.onMakeOrder.bind(this)&#125; className="btn btn-primary"&gt;make me older&lt;/button&gt; 1&lt;button onClick=&#123;() =&gt; this.onMakeOrder()&#125; className="btn btn-primary"&gt;make me older&lt;/button&gt; Header.js代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import React, &#123; Component &#125; from 'react'; //固定写法import PropTypes from 'prop-types';class Header extends Component &#123; //ES6写法 constructor(props)&#123; super(props); //执行父类构造方法 this.age=this.props.age; &#125; onMakeOrder()&#123; this.age+=3; console.log(this); //显示当前Header类的对象 &#125; render() &#123; //console.log(this.props); //显示父组件传来的参数 return ( &lt;div&gt; &lt;h1&gt;Header&lt;/h1&gt; &lt;div&gt;your name is &#123;this.props.name&#125;,your age is &#123;this.props.age&#125;&lt;/div&gt; &#123;/* &lt;button onClick=&#123;() =&gt; this.onMakeOrder()&#125; className="btn btn- primary"&gt; make me older &lt;/button&gt; */&#125; &lt;button onClick=&#123;this.onMakeOrder.bind(this)&#125; className="btn btn-primary"&gt; make me older &lt;/button&gt; &lt;div&gt; &lt;h4&gt;hobbies&lt;/h4&gt; &lt;ul&gt; &#123;this.props.user.hobbies.map((hobby,i) =&gt; &lt;li key=&#123;i&#125;&gt;&#123;hobby&#125;&lt;/li&gt;)&#125; &lt;/ul&gt; &lt;/div&gt; &lt;div&gt;&#123;this.props.children&#125;&lt;/div&gt; &lt;/div&gt; ); &#125;&#125;Header.propTypes=&#123; name: PropTypes.string, age: PropTypes.number, user: PropTypes.object, children: PropTypes.element.isRequired&#125;export default Header; 效果 从图中可以看到age在不断变大，但网页上的age没有更新，这涉及到react的一个机制。 react并不是对象的属性改变的时候，DOM会改变。而是对象的state变化的时候，DOM树才会更新。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎转发和评论!]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React学习（六）之父组件向子组件传值]]></title>
    <url>%2F2019%2F01%2F19%2FReact%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89%E4%B9%8B%E7%88%B6%E7%BB%84%E4%BB%B6%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%2F</url>
    <content type="text"><![CDATA[组件间的关系继续参考之前的代码App.js。 父子关系App是父，Header和Home相对于App是子。 兄弟关系Header和Home是兄弟关系。 父向子传值父传值父组件向子组件传值是父组件在调用子组件时，进行传值，以下两种方法都可以，App向Header传值，下边的代码是写在App.js里的。 1&lt;Header name=&#123;"Max"&#125; age=&#123;"12"&#125; user=&#123;user&#125;/&gt; 123&lt;Header name=&#123;"Max"&#125; age=&#123;12&#125; user=&#123;user&#125;&gt; &lt;p&gt;I am child&lt;/p&gt;&lt;/Header&gt; 这里使用第二种方法。 子使用值子组件使用父组件传过来的值通过props使用，例如： 1&lt;div&gt;your name is &#123;this.props.name&#125;,your age is &#123;this.props.age&#125;&lt;/div&gt; App.js代码：注意第7行和16行 123456789101112131415161718192021222324252627282930import React, &#123; Component &#125; from 'react'; //固定写法import Header from './components/Header';import Home from './components/Home';class App extends Component &#123; //ES6写法 render() &#123; //注意这里 const user=&#123; name: "Anna", hobbies: ["Sports", "Reading"] &#125; return ( &lt;div&gt; &lt;div&gt; &lt;Header name=&#123;"Max"&#125; age=&#123;"12"&#125; user=&#123;user&#125;/&gt; //传值 age=&#123;12&#125;也可以 &lt;/div&gt; &lt;div&gt; &lt;h1&gt;I am App&lt;/h1&gt; &lt;/div&gt; &lt;div&gt; &lt;Home /&gt; &lt;/div&gt; &lt;/div&gt; ); &#125;&#125;export default App; Header.js代码：注意第6行和return的内容 this.props就是父组件传过来的值 1234567891011121314151617181920212223import React, &#123; Component &#125; from 'react'; //固定写法class Header extends Component &#123; //ES6写法 render() &#123; console.log(this.props); return ( &lt;div&gt; &lt;h1&gt;Header&lt;/h1&gt; &lt;div&gt;your name is &#123;this.props.name&#125;,your age is &#123;this.props.age&#125;&lt;/div&gt; &lt;div&gt; &lt;h4&gt;hobbies&lt;/h4&gt; &lt;ul&gt; &#123;this.props.user.hobbies.map((hobby,i) =&gt; &lt;li key=&#123;i&#125;&gt;&#123;hobby&#125;&lt;/li&gt;)&#125; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; ); &#125;&#125;export default Header; 参数类型检查JS是动态语言。 在这里我们对App传过来的值进行检查，理所当然要在Header中检查。 在Header.js中引入静态检查： 1import PropTypes from 'prop-types'; 现在开始检查，设置Header接收到的参数的类型： 123456Header.propTypes=&#123; name: PropTypes.string, age: PropTypes.number, user: PropTypes.object, children: PropTypes.element.isRequired&#125; 其中children是给Header传参时Header闭合标签里的东西。 最终Header.js代码是这样： 1234567891011121314151617181920212223242526272829import React, &#123; Component &#125; from 'react'; //固定写法import PropTypes from 'prop-types';class Header extends Component &#123; //ES6写法 render() &#123; console.log(this.props); return ( &lt;div&gt; &lt;h1&gt;Header&lt;/h1&gt; &lt;div&gt;your name is &#123;this.props.name&#125;,your age is &#123;this.props.age&#125;&lt;/div&gt; &lt;div&gt; &lt;h4&gt;hobbies&lt;/h4&gt; &lt;ul&gt; &#123;this.props.user.hobbies.map((hobby,i) =&gt; &lt;li key=&#123;i&#125;&gt;&#123;hobby&#125;&lt;/li&gt;)&#125; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; ); &#125;&#125;Header.propTypes=&#123; //注意p是小写 name: PropTypes.string, age: PropTypes.number, user: PropTypes.object, children: PropTypes.element.isRequired&#125;export default Header; 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎转发和评论!]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React学习（五）之输出动态数据]]></title>
    <url>%2F2019%2F01%2F18%2FReact%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89%E4%B9%8B%E8%BE%93%E5%87%BA%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[输出动态数据就是输出表达式。 表达式就是2+2，变量等等。 现在在Home.js中输出动态数据。 代码注意代码中的第19行 123456789101112131415161718192021222324import React, &#123; Component &#125; from 'react'; //固定写法export class Home extends Component &#123; //ES6写法 render() &#123; let content=""; let flag=false; if(flag)&#123; content="cbh"; &#125; else&#123; content="cxy"; &#125; return ( &lt;div&gt; &lt;h1&gt;Home&lt;/h1&gt; &#123;content&#125; &lt;/div&gt; ); &#125;&#125;export default Home; 效果 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎转发和评论!]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React学习（四）之多个组件]]></title>
    <url>%2F2019%2F01%2F18%2FReact%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E5%A4%9A%E4%B8%AA%E7%BB%84%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[新建组件在src目录下新建文件夹components，用来存放定义组件的JS代码。 在components文件夹中定义两个组件：Home.js和Header.js，代码几乎和App.js一样，只改变了类名和return的内容。 提示：由于某些原因，之后的代码中可能会有标签匹配出错的问题….. 文件目录结构注意Header.js、Home.js和App.js在目录中的位置。 Home.js显示Home字样。 12345678910111213import React, &#123; Component &#125; from 'react'; //固定写法export class Home extends Component &#123; //ES6写法 render() &#123; return ( &lt;div&gt; &lt;h1&gt;Home&lt;/h1&gt; &lt;/div&gt; ); &#125;&#125;export default Home; Header.js显示Header字样。 12345678910111213import React, &#123; Component &#125; from 'react'; //固定写法export class Header extends Component &#123; //ES6写法 render() &#123; return ( &lt;div&gt; &lt;h1&gt;Header&lt;/h1&gt; &lt;/div&gt; ); &#125;&#125;export default Header; 使用组件在App中使用定义的两个组件，先使用Header，接着显示I am App，接着再使用Home。 App.js 12345678910111213141516171819202122232425import React, &#123; Component &#125; from 'react'; //固定写法import Header from './components/Header';import Home from './components/Home';class App extends Component &#123; //ES6写法 render() &#123; return ( &lt;div&gt; &lt;div&gt; &lt;Header /&gt; //注意这里！ &lt;/div&gt; &lt;div&gt; &lt;h1&gt;I am App&lt;/h1&gt; //注意这里！ &lt;/div&gt; &lt;div&gt; &lt;Home /&gt; //注意这里！ &lt;/div&gt; &lt;/div&gt; ); &#125;&#125;export default App; 效果展示 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎转发和评论!]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React学习（三）之第一个组件]]></title>
    <url>%2F2019%2F01%2F18%2FReact%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[项目结构之前通过create-react-app创建了一个hello-react项目，不知道的可以看博客里之前的的React文章。 暂时只关注三个文件：src\index.js、src\App.js和public\index.html。 文件说明App.js作用App.js定义页面中的一个组件，也就是定义页面中要放的一个零件。 代码定义了一个显示React的logo的组件。 注意下我加的代码注释 12345678910111213141516171819202122232425262728import React, &#123; Component &#125; from 'react'; //固定写法import logo from './logo.svg'; //图片import './App.css'; //cssclass App extends Component &#123; //ES6写法 render() &#123; return ( &lt;div&gt; &lt;header className="App-header"&gt; &lt;img src=&#123;logo&#125; className="App-logo" alt="logo" /&gt; &lt;p&gt; Edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload. &lt;/p&gt; &lt;a className="App-link" href="https://reactjs.org" target="_blank" rel="noopener noreferrer" &gt; Learn React &lt;/a&gt; &lt;/header&gt; &lt;/div&gt; ); &#125;&#125;export default App; index.html作用index.html进行页面内容的布局，也就是哪里放什么标签。 index.html是显示的页面，用户通过检查元素是可以看到html代码的，所以放在public文件夹下吧。 代码主要看body部分，只放了一个div。 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="utf-8" /&gt; &lt;link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" /&gt; &lt;meta name="theme-color" content="#000000" /&gt; &lt;!-- manifest.json provides metadata used when your web app is added to the homescreen on Android. See https://developers.google.com/web/fundamentals/web-app-manifest/ --&gt; &lt;link rel="manifest" href="%PUBLIC_URL%/manifest.json" /&gt; &lt;!-- Notice the use of %PUBLIC_URL% in the tags above. It will be replaced with the URL of the `public` folder during the build. Only files inside the `public` folder can be referenced from the HTML. Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will work correctly both with client-side routing and a non-root public URL. Learn how to configure a non-root public URL by running `npm run build`. --&gt; &lt;title&gt;React App&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;noscript&gt;You need to enable JavaScript to run this app.&lt;/noscript&gt; &lt;div id="root"&gt;&lt;/div&gt; &lt;!-- This HTML file is a template. If you open it directly in the browser, you will see an empty page. You can add webfonts, meta tags, or analytics to this file. The build step will place the bundled scripts into the &lt;body&gt; tag. To begin the development, run `npm start` or `yarn start`. To create a production bundle, use `npm run build` or `yarn build`. --&gt; &lt;/body&gt; &lt;/html&gt; index.js作用index.js连接App.js和index.html，通过将组件放入各个标签中，起到连接上边两个文件的作用。 代码主要内容是第11行那里。 注意下我加的代码注释。 1234567891011121314151617//导入reactimport React from 'react';import ReactDOM from 'react-dom';//导入css，.代表当前目录，..代表上一级目录import './index.css';//导入组件，变成App，其实下一行的'./App'省略了.js后缀，本来应该是'./App.js'import App from './App';import * as serviceWorker from './serviceWorker';//设置挂载点，把组件App挂到root上ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));// If you want your app to work offline and load faster, you can change// unregister() to register() below. Note this comes with some pitfalls.// Learn more about service workers: http://bit.ly/CRA-PWAserviceWorker.unregister(); 自己的第一个组件也就是自己写一个组件嘛，组件是在App.js中定义的，所以修改App.js。 定义组件在这里将组件的默认内容删除，也就是render函数中return的东西，然后自己写。 12345678910111213141516171819import React, &#123; Component &#125; from 'react'; //固定写法import logo from './logo.svg'; //图片import './App.css'; //cssclass App extends Component &#123; //ES6写法 render() &#123; return ( &lt;div&gt; &lt;div&gt; &lt;div&gt; &lt;h1&gt;hello world&lt;/h1&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; ); &#125;&#125;export default App; 代码里div中用的是className是因为class是JS的保留字，所以要用className。 代码修改之后效果在此就不展示了，显示了一个hello world。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎转发和评论!]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React学习（二）之create-react-app]]></title>
    <url>%2F2019%2F01%2F18%2FReact%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8Bcreate-react-app%2F</url>
    <content type="text"><![CDATA[安装create-react-app环境配置首先要确保你的电脑上有Nodejs和npm 。 检查方法：打开cmd(也就是命令行、终端)，输入node -v和npm -v。 可分别查看Nodejs和npm的版本，有版本环境肯定就配好啦。似乎现在的Nodejs会带着npm。 开始安装打开cmd，输入npm install -g create-react-app -g表示全局，我们可以在任意地方使用npm。 创建react项目我们可以通过create-react-app指令创建一个react项目。 终端中进入项目创建位置创建的项目的位置取决于在cmd中操作的位置。 最近在用VSCode，在VSCode中可以直接右击工作空间的文件夹，再点击在终端中打开，即可在终端中操作该文件夹。 创建项目 启动项目接着上一步 运行效果 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎转发和评论!]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo不蒜子网站访问量统计失效]]></title>
    <url>%2F2019%2F01%2F17%2Fhexo%E4%B8%8D%E8%92%9C%E5%AD%90%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%A4%B1%E6%95%88%2F</url>
    <content type="text"><![CDATA[问题hexo博客的不蒜子网站访问量统计最近失效了。 解决原因不蒜子域名更改了，所以需要修改博客的配置文件。 方法进入博客目录下\themes\next\layout\_third-party\analytics，（我用的是next主题，如果用的是别的主题，就进入对应主题文件夹。） 打开文件busuanzi-counter.swig 将&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; 修改为&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; 不知道为什么空格显示的比较宽，但经验证，复制下来是一个正常的空格，可以复制下来使用。 其他不变。]]></content>
      <tags>
        <tag>Bug</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bash: hexo: command not found]]></title>
    <url>%2F2019%2F01%2F17%2Fbash-hexo-command-not-found%2F</url>
    <content type="text"><![CDATA[问题很久没写博客了，今天用hexo新建文章时git报错： bash: hexo: command not found 解决办法百度之后，将D:\WorkingSoftware\GithubBlog\node_modules\.bin添加进PATH，问题解决。 加的时候发现path里确实没有这个路径……..不知道为什么会没有 路径中的GithubBlog是我的博客文件夹，你用的时候改成你的路径，即XXX你的Blog目录XXX\node_modules\.bin 原因可能是因为我今天更新npm了？ 或者是因为我这两天改了计算机用户名(用户名在其他地方用到了，中文是宽字符，会出错)，造成了很多麻烦，差点edge都坏了。 所以告诫大家用户名尽量一开始就用英文，不要用中文。]]></content>
      <tags>
        <tag>Bug</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React学习（一）之Hello React]]></title>
    <url>%2F2019%2F01%2F17%2FReact%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BHello-React%2F</url>
    <content type="text"><![CDATA[代码以下是html代码，复制代码到html文件，可直接运行。 (请关注&lt;body&gt;&lt;/body&gt;里的JS代码和注释)： 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;helloReact&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt; &lt;script type="text/babel"&gt; ReactDOM.render( //代码块①开始 &lt;h1&gt;hello world!&lt;/h1&gt;, //代码块①结束，注意结束有个逗号 document.getElementById("app") //设置挂载点 //上一行代码(结尾没有分号)将代码块①放入上边的 &lt;div id="app"&gt;&lt;/div&gt;，F12检查元素可以看到效果。 ) &lt;/script&gt; //两个和react相关的脚本文件 &lt;script src="https://cdn.bootcss.com/react/16.7.0/umd/react.development.js"&gt;&lt;/script&gt; &lt;script src="https://cdn.bootcss.com/react-dom/16.7.0/umd/react-dom.development.js"&gt;&lt;/script&gt; //babel文件，作用是解码，详情请参考ES6 &lt;script src="https://cdn.bootcss.com/babel-standalone/7.0.0-beta.3/babel.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 运行效果 调试F12检查元素可以看到代码块①被添加进id为app的&lt;div&gt; 转码效果babel官网转码（进入官网后点击Try it out）。关于什么是babel，参看ES6（我还不会hh）。 左边是JSX语法，方便我们写代码。]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java.util.NoSuchElementException]]></title>
    <url>%2F2018%2F11%2F03%2Fjava.util.NoSuchElementException%2F</url>
    <content type="text"><![CDATA[问题引入Java商店作业不同函数里需要获取用户输入，用Scanner的时候,出现了异常java.util.NoSuchElementException 作业中代码模式如下，func1和func2中都使用Scanner并关闭它。然后在main中依次调用func1和func2，func2产生异常。说func1和func2其实不合适，应该加个括号……..懒得加了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748//Demo.javaimport java.util.Scanner;class Test&#123; void func1() &#123; Scanner sc=new Scanner(System.in); //输出用户输入，替代作业里的使用Scanner System.out.print("Func1请输入内容："); System.out.println("Func1输出"+sc.next()); //关闭Scanner sc.close(); &#125; void func2() &#123; Scanner sc=new Scanner(System.in); //输出用户输入，替代作业里的使用Scanner System.out.print("Func2请输入内容："); System.out.println("Func2输出"+sc.nextInt()); //关闭Scanner sc.close(); &#125;&#125;public class Demo&#123; public static void main(String[] args) &#123; Test t=new Test(); t.func1(); t.func2(); &#125;&#125;/*Console输出如下：Func1请输入内容：小姐，请问你喜欢吃青椒吗？Func1输出：小姐，请问你喜欢吃青椒吗？Func2请输入内容：Exception in thread "main" java.util.NoSuchElementException at java.base/java.util.Scanner.throwFor(Unknown Source) at java.base/java.util.Scanner.next(Unknown Source) at java.base/java.util.Scanner.nextInt(Unknown Source) at java.base/java.util.Scanner.nextInt(Unknown Source) at Test.func2(Demo.java:21) at Demo.main(Demo.java:31)*/ 异常产生原因func1中sc.close();语句关闭了Scanner，func2中使用Scanner产生异常 因为System.in是System类的静态成员，所以不同Scanner对象内的in是同一个in` func1和func2中都用System.in创建了Scanner func1打开Scanner后将其关闭，这里间接地将System.in也关闭了 func1结束后运行func2，这时再调用nextInt，在System.in已经关闭了的情况下，不能读取到任何数据，就会产生 java.util.NoSuchElementException 解决方法系统资源一旦释放就不能再开启了，所以只有确定不在使用系统的时候，才能将流关闭 所以应该在整个程序结束时释放Scanner等资源，而不是某个函数中每次使用Scanner等资源后都释放一次 问题引入中的代码只是个模式，上边的两句话用在作业实际代码里就好了 代码分析Scanner()创建Scanner对象代码为Scanner sc=new Scanner(System.in);构造函数源码如下 123public Scanner(InputStream source) &#123; this(new InputStreamReader(source), WHITESPACE_PATTERN);&#125; 可看出是调用了另外一个构造函数，继续查看源码 123456789101112private Scanner(Readable source, Pattern pattern) &#123; assert source != null : "source should not be null"; assert pattern != null : "pattern should not be null"; this.source = source; //看这句 delimPattern = pattern; buf = CharBuffer.allocate(BUFFER_SIZE); buf.limit(0); matcher = delimPattern.matcher(buf); matcher.useTransparentBounds(true); matcher.useAnchoringBounds(false); useLocale(Locale.getDefault(Locale.Category.FORMAT)); &#125; 至少知道了Scanner内部还是用到了流，算是对流进行了封装吧，使用起来更方便一些 close()调用语句为sc.close();，查看close()源码，如下 1234567891011121314public void close() &#123; if (closed) //1.通过closed标志校验Scanner是否已关闭； return; if (source instanceof Closeable) &#123; //2.执行source的close()方法， try &#123; //将source关闭（这里为System.in）； ((Closeable)source).close(); &#125; catch (IOException ioe) &#123; lastException = ioe; &#125; &#125; sourceClosed = true; //3.将sourceClosed标志设置为true，表示source已关闭； source = null; //4.将source置为null，不再引用，处于可回收状态； closed = true; //5.将closed标志设置为true，表示Scanner已关闭；&#125; 可以知道关闭Scanner的时候，((Closeable)source).close();把System.in关闭了 关闭后下次想再使用就当然有错了~（除非构造函数里还再把in给打开，但这样也不太合理） 其实如果还可以再仔细看看Scanner的构造方法，和Scanner的next()，能力有限，点到为止 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io/2018/11/03/java.util.NoSuchElementException/#more 欢迎转发和评论]]></content>
      <tags>
        <tag>Bug</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java字节流read函数]]></title>
    <url>%2F2018%2F09%2F22%2FJava%E5%AD%97%E8%8A%82%E6%B5%81read%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[问题引入做Java作业从标准输入流获取用户输入，用到了System.in.read(),然后出现了bug。 1234567891011121314151617181920212223//随机生成一个小写字母，用户猜5次，读取用户输入，并判断是否猜对import java.io.IOException;public class LetterGuessing &#123; public static void main(String[] args) throws IOException &#123; char ch,answer; //随机生成字母 answer=(char)(Math.random()*26+'a'); System.out.print("请输入一个小写字母："); for(int i=1;i&lt;=5;i++) &#123; //获取用户输入，可能抛出异常 ch=(char)System.in.read(); //比较大小 if(ch == answer)&#123; System.out.println("恭喜，正确！用了"+i+"次猜对"); break; &#125; else if(ch &gt; answer) System.out.println("您猜大了，还有"+ (5-i) +"次机会"); else System.out.println("您猜小了，还有"+ (5-i) +"次机会"); &#125; &#125;&#125; 输入字符&#39;a&#39;，按下Enter,却没有等我下次输入，循环就运行了三次。 问题来源System.in.read()按字节读，一次读入一个字节。后边有详细讲解。 经调试，可知三次循环中ch分别为a,\r,\n。 为什么a+Enter,会变成a\r\n呢 Windows下存在两种文件读写方式，一个是二进制方式，另一种是文本方式。 文本方式中写时”换行”会变成”回车-换行”，即\r\n；读时”回车-换行”会变成”换行”。 二进制方式中读写是严格按照一个字节一个字节的方式进行的。 在这里虽然没有用到文件，但道理应该是一样的 用read()函数是按照一个字节一个字节读取的，即二进制方式。 可能可以推导出，我们向输入流中输入数据默认是按照文本方式。 解决方法方法一在代码第10行后，加两行System.in.read(); 目的是读取掉输入流中的/r和/n。 这种方法的局限性就是输入字母前后不能加空格，因为它不会使空格从输入流中删除。 方法二不用read()读取，用以下代码代替 123import java.util.Scanner;Scanner input=new Scanner(System.in);ch=input.next().charAt(0); 这种方法就比较好，读取字符串（忽略空格和换行，空格和换行不会留在输入流里），然后取字符串的第一个字符。 知识点System.in官方文档：https://docs.oracle.com/javase/10/docs/api/java/lang/System.html#in System是个类，in是System的一个成员，官方介绍如下： 1public static final InputStream in The “standard” input stream. This stream is already open and ready to supply input data. Typically this stream corresponds to keyboard input or another input source specified by the host environment or user. in是一个InputStream类型的对象,所以只需要了解InputStream即可。 InputStream官方文档： https://docs.oracle.com/javase/10/docs/api/java/io/InputStream.html 123public abstract class InputStream //抽象类extends Object //继承Object类implements Closeable //实现Closeable接口 官方介绍如下： This abstract class is the superclass of all classes representing an input stream of bytes. 翻译为：这个抽象类是所有字节流类的父类。 字节流的含义：读取方式为一个字节一个字节地读取,而字符流是二个字节二个字节的读。 Applications that need to define a subclass of InputStream must always provide a method that returns the next byte of input. 翻译为：需要定义一个InputStream子类的应用必须提供一个返回输入下一字节的方法（函数）。 read()官方文档：https://docs.oracle.com/javase/10/docs/api/java/io/InputStream.html#read() 12public abstract int read() throws IOException Reads the next byte of data from the input stream. The value byte is returned as an int in the range 0 to255. 这个是重点，它返回下一字节的ASCII码 If no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. A subclass must provide an implementation of this method. Returns: the next byte of data, or -1 if the end of the stream is reached. Throws: IOException - if an I/O error occurs. 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io/2018/09/22/Java字节流read函数/#more 欢迎转发和评论]]></content>
      <tags>
        <tag>Bug</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++获取文件夹下所有文件的路径]]></title>
    <url>%2F2018%2F09%2F09%2F%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E7%9A%84%E8%B7%AF%E5%BE%84%2F</url>
    <content type="text"><![CDATA[代码getFiles()函数的作用： path是一个文件夹路径，函数在path文件夹下寻找所有文件（包括子文件夹下的文件），然后将所有文件的路径存入files 12345678910111213141516171819202122232425#include &lt;io.h&gt; //实现功能需要包含头文件io.hvoid getFiles(string path, vector&lt;string&gt;&amp; files)&#123; intptr_t hFile = 0;//文件句柄，过会儿用来查找 struct _finddata_t fileinfo;//文件信息 string p; if ((hFile = _findfirst(p.assign(path).append("\\*").c_str(), &amp;fileinfo)) != -1) //如果查找到第一个文件 &#123; do &#123; if ((fileinfo.attrib &amp; _A_SUBDIR))//如果是文件夹 &#123; if (strcmp(fileinfo.name, ".") != 0 &amp;&amp; strcmp(fileinfo.name, "..") != 0) getFiles(p.assign(path).append("\\").append(fileinfo.name), files); &#125; else//如果是文件 &#123; files.push_back(p.assign(path).append("\\").append(fileinfo.name)); &#125; &#125; while (_findnext(hFile, &amp;fileinfo) == 0); //能寻找到其他文件 _findclose(hFile); //结束查找，关闭句柄 &#125;&#125; 代码解读_finddata_t它是存储一个文件相关信息的结构体,查看其定义： 1234567#ifdef _USE_32BIT_TIME_T #define _finddata_t _finddata32_t #define _finddatai64_t _finddata32i64_t#else #define _finddata_t _finddata64i32_t #define _finddatai64_t __finddata64_t#endif 我这里是_finddata64i32_t，查看其定义 123456789struct _finddata64i32_t&#123; unsigned attrib; __time64_t time_create; // -1 for FAT file systems __time64_t time_access; // -1 for FAT file systems __time64_t time_write; _fsize_t size; char name[260];&#125;; attrib是该结构体的一个成员，是attribute（属性）的缩写。 它代表文件的属性，下边是相应的宏 123456#define _A_NORMAL 0x00 // Normal file - No read/write restrictions#define _A_RDONLY 0x01 // Read only file#define _A_HIDDEN 0x02 // Hidden file#define _A_SYSTEM 0x04 // System file#define _A_SUBDIR 0x10 // Subdirectory#define _A_ARCH 0x20 // Archive file 成员name就是文件名字嘛… _findfirst第一个参数是标明文件的字符串，可支持通配符：*.c代表后缀为.c的文件，*就代表所有文件 第二个参数是_finddata_t类型变量的地址。该变量用来保存文件信息。 这有坑 我跟网上有点不同的是，网上我看到的例子定义的hFile都是long型，我用long型打开文件就出问题了。 其实VS已经警告了warning C4244: “=”: 从“intptr_t”转换到“long”，可能丢失数据。 我没在意它，后来改掉了类型就成功了。（就冲这一点，VS天下第一！） 查看_findfirst定义 1234567891011#ifdef _USE_32BIT_TIME_T #define _findfirst _findfirst32 #define _findnext _findnext32 #define _findfirsti64 _findfirst32i64 #define _findnexti64 _findnext32i64#else #define _findfirst _findfirst64i32 #define _findnext _findnext64i32 #define _findfirsti64 _findfirst64 #define _findnexti64 _findnext64#endif 我这里用的是_findfirst64i32，查看其定义 1234_ACRTIMP intptr_t __cdecl _findfirst64i32( _In_z_ char const* _FileName, _Out_ struct _finddata64i32_t* _FindData ); 说明函数返回intptr_t 继续查看intptr_t定义，得到 12345678#ifdef _WIN64 typedef unsigned __int64 size_t; typedef __int64 ptrdiff_t; typedef __int64 intptr_t;#else typedef unsigned int size_t; typedef int ptrdiff_t; typedef int intptr_t; 所以intptr_t在我电脑上实际是__int64，转换成long可能会丢失数据。 _findnext查看其定义 1234567891011#ifdef _USE_32BIT_TIME_T #define _findfirst _findfirst32 #define _findnext _findnext32 #define _findfirsti64 _findfirst32i64 #define _findnexti64 _findnext32i64#else #define _findfirst _findfirst64i32 #define _findnext _findnext64i32 #define _findfirsti64 _findfirst64 #define _findnexti64 _findnext64#endif 我这里是_findnext64i32，查看其定义 1234_ACRTIMP int __cdecl _findnext64i32( _In_ intptr_t _FindHandle, _Out_ struct _finddata64i32_t* _FindData ); 没啥讲的，好好看看_findfirst部分就懂这个了。 位运算fileinfo.attrib &amp; _A_SUBDIR，代码中用到了按位与&amp;。在此表示是文件夹（subdirectory）。位运算经常用在表示属性。具体的这次先不讲。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io 欢迎转发和评论!]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>文件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[指针间的互相赋值]]></title>
    <url>%2F2018%2F09%2F01%2F%E6%8C%87%E9%92%88%E9%97%B4%E7%9A%84%E4%BA%92%E7%9B%B8%E8%B5%8B%E5%80%BC%2F</url>
    <content type="text"><![CDATA[本篇文章分为三个大的部分 大标题1提出权限”概念”，大标题2验证赋值规则 大标题3、4、5是我的个人理解。 大标题6是最直接的结论。 提醒 看懂这篇文章可能需要你知道并理解四种指针的定义，这是基础。当然如果真的不懂，可以直接去文尾记住结论。 四种指针详解戳这https://chouxianyu.github.io/2018/08/26/常量指针与指针常量/#more 指针修改指向内容的权限普通指针=指针常量&gt;常量指针=四号指针 这个权限指的是通过该指针是否可以修改内存，情况只有两种：是和否。是的话就有权限，否的话就没有权限，这个大小是0和1，false和true，是有和没有，不是12345678的大和小。 普通指针很好说，四号指针也是个常量指针嘛，当然不可以修改内存 这个权限大小关系不难理解，前提是你有理解常指和指常这两个名词吧。 前边的普指和指常都可以修改内存中的内容，而常指和四号则不可以。 指针赋值规则指针间的赋值：权限大的可以赋值给权限小的（权限指操作内存即修改内存中的内容的权限） 权限大的可以赋值给权限小的，同级权限也可以，小赋值给大不行。 123456789101112131415161718192021222324252627282930313233const int n = 0; //常量nint m = 0; //变量mint* p1; //普通指针const int* p2; //常量指针 与int const* p2相同//int* const p3=nullptr; //指针常量//int const * const p4; //四号指针 既是常指又是指常，即自身不可修改，也不可通过它修改指向的内存p1 = p2; //error 普指=常指p1 = p3; //correct 普指=指常p1 = p4; //error 普指=四号p1 = &amp;n; //error 普指=常指p1 = &amp;m; //correct 普指=普指p2 = p1; //correct 常指=普指p2 = p3; //correct 常指=指常p2 = p4; //correct 常指=四号p2 = &amp;n; //correct 常指=常指p2 = &amp;m; //correct 常指=普指//p3是指常，是常量 赋值当然不行了，更别说权限了，所以上边不定义p3，//要讨论的是权限，在此定义并初始化以作示例，但定义只能有一个的啊，我在这提醒过了啊int* const p3 = p1; //correct 指常=普指int* const p3 = p2; //error 指常=常指int* const p3 = p4; //error 指常=四号int* const p3 = &amp;n; //error 指常=常指int* const p3 = &amp;m; //correct 指常=普指//p4是四号，是常量，同p3，不赘述int const * const p4 = p1; //correct 四号=普指int const * const p4 = p2; //correct 四号=常指int const * const p4 = p3; //correct 四号=指常int const * const p4 = &amp;n; //correct 四号=常指int const * const p4 = &amp;m; //correct 四号=普指 这个规则是我自己想出来的，可能书上云里雾里的背后就是这么个规律。我之前好像说过存在即合理..实际表述不太对，应该是存在就有原因。上边的代码应该囊括了所有“品种”指针的互相赋值，验证也都符合预期。如有错误，欢迎指出。 赋值规则的过程赋值得要满足被赋值方的要求，就像你想娶我（捂脸），我就需要你一米八，宠我，其他的都不需要，有的话我也一点不碰。但只要你这两点缺一点，我就不要，你是马云爸爸也不行！ 赋值就是那么个意思，我是指常或者普指，我要求有权限修改内存，所以就只有指常和普指能娶我，能给我赋值，因为常指和四号没有那个权限啊！反过来的话，我是常指和四号，我什么都不要，所以谁赋值都行，上面我们也能看到给常指和四号赋值的时候全都correct了。 赋值规则的必要性赋值规则前提是不同指针的权限不同我想多种指针是为了程序更好吧，不然只有一种指针能实现所有的功能，岂不是很可怕。给了程序员太大的权利，程序员一跑神犯错，程序就极有可能崩溃。给予指针权限之差就像c++里override吧，也是一种对程序员的友好？这是一方面,这应该能说明赋予指针不同权限的必要。 然后才有了赋值规则我们举个例子，如果没有这个规则，不同类型指针自由互相赋值：你定义一个常量n，然后再定义一个int* p，就是普指，普指按说是有修改内存的权利的，然后p=&amp;n，拿到n的地址，是不是就可以通过p改变n了？（在存在不同权限指针的前提下）。如果没有这个规则，我们可以很随意地改变常量了。干嘛自己造了一座木屋，然后又给它浇上油？ 斗胆扯内存不管是指针常量还是常量指针还有普通指针，它们本身和那块内存都是没有本质关系的。 它们（也包括普通类型的指针）只是一个带着镣铐或者没有镣铐的工具，我们可以通过const控制指针的权限以及它本身，同时我们在使用它们时也不能超出它们的权限范围和它们的个人承受力。 结论1234int* p1; //普通指针const int* p2; //常量指针 与int const* p2相同int* const p3=nullptr; //指针常量int const * const p4; //四号指针 既是常指又是指常 p1和p3可以互相赋值； p2和p4可以互相赋值； p1和p3可以给p2和p4赋值，反之不行； p3和p4在程序中只能在定义时被赋值一次，因为它们是const类型的量。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io/2018/09/01/指针间的互相赋值/#more 欢迎转发和评论]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>指针</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[物不知其数]]></title>
    <url>%2F2018%2F09%2F01%2F%E7%89%A9%E4%B8%8D%E7%9F%A5%E5%85%B6%E6%95%B0%2F</url>
    <content type="text"><![CDATA[文章分为三个大的部分： 大标题1是物不知其数问题的引入，大标题2将问题抽象。 大标题3、4、5是物不知其数问题的三种解法及其代码实现。 大标题6是提出的一些问题及不太完善的解释。 提醒： 看文章最好先掌握文章整体结构，电脑会比较方便，可以点击标题跳到自己想看的部分。 看代码发现看不到后边的注释的话，调整网页显示比例（Ctrl+鼠标滚轮） 另外代码里的注释也是有规律的，单独一行的注释是解释下边的几行的功能的，写在代码右边的注释解释这一行代码功能。 问题引入秦王暗点兵和韩信乱点兵都是后人对物不知其数问题的一种故事化，有兴趣可以搜索一下。 物不知其数问题出自《孙子算经》。 原题为：”今有物不知其数，三三数之二，五五数之三，七七数之二，问物几何？” 这道题的意思是：有一批物品，不知道有几件。如果三件三件地数，就会剩下两件；如果五件五件地数，就会剩下三件；如果七件七件地数，也会剩下两件。 问：这批物品共有多少件？ 变成一个纯粹的数学问题就是：有一个数，用3除余2，用5除余3，用7除余2。求这个数。 拿到这个问题，我们可以发现用3和7除余数都是2，自然而然想到3*7=21,21+2=23,23%5=3。所以23就是答案之一，而后边问题中我们求最小值。 这个问题之所以简单，是由于有被3除和被7除余数相同这个特殊性。 问题抽象去除问题数据的特殊性之后，问题可以是像这样： 三人一组余两人，五人一组余三人，七人一组余四人。问：这队士兵至少有多少人？ 就是说我们要找到一个最小的数，使其除以3余2，除以5余3，除以7余4 数据变量化后真正的问题改成：一个数除以x余a，除以y余b，除以z余c，找到符合这三个条件的最小的数。 三个条件按顺序分别称为条件1，条件2，条件3。 暴力方法定义变量n，在范围内从头到尾递增，循环内判断条件为n%3==2&amp;&amp;n%5==3&amp;&amp;n%7==4，符合条件就break 代码实现123456789101112//找到一个最小的数，使其除以x余a，除以y余b，除以z余cint x,y,z; //除数int a,b,c; //余数scanf("%d %d %d %d %d %d",&amp;x,&amp;y,&amp;z,&amp;a,&amp;b,&amp;c);for(int n=1;;n++) //在这里不设范围&#123; if(n%x==a&amp;&amp;n%y==b&amp;&amp;n%z==c) &#123; printf("%d",n); break; &#125;&#125; 合并方法题目中有三个条件，我们可以将前两个条件合并成条件A，再把条件A与第三个条件合并，最后得出结果。 过程条件1和条件2合并成条件A已知n除以3余2，可设n=3i+2(i是正整数)，使i从1变大，判断3i+2除以5是否余3。 我们发现当i=2时，3i+2=8除以5余数为3，即n=8时除以3余2，除以5余3。 然后前两个条件就被我们合并成了条件A：n=15i+8， 本质是：最小的符合前两个条件的数字8加上3和5的最小公倍数15的整数倍 用到的定理：若n除以a余b，n加上a的倍数再除以a余数仍然为b。我们加上的15i即为a的倍数 注意： 是最小公倍数，不要直接看做是两数乘积，因为只有在指出三个除数两两互质的情况下，两数乘积即为最小公倍数，在这里提醒一下，不要理解错误。 如果用的不是最小公倍数，我们下边n增加的单位就变大了，可能会求不到最小值，而题目要求是取得符合要求的最小值。 条件A和条件3合并成结果我们再使条件A和第三个条件合并，n=15i+8(i是正整数)，使i从1变大，判断15i+8除以7的余数是否为4。 我们发现当i=3时，15i+8=53除以7余4，53即为答案 拓展过程中条件合并了两次，让我想到定义一个函数。这个函数要调用两次 写一个比伪代码还伪的代码： 结果 合并(条件，条件) 代码实现最大公约数12345678910111213int Gcd(int a,int b) //Greatest Common divisior&#123; int c; //辗转相除法求最大公约数 Greatest Common Divisor /* 余数不为0，继续相除，直到余数为0 */ while(b!=0) &#123; c=a%b; a=b; b=c; &#125; return a;&#125; 最小公倍数12345int Lcm(int a,int b) //Least Common Multiple &#123; //最小公倍数等于乘积除以最大公约数 return a*b/Gcd(a,b);&#125; 求结果123456789101112131415161718//找到一个最小的数，使其除以x余a，除以y余b，除以z余cint x,y,z; //除数int a,b,c; //余数scanf("%d %d %d %d %d %d",&amp;x,&amp;y,&amp;z,&amp;a,&amp;b,&amp;c);//合并条件1和条件2int i=1;while((x*i+a)%y!=b) //循环跳条件为(x*i+a)%y==b i++;//得到条件Aint d=x*i+a; //得到条件A//合并条件A和条件3int j=1;while((Lcm(x,y)*j+d)%z!=c) //while((Lcm(x,y)*j+d)%z !=c)求得的不一定是最小值 j++;//得到结果int result=Lcm(x,y)*j+d; //int result=x*y*j+d求得的不一定是最小值printf("%d",result); 中国剩余定理方法除数分别是3、5、7，用70(5乘7乘2)乘以用3除的余数，用21(3乘7)乘以用5除的余数，用15(3乘5)乘以用7除的余数，然后把这三个乘积相加。加得的结果如果比105(3乘5乘7)大，就除以105，所得的余数就是满足题目要求的最小正整数解。 过程除数两两结合得到公倍数对所得公倍数的目标(要求)：除以另外一个除数余1 这一步骤中，不用关注三个条件要求余几，条件中的余几会在下一步体现 条件一：用3除 这里是用3除，求另外两个除数的公倍数，并要求用3除余1,5*7=35除以3余2,5乘7乘2=70除以3余1，所以是70 条件二：用5除 3*7=21除以5余1，所以是21 条件三：用7除 3*5=15除以7余1，所以是15 公倍数乘以余数相加70*2+21*3+15*4=263 解读加法：设上式为q+p+r=n。只判断加法会不会影响满足条件1(用3除余2)即可推导出是否满足另外两个条件。 若n除以a余b，n加上a的倍数再除以a余数仍然为b，这里n为140，a为3，b为2，加上的p、r之和是3的倍数，所以余数仍为2，仍满足条件1。（发现百度百科这条定理写错了，嘻。我这数学水平也就能折腾折腾小学数学了吧） 【百度】您于2018-08-31提交的百科词条“秦王暗点兵”版本已通过，查看词条内容：（ http://dwz.cn/s4JsvyGW ）。感谢您参与编写百度百科，亿万网友因您的贡献受益。 9月1日跑步时收到这条短信，这比兴奋剂还兴奋剂，就想来段加速跑。wuhu~ 同理可得，通过加法之后我们得到了一个同时满足三个条件的数字 检验是否最小用上边得到的数字不断减去三个除数的最小公倍数直至数字小于最小公倍数(其实就是得到的数字除以公倍数取余了)，得到最终答案！ 解读：其实就是上边加粗定理的变式，若n除以a余b，n减去a的倍数再除以a余数仍然为b，只是可能说成余数是几不太合理，但要懂那个意思。 拓展个人感觉过程中的前两步完全可以合成一步，在代码实现中很容易就可以看出来，拆开反而更难理解…(差评) 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445//找到一个最小的数，使其除以x余a，除以y余b，除以z余cint x,y,z; //除数int a,b,c; //余数scanf("%d %d %d %d %d %d",&amp;x,&amp;y,&amp;z,&amp;a,&amp;b,&amp;c);//求第二、三个除数的公倍数int i=1;while((Lcm(y,z)*i%x)!=1) i++;//求第一、三个除数的公倍数int j=1;while(((Lcm(x,z)*j%y))!=1) j++;//求第一、二个除数的公倍数int k=1;while((Lcm(x,y)*k%z)!=1) k++;//公倍数乘以对应余数后求和int sum=0;sum+=Lcm(x,z)*j*b;sum+=Lcm(y,z)*i*a;sum+=Lcm(x,y)*k*c;//确认最小值printf("%d\n",sum%Lcm(Lcm(x,y),z));/*拓展对应的代码~~~~~~~~可以替代5到23行int sum = 0;//求第二、三个除数的公倍数同时乘以相应余数求和int i = 1;while ((Lcm(y, z)*i%x) != a) i++;sum += Lcm(y, z)*i;//求第一、三个除数的公倍数同时乘以相应余数求和int j = 1;while (((Lcm(x, z)*j%y)) != b) j++;sum += Lcm(x, z)*j;//求第一、二个除数的公倍数同时乘以相应余数求和int k = 1;while ((Lcm(x, y)*k%z) != c) k++;sum += Lcm(x, y)*k;//确认最小printf("%d\n", sum % Lcm(Lcm(x, y), z));*/ 瑕不掩瑜如果输入 3 3 3 1 1 1(可能这有点刁钻啊) 合并法中，会发现结果是7，但按照我们给出的题目结果应该是1啊！？ 7的来源是： 第一次合并为3*1+1=4，除以3余1，符合条件2，所以得到4； 第二次合并为4*1+1=7，除以3余1，符合条件3，结果为7。 所以答案是7的原因是因为我们默认i是从1开始增长，它代表我们要求的数一定大于三个除数，算经中的问题其实也隐含了这个条件结果要大于三个除数。 如果i从0开始增长，最终答案会是1。 在中国剩余定理中，我们会发现无法跳出循环while ((Lcm(y, z)*i%x) != a) i++;， 原因可能就是定理不适用这种情况吧。我没有深入了解中国剩余定理及其使用。因为我是从韩信点兵的题目了解到这些知识的。搜了一下中国剩余定理，发现它是数论里的一个知识，似乎使用也有一些条件，这里不再过多探索。 emm还是去看了下，中国剩余定理用的时候已经假设了三个除数两两互质。所以输入3 3 3 1 1 1这种就没必要了。但如果能弄懂3 3 3 1 1 1，还是可以让我们对定理有个更好的理解。 (放过我吧，每次写完东西都会发现bug，让我不爽..再多的抽象，也得加点前提条件呐。哪有那么多适用于所有情况的东西，真理也是少之又少。但简单的东西又没那么值得写，最多算个记录罢了) 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io/2018/09/01/物不知其数/#more]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>算法</tag>
        <tag>中国剩余定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常量指针与指针常量]]></title>
    <url>%2F2018%2F08%2F26%2F%E5%B8%B8%E9%87%8F%E6%8C%87%E9%92%88%E4%B8%8E%E6%8C%87%E9%92%88%E5%B8%B8%E9%87%8F%2F</url>
    <content type="text"><![CDATA[常量指针和指针常量是两个经常出现的概念，今天做个小小总结。 文章各部分的内容都是很容易理解的，并且附加代码说明，一切的前提是理解文章2.1和2.2部分，所以搞好基础再往后看呐。干货在嫌长的直接跳到结论去。 废话最近在看VC++，看到书里有提这两个概念，学C的时候也有这两个概念，学C++的时候也有顶层const和底层const（这个我懂是懂，但从理解层次上不是那么懂为什么叫做顶层和底层）。所以就是这个知识点很常见啦，但似乎很多人很迷惑，或者说理解着不舒服。于是我的“神逻辑”就来了。 我对它们的理解主要是翻译问题常量指针、指针常量这种名词是英文翻译过来的，所以中文会有点拗口。常量的、指针的，我们生活中是没有这样的词的。 英文里是这样的两个东西:pointer to const, const pointer。 pointer是指针的意思；const是constant的缩写，作名词是常量的意思，作形容词是不变的的意思。 这两个词：pointer to const, const pointer。中文有两种翻译方法： 翻译方法 pointer to const const pointer 第一种 指向常量的指针（常量指针） 不变的指针（指针常量） 第二种 指向常量的指针（指针常量） 不变的指针（常量指针） 说来说去都是翻译的问题。英文里很容易能看懂的意思，换成中文就有两种换法。 我赞成第一种翻译方法，因为它更符合中文习惯。 第二种方法确实不该有指针常量这个说法，太不合中文习惯。 所以要讨论中文版的话，如果出现指针常量，也应该是第一种方法。 下面是一篇讲常量指针和指针常量的文章： https://www.thegeekstuff.com/2012/06/c-constant-pointers换成英文就不用玩文字游戏了 所以呢，本质上应该用英语去讲。但本篇是讲中文版的一种方法。（去百度也会发现有两种说法，原因是翻译不同）。 基础本文用第一种说法，常指是pointer to const，指常是 const pointer。 常指、指常就是两个词而已，都是四个字。把前边的两个字当做形容词（是用来修饰后边的名词的），后边的名词才是重点。 指针就是地址嘛，常量就是不可以修改的量（初始化不算做赋值，不算做修改）。 注意区分指针本身（的内容）和指向的内存的内容。 修改指针即改变指针本身的内容，修改内存或者说修改内存内容就是修改指针指向的内存中的内容。这样讲的很清楚了吧…….. 常量指针常量指针中的常量呢，指的是这个指针的作用是常量性的、无权修改的，即不可以通过该指针修改内存中的内容，并不代表指向的内存不修改，注意前边有通过二字。 这个词也有指向常量的指针的叫法，我认为这个中文叫法是不准确的甚至是错误的。如果说常量指针是指向常量的指针，我认为这句话最直接的意思是说指针指向的内存是常量，这个意思是错误的，会误导他人，所以我不提倡这样叫它。证明参见文章3.3部分 在讨论问题的时候，互相知道对方说的是什么东西非常重要~，比如c++里的默认构造，没有构造函数这样的句子，不同人的理解方式不同，这些概念理解也是讨论进行的一个前提。 指针常量这里的指针呢，指的是这个常量是一个地址。 如何根据定义判断类型1234//代码1const char * p; //常量指针char const * p; //常量指针 跟上一句等效char * const p; //指针常量 根据const和*的相对位置const 在*左边=》常量指针；反之，指针常量。 根据谁离变量名近const近=》指针常量；反之，常量指针。（const就是不变嘛，就是指针，所以理解是很重要的，也就是*2.1） 代码验证常量指针123456789//代码2//char ch[] = "HelloWorld!";const char* pStr1=ch; //定义常量指针//1.常量指针本身的值可以修改pStr1 = nullptr; //correct//2.不能通过常量指针修改它所指向的内存中的内容（注意通过二字，不要误会常量指针）*pStr1 = 'h'; //error*(pStr1 + 1) = 'E'; //errorpStr1[2] = 'L'; //error 指针常量123456//代码3//char ch[] = "HelloWorld!";//指针常量（顶层const）char * const pStr2 = ch; //定义并初始化//1.是常量，不可以被赋值（不把初始化叫做赋值）pStr2 = nullptr; //error 常量指针容易被误解的地方1234567//代码4int n = 0; //定义变量nconst int * p1 = &amp;n; //常量指针p1int * const p2 = &amp;n; //指针常量p2*p1 = 3; //error 因为不能通过常量指针修改内存中的内容，划重点！：但这不是说指向内存中的内容不可修改n = 3; //correct 这是对的，因为n是变量啊*p2 = 3; //correct 指针常量部分的代码就有体现，不多说 123456//代码5const int n = 0; //定义变量nconst int * p1 = &amp;n; //常量指针p1int * const p2 = &amp;n; //error 错误的 原因见下-指针间的赋值*p1 = 3; //error 原因是常指不可修改内存n = 3; //error 原因是n是变量 代码4和代码5中的常量指针p1都不能改变内存中内容，但内存中内容是否可修改是不一定的。（代码4的第5第6行要好好看） 原因是：常量指针不可以修改内存是因为不可以通过常量指针修改内存所致（你不通过常量指针的话，变量是否可以修改就不一定了） 结论常量指针在这里指pointer to const。指针作用是常量性的，不可以通过它修改指向内存（容易被误会成内存一定不可修改）。 指针常量英文里指const pointer。指针是一个常量，指针本身不可以被修改。 作者：@臭咸鱼 本文为作者原创，转载请注明出处：https://chouxianyu.github.io/2018/08/26/常量指针与指针常量/#more 欢迎转发和评论]]></content>
      <tags>
        <tag>C/C++</tag>
        <tag>指针</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAI丢包掉帧处理]]></title>
    <url>%2F2018%2F08%2F22%2FJAI%E4%B8%A2%E5%8C%85%E6%8E%89%E5%B8%A7%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[问题时间戳停止变化/图像停止更新 描述本小白刚刚接触JAI，有很多不懂的地方。这次遇到问题是请教了YZ大哥（不知道年龄，暂时这么称呼），很感谢YZ大哥的耐心指导。因为我不仅不知道怎么调，连在哪里调也不知道╭(╯^╰)╮。以下是此次问题解决步骤，是YZ大哥跟我说怎么做，然后我照做，过程中又遇到问题，下边也给出了碰到的问题以及相应的解决方法。（8.21更） 刚刚又看了下JAI SDK Getting Started Guide，发现YZ讲的方法就是文档里那部分我觉得可以先跳过的内容，出现问题应该也是因为我没有按照文档进行配置…..可能我写的这个会有错误、遗漏、表述模糊，具体操作还可参加文档说明（8.22更） 4.4=》设置接收缓冲区 4.5=》设置中断调整 4.6=》打开巨型帧 4.7=》计算和设置包延迟 出现问题原因图像传输时丢包（掉帧） 解决方法使用 JAI Control Tool 采集图像 防止丢包如何使用JAI Control Tool 采集图像 如何查看是否丢包？ 除了通过搜索，也可以找到GigE Image Acquisition-Total missing packets其实观察刚开始采集图像时图片是否有撕裂的情况（出现水平黑线） 如果丢包 设置相机据包为8000左右（我是8196）如何设置相机数据包 设置相机数据包后用JAI Control Tool采图时黑屏，查看黑屏是是否有帧率如何查看帧率 有帧率则调整网卡巨型帧等如何找到相机连接的网卡网络和共享中心-以太网（就是相机那条网线）-属性-由勾选EBUS设置为不勾选EBUS 同时可以看到连接时使用的网卡 找到网卡右击-属性-高级-巨型帧（由关闭设为9KB MTU）接收缓冲区设为最大（我的最大只有512，只能这样了） 提醒：文档中指出当巨型帧打开的时候，相机数据包大小就可以大于1500bytes，但相机数据包必须小于巨型帧大小。 提醒：文档中指出典型的接收缓冲区最大值为2048，标准默认值为256，请结合自己的实际情况 是不是我的网卡太菜了，众筹给我买个好的可以吗？？？ 如果仍丢包则根据文档设置延时直至成功如何设置延时？参照文档设置延时（主要是帧率）我的Max Fps是2.00 ，Band Width是90% 修改最大帧率，调整带宽，点击calculate，点击ok。（文档指出当数据包大小或者像素格式改变时，数据包延迟都需要重新计算） 最后查看是否丢包 如有丢包可以再次调整数据包大小和延迟。另外有一点是，图像的传输是和你整个电脑的运行都有关系的，而不只是网卡和相机设置。]]></content>
      <tags>
        <tag>JAI</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FirstWriting]]></title>
    <url>%2F2018%2F08%2F16%2FFirstWriting%2F</url>
    <content type="text"><![CDATA[在很久很久以前，你拥有我我拥有你 《外面的世界》在很久很久以前我就有搞一个类似博客的东西的想法，不过一直都没有尝试着搞……某天（10号左右吧）刷知乎看到github和hexo可以搭建博客，于是我就来了hhh不过搞的时候也遇到了好多bug，跳了好多坑…博客一是分享，二是记录，三四五还没想起来。 这是第一次写博客，学习内容是一点点markdown语法，文末有这次学习的链接，之后应该会再好好学学markdown语法。 字体设置斜体1：文字两侧各一个星号_斜体2：文字两侧各一个下划线_粗体：文字两侧各两个星号粗斜体：文字两侧各三个星号删除线：文字两侧各两个波浪号 那就有个疑问了，如果星号、波浪号、下划线出现在文字中怎么处理…或者说这种情况很少吧，并且对内容没什么影响 标题怎么用二级标题三级标题四级标题五级标题六级标题超链接行内形式：我的博客参考形式：我的博客,github 自动链接：我的博客地址https://chouxianyu.github.io/ 列表无序列表 无序列表项1 无序列表项2 无序列表项3 有序列表1.有序列表项12.有序列表项23.有序列表项3 插入图片 表格 表头1 表头2 表头3 表头4 默认左对齐 显式左对齐 居中对齐 右对齐 默认左对齐 显式左对齐 居中对齐 右对齐 默认左对齐 显式左对齐 居中对齐 右对齐 默认左对齐 显式左对齐 居中对齐 右对齐 转载自https://www.jianshu.com/p/56d99a3049a5]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F10%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
